# generated by datamodel-codegen:
#   filename:  openapi.yaml
#   timestamp: 2021-12-31T02:58:50+00:00

from __future__ import annotations

from datetime import datetime
from enum import Enum
from typing import Annotated, Any, List, Optional

from pydantic import BaseModel, Extra, Field


class ServiceQuotaExceededException(BaseModel):
    __root__: Any


class ThrottlingException(ServiceQuotaExceededException):
    pass


class AccessDeniedException(ServiceQuotaExceededException):
    pass


class ValidationException(ServiceQuotaExceededException):
    pass


class ConflictException(ServiceQuotaExceededException):
    pass


class InternalServerException(ServiceQuotaExceededException):
    pass


class EmptyChatChannel(BaseModel):
    """
    Used to remove the chat channel from an incident record or response plan.
    """

    pass


class SsmContactsArn(BaseModel):
    __root__: Annotated[
        str,
        Field(
            max_length=2048,
            min_length=0,
            regex='^arn:[-\\w+=/,.@]+:ssm-contacts:[-\\w+=/,.@]*:[0-9]+:([\\w+=/,.@:-]+)*$',
        ),
    ]


class DedupeString(BaseModel):
    __root__: Annotated[str, Field(max_length=1000, min_length=0)]


class Impact(BaseModel):
    __root__: Annotated[int, Field(ge=1.0, le=5.0)]


class IncidentSummary(BaseModel):
    __root__: Annotated[str, Field(max_length=4000, min_length=0)]


class IncidentTitle(BaseModel):
    __root__: Annotated[str, Field(max_length=200, min_length=0)]


class TagValue(BaseModel):
    __root__: Annotated[
        str, Field(max_length=256, min_length=0, regex='^[A-Za-z0-9 _=@:.+-/]*$')
    ]


class ResourceNotFoundException(ServiceQuotaExceededException):
    pass


class DeleteIncidentRecordOutput(EmptyChatChannel):
    pass


class DeleteReplicationSetOutput(EmptyChatChannel):
    pass


class DeleteResourcePolicyOutput(EmptyChatChannel):
    pass


class DeleteResponsePlanOutput(EmptyChatChannel):
    pass


class DeleteTimelineEventOutput(EmptyChatChannel):
    pass


class RawData(IncidentSummary):
    pass


class IncidentSource(BaseModel):
    __root__: Annotated[str, Field(max_length=50, min_length=0)]


class Timestamp(BaseModel):
    __root__: datetime


class Arn(BaseModel):
    __root__: Annotated[
        str,
        Field(
            max_length=1000,
            min_length=0,
            regex='^arn:aws(-cn|-us-gov)?:[a-z0-9-]*:[a-z0-9-]*:([0-9]{12})?:.+$',
        ),
    ]


class TagResourceResponse(EmptyChatChannel):
    pass


class UntagResourceResponse(EmptyChatChannel):
    pass


class TagKey(BaseModel):
    __root__: Annotated[
        str,
        Field(max_length=128, min_length=1, regex='^(?!aws:)[A-Za-z0-9 _=@:.+-/]+$'),
    ]


class UpdateDeletionProtectionOutput(EmptyChatChannel):
    pass


class UpdateIncidentRecordOutput(EmptyChatChannel):
    pass


class NotificationTargetItem(BaseModel):
    """
    The SNS targets that are notified when updates are made to an incident.
    """

    snsTopicArn: Optional[Arn] = None


class UpdateRelatedItemsOutput(EmptyChatChannel):
    pass


class UpdateReplicationSetOutput(EmptyChatChannel):
    pass


class UpdateResponsePlanOutput(EmptyChatChannel):
    pass


class UpdateTimelineEventOutput(EmptyChatChannel):
    pass


class RegionName(BaseModel):
    __root__: Annotated[str, Field(max_length=20, min_length=0)]


class SseKmsKey(BaseModel):
    __root__: Annotated[str, Field(max_length=2048, min_length=0)]


class AddRegionAction(BaseModel):
    """
    Defines the Region and KMS key to add to the replication set.
    """

    regionName: RegionName
    sseKmsKeyId: Optional[SseKmsKey] = None


class AutomationExecution(BaseModel):
    """
    The Systems Manager automation document process to start as the runbook at the beginning of the incident.
    """

    ssmExecutionArn: Optional[Arn] = None


class AutomationExecutionSet(BaseModel):
    __root__: Annotated[List[AutomationExecution], Field(max_items=100, min_items=0)]


class Boolean(BaseModel):
    __root__: bool


class SnsArn(DedupeString):
    pass


class ClientToken(BaseModel):
    __root__: Annotated[str, Field(max_length=128, min_length=0)]


class RegionMapInput(BaseModel):
    pass

    class Config:
        extra = Extra.allow


class CreateReplicationSetInput(BaseModel):
    clientToken: Optional[ClientToken] = None
    regions: RegionMapInput


class ResponsePlanDisplayName(IncidentTitle):
    pass


class EngagementSet(BaseModel):
    __root__: Annotated[List[SsmContactsArn], Field(max_items=5, min_items=0)]


class ResponsePlanName(BaseModel):
    __root__: Annotated[
        str, Field(max_length=200, min_length=1, regex='^[a-zA-Z0-9-_]*$')
    ]


class TagMap(BaseModel):
    pass

    class Config:
        extra = Extra.allow


class EventData(BaseModel):
    __root__: Annotated[str, Field(max_length=6000, min_length=0)]


class TimelineEventType(BaseModel):
    __root__: Annotated[str, Field(max_length=100, min_length=0)]


class CreateTimelineEventInput(BaseModel):
    clientToken: Optional[ClientToken] = None
    eventData: EventData
    eventTime: Timestamp
    eventType: TimelineEventType
    incidentRecordArn: Arn


class UUID(IncidentSource):
    pass


class DeleteIncidentRecordInput(BaseModel):
    arn: Arn


class DeleteRegionAction(BaseModel):
    """
    Defines the information about the Region you're deleting from your replication set.
    """

    regionName: RegionName


class DeleteReplicationSetInput(BaseModel):
    pass


class PolicyId(BaseModel):
    __root__: Annotated[str, Field(max_length=256, min_length=0)]


class DeleteResourcePolicyInput(BaseModel):
    policyId: PolicyId
    resourceArn: Arn


class DeleteResponsePlanInput(BaseModel):
    arn: Arn


class DeleteTimelineEventInput(BaseModel):
    eventId: UUID
    incidentRecordArn: Arn


class EventSummary(BaseModel):
    """
    Details about a timeline event during an incident.
    """

    eventId: UUID
    eventTime: Timestamp
    eventType: TimelineEventType
    eventUpdatedTime: Timestamp
    incidentRecordArn: Arn


class EventSummaryList(BaseModel):
    __root__: Annotated[List[EventSummary], Field(max_items=100, min_items=0)]


class FilterKeyString(IncidentSource):
    pass


class GetIncidentRecordInput(BaseModel):
    pass


class GetReplicationSetInput(BaseModel):
    pass


class MaxResults(BaseModel):
    __root__: Annotated[int, Field(ge=1.0, le=100.0)]


class NextToken(DedupeString):
    pass


class GetResourcePoliciesInput(BaseModel):
    maxResults: Optional[MaxResults] = None
    nextToken: Optional[NextToken] = None


class GetResponsePlanInput(BaseModel):
    pass


class GetTimelineEventInput(BaseModel):
    pass


class TimelineEvent(BaseModel):
    """
    A significant event that happened during the incident.
    """

    eventData: EventData
    eventId: UUID
    eventTime: Timestamp
    eventType: TimelineEventType
    eventUpdatedTime: Timestamp
    incidentRecordArn: Arn


class IncidentRecordSource(BaseModel):
    """
    Details about how the incident record was created and when.
    """

    createdBy: Arn
    invokedBy: Optional[Arn] = None
    resourceArn: Optional[Arn] = None
    source: IncidentSource


class IncidentRecordStatus(Enum):
    OPEN = 'OPEN'
    RESOLVED = 'RESOLVED'


class IncidentRecordSummary(BaseModel):
    """
    Details describing an incident record.
    """

    arn: Arn
    creationTime: Timestamp
    impact: Impact
    incidentRecordSource: IncidentRecordSource
    resolvedTime: Optional[Timestamp] = None
    status: IncidentRecordStatus
    title: IncidentTitle


class IncidentRecordSummaryList(BaseModel):
    __root__: Annotated[List[IncidentRecordSummary], Field(max_items=100, min_items=0)]


class Integer(BaseModel):
    __root__: int


class ItemType(Enum):
    ANALYSIS = 'ANALYSIS'
    INCIDENT = 'INCIDENT'
    METRIC = 'METRIC'
    PARENT = 'PARENT'
    ATTACHMENT = 'ATTACHMENT'
    OTHER = 'OTHER'


class MetricDefinition(IncidentSummary):
    pass


class Url(DedupeString):
    pass


class ListRelatedItemsInput(BaseModel):
    incidentRecordArn: Arn
    maxResults: Optional[MaxResults] = None
    nextToken: Optional[NextToken] = None


class ListReplicationSetsInput(BaseModel):
    maxResults: Optional[MaxResults] = None
    nextToken: Optional[NextToken] = None


class ReplicationSetArnList(BaseModel):
    __root__: List[Arn]


class ListResponsePlansInput(BaseModel):
    maxResults: Optional[MaxResults] = None
    nextToken: Optional[NextToken] = None


class String(BaseModel):
    __root__: str


class ListTagsForResourceRequest(BaseModel):
    pass


class TimelineEventSort(Enum):
    EVENT_TIME = 'EVENT_TIME'


class SortOrder(Enum):
    ASCENDING = 'ASCENDING'
    DESCENDING = 'DESCENDING'


class Policy(IncidentSummary):
    pass


class PutResourcePolicyInput(BaseModel):
    policy: Policy
    resourceArn: Arn


class RegionStatus(Enum):
    ACTIVE = 'ACTIVE'
    CREATING = 'CREATING'
    DELETING = 'DELETING'
    FAILED = 'FAILED'


class RegionInfo(BaseModel):
    """
    Information about a Region in your replication set.
    """

    sseKmsKeyId: Optional[SseKmsKey] = None
    status: RegionStatus
    statusMessage: Optional[String] = None
    statusUpdateDateTime: Timestamp


class RegionInfoMap(BaseModel):
    pass

    class Config:
        extra = Extra.allow


class RelatedItemTitleString(IncidentTitle):
    pass


class ReplicationSetStatus(Enum):
    ACTIVE = 'ACTIVE'
    CREATING = 'CREATING'
    UPDATING = 'UPDATING'
    DELETING = 'DELETING'
    FAILED = 'FAILED'


class ResourcePolicy(BaseModel):
    """
    The resource policy that allows Incident Manager to perform actions on resources on your behalf.
    """

    policyDocument: Policy
    policyId: PolicyId
    ramResourceShareRegion: String


class ResponsePlanSummary(BaseModel):
    """
    Details of the response plan that are used when creating an incident.
    """

    arn: Arn
    displayName: Optional[ResponsePlanDisplayName] = None
    name: ResponsePlanName


class RoleArn(BaseModel):
    __root__: Annotated[
        str,
        Field(
            max_length=1000,
            min_length=0,
            regex='^arn:aws(-cn|-us-gov)?:iam::([0-9]{12})?:role/.+$',
        ),
    ]


class SsmAutomationDocumentNameString(BaseModel):
    __root__: Annotated[str, Field(regex='^[a-zA-Z0-9_\\-.:/]{3,128}$')]


class SsmAutomationDocumentVersionString(ClientToken):
    pass


class SsmParameters(BaseModel):
    pass

    class Config:
        extra = Extra.allow


class SsmTargetAccount(Enum):
    RESPONSE_PLAN_OWNER_ACCOUNT = 'RESPONSE_PLAN_OWNER_ACCOUNT'
    IMPACTED_ACCOUNT = 'IMPACTED_ACCOUNT'


class SsmParameterValuesMemberString(BaseModel):
    __root__: Annotated[str, Field(max_length=512, min_length=0)]


class SsmParameterValues(BaseModel):
    __root__: Annotated[
        List[SsmParameterValuesMemberString], Field(max_items=100, min_items=0)
    ]


class SsmParametersKeyString(BaseModel):
    __root__: Annotated[str, Field(max_length=50, min_length=1)]


class TriggerDetails(BaseModel):
    """
    Details about what caused the incident to be created in Incident Manager.
    """

    rawData: Optional[RawData] = None
    source: IncidentSource
    timestamp: Timestamp
    triggerArn: Optional[Arn] = None


class StringListMemberString(DedupeString):
    pass


class TagKeyList(BaseModel):
    __root__: Annotated[List[TagKey], Field(max_items=50, min_items=1)]


class TagResourceRequest(BaseModel):
    tags: TagMap


class UntagResourceRequest(BaseModel):
    pass


class UpdateDeletionProtectionInput(BaseModel):
    arn: Arn
    clientToken: Optional[ClientToken] = None
    deletionProtected: Boolean


class UpdateTimelineEventInput(BaseModel):
    clientToken: Optional[ClientToken] = None
    eventData: Optional[EventData] = None
    eventId: UUID
    eventTime: Optional[Timestamp] = None
    eventType: Optional[TimelineEventType] = None
    incidentRecordArn: Arn


class CreateReplicationSetOutput(BaseModel):
    arn: Arn


class RegionMapInputValue(BaseModel):
    """
    The mapping between a Region and the key that's used to encrypt the data.
    """

    sseKmsKeyId: Optional[SseKmsKey] = None


class CreateResponsePlanOutput(CreateReplicationSetOutput):
    pass


class ChatbotSnsConfigurationSet(BaseModel):
    __root__: Annotated[List[SnsArn], Field(max_items=5, min_items=1)]


class NotificationTargetSet(BaseModel):
    __root__: Annotated[List[NotificationTargetItem], Field(max_items=10, min_items=0)]


class CreateTimelineEventOutput(BaseModel):
    eventId: UUID
    incidentRecordArn: Arn


class GetTimelineEventOutput(BaseModel):
    event: TimelineEvent


class ListIncidentRecordsOutput(BaseModel):
    incidentRecordSummaries: IncidentRecordSummaryList
    nextToken: Optional[NextToken] = None


class ListReplicationSetsOutput(BaseModel):
    nextToken: Optional[NextToken] = None
    replicationSetArns: ReplicationSetArnList


class ListTagsForResourceResponse(BaseModel):
    tags: TagMap


class ListTimelineEventsOutput(BaseModel):
    eventSummaries: EventSummaryList
    nextToken: Optional[NextToken] = None


class PutResourcePolicyOutput(BaseModel):
    policyId: PolicyId


class StartIncidentOutput(BaseModel):
    incidentRecordArn: Arn


class UpdateReplicationSetAction(BaseModel):
    """
    Details used when updating the replication set.
    """

    addRegionAction: Optional[AddRegionAction] = None
    deleteRegionAction: Optional[DeleteRegionAction] = None


class SsmAutomation(BaseModel):
    """
    Details about the Systems Manager automation document that will be used as a runbook during an incident.
    """

    documentName: SsmAutomationDocumentNameString
    documentVersion: Optional[SsmAutomationDocumentVersionString] = None
    parameters: Optional[SsmParameters] = None
    roleArn: RoleArn
    targetAccount: Optional[SsmTargetAccount] = None


class IntegerList(BaseModel):
    __root__: Annotated[List[Integer], Field(max_items=100, min_items=0)]


class StringList(BaseModel):
    __root__: Annotated[List[StringListMemberString], Field(max_items=100, min_items=0)]


class AttributeValueList(BaseModel):
    """
    Use the AttributeValueList to filter by string or integer values.
    """

    integerValues: Optional[IntegerList] = None
    stringValues: Optional[StringList] = None


class ChatChannel(BaseModel):
    """
    The AWS Chatbot chat channel used for collaboration during an incident.
    """

    chatbotSns: Optional[ChatbotSnsConfigurationSet] = None
    empty: Optional[EmptyChatChannel] = None


class Condition(BaseModel):
    """
    A conditional statement with which to compare a value, after a timestamp, before a timestamp, or equal to a string or integer. If multiple conditions are specified, the conditionals become an <code>AND</code>ed statement. If multiple values are specified for a conditional, the values are <code>OR</code>d.
    """

    after: Optional[Timestamp] = None
    before: Optional[Timestamp] = None
    equals: Optional[AttributeValueList] = None


class IncidentTemplate(BaseModel):
    """
    Basic details used in creating a response plan. The response plan is then used to create an incident record.
    """

    dedupeString: Optional[DedupeString] = None
    impact: Impact
    notificationTargets: Optional[NotificationTargetSet] = None
    summary: Optional[IncidentSummary] = None
    title: IncidentTitle


class IncidentRecord(BaseModel):
    """
    The record of the incident that's created when an incident occurs.
    """

    arn: Arn
    automationExecutions: Optional[AutomationExecutionSet] = None
    chatChannel: Optional[ChatChannel] = None
    creationTime: Timestamp
    dedupeString: DedupeString
    impact: Impact
    incidentRecordSource: IncidentRecordSource
    lastModifiedBy: Arn
    lastModifiedTime: Timestamp
    notificationTargets: Optional[NotificationTargetSet] = None
    resolvedTime: Optional[Timestamp] = None
    status: IncidentRecordStatus
    summary: Optional[IncidentSummary] = None
    title: IncidentTitle


class ReplicationSet(BaseModel):
    """
    The set of Regions that your Incident Manager data will be replicated to and the KMS key used to encrypt the data.
    """

    arn: Optional[Arn] = None
    createdBy: Arn
    createdTime: Timestamp
    deletionProtected: Boolean
    lastModifiedBy: Arn
    lastModifiedTime: Timestamp
    regionMap: RegionInfoMap
    status: ReplicationSetStatus


class ResourcePolicyList(BaseModel):
    __root__: Annotated[List[ResourcePolicy], Field(max_items=100, min_items=0)]


class ItemValue(BaseModel):
    """
    Describes a related item.
    """

    arn: Optional[Arn] = None
    metricDefinition: Optional[MetricDefinition] = None
    url: Optional[Url] = None


class ResponsePlanSummaryList(BaseModel):
    __root__: Annotated[List[ResponsePlanSummary], Field(max_items=100, min_items=0)]


class UpdateIncidentRecordInput(BaseModel):
    arn: Arn
    chatChannel: Optional[ChatChannel] = None
    clientToken: Optional[ClientToken] = None
    impact: Optional[Impact] = None
    notificationTargets: Optional[NotificationTargetSet] = None
    status: Optional[IncidentRecordStatus] = None
    summary: Optional[IncidentSummary] = None
    title: Optional[IncidentTitle] = None


class UpdateReplicationSetInputActionsList(BaseModel):
    __root__: Annotated[
        List[UpdateReplicationSetAction], Field(max_items=1, min_items=1)
    ]


class UpdateReplicationSetInput(BaseModel):
    actions: UpdateReplicationSetInputActionsList
    arn: Arn
    clientToken: Optional[ClientToken] = None


class Action(BaseModel):
    """
    The action that starts at the beginning of an incident. The response plan defines the action.
    """

    ssmAutomation: Optional[SsmAutomation] = None


class GetIncidentRecordOutput(BaseModel):
    incidentRecord: IncidentRecord


class GetReplicationSetOutput(BaseModel):
    replicationSet: ReplicationSet


class GetResourcePoliciesOutput(BaseModel):
    nextToken: Optional[NextToken] = None
    resourcePolicies: ResourcePolicyList


class Filter(BaseModel):
    """
    Filter the selection by using a condition.
    """

    condition: Condition
    key: FilterKeyString


class ListResponsePlansOutput(BaseModel):
    nextToken: Optional[NextToken] = None
    responsePlanSummaries: ResponsePlanSummaryList


class ItemIdentifier(BaseModel):
    """
    Details and type of a related item.
    """

    type: ItemType
    value: ItemValue


class ActionsList(BaseModel):
    __root__: Annotated[List[Action], Field(max_items=1, min_items=0)]


class CreateResponsePlanInput(BaseModel):
    actions: Optional[ActionsList] = None
    chatChannel: Optional[ChatChannel] = None
    clientToken: Optional[ClientToken] = None
    displayName: Optional[ResponsePlanDisplayName] = None
    engagements: Optional[EngagementSet] = None
    incidentTemplate: IncidentTemplate
    name: ResponsePlanName
    tags: Optional[TagMap] = None


class FilterList(BaseModel):
    __root__: Annotated[List[Filter], Field(max_items=5, min_items=0)]


class ListIncidentRecordsInput(BaseModel):
    filters: Optional[FilterList] = None
    maxResults: Optional[MaxResults] = None
    nextToken: Optional[NextToken] = None


class ListTimelineEventsInput(BaseModel):
    filters: Optional[FilterList] = None
    incidentRecordArn: Arn
    maxResults: Optional[MaxResults] = None
    nextToken: Optional[NextToken] = None
    sortBy: Optional[TimelineEventSort] = None
    sortOrder: Optional[SortOrder] = None


class UpdateResponsePlanInput(BaseModel):
    actions: Optional[ActionsList] = None
    arn: Arn
    chatChannel: Optional[ChatChannel] = None
    clientToken: Optional[ClientToken] = None
    displayName: Optional[ResponsePlanDisplayName] = None
    engagements: Optional[EngagementSet] = None
    incidentTemplateDedupeString: Optional[DedupeString] = None
    incidentTemplateImpact: Optional[Impact] = None
    incidentTemplateNotificationTargets: Optional[NotificationTargetSet] = None
    incidentTemplateSummary: Optional[IncidentSummary] = None
    incidentTemplateTitle: Optional[IncidentTitle] = None


class GetResponsePlanOutput(BaseModel):
    actions: Optional[ActionsList] = None
    arn: Arn
    chatChannel: Optional[ChatChannel] = None
    displayName: Optional[ResponsePlanDisplayName] = None
    engagements: Optional[EngagementSet] = None
    incidentTemplate: IncidentTemplate
    name: ResponsePlanName


class RelatedItem(BaseModel):
    """
    Resources that responders use to triage and mitigate the incident.
    """

    identifier: ItemIdentifier
    title: Optional[RelatedItemTitleString] = None


class RelatedItemList(BaseModel):
    __root__: Annotated[List[RelatedItem], Field(max_items=100, min_items=0)]


class RelatedItemsUpdate(BaseModel):
    """
    Details about the related item you're adding.
    """

    itemToAdd: Optional[RelatedItem] = None
    itemToRemove: Optional[ItemIdentifier] = None


class StartIncidentInput(BaseModel):
    clientToken: Optional[ClientToken] = None
    impact: Optional[Impact] = None
    relatedItems: Optional[RelatedItemList] = None
    responsePlanArn: Arn
    title: Optional[IncidentTitle] = None
    triggerDetails: Optional[TriggerDetails] = None


class UpdateRelatedItemsInput(BaseModel):
    clientToken: Optional[ClientToken] = None
    incidentRecordArn: Arn
    relatedItemsUpdate: RelatedItemsUpdate


class ListRelatedItemsOutput(BaseModel):
    nextToken: Optional[NextToken] = None
    relatedItems: RelatedItemList
