# generated by datamodel-codegen:
#   filename:  openapi.yaml
#   timestamp: 2021-12-31T02:59:02+00:00

from __future__ import annotations

from datetime import datetime
from typing import Annotated, Any, List, Optional

from pydantic import BaseModel, Field


class TagKeyType(BaseModel):
    __root__: Annotated[
        str,
        Field(max_length=128, min_length=1, regex='[\\p{L}\\p{Z}\\p{N}_.:/=+\\-@]+'),
    ]


class MalformedPolicyDocumentException(BaseModel):
    __root__: Any


class PackedPolicyTooLargeException(MalformedPolicyDocumentException):
    pass


class RegionDisabledException(MalformedPolicyDocumentException):
    pass


class ExpiredTokenException(MalformedPolicyDocumentException):
    pass


class IDPRejectedClaimException(MalformedPolicyDocumentException):
    pass


class InvalidIdentityTokenException(MalformedPolicyDocumentException):
    pass


class IDPCommunicationErrorException(MalformedPolicyDocumentException):
    pass


class InvalidAuthorizationMessageException(MalformedPolicyDocumentException):
    pass


class ArnType(BaseModel):
    __root__: Annotated[
        str,
        Field(
            max_length=2048,
            min_length=20,
            regex='[\\u0009\\u000A\\u000D\\u0020-\\u007E\\u0085\\u00A0-\\uD7FF\\uE000-\\uFFFD\\u10000-\\u10FFFF]+',
        ),
    ]


class RoleSessionNameType(BaseModel):
    __root__: Annotated[str, Field(max_length=64, min_length=2, regex='[\\w+=,.@-]*')]


class SessionPolicyDocumentType(BaseModel):
    __root__: Annotated[
        str,
        Field(
            max_length=2048,
            min_length=1,
            regex='[\\u0009\\u000A\\u000D\\u0020-\\u00FF]+',
        ),
    ]


class RoleDurationSecondsType(BaseModel):
    __root__: Annotated[int, Field(ge=900.0, le=43200.0)]


class TagKeyListType(BaseModel):
    __root__: Annotated[List[TagKeyType], Field(max_items=50)]


class ExternalIdType(BaseModel):
    __root__: Annotated[
        str, Field(max_length=1224, min_length=2, regex='[\\w+=,.@:\\/-]*')
    ]


class SerialNumberType(BaseModel):
    __root__: Annotated[
        str, Field(max_length=256, min_length=9, regex='[\\w+=/:,.@-]*')
    ]


class TokenCodeType(BaseModel):
    __root__: Annotated[str, Field(max_length=6, min_length=6, regex='[\\d]*')]


class SourceIdentityType(RoleSessionNameType):
    pass


class NonNegativeIntegerType(BaseModel):
    __root__: Annotated[int, Field(ge=0.0)]


class SAMLAssertionType(BaseModel):
    __root__: Annotated[str, Field(max_length=100000, min_length=4)]


class Subject(BaseModel):
    __root__: str


class SubjectType(Subject):
    pass


class Issuer(Subject):
    pass


class Audience(Subject):
    pass


class NameQualifier(Subject):
    pass


class ClientTokenType(BaseModel):
    __root__: Annotated[str, Field(max_length=20000, min_length=4)]


class UrlType(BaseModel):
    __root__: Annotated[str, Field(max_length=2048, min_length=4)]


class WebIdentitySubjectType(BaseModel):
    __root__: Annotated[str, Field(max_length=255, min_length=6)]


class AssumedRoleIdType(BaseModel):
    __root__: Annotated[str, Field(max_length=193, min_length=2, regex='[\\w+=,.@:-]*')]


class AccessKeyIdType(BaseModel):
    __root__: Annotated[str, Field(max_length=128, min_length=16, regex='[\\w]*')]


class AccessKeySecretType(Subject):
    pass


class TokenType(Subject):
    pass


class DateType(BaseModel):
    __root__: datetime


class EncodedMessageType(BaseModel):
    __root__: Annotated[str, Field(max_length=10240, min_length=1)]


class DecodeAuthorizationMessageRequest(BaseModel):
    EncodedMessage: EncodedMessageType


class DecodedMessageType(Subject):
    pass


class FederatedIdType(BaseModel):
    __root__: Annotated[
        str, Field(max_length=193, min_length=2, regex='[\\w+=,.@\\:-]*')
    ]


class FederatedUser(BaseModel):
    """
    Identifiers for the federated user that is associated with the credentials.
    """

    FederatedUserId: FederatedIdType
    Arn: ArnType


class GetAccessKeyInfoRequest(BaseModel):
    AccessKeyId: AccessKeyIdType


class AccountType(Subject):
    pass


class GetCallerIdentityRequest(BaseModel):
    pass


class UserIdType(Subject):
    pass


class UserNameType(BaseModel):
    __root__: Annotated[str, Field(max_length=32, min_length=2, regex='[\\w+=,.@-]*')]


class DurationSecondsType(BaseModel):
    __root__: Annotated[int, Field(ge=900.0, le=129600.0)]


class GetSessionTokenRequest(BaseModel):
    DurationSeconds: Optional[DurationSecondsType] = None
    SerialNumber: Optional[SerialNumberType] = None
    TokenCode: Optional[TokenCodeType] = None


class TagValueType(BaseModel):
    __root__: Annotated[
        str,
        Field(max_length=256, min_length=0, regex='[\\p{L}\\p{Z}\\p{N}_.:/=+\\-@]*'),
    ]


class PolicyDescriptorType(BaseModel):
    """
    A reference to the IAM managed policy that is passed as a session policy for a role session or a federated user session.
    """

    arn: Optional[ArnType] = None


class Tag(BaseModel):
    """
    You can pass custom key-value pair attributes when you assume a role or federate a user. These are called session tags. You can then use the session tags to control access to resources. For more information, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_session-tags.html">Tagging STS Sessions</a> in the <i>IAM User Guide</i>.
    """

    Key: TagKeyType
    Value: TagValueType


class DecodeAuthorizationMessageResponse(BaseModel):
    """
    A document that contains additional information about the authorization status of a request from an encoded message that is returned in response to an Amazon Web Services request.
    """

    DecodedMessage: Optional[DecodedMessageType] = None


class GetAccessKeyInfoResponse(BaseModel):
    Account: Optional[AccountType] = None


class GetCallerIdentityResponse(BaseModel):
    """
    Contains the response to a successful <a>GetCallerIdentity</a> request, including information about the entity making the request.
    """

    UserId: Optional[UserIdType] = None
    Account: Optional[AccountType] = None
    Arn: Optional[ArnType] = None


class PolicyDescriptorListType(BaseModel):
    __root__: List[PolicyDescriptorType]


class TagListType(BaseModel):
    __root__: Annotated[List[Tag], Field(max_items=50)]


class AssumeRoleRequest(BaseModel):
    RoleArn: ArnType
    RoleSessionName: RoleSessionNameType
    PolicyArns: Optional[PolicyDescriptorListType] = None
    Policy: Optional[SessionPolicyDocumentType] = None
    DurationSeconds: Optional[RoleDurationSecondsType] = None
    Tags: Optional[TagListType] = None
    TransitiveTagKeys: Optional[TagKeyListType] = None
    ExternalId: Optional[ExternalIdType] = None
    SerialNumber: Optional[SerialNumberType] = None
    TokenCode: Optional[TokenCodeType] = None
    SourceIdentity: Optional[SourceIdentityType] = None


class Credentials(BaseModel):
    """
    Amazon Web Services credentials for API authentication.
    """

    AccessKeyId: AccessKeyIdType
    SecretAccessKey: AccessKeySecretType
    SessionToken: TokenType
    Expiration: DateType


class AssumedRoleUser(BaseModel):
    """
    The identifiers for the temporary security credentials that the operation returns.
    """

    AssumedRoleId: AssumedRoleIdType
    Arn: ArnType


class AssumeRoleWithSAMLRequest(BaseModel):
    RoleArn: ArnType
    PrincipalArn: ArnType
    SAMLAssertion: SAMLAssertionType
    PolicyArns: Optional[PolicyDescriptorListType] = None
    Policy: Optional[SessionPolicyDocumentType] = None
    DurationSeconds: Optional[RoleDurationSecondsType] = None


class AssumeRoleWithWebIdentityRequest(BaseModel):
    RoleArn: ArnType
    RoleSessionName: RoleSessionNameType
    WebIdentityToken: ClientTokenType
    ProviderId: Optional[UrlType] = None
    PolicyArns: Optional[PolicyDescriptorListType] = None
    Policy: Optional[SessionPolicyDocumentType] = None
    DurationSeconds: Optional[RoleDurationSecondsType] = None


class GetFederationTokenRequest(BaseModel):
    Name: UserNameType
    Policy: Optional[SessionPolicyDocumentType] = None
    PolicyArns: Optional[PolicyDescriptorListType] = None
    DurationSeconds: Optional[DurationSecondsType] = None
    Tags: Optional[TagListType] = None


class AssumeRoleResponse(BaseModel):
    """
    Contains the response to a successful <a>AssumeRole</a> request, including temporary Amazon Web Services credentials that can be used to make Amazon Web Services requests.
    """

    Credentials: Optional[Credentials] = None
    AssumedRoleUser: Optional[AssumedRoleUser] = None
    PackedPolicySize: Optional[NonNegativeIntegerType] = None
    SourceIdentity: Optional[SourceIdentityType] = None


class AssumeRoleWithSAMLResponse(BaseModel):
    """
    Contains the response to a successful <a>AssumeRoleWithSAML</a> request, including temporary Amazon Web Services credentials that can be used to make Amazon Web Services requests.
    """

    Credentials: Optional[Credentials] = None
    AssumedRoleUser: Optional[AssumedRoleUser] = None
    PackedPolicySize: Optional[NonNegativeIntegerType] = None
    Subject: Optional[Subject] = None
    SubjectType: Optional[SubjectType] = None
    Issuer: Optional[Issuer] = None
    Audience: Optional[Audience] = None
    NameQualifier: Optional[NameQualifier] = None
    SourceIdentity: Optional[SourceIdentityType] = None


class AssumeRoleWithWebIdentityResponse(BaseModel):
    """
    Contains the response to a successful <a>AssumeRoleWithWebIdentity</a> request, including temporary Amazon Web Services credentials that can be used to make Amazon Web Services requests.
    """

    Credentials: Optional[Credentials] = None
    SubjectFromWebIdentityToken: Optional[WebIdentitySubjectType] = None
    AssumedRoleUser: Optional[AssumedRoleUser] = None
    PackedPolicySize: Optional[NonNegativeIntegerType] = None
    Provider: Optional[Issuer] = None
    Audience: Optional[Audience] = None
    SourceIdentity: Optional[SourceIdentityType] = None


class GetFederationTokenResponse(BaseModel):
    """
    Contains the response to a successful <a>GetFederationToken</a> request, including temporary Amazon Web Services credentials that can be used to make Amazon Web Services requests.
    """

    Credentials: Optional[Credentials] = None
    FederatedUser: Optional[FederatedUser] = None
    PackedPolicySize: Optional[NonNegativeIntegerType] = None


class GetSessionTokenResponse(BaseModel):
    """
    Contains the response to a successful <a>GetSessionToken</a> request, including temporary Amazon Web Services credentials that can be used to make Amazon Web Services requests.
    """

    Credentials: Optional[Credentials] = None
