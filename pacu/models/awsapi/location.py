# generated by datamodel-codegen:
#   filename:  openapi.yaml
#   timestamp: 2021-12-31T02:51:52+00:00

from __future__ import annotations

from datetime import datetime
from enum import Enum
from typing import Annotated, Any, List, Optional

from pydantic import BaseModel, Extra, Field, SecretStr


class AssociateTrackerConsumerResponse(BaseModel):
    pass


class InternalServerException(BaseModel):
    __root__: Any


class ResourceNotFoundException(InternalServerException):
    pass


class ConflictException(InternalServerException):
    pass


class AccessDeniedException(InternalServerException):
    pass


class ValidationException(InternalServerException):
    pass


class ServiceQuotaExceededException(InternalServerException):
    pass


class ThrottlingException(InternalServerException):
    pass


class Id(BaseModel):
    __root__: Annotated[
        str, Field(max_length=100, min_length=1, regex='^[-._\\p{L}\\p{N}]+$')
    ]


class Boolean(BaseModel):
    __root__: bool


class Double(BaseModel):
    __root__: float


class Position(BaseModel):
    __root__: Annotated[List[Double], Field(max_items=2, min_items=2)]


class TagValue(BaseModel):
    __root__: Annotated[
        str, Field(max_length=256, min_length=0, regex='^[A-Za-z0-9 _=@:.+-/]*$')
    ]


class MapStyle(BaseModel):
    __root__: Annotated[str, Field(max_length=100, min_length=1, regex='^[-._\\w]+$')]


class IntendedUse(Enum):
    SingleUse = 'SingleUse'
    Storage = 'Storage'


class DeleteGeofenceCollectionResponse(AssociateTrackerConsumerResponse):
    pass


class DeleteMapResponse(AssociateTrackerConsumerResponse):
    pass


class DeletePlaceIndexResponse(AssociateTrackerConsumerResponse):
    pass


class DeleteRouteCalculatorResponse(AssociateTrackerConsumerResponse):
    pass


class DeleteTrackerResponse(AssociateTrackerConsumerResponse):
    pass


class DisassociateTrackerConsumerResponse(AssociateTrackerConsumerResponse):
    pass


class CountryCode(BaseModel):
    __root__: Annotated[str, Field(regex='^[A-Z]{3}$')]


class TagResourceResponse(AssociateTrackerConsumerResponse):
    pass


class UntagResourceResponse(AssociateTrackerConsumerResponse):
    pass


class String(BaseModel):
    __root__: str


class Arn(BaseModel):
    __root__: Annotated[
        str,
        Field(
            max_length=1600,
            min_length=0,
            regex='^arn(:[a-z0-9]+([.-][a-z0-9]+)*){2}(:([a-z0-9]+([.-][a-z0-9]+)*)?){2}:([^/].*)?$',
        ),
    ]


class ArnList(BaseModel):
    __root__: List[Arn]


class ResourceName(MapStyle):
    pass


class AssociateTrackerConsumerRequest(BaseModel):
    ConsumerArn: Arn


class BatchDeleteDevicePositionHistoryRequestDeviceIdsList(BaseModel):
    __root__: Annotated[List[Id], Field(max_items=100, min_items=1)]


class BatchDeleteDevicePositionHistoryRequest(BaseModel):
    DeviceIds: BatchDeleteDevicePositionHistoryRequestDeviceIdsList


class BatchDeleteGeofenceRequestGeofenceIdsList(BaseModel):
    __root__: Annotated[List[Id], Field(max_items=10, min_items=1)]


class BatchDeleteGeofenceRequest(BaseModel):
    GeofenceIds: BatchDeleteGeofenceRequestGeofenceIdsList


class Timestamp(BaseModel):
    __root__: datetime


class BatchGetDevicePositionRequestDeviceIdsList(
    BatchDeleteGeofenceRequestGeofenceIdsList
):
    pass


class BatchGetDevicePositionRequestTrackerNameString(BaseModel):
    __root__: Annotated[str, Field(min_length=1, regex='^[-._\\w]+$')]


class BatchGetDevicePositionRequest(BaseModel):
    DeviceIds: BatchGetDevicePositionRequestDeviceIdsList


class BatchItemErrorCode(Enum):
    AccessDeniedError = 'AccessDeniedError'
    ConflictError = 'ConflictError'
    InternalServerError = 'InternalServerError'
    ResourceNotFoundError = 'ResourceNotFoundError'
    ThrottlingError = 'ThrottlingError'
    ValidationError = 'ValidationError'


class BatchPutGeofenceSuccess(BaseModel):
    """
    Contains a summary of each geofence that was successfully stored in a given geofence collection.
    """

    CreateTime: Timestamp
    GeofenceId: Id
    UpdateTime: Timestamp


class Blob(String):
    pass


class BoundingBox(BaseModel):
    __root__: Annotated[List[Double], Field(max_items=4, min_items=4)]


class CalculateRouteCarModeOptions(BaseModel):
    """
    Contains details about additional route preferences for requests that specify <code>TravelMode</code> as <code>Car</code>.
    """

    AvoidFerries: Optional[Boolean] = None
    AvoidTolls: Optional[Boolean] = None


class DistanceUnit(Enum):
    Kilometers = 'Kilometers'
    Miles = 'Miles'


class TravelMode(Enum):
    Car = 'Car'
    Truck = 'Truck'
    Walking = 'Walking'


class CalculateRouteRequestWaypointPositionsList(BaseModel):
    __root__: Annotated[List[Position], Field(max_items=23, min_items=0)]


class CalculateRouteSummaryDistanceDouble(BaseModel):
    __root__: Annotated[float, Field(ge=0.0)]


class CalculateRouteSummaryDurationSecondsDouble(CalculateRouteSummaryDistanceDouble):
    pass


class CountryCodeList(BaseModel):
    __root__: Annotated[List[CountryCode], Field(max_items=100, min_items=1)]


class ResourceDescription(BaseModel):
    __root__: Annotated[str, Field(max_length=1000, min_length=0)]


class KmsKeyId(BaseModel):
    __root__: Annotated[str, Field(max_length=2048, min_length=1)]


class PricingPlan(Enum):
    RequestBasedUsage = 'RequestBasedUsage'
    MobileAssetTracking = 'MobileAssetTracking'
    MobileAssetManagement = 'MobileAssetManagement'


class TagMap(BaseModel):
    pass

    class Config:
        extra = Extra.allow


class CreateGeofenceCollectionRequest(BaseModel):
    CollectionName: ResourceName
    Description: Optional[ResourceDescription] = None
    KmsKeyId: Optional[KmsKeyId] = None
    PricingPlan: PricingPlan
    PricingPlanDataSource: Optional[String] = None
    Tags: Optional[TagMap] = None


class MapConfiguration(BaseModel):
    """
    Specifies the map tile style selected from an available provider.
    """

    Style: MapStyle


class CreateMapRequest(BaseModel):
    Configuration: MapConfiguration
    Description: Optional[ResourceDescription] = None
    MapName: ResourceName
    PricingPlan: PricingPlan
    Tags: Optional[TagMap] = None


class DataSourceConfiguration(BaseModel):
    """
    <p>Specifies the data storage option chosen for requesting Places.</p> <important> <p>When using Amazon Location Places:</p> <ul> <li> <p>If using HERE Technologies as a data provider, you can't store results for locations in Japan by setting <code>IntendedUse</code> to <code>Storage</code>. parameter.</p> </li> <li> <p>Under the <code>MobileAssetTracking</code> or <code>MobilAssetManagement</code> pricing plan, you can't store results from your place index resources by setting <code>IntendedUse</code> to <code>Storage</code>. This returns a validation exception error.</p> </li> </ul> <p>For more information, see the <a href="https://aws.amazon.com/service-terms/">AWS Service Terms</a> for Amazon Location Service.</p> </important>
    """

    IntendedUse: Optional[IntendedUse] = None


class CreatePlaceIndexRequest(BaseModel):
    DataSource: String
    DataSourceConfiguration: Optional[DataSourceConfiguration] = None
    Description: Optional[ResourceDescription] = None
    IndexName: ResourceName
    PricingPlan: PricingPlan
    Tags: Optional[TagMap] = None


class CreateRouteCalculatorRequest(BaseModel):
    CalculatorName: ResourceName
    DataSource: String
    Description: Optional[ResourceDescription] = None
    PricingPlan: PricingPlan
    Tags: Optional[TagMap] = None


class CreateTrackerRequest(BaseModel):
    Description: Optional[ResourceDescription] = None
    KmsKeyId: Optional[KmsKeyId] = None
    PricingPlan: PricingPlan
    PricingPlanDataSource: Optional[String] = None
    Tags: Optional[TagMap] = None
    TrackerName: ResourceName


class DeleteGeofenceCollectionRequest(BaseModel):
    pass


class DeleteMapRequest(BaseModel):
    pass


class DeletePlaceIndexRequest(BaseModel):
    pass


class DeleteRouteCalculatorRequest(BaseModel):
    pass


class DeleteTrackerRequest(BaseModel):
    pass


class DescribeGeofenceCollectionRequest(BaseModel):
    pass


class DescribeMapRequest(BaseModel):
    pass


class DescribePlaceIndexRequest(BaseModel):
    pass


class DescribeRouteCalculatorRequest(BaseModel):
    pass


class DescribeTrackerRequest(BaseModel):
    pass


class DevicePosition(BaseModel):
    """
    Contains the device position details.
    """

    DeviceId: Optional[Id] = None
    Position: Position
    ReceivedTime: Timestamp
    SampleTime: Timestamp


class DimensionUnit(Enum):
    Meters = 'Meters'
    Feet = 'Feet'


class DisassociateTrackerConsumerRequest(BaseModel):
    pass


class Token(BaseModel):
    __root__: Annotated[str, Field(max_length=2000, min_length=1)]


class GetDevicePositionHistoryRequest(BaseModel):
    EndTimeExclusive: Optional[Timestamp] = None
    NextToken: Optional[Token] = None
    StartTimeInclusive: Optional[Timestamp] = None


class GetDevicePositionRequest(BaseModel):
    pass


class GetGeofenceRequest(BaseModel):
    pass


class GetMapGlyphsRequestFontUnicodeRangeString(BaseModel):
    __root__: Annotated[str, Field(regex='^[0-9]+-[0-9]+\\.pbf$')]


class GetMapGlyphsRequest(BaseModel):
    pass


class GetMapSpritesRequestFileNameString(BaseModel):
    __root__: Annotated[str, Field(regex='^sprites(@2x)?\\.(png|json)$')]


class GetMapSpritesRequest(BaseModel):
    pass


class GetMapStyleDescriptorRequest(BaseModel):
    pass


class GetMapTileRequestXString(BaseModel):
    __root__: Annotated[str, Field(regex='\\d+')]


class GetMapTileRequestYString(GetMapTileRequestXString):
    pass


class GetMapTileRequestZString(GetMapTileRequestXString):
    pass


class GetMapTileRequest(BaseModel):
    pass


class LegDistanceDouble(CalculateRouteSummaryDistanceDouble):
    pass


class LegDurationSecondsDouble(CalculateRouteSummaryDistanceDouble):
    pass


class LineString(BaseModel):
    __root__: Annotated[List[Position], Field(min_items=2)]


class LinearRing(BaseModel):
    __root__: Annotated[List[Position], Field(min_items=4)]


class ListDevicePositionsRequestMaxResultsInteger(BaseModel):
    __root__: Annotated[int, Field(ge=1.0, le=100.0)]


class ListDevicePositionsRequest(BaseModel):
    MaxResults: Optional[ListDevicePositionsRequestMaxResultsInteger] = None
    NextToken: Optional[Token] = None


class ListDevicePositionsResponseEntry(BaseModel):
    """
    Contains the tracker resource details.
    """

    DeviceId: Id
    Position: Position
    SampleTime: Timestamp


class ListGeofenceCollectionsRequestMaxResultsInteger(
    ListDevicePositionsRequestMaxResultsInteger
):
    pass


class ListGeofenceCollectionsRequest(BaseModel):
    MaxResults: Optional[ListGeofenceCollectionsRequestMaxResultsInteger] = None
    NextToken: Optional[Token] = None


class ListGeofenceCollectionsResponseEntry(BaseModel):
    """
    Contains the geofence collection details.
    """

    CollectionName: ResourceName
    CreateTime: Timestamp
    Description: ResourceDescription
    PricingPlan: PricingPlan
    PricingPlanDataSource: Optional[String] = None
    UpdateTime: Timestamp


class ListGeofencesRequest(BaseModel):
    NextToken: Optional[Token] = None


class ListMapsRequestMaxResultsInteger(ListDevicePositionsRequestMaxResultsInteger):
    pass


class ListMapsRequest(BaseModel):
    MaxResults: Optional[ListMapsRequestMaxResultsInteger] = None
    NextToken: Optional[Token] = None


class ListMapsResponseEntry(BaseModel):
    """
    Contains details of an existing map resource in your AWS account.
    """

    CreateTime: Timestamp
    DataSource: String
    Description: ResourceDescription
    MapName: ResourceName
    PricingPlan: PricingPlan
    UpdateTime: Timestamp


class ListPlaceIndexesRequestMaxResultsInteger(
    ListDevicePositionsRequestMaxResultsInteger
):
    pass


class ListPlaceIndexesRequest(BaseModel):
    MaxResults: Optional[ListPlaceIndexesRequestMaxResultsInteger] = None
    NextToken: Optional[Token] = None


class ListPlaceIndexesResponseEntry(BaseModel):
    """
    A place index resource listed in your AWS account.
    """

    CreateTime: Timestamp
    DataSource: String
    Description: ResourceDescription
    IndexName: ResourceName
    PricingPlan: PricingPlan
    UpdateTime: Timestamp


class ListRouteCalculatorsRequestMaxResultsInteger(
    ListDevicePositionsRequestMaxResultsInteger
):
    pass


class ListRouteCalculatorsRequest(BaseModel):
    MaxResults: Optional[ListRouteCalculatorsRequestMaxResultsInteger] = None
    NextToken: Optional[Token] = None


class ListRouteCalculatorsResponseEntry(BaseModel):
    """
    A route calculator resource listed in your AWS account.
    """

    CalculatorName: ResourceName
    CreateTime: Timestamp
    DataSource: String
    Description: ResourceDescription
    PricingPlan: PricingPlan
    UpdateTime: Timestamp


class ListTagsForResourceRequest(BaseModel):
    pass


class ListTrackerConsumersRequestMaxResultsInteger(
    ListDevicePositionsRequestMaxResultsInteger
):
    pass


class ListTrackerConsumersRequest(BaseModel):
    MaxResults: Optional[ListTrackerConsumersRequestMaxResultsInteger] = None
    NextToken: Optional[Token] = None


class ListTrackersRequestMaxResultsInteger(ListDevicePositionsRequestMaxResultsInteger):
    pass


class ListTrackersRequest(BaseModel):
    MaxResults: Optional[ListTrackersRequestMaxResultsInteger] = None
    NextToken: Optional[Token] = None


class ListTrackersResponseEntry(BaseModel):
    """
    Contains the tracker resource details.
    """

    CreateTime: Timestamp
    Description: ResourceDescription
    PricingPlan: PricingPlan
    PricingPlanDataSource: Optional[String] = None
    TrackerName: ResourceName
    UpdateTime: Timestamp


class PlaceGeometry(BaseModel):
    """
    Places uses a point geometry to specify a location or a Place.
    """

    Point: Optional[Position] = None


class Place(BaseModel):
    """
    Contains details about addresses or points of interest that match the search criteria.
    """

    AddressNumber: Optional[String] = None
    Country: Optional[String] = None
    Geometry: PlaceGeometry
    Label: Optional[String] = None
    Municipality: Optional[String] = None
    Neighborhood: Optional[String] = None
    PostalCode: Optional[String] = None
    Region: Optional[String] = None
    Street: Optional[String] = None
    SubRegion: Optional[String] = None


class PlaceIndexSearchResultLimit(BaseModel):
    __root__: Annotated[int, Field(ge=1.0, le=50.0)]


class SearchForPositionResult(BaseModel):
    """
    Specifies a single point of interest, or Place as a result of a search query obtained from a dataset configured in the place index resource.
    """

    Place: Place


class SearchForPositionResultList(BaseModel):
    __root__: List[SearchForPositionResult]


class SearchForTextResult(SearchForPositionResult):
    """
    Contains relevant Places returned by calling <code>SearchPlaceIndexForText</code>.
    """

    pass


class SearchForTextResultList(BaseModel):
    __root__: List[SearchForTextResult]


class SearchPlaceIndexForPositionRequest(BaseModel):
    MaxResults: Optional[PlaceIndexSearchResultLimit] = None
    Position: Position


class SearchPlaceIndexForPositionSummary(BaseModel):
    """
    A summary of the reverse geocoding request sent using <code>SearchPlaceIndexForPosition</code>.
    """

    DataSource: String
    MaxResults: Optional[PlaceIndexSearchResultLimit] = None
    Position: Position


class SyntheticSearchPlaceIndexForTextRequestString(BaseModel):
    __root__: Annotated[SecretStr, Field(max_length=200, min_length=1)]


class SearchPlaceIndexForTextRequest(BaseModel):
    BiasPosition: Optional[Position] = None
    FilterBBox: Optional[BoundingBox] = None
    FilterCountries: Optional[CountryCodeList] = None
    MaxResults: Optional[PlaceIndexSearchResultLimit] = None
    Text: SyntheticSearchPlaceIndexForTextRequestString


class SyntheticSearchPlaceIndexForTextSummaryString(BaseModel):
    __root__: SecretStr


class StepDistanceDouble(CalculateRouteSummaryDistanceDouble):
    pass


class StepDurationSecondsDouble(CalculateRouteSummaryDistanceDouble):
    pass


class StepGeometryOffsetInteger(BaseModel):
    __root__: Annotated[int, Field(ge=0.0)]


class Step(BaseModel):
    """
    Represents an element of a leg within a route. A step contains instructions for how to move to the next step in the leg.
    """

    Distance: StepDistanceDouble
    DurationSeconds: StepDurationSecondsDouble
    EndPosition: Position
    GeometryOffset: Optional[StepGeometryOffsetInteger] = None
    StartPosition: Position


class TagKey(BaseModel):
    __root__: Annotated[
        str, Field(max_length=128, min_length=1, regex='^(?!aws:)[a-zA-Z+-=._:/]+$')
    ]


class TagKeys(BaseModel):
    __root__: Annotated[List[String], Field(max_items=50, min_items=1)]


class TagResourceRequest(BaseModel):
    Tags: TagMap


class TruckDimensionsHeightDouble(CalculateRouteSummaryDistanceDouble):
    pass


class TruckDimensionsLengthDouble(CalculateRouteSummaryDistanceDouble):
    pass


class TruckDimensionsWidthDouble(CalculateRouteSummaryDistanceDouble):
    pass


class TruckWeightTotalDouble(CalculateRouteSummaryDistanceDouble):
    pass


class VehicleWeightUnit(Enum):
    Kilograms = 'Kilograms'
    Pounds = 'Pounds'


class UntagResourceRequest(BaseModel):
    pass


class UpdateGeofenceCollectionRequest(BaseModel):
    Description: Optional[ResourceDescription] = None
    PricingPlan: Optional[PricingPlan] = None
    PricingPlanDataSource: Optional[String] = None


class UpdateMapRequest(BaseModel):
    Description: Optional[ResourceDescription] = None
    PricingPlan: Optional[PricingPlan] = None


class UpdatePlaceIndexRequest(BaseModel):
    DataSourceConfiguration: Optional[DataSourceConfiguration] = None
    Description: Optional[ResourceDescription] = None
    PricingPlan: Optional[PricingPlan] = None


class UpdateRouteCalculatorRequest(BaseModel):
    Description: Optional[ResourceDescription] = None
    PricingPlan: Optional[PricingPlan] = None


class UpdateTrackerRequest(BaseModel):
    Description: Optional[ResourceDescription] = None
    PricingPlan: Optional[PricingPlan] = None
    PricingPlanDataSource: Optional[String] = None


class DevicePositionUpdate(ListDevicePositionsResponseEntry):
    """
    Contains the position update details for a device.
    """

    pass


class TruckDimensions(BaseModel):
    """
    Contains details about the truck dimensions in the unit of measurement that you specify. Used to filter out roads that can't support or allow the specified dimensions for requests that specify <code>TravelMode</code> as <code>Truck</code>.
    """

    Height: Optional[TruckDimensionsHeightDouble] = None
    Length: Optional[TruckDimensionsLengthDouble] = None
    Unit: Optional[DimensionUnit] = None
    Width: Optional[TruckDimensionsWidthDouble] = None


class TruckWeight(BaseModel):
    """
    Contains details about the truck's weight specifications. Used to avoid roads that can't support or allow the total weight for requests that specify <code>TravelMode</code> as <code>Truck</code>.
    """

    Total: Optional[TruckWeightTotalDouble] = None
    Unit: Optional[VehicleWeightUnit] = None


class CreateGeofenceCollectionResponse(BaseModel):
    CollectionArn: Arn
    CollectionName: ResourceName
    CreateTime: Timestamp


class CreateMapResponse(BaseModel):
    CreateTime: Timestamp
    MapArn: Arn
    MapName: ResourceName


class CreatePlaceIndexResponse(BaseModel):
    CreateTime: Timestamp
    IndexArn: Arn
    IndexName: ResourceName


class CreateRouteCalculatorResponse(BaseModel):
    CalculatorArn: Arn
    CalculatorName: ResourceName
    CreateTime: Timestamp


class CreateTrackerResponse(BaseModel):
    CreateTime: Timestamp
    TrackerArn: Arn
    TrackerName: ResourceName


class DescribeGeofenceCollectionResponse(BaseModel):
    CollectionArn: Arn
    CollectionName: ResourceName
    CreateTime: Timestamp
    Description: ResourceDescription
    KmsKeyId: Optional[KmsKeyId] = None
    PricingPlan: PricingPlan
    PricingPlanDataSource: Optional[String] = None
    Tags: Optional[TagMap] = None
    UpdateTime: Timestamp


class DescribeMapResponse(BaseModel):
    Configuration: MapConfiguration
    CreateTime: Timestamp
    DataSource: String
    Description: ResourceDescription
    MapArn: Arn
    MapName: ResourceName
    PricingPlan: PricingPlan
    Tags: Optional[TagMap] = None
    UpdateTime: Timestamp


class DescribePlaceIndexResponse(BaseModel):
    CreateTime: Timestamp
    DataSource: String
    DataSourceConfiguration: DataSourceConfiguration
    Description: ResourceDescription
    IndexArn: Arn
    IndexName: ResourceName
    PricingPlan: PricingPlan
    Tags: Optional[TagMap] = None
    UpdateTime: Timestamp


class DescribeRouteCalculatorResponse(BaseModel):
    CalculatorArn: Arn
    CalculatorName: ResourceName
    CreateTime: Timestamp
    DataSource: String
    Description: ResourceDescription
    PricingPlan: PricingPlan
    Tags: Optional[TagMap] = None
    UpdateTime: Timestamp


class DescribeTrackerResponse(BaseModel):
    CreateTime: Timestamp
    Description: ResourceDescription
    KmsKeyId: Optional[KmsKeyId] = None
    PricingPlan: PricingPlan
    PricingPlanDataSource: Optional[String] = None
    Tags: Optional[TagMap] = None
    TrackerArn: Arn
    TrackerName: ResourceName
    UpdateTime: Timestamp


class GetDevicePositionResponse(DevicePosition):
    pass


class GetMapGlyphsResponse(BaseModel):
    Blob: Optional[Blob] = None


class GetMapSpritesResponse(GetMapGlyphsResponse):
    pass


class GetMapStyleDescriptorResponse(GetMapGlyphsResponse):
    pass


class GetMapTileResponse(GetMapGlyphsResponse):
    pass


class ListTagsForResourceResponse(BaseModel):
    Tags: Optional[TagMap] = None


class ListTrackerConsumersResponse(BaseModel):
    ConsumerArns: ArnList
    NextToken: Optional[Token] = None


class PutGeofenceResponse(BatchPutGeofenceSuccess):
    pass


class LinearRings(BaseModel):
    __root__: Annotated[List[LinearRing], Field(min_items=1)]


class SearchPlaceIndexForPositionResponse(BaseModel):
    Results: SearchForPositionResultList
    Summary: SearchPlaceIndexForPositionSummary


class UpdateGeofenceCollectionResponse(BaseModel):
    CollectionArn: Arn
    CollectionName: ResourceName
    UpdateTime: Timestamp


class UpdateMapResponse(BaseModel):
    MapArn: Arn
    MapName: ResourceName
    UpdateTime: Timestamp


class UpdatePlaceIndexResponse(BaseModel):
    IndexArn: Arn
    IndexName: ResourceName
    UpdateTime: Timestamp


class UpdateRouteCalculatorResponse(BaseModel):
    CalculatorArn: Arn
    CalculatorName: ResourceName
    UpdateTime: Timestamp


class UpdateTrackerResponse(BaseModel):
    TrackerArn: Arn
    TrackerName: ResourceName
    UpdateTime: Timestamp


class BatchItemError(BaseModel):
    """
    Contains the batch request error details associated with the request.
    """

    Code: Optional[BatchItemErrorCode] = None
    Message: Optional[String] = None


class BatchDeleteDevicePositionHistoryError(BaseModel):
    """
    Contains the tracker resource details.
    """

    DeviceId: Id
    Error: BatchItemError


class BatchDeleteDevicePositionHistoryErrorList(BaseModel):
    __root__: List[BatchDeleteDevicePositionHistoryError]


class BatchDeleteGeofenceError(BaseModel):
    """
    Contains error details for each geofence that failed to delete from the geofence collection.
    """

    Error: BatchItemError
    GeofenceId: Id


class BatchDeleteGeofenceErrorList(BaseModel):
    __root__: List[BatchDeleteGeofenceError]


class BatchEvaluateGeofencesError(BaseModel):
    """
    Contains error details for each device that failed to evaluate its position against the geofences in a given geofence collection.
    """

    DeviceId: Id
    Error: BatchItemError
    SampleTime: Timestamp


class BatchEvaluateGeofencesErrorList(BaseModel):
    __root__: List[BatchEvaluateGeofencesError]


class BatchEvaluateGeofencesRequestDevicePositionUpdatesList(BaseModel):
    __root__: Annotated[List[DevicePositionUpdate], Field(max_items=10, min_items=1)]


class BatchEvaluateGeofencesRequest(BaseModel):
    DevicePositionUpdates: BatchEvaluateGeofencesRequestDevicePositionUpdatesList


class BatchGetDevicePositionError(BatchDeleteDevicePositionHistoryError):
    """
    Contains error details for each device that didn't return a position.
    """

    pass


class BatchGetDevicePositionErrorList(BaseModel):
    __root__: List[BatchGetDevicePositionError]


class DevicePositionList(BaseModel):
    __root__: List[DevicePosition]


class BatchPutGeofenceError(BatchDeleteGeofenceError):
    """
    Contains error details for each geofence that failed to be stored in a given geofence collection.
    """

    pass


class BatchPutGeofenceErrorList(BaseModel):
    __root__: List[BatchPutGeofenceError]


class GeofenceGeometry(BaseModel):
    """
    <p>Contains the geofence geometry details.</p> <note> <p>Amazon Location doesn't currently support polygons with holes, multipolygons, polygons that are wound clockwise, or that cross the antimeridian. </p> </note>
    """

    Polygon: Optional[LinearRings] = None


class BatchPutGeofenceSuccessList(BaseModel):
    __root__: List[BatchPutGeofenceSuccess]


class BatchUpdateDevicePositionError(BatchEvaluateGeofencesError):
    """
    Contains error details for each device that failed to update its position.
    """

    pass


class BatchUpdateDevicePositionErrorList(BaseModel):
    __root__: List[BatchUpdateDevicePositionError]


class BatchUpdateDevicePositionRequestUpdatesList(
    BatchEvaluateGeofencesRequestDevicePositionUpdatesList
):
    pass


class BatchUpdateDevicePositionRequest(BaseModel):
    Updates: BatchUpdateDevicePositionRequestUpdatesList


class CalculateRouteTruckModeOptions(BaseModel):
    """
    Contains details about additional route preferences for requests that specify <code>TravelMode</code> as <code>Truck</code>.
    """

    AvoidFerries: Optional[Boolean] = None
    AvoidTolls: Optional[Boolean] = None
    Dimensions: Optional[TruckDimensions] = None
    Weight: Optional[TruckWeight] = None


class CalculateRouteRequest(BaseModel):
    CarModeOptions: Optional[CalculateRouteCarModeOptions] = None
    DepartNow: Optional[Boolean] = None
    DeparturePosition: Position
    DepartureTime: Optional[Timestamp] = None
    DestinationPosition: Position
    DistanceUnit: Optional[DistanceUnit] = None
    IncludeLegGeometry: Optional[Boolean] = None
    TravelMode: Optional[TravelMode] = None
    TruckModeOptions: Optional[CalculateRouteTruckModeOptions] = None
    WaypointPositions: Optional[CalculateRouteRequestWaypointPositionsList] = None


class CalculateRouteSummary(BaseModel):
    """
    A summary of the calculated route.
    """

    DataSource: String
    Distance: CalculateRouteSummaryDistanceDouble
    DistanceUnit: DistanceUnit
    DurationSeconds: CalculateRouteSummaryDurationSecondsDouble
    RouteBBox: BoundingBox


class LegGeometry(BaseModel):
    """
    Contains the geometry details for each path between a pair of positions. Used in plotting a route leg on a map.
    """

    LineString: Optional[LineString] = None


class StepList(BaseModel):
    __root__: List[Step]


class Leg(BaseModel):
    """
    <p>Contains the calculated route's details for each path between a pair of positions. The number of legs returned corresponds to one fewer than the total number of positions in the request. </p> <p>For example, a route with a departure position and destination position returns one leg with the positions <a href="https://docs.aws.amazon.com/location/latest/developerguide/calculate-route.html#snap-to-nearby-road">snapped to a nearby road</a>:</p> <ul> <li> <p>The <code>StartPosition</code> is the departure position.</p> </li> <li> <p>The <code>EndPosition</code> is the destination position.</p> </li> </ul> <p>A route with a waypoint between the departure and destination position returns two legs with the positions snapped to a nearby road:</p> <ul> <li> <p>Leg 1: The <code>StartPosition</code> is the departure position . The <code>EndPosition</code> is the waypoint positon.</p> </li> <li> <p>Leg 2: The <code>StartPosition</code> is the waypoint position. The <code>EndPosition</code> is the destination position.</p> </li> </ul>
    """

    Distance: LegDistanceDouble
    DurationSeconds: LegDurationSecondsDouble
    EndPosition: Position
    Geometry: Optional[LegGeometry] = None
    StartPosition: Position
    Steps: StepList


class ListDevicePositionsResponseEntryList(BaseModel):
    __root__: List[ListDevicePositionsResponseEntry]


class ListGeofenceCollectionsResponseEntryList(BaseModel):
    __root__: List[ListGeofenceCollectionsResponseEntry]


class ListGeofenceResponseEntry(BaseModel):
    """
    Contains a list of geofences stored in a given geofence collection.
    """

    CreateTime: Timestamp
    GeofenceId: Id
    Geometry: GeofenceGeometry
    Status: String
    UpdateTime: Timestamp


class ListGeofenceResponseEntryList(BaseModel):
    __root__: List[ListGeofenceResponseEntry]


class ListMapsResponseEntryList(BaseModel):
    __root__: List[ListMapsResponseEntry]


class ListPlaceIndexesResponseEntryList(BaseModel):
    __root__: List[ListPlaceIndexesResponseEntry]


class ListRouteCalculatorsResponseEntryList(BaseModel):
    __root__: List[ListRouteCalculatorsResponseEntry]


class ListTrackersResponseEntryList(BaseModel):
    __root__: List[ListTrackersResponseEntry]


class PutGeofenceRequest(BaseModel):
    Geometry: GeofenceGeometry


class SearchPlaceIndexForTextSummary(BaseModel):
    """
    A summary of the geocoding request sent using <code>SearchPlaceIndexForText</code>.
    """

    BiasPosition: Optional[Position] = None
    DataSource: String
    FilterBBox: Optional[BoundingBox] = None
    FilterCountries: Optional[CountryCodeList] = None
    MaxResults: Optional[PlaceIndexSearchResultLimit] = None
    ResultBBox: Optional[BoundingBox] = None
    Text: SyntheticSearchPlaceIndexForTextSummaryString


class BatchDeleteDevicePositionHistoryResponse(BaseModel):
    Errors: BatchDeleteDevicePositionHistoryErrorList


class BatchDeleteGeofenceResponse(BaseModel):
    Errors: BatchDeleteGeofenceErrorList


class BatchEvaluateGeofencesResponse(BaseModel):
    Errors: BatchEvaluateGeofencesErrorList


class BatchGetDevicePositionResponse(BaseModel):
    DevicePositions: DevicePositionList
    Errors: BatchGetDevicePositionErrorList


class BatchPutGeofenceResponse(BaseModel):
    Errors: BatchPutGeofenceErrorList
    Successes: BatchPutGeofenceSuccessList


class BatchPutGeofenceRequestEntry(BaseModel):
    """
    Contains geofence geometry details.
    """

    GeofenceId: Id
    Geometry: GeofenceGeometry


class BatchUpdateDevicePositionResponse(BaseModel):
    Errors: BatchUpdateDevicePositionErrorList


class GetDevicePositionHistoryResponse(BaseModel):
    DevicePositions: DevicePositionList
    NextToken: Optional[Token] = None


class GetGeofenceResponse(ListGeofenceResponseEntry):
    pass


class ListDevicePositionsResponse(BaseModel):
    Entries: ListDevicePositionsResponseEntryList
    NextToken: Optional[Token] = None


class ListGeofenceCollectionsResponse(BaseModel):
    Entries: ListGeofenceCollectionsResponseEntryList
    NextToken: Optional[Token] = None


class ListGeofencesResponse(BaseModel):
    Entries: ListGeofenceResponseEntryList
    NextToken: Optional[Token] = None


class ListMapsResponse(BaseModel):
    Entries: ListMapsResponseEntryList
    NextToken: Optional[Token] = None


class ListPlaceIndexesResponse(BaseModel):
    Entries: ListPlaceIndexesResponseEntryList
    NextToken: Optional[Token] = None


class ListRouteCalculatorsResponse(BaseModel):
    Entries: ListRouteCalculatorsResponseEntryList
    NextToken: Optional[Token] = None


class ListTrackersResponse(BaseModel):
    Entries: ListTrackersResponseEntryList
    NextToken: Optional[Token] = None


class SearchPlaceIndexForTextResponse(BaseModel):
    Results: SearchForTextResultList
    Summary: SearchPlaceIndexForTextSummary


class BatchPutGeofenceRequestEntriesList(BaseModel):
    __root__: Annotated[
        List[BatchPutGeofenceRequestEntry], Field(max_items=10, min_items=1)
    ]


class BatchPutGeofenceRequest(BaseModel):
    Entries: BatchPutGeofenceRequestEntriesList


class LegList(BaseModel):
    __root__: List[Leg]


class CalculateRouteResponse(BaseModel):
    """
    Returns the result of the route calculation. Metadata includes legs and route summary.
    """

    Legs: LegList
    Summary: CalculateRouteSummary
