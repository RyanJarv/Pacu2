# generated by datamodel-codegen:
#   filename:  openapi.yaml
#   timestamp: 2021-12-31T02:46:39+00:00

from __future__ import annotations

from enum import Enum
from typing import Annotated, Any, List, Optional

from pydantic import BaseModel, Field


class LimitExceededException(BaseModel):
    __root__: Any


class ResourceNotFoundException(LimitExceededException):
    pass


class ResourceUnavailableException(LimitExceededException):
    pass


class DeleteConnectionOutput(BaseModel):
    pass


class DeleteHostOutput(DeleteConnectionOutput):
    pass


class TagResourceOutput(DeleteConnectionOutput):
    pass


class UntagResourceOutput(DeleteConnectionOutput):
    pass


class UpdateHostOutput(DeleteConnectionOutput):
    pass


class ConflictException(LimitExceededException):
    pass


class UnsupportedOperationException(LimitExceededException):
    pass


class AccountId(BaseModel):
    __root__: Annotated[str, Field(max_length=12, min_length=12, regex='[0-9]{12}')]


class AmazonResourceName(BaseModel):
    __root__: Annotated[
        str,
        Field(
            max_length=1011, min_length=1, regex='arn:aws(-[\\w]+)*:.+:.+:[0-9]{12}:.+'
        ),
    ]


class ConnectionName(BaseModel):
    __root__: Annotated[str, Field(max_length=32, min_length=1, regex='[\\s\\S]*')]


class ConnectionArn(BaseModel):
    __root__: Annotated[
        str,
        Field(
            max_length=256, min_length=0, regex='arn:aws(-[\\w]+)*:.+:.+:[0-9]{12}:.+'
        ),
    ]


class ProviderType(Enum):
    Bitbucket = 'Bitbucket'
    GitHub = 'GitHub'
    GitHubEnterpriseServer = 'GitHubEnterpriseServer'


class ConnectionStatus(Enum):
    PENDING = 'PENDING'
    AVAILABLE = 'AVAILABLE'
    ERROR = 'ERROR'


class HostArn(BaseModel):
    __root__: Annotated[
        str,
        Field(
            max_length=256,
            min_length=0,
            regex='arn:aws(-[\\w]+)*:codestar-connections:.+:[0-9]{12}:host\\/.+',
        ),
    ]


class Connection(BaseModel):
    """
    <p>A resource that is used to connect third-party source providers with services like AWS CodePipeline.</p> <p>Note: A connection created through CloudFormation, the CLI, or the SDK is in `PENDING` status by default. You can make its status `AVAILABLE` by updating the connection in the console.</p>
    """

    ConnectionName: Optional[ConnectionName] = None
    ConnectionArn: Optional[ConnectionArn] = None
    ProviderType: Optional[ProviderType] = None
    OwnerAccountId: Optional[AccountId] = None
    ConnectionStatus: Optional[ConnectionStatus] = None
    HostArn: Optional[HostArn] = None


class ConnectionList(BaseModel):
    __root__: List[Connection]


class HostName(BaseModel):
    __root__: Annotated[str, Field(max_length=64, min_length=1, regex='.*')]


class Url(BaseModel):
    __root__: Annotated[str, Field(max_length=512, min_length=1, regex='.*')]


class HostStatus(HostName):
    pass


class HostStatusMessage(BaseModel):
    __root__: str


class MaxResults(BaseModel):
    __root__: Annotated[int, Field(ge=0.0, le=100.0)]


class NextToken(BaseModel):
    __root__: Annotated[str, Field(max_length=1024, min_length=1, regex='.*')]


class SecurityGroupId(BaseModel):
    __root__: Annotated[
        str, Field(max_length=20, min_length=11, regex='sg-\\w{8}(\\w{9})?')
    ]


class SecurityGroupIds(BaseModel):
    __root__: Annotated[List[SecurityGroupId], Field(max_items=10, min_items=1)]


class SubnetId(BaseModel):
    __root__: Annotated[
        str, Field(max_length=24, min_length=15, regex='subnet-\\w{8}(\\w{9})?')
    ]


class SubnetIds(BaseModel):
    __root__: Annotated[List[SubnetId], Field(max_items=10, min_items=1)]


class TagKey(BaseModel):
    __root__: Annotated[str, Field(max_length=128, min_length=1, regex='.*')]


class TagValue(BaseModel):
    __root__: Annotated[str, Field(max_length=256, min_length=0, regex='.*')]


class Tag(BaseModel):
    """
    <p>A tag is a key-value pair that is used to manage the resource.</p> <p>This tag is available for use by AWS services that support tags.</p>
    """

    Key: TagKey
    Value: TagValue


class TagKeyList(BaseModel):
    __root__: Annotated[List[TagKey], Field(max_items=200, min_items=0)]


class TlsCertificate(BaseModel):
    __root__: Annotated[str, Field(max_length=16384, min_length=1, regex='[\\s\\S]*')]


class VpcId(BaseModel):
    __root__: Annotated[
        str, Field(max_length=21, min_length=12, regex='vpc-\\w{8}(\\w{9})?')
    ]


class DeleteConnectionInput(BaseModel):
    ConnectionArn: ConnectionArn


class DeleteHostInput(BaseModel):
    HostArn: HostArn


class GetConnectionOutput(BaseModel):
    Connection: Optional[Connection] = None


class GetConnectionInput(BaseModel):
    ConnectionArn: ConnectionArn


class GetHostInput(BaseModel):
    HostArn: HostArn


class ListConnectionsOutput(BaseModel):
    Connections: Optional[ConnectionList] = None
    NextToken: Optional[NextToken] = None


class ListConnectionsInput(BaseModel):
    ProviderTypeFilter: Optional[ProviderType] = None
    HostArnFilter: Optional[HostArn] = None
    MaxResults: Optional[MaxResults] = None
    NextToken: Optional[NextToken] = None


class ListHostsInput(BaseModel):
    MaxResults: Optional[MaxResults] = None
    NextToken: Optional[NextToken] = None


class ListTagsForResourceInput(BaseModel):
    ResourceArn: AmazonResourceName


class UntagResourceInput(BaseModel):
    ResourceArn: AmazonResourceName
    TagKeys: TagKeyList


class TagList(BaseModel):
    __root__: Annotated[List[Tag], Field(max_items=200, min_items=0)]


class VpcConfiguration(BaseModel):
    """
    The VPC configuration provisioned for the host.
    """

    VpcId: VpcId
    SubnetIds: SubnetIds
    SecurityGroupIds: SecurityGroupIds
    TlsCertificate: Optional[TlsCertificate] = None


class Host(BaseModel):
    """
    <p>A resource that represents the infrastructure where a third-party provider is installed. The host is used when you create connections to an installed third-party provider type, such as GitHub Enterprise Server. You create one host for all connections to that provider.</p> <note> <p>A host created through the CLI or the SDK is in `PENDING` status by default. You can make its status `AVAILABLE` by setting up the host in the console.</p> </note>
    """

    Name: Optional[HostName] = None
    HostArn: Optional[HostArn] = None
    ProviderType: Optional[ProviderType] = None
    ProviderEndpoint: Optional[Url] = None
    VpcConfiguration: Optional[VpcConfiguration] = None
    Status: Optional[HostStatus] = None
    StatusMessage: Optional[HostStatusMessage] = None


class HostList(BaseModel):
    __root__: List[Host]


class CreateConnectionOutput(BaseModel):
    ConnectionArn: ConnectionArn
    Tags: Optional[TagList] = None


class CreateConnectionInput(BaseModel):
    ProviderType: Optional[ProviderType] = None
    ConnectionName: ConnectionName
    Tags: Optional[TagList] = None
    HostArn: Optional[HostArn] = None


class CreateHostOutput(BaseModel):
    HostArn: Optional[HostArn] = None
    Tags: Optional[TagList] = None


class CreateHostInput(BaseModel):
    Name: HostName
    ProviderType: ProviderType
    ProviderEndpoint: Url
    VpcConfiguration: Optional[VpcConfiguration] = None
    Tags: Optional[TagList] = None


class GetHostOutput(BaseModel):
    Name: Optional[HostName] = None
    Status: Optional[HostStatus] = None
    ProviderType: Optional[ProviderType] = None
    ProviderEndpoint: Optional[Url] = None
    VpcConfiguration: Optional[VpcConfiguration] = None


class ListHostsOutput(BaseModel):
    Hosts: Optional[HostList] = None
    NextToken: Optional[NextToken] = None


class ListTagsForResourceOutput(BaseModel):
    Tags: Optional[TagList] = None


class TagResourceInput(BaseModel):
    ResourceArn: AmazonResourceName
    Tags: TagList


class UpdateHostInput(BaseModel):
    HostArn: HostArn
    ProviderEndpoint: Optional[Url] = None
    VpcConfiguration: Optional[VpcConfiguration] = None
