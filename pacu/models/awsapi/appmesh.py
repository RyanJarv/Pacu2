# generated by datamodel-codegen:
#   filename:  openapi.yaml
#   timestamp: 2021-12-31T02:45:12+00:00

from __future__ import annotations

from datetime import datetime
from enum import Enum
from typing import Annotated, Any, List, Optional

from pydantic import BaseModel, Field


class GatewayRoutePriority(BaseModel):
    __root__: Annotated[int, Field(ge=0.0, le=1000.0)]


class NotFoundException(BaseModel):
    __root__: Any


class BadRequestException(NotFoundException):
    pass


class ConflictException(NotFoundException):
    pass


class TooManyRequestsException(NotFoundException):
    pass


class ForbiddenException(NotFoundException):
    pass


class ServiceUnavailableException(NotFoundException):
    pass


class InternalServerErrorException(NotFoundException):
    pass


class LimitExceededException(NotFoundException):
    pass


class RoutePriority(GatewayRoutePriority):
    pass


class ResourceInUseException(NotFoundException):
    pass


class TagResourceOutput(BaseModel):
    """
    <zonbook></zonbook><xhtml></xhtml>
    """

    pass


class TooManyTagsException(NotFoundException):
    pass


class UntagResourceOutput(TagResourceOutput):
    """
    <zonbook></zonbook><xhtml></xhtml>
    """

    pass


class TagKey(BaseModel):
    __root__: Annotated[str, Field(max_length=128, min_length=1)]


class AccountId(BaseModel):
    __root__: Annotated[str, Field(max_length=12, min_length=12)]


class Arn(BaseModel):
    __root__: str


class AwsCloudMapInstanceAttributeKey(BaseModel):
    __root__: Annotated[
        str, Field(max_length=255, min_length=1, regex='^[a-zA-Z0-9!-~]+$')
    ]


class AwsCloudMapInstanceAttributeValue(BaseModel):
    __root__: Annotated[
        str,
        Field(
            max_length=1024,
            min_length=1,
            regex='^([a-zA-Z0-9!-~][  a-zA-Z0-9!-~]*){0,1}[a-zA-Z0-9!-~]{0,1}$',
        ),
    ]


class AwsCloudMapInstanceAttribute(BaseModel):
    """
    <p>An object that represents the Cloud Map attribute information for your virtual node.</p> <note> <p>AWS Cloud Map is not available in the eu-south-1 Region.</p> </note>
    """

    key: AwsCloudMapInstanceAttributeKey
    value: AwsCloudMapInstanceAttributeValue


class AwsCloudMapInstanceAttributes(BaseModel):
    __root__: List[AwsCloudMapInstanceAttribute]


class AwsCloudMapName(BaseModel):
    __root__: Annotated[str, Field(max_length=1024, min_length=1)]


class AwsCloudMapServiceDiscovery(BaseModel):
    """
    <p>An object that represents the Cloud Map service discovery information for your virtual node.</p> <note> <p>Cloud Map is not available in the eu-south-1 Region.</p> </note>
    """

    attributes: Optional[AwsCloudMapInstanceAttributes] = None
    namespaceName: AwsCloudMapName
    serviceName: AwsCloudMapName


class Boolean(BaseModel):
    __root__: bool


class CertificateAuthorityArns(BaseModel):
    __root__: Annotated[List[Arn], Field(max_items=3, min_items=1)]


class String(Arn):
    pass


class ResourceName(BaseModel):
    __root__: Annotated[str, Field(max_length=255, min_length=1)]


class ServiceName(Arn):
    pass


class DefaultGatewayRouteRewrite(Enum):
    ENABLED = 'ENABLED'
    DISABLED = 'DISABLED'


class DeleteGatewayRouteInput(BaseModel):
    pass


class DeleteMeshInput(BaseModel):
    """
    <zonbook></zonbook><xhtml></xhtml>
    """

    pass


class DeleteRouteInput(BaseModel):
    """
    <zonbook></zonbook><xhtml></xhtml>
    """

    pass


class DeleteVirtualGatewayInput(BaseModel):
    pass


class DeleteVirtualNodeInput(BaseModel):
    """
    Deletes a virtual node input.
    """

    pass


class DeleteVirtualRouterInput(BaseModel):
    """
    <zonbook></zonbook><xhtml></xhtml>
    """

    pass


class DeleteVirtualServiceInput(BaseModel):
    """
    <zonbook></zonbook><xhtml></xhtml>
    """

    pass


class DescribeGatewayRouteInput(BaseModel):
    pass


class DescribeMeshInput(BaseModel):
    """
    <zonbook></zonbook><xhtml></xhtml>
    """

    pass


class DescribeRouteInput(BaseModel):
    """
    <zonbook></zonbook><xhtml></xhtml>
    """

    pass


class DescribeVirtualGatewayInput(BaseModel):
    pass


class DescribeVirtualNodeInput(BaseModel):
    """
    <zonbook></zonbook><xhtml></xhtml>
    """

    pass


class DescribeVirtualRouterInput(BaseModel):
    """
    <zonbook></zonbook><xhtml></xhtml>
    """

    pass


class DescribeVirtualServiceInput(BaseModel):
    """
    <zonbook></zonbook><xhtml></xhtml>
    """

    pass


class DnsResponseType(Enum):
    LOADBALANCER = 'LOADBALANCER'
    ENDPOINTS = 'ENDPOINTS'


class Hostname(Arn):
    pass


class DnsServiceDiscovery(BaseModel):
    """
    An object that represents the DNS service discovery information for your virtual node.
    """

    hostname: Hostname
    responseType: Optional[DnsResponseType] = None


class DurationUnit(Enum):
    s = 's'
    ms = 'ms'


class DurationValue(BaseModel):
    __root__: Annotated[int, Field(ge=0.0)]


class Duration(BaseModel):
    """
    An object that represents a duration of time.
    """

    unit: Optional[DurationUnit] = None
    value: Optional[DurationValue] = None


class EgressFilterType(Enum):
    ALLOW_ALL = 'ALLOW_ALL'
    DROP_ALL = 'DROP_ALL'


class ExactHostName(BaseModel):
    __root__: Annotated[str, Field(max_length=253, min_length=1)]


class FilePath(ResourceName):
    pass


class SuffixHostname(ExactHostName):
    pass


class GatewayRouteHostnameMatch(BaseModel):
    """
    An object representing the gateway route host name to match.
    """

    exact: Optional[ExactHostName] = None
    suffix: Optional[SuffixHostname] = None


class GatewayRouteHostnameRewrite(BaseModel):
    """
    An object representing the gateway route host name to rewrite.
    """

    defaultTargetHostname: Optional[DefaultGatewayRouteRewrite] = None


class Timestamp(BaseModel):
    __root__: datetime


class Long(BaseModel):
    __root__: int


class GatewayRouteStatusCode(Enum):
    ACTIVE = 'ACTIVE'
    INACTIVE = 'INACTIVE'
    DELETED = 'DELETED'


class GatewayRouteVirtualService(BaseModel):
    """
    An object that represents the virtual service that traffic is routed to.
    """

    virtualServiceName: ResourceName


class GatewayRouteTarget(BaseModel):
    """
    An object that represents a gateway route target.
    """

    virtualService: GatewayRouteVirtualService


class GrpcGatewayRouteRewrite(BaseModel):
    """
    An object that represents the gateway route to rewrite.
    """

    hostname: Optional[GatewayRouteHostnameRewrite] = None


class HeaderName(BaseModel):
    __root__: Annotated[str, Field(max_length=50, min_length=1)]


class HeaderMatch(ResourceName):
    pass


class MatchRange(BaseModel):
    """
    An object that represents the range of values to match on. The first character of the range is included in the range, though the last character is not. For example, if the range specified were 1-100, only values 1-99 would be matched.
    """

    end: Long
    start: Long


class MaxRetries(DurationValue):
    pass


class GrpcRetryPolicyEvent(Enum):
    cancelled = 'cancelled'
    deadline_exceeded = 'deadline-exceeded'
    internal = 'internal'
    resource_exhausted = 'resource-exhausted'
    unavailable = 'unavailable'


class GrpcTimeout(BaseModel):
    """
    An object that represents types of timeouts.
    """

    idle: Optional[Duration] = None
    perRequest: Optional[Duration] = None


class MethodName(HeaderName):
    pass


class GrpcRouteMetadataMatchMethod(BaseModel):
    """
    An object that represents the match method. Specify one of the match values.
    """

    exact: Optional[HeaderMatch] = None
    prefix: Optional[HeaderMatch] = None
    range: Optional[MatchRange] = None
    regex: Optional[HeaderMatch] = None
    suffix: Optional[HeaderMatch] = None


class GrpcRouteMetadata(BaseModel):
    """
    An object that represents the match metadata for the route.
    """

    invert: Optional[Boolean] = None
    match: Optional[GrpcRouteMetadataMatchMethod] = None
    name: HeaderName


class HeaderMatchMethod(GrpcRouteMetadataMatchMethod):
    """
    An object that represents the method and value to match with the header value sent in a request. Specify one match method.
    """

    pass


class HealthCheckIntervalMillis(BaseModel):
    __root__: Annotated[int, Field(ge=5000.0, le=300000.0)]


class HealthCheckThreshold(BaseModel):
    __root__: Annotated[int, Field(ge=2.0, le=10.0)]


class PortNumber(BaseModel):
    __root__: Annotated[int, Field(ge=1.0, le=65535.0)]


class PortProtocol(Enum):
    http = 'http'
    tcp = 'tcp'
    http2 = 'http2'
    grpc = 'grpc'


class HealthCheckTimeoutMillis(BaseModel):
    __root__: Annotated[int, Field(ge=2000.0, le=60000.0)]


class HealthCheckPolicy(BaseModel):
    """
    An object that represents the health check policy for a virtual node's listener.
    """

    healthyThreshold: HealthCheckThreshold
    intervalMillis: HealthCheckIntervalMillis
    path: Optional[String] = None
    port: Optional[PortNumber] = None
    protocol: PortProtocol
    timeoutMillis: HealthCheckTimeoutMillis
    unhealthyThreshold: HealthCheckThreshold


class HttpGatewayRouteHeader(BaseModel):
    """
    An object that represents the HTTP header in the gateway route.
    """

    invert: Optional[Boolean] = None
    match: Optional[HeaderMatchMethod] = None
    name: HeaderName


class HttpGatewayRouteHeaders(BaseModel):
    __root__: Annotated[List[HttpGatewayRouteHeader], Field(max_items=10, min_items=1)]


class HttpMethod(Enum):
    GET = 'GET'
    HEAD = 'HEAD'
    POST = 'POST'
    PUT = 'PUT'
    DELETE = 'DELETE'
    CONNECT = 'CONNECT'
    OPTIONS = 'OPTIONS'
    TRACE = 'TRACE'
    PATCH = 'PATCH'


class HttpPathExact(ResourceName):
    pass


class HttpGatewayRoutePathRewrite(BaseModel):
    """
    An object that represents the path to rewrite.
    """

    exact: Optional[HttpPathExact] = None


class HttpGatewayRoutePrefix(ResourceName):
    pass


class HttpGatewayRoutePrefixRewrite(BaseModel):
    """
    An object representing the beginning characters of the route to rewrite.
    """

    defaultPrefix: Optional[DefaultGatewayRouteRewrite] = None
    value: Optional[HttpGatewayRoutePrefix] = None


class HttpPathRegex(ResourceName):
    pass


class QueryParameterMatch(BaseModel):
    """
    An object representing the query parameter to match.
    """

    exact: Optional[String] = None


class QueryParameterName(Arn):
    pass


class HttpQueryParameter(BaseModel):
    """
    An object that represents the query parameter in the request.
    """

    match: Optional[QueryParameterMatch] = None
    name: QueryParameterName


class HttpRetryPolicyEvent(BaseModel):
    __root__: Annotated[str, Field(max_length=25, min_length=1)]


class HttpTimeout(GrpcTimeout):
    """
    An object that represents types of timeouts.
    """

    pass


class HttpRouteHeader(HttpGatewayRouteHeader):
    """
    An object that represents the HTTP header in the request.
    """

    pass


class HttpRouteHeaders(BaseModel):
    __root__: Annotated[List[HttpRouteHeader], Field(max_items=10, min_items=1)]


class HttpScheme(Enum):
    http = 'http'
    https = 'https'


class ListGatewayRoutesLimit(BaseModel):
    __root__: Annotated[int, Field(ge=1.0, le=100.0)]


class ListGatewayRoutesInput(BaseModel):
    pass


class ListMeshesLimit(ListGatewayRoutesLimit):
    pass


class ListMeshesInput(BaseModel):
    """
    <zonbook></zonbook><xhtml></xhtml>
    """

    pass


class ListRoutesLimit(ListGatewayRoutesLimit):
    pass


class ListRoutesInput(BaseModel):
    """
    <zonbook></zonbook><xhtml></xhtml>
    """

    pass


class TagsLimit(BaseModel):
    __root__: Annotated[int, Field(ge=1.0, le=50.0)]


class ListTagsForResourceInput(BaseModel):
    """
    <zonbook></zonbook><xhtml></xhtml>
    """

    pass


class ListVirtualGatewaysLimit(ListGatewayRoutesLimit):
    pass


class ListVirtualGatewaysInput(BaseModel):
    pass


class ListVirtualNodesLimit(ListGatewayRoutesLimit):
    pass


class ListVirtualNodesInput(BaseModel):
    """
    <zonbook></zonbook><xhtml></xhtml>
    """

    pass


class ListVirtualRoutersLimit(ListGatewayRoutesLimit):
    pass


class ListVirtualRoutersInput(BaseModel):
    """
    <zonbook></zonbook><xhtml></xhtml>
    """

    pass


class ListVirtualServicesLimit(ListGatewayRoutesLimit):
    pass


class ListVirtualServicesInput(BaseModel):
    """
    <zonbook></zonbook><xhtml></xhtml>
    """

    pass


class PortMapping(BaseModel):
    """
    An object that represents a port mapping.
    """

    port: PortNumber
    protocol: PortProtocol


class TcpTimeout(BaseModel):
    """
    An object that represents types of timeouts.
    """

    idle: Optional[Duration] = None


class ListenerTlsMode(Enum):
    STRICT = 'STRICT'
    PERMISSIVE = 'PERMISSIVE'
    DISABLED = 'DISABLED'


class ListenerTlsAcmCertificate(BaseModel):
    """
    An object that represents an AWS Certicate Manager (ACM) certificate.
    """

    certificateArn: Arn


class SdsSecretName(Arn):
    pass


class TlsValidationContextFileTrust(BaseModel):
    """
    An object that represents a Transport Layer Security (TLS) validation context trust for a local file.
    """

    certificateChain: FilePath


class TlsValidationContextSdsTrust(BaseModel):
    """
    An object that represents a Transport Layer Security (TLS) Secret Discovery Service validation context trust. The proxy must be configured with a local SDS provider via a Unix Domain Socket. See App Mesh <a href="https://docs.aws.amazon.com/app-mesh/latest/userguide/tls.html">TLS documentation</a> for more info.
    """

    secretName: SdsSecretName


class MaxConnections(BaseModel):
    __root__: Annotated[int, Field(ge=1.0)]


class MaxPendingRequests(MaxConnections):
    pass


class MaxRequests(MaxConnections):
    pass


class MeshRef(BaseModel):
    """
    An object that represents a service mesh returned by a list operation.
    """

    arn: Arn
    createdAt: Timestamp
    lastUpdatedAt: Timestamp
    meshName: ResourceName
    meshOwner: AccountId
    resourceOwner: AccountId
    version: Long


class OutlierDetectionMaxEjectionPercent(BaseModel):
    __root__: Annotated[int, Field(ge=0.0, le=100.0)]


class OutlierDetectionMaxServerErrors(MaxConnections):
    pass


class PercentInt(OutlierDetectionMaxEjectionPercent):
    pass


class RouteRef(BaseModel):
    """
    An object that represents a route returned by a list operation.
    """

    arn: Arn
    createdAt: Timestamp
    lastUpdatedAt: Timestamp
    meshName: ResourceName
    meshOwner: AccountId
    resourceOwner: AccountId
    routeName: ResourceName
    version: Long
    virtualRouterName: ResourceName


class SubjectAlternativeName(BaseModel):
    __root__: Annotated[str, Field(max_length=254, min_length=1)]


class SubjectAlternativeNameList(BaseModel):
    __root__: List[SubjectAlternativeName]


class SubjectAlternativeNameMatchers(BaseModel):
    """
    An object that represents the methods by which a subject alternative name on a peer Transport Layer Security (TLS) certificate can be matched.
    """

    exact: SubjectAlternativeNameList


class TagKeyList(BaseModel):
    __root__: Annotated[List[TagKey], Field(max_items=50, min_items=0)]


class TagValue(BaseModel):
    __root__: Annotated[str, Field(max_length=256, min_length=0)]


class TcpRetryPolicyEvent(Enum):
    connection_error = 'connection-error'


class TlsValidationContextAcmTrust(BaseModel):
    """
    An object that represents a Transport Layer Security (TLS) validation context trust for an Certificate Manager certificate.
    """

    certificateAuthorityArns: CertificateAuthorityArns


class UntagResourceInput(BaseModel):
    """
    <zonbook></zonbook><xhtml></xhtml>
    """

    tagKeys: TagKeyList


class VirtualGatewayFileAccessLog(BaseModel):
    """
    An object that represents an access log file.
    """

    path: FilePath


class VirtualGatewayAccessLog(BaseModel):
    """
    The access log configuration for a virtual gateway.
    """

    file: Optional[VirtualGatewayFileAccessLog] = None


class VirtualGatewayCertificateAuthorityArns(CertificateAuthorityArns):
    pass


class VirtualGatewayListenerTlsFileCertificate(BaseModel):
    """
    An object that represents a local file certificate. The certificate must meet specific requirements and you must have proxy authorization enabled. For more information, see <a href="https://docs.aws.amazon.com/app-mesh/latest/userguide/tls.html#virtual-node-tls-prerequisites">Transport Layer Security (TLS)</a>.
    """

    certificateChain: FilePath
    privateKey: FilePath


class VirtualGatewayGrpcConnectionPool(BaseModel):
    """
    An object that represents a type of connection pool.
    """

    maxRequests: MaxRequests


class VirtualGatewayHttpConnectionPool(BaseModel):
    """
    An object that represents a type of connection pool.
    """

    maxConnections: MaxConnections
    maxPendingRequests: Optional[MaxPendingRequests] = None


class VirtualGatewayHttp2ConnectionPool(VirtualGatewayGrpcConnectionPool):
    """
    An object that represents a type of connection pool.
    """

    pass


class VirtualGatewayConnectionPool(BaseModel):
    """
    <p>An object that represents the type of virtual gateway connection pool.</p> <p>Only one protocol is used at a time and should be the same protocol as the one chosen under port mapping.</p> <p>If not present the default value for <code>maxPendingRequests</code> is <code>2147483647</code>.</p>
    """

    grpc: Optional[VirtualGatewayGrpcConnectionPool] = None
    http: Optional[VirtualGatewayHttpConnectionPool] = None
    http2: Optional[VirtualGatewayHttp2ConnectionPool] = None


class VirtualGatewayHealthCheckIntervalMillis(HealthCheckIntervalMillis):
    pass


class VirtualGatewayHealthCheckThreshold(HealthCheckThreshold):
    pass


class VirtualGatewayPortProtocol(Enum):
    http = 'http'
    http2 = 'http2'
    grpc = 'grpc'


class VirtualGatewayHealthCheckTimeoutMillis(HealthCheckTimeoutMillis):
    pass


class VirtualGatewayHealthCheckPolicy(BaseModel):
    """
    An object that represents the health check policy for a virtual gateway's listener.
    """

    healthyThreshold: VirtualGatewayHealthCheckThreshold
    intervalMillis: VirtualGatewayHealthCheckIntervalMillis
    path: Optional[String] = None
    port: Optional[PortNumber] = None
    protocol: VirtualGatewayPortProtocol
    timeoutMillis: VirtualGatewayHealthCheckTimeoutMillis
    unhealthyThreshold: VirtualGatewayHealthCheckThreshold


class VirtualGatewayRef(BaseModel):
    """
    An object that represents a virtual gateway returned by a list operation.
    """

    arn: Arn
    createdAt: Timestamp
    lastUpdatedAt: Timestamp
    meshName: ResourceName
    meshOwner: AccountId
    resourceOwner: AccountId
    version: Long
    virtualGatewayName: ResourceName


class VirtualGatewayPortMapping(BaseModel):
    """
    An object that represents a port mapping.
    """

    port: PortNumber
    protocol: VirtualGatewayPortProtocol


class VirtualGatewayListenerTlsAcmCertificate(ListenerTlsAcmCertificate):
    """
    An object that represents an Certificate Manager certificate.
    """

    pass


class VirtualGatewaySdsSecretName(Arn):
    pass


class VirtualGatewayTlsValidationContextFileTrust(TlsValidationContextFileTrust):
    """
    An object that represents a Transport Layer Security (TLS) validation context trust for a local file.
    """

    pass


class VirtualGatewayTlsValidationContextSdsTrust(BaseModel):
    """
    An object that represents a virtual gateway's listener's Transport Layer Security (TLS) Secret Discovery Service validation context trust. The proxy must be configured with a local SDS provider via a Unix Domain Socket. See App Mesh <a href="https://docs.aws.amazon.com/app-mesh/latest/userguide/tls.html">TLS documentation</a> for more info.
    """

    secretName: VirtualGatewaySdsSecretName


class VirtualGatewayTlsValidationContextAcmTrust(BaseModel):
    """
    An object that represents a Transport Layer Security (TLS) validation context trust for an Certificate Manager certificate.
    """

    certificateAuthorityArns: VirtualGatewayCertificateAuthorityArns


class VirtualNodeGrpcConnectionPool(VirtualGatewayGrpcConnectionPool):
    """
    An object that represents a type of connection pool.
    """

    pass


class VirtualNodeHttpConnectionPool(VirtualGatewayHttpConnectionPool):
    """
    An object that represents a type of connection pool.
    """

    pass


class VirtualNodeHttp2ConnectionPool(VirtualGatewayGrpcConnectionPool):
    """
    An object that represents a type of connection pool.
    """

    pass


class VirtualNodeTcpConnectionPool(BaseModel):
    """
    An object that represents a type of connection pool.
    """

    maxConnections: MaxConnections


class VirtualNodeRef(BaseModel):
    """
    An object that represents a virtual node returned by a list operation.
    """

    arn: Arn
    createdAt: Timestamp
    lastUpdatedAt: Timestamp
    meshName: ResourceName
    meshOwner: AccountId
    resourceOwner: AccountId
    version: Long
    virtualNodeName: ResourceName


class VirtualNodeServiceProvider(BaseModel):
    """
    An object that represents a virtual node service provider.
    """

    virtualNodeName: ResourceName


class VirtualRouterRef(BaseModel):
    """
    An object that represents a virtual router returned by a list operation.
    """

    arn: Arn
    createdAt: Timestamp
    lastUpdatedAt: Timestamp
    meshName: ResourceName
    meshOwner: AccountId
    resourceOwner: AccountId
    version: Long
    virtualRouterName: ResourceName


class VirtualRouterListener(BaseModel):
    """
    An object that represents a virtual router listener.
    """

    portMapping: PortMapping


class VirtualRouterServiceProvider(BaseModel):
    """
    An object that represents a virtual node service provider.
    """

    virtualRouterName: ResourceName


class VirtualServiceRef(BaseModel):
    """
    An object that represents a virtual service returned by a list operation.
    """

    arn: Arn
    createdAt: Timestamp
    lastUpdatedAt: Timestamp
    meshName: ResourceName
    meshOwner: AccountId
    resourceOwner: AccountId
    version: Long
    virtualServiceName: ServiceName


class WeightedTarget(BaseModel):
    """
    An object that represents a target and its relative weight. Traffic is distributed across targets according to their relative weight. For example, a weighted target with a relative weight of 50 receives five times as much traffic as one with a relative weight of 10. The total weight for all targets combined must be less than or equal to 100.
    """

    virtualNode: ResourceName
    weight: PercentInt


class TagRef(BaseModel):
    """
    Optional metadata that you apply to a resource to assist with categorization and organization. Each tag consists of a key and an optional value, both of which you define. Tag keys can have a maximum character length of 128 characters, and tag values can have a maximum length of 256 characters.
    """

    key: TagKey
    value: TagValue


class EgressFilter(BaseModel):
    """
    An object that represents the egress filter rules for a service mesh.
    """

    type: EgressFilterType


class VirtualGatewayLogging(BaseModel):
    """
    An object that represents logging information.
    """

    accessLog: Optional[VirtualGatewayAccessLog] = None


class ServiceDiscovery(BaseModel):
    """
    An object that represents the service discovery information for a virtual node.
    """

    awsCloudMap: Optional[AwsCloudMapServiceDiscovery] = None
    dns: Optional[DnsServiceDiscovery] = None


class VirtualRouterListeners(BaseModel):
    __root__: Annotated[List[VirtualRouterListener], Field(max_items=1, min_items=1)]


class VirtualServiceProvider(BaseModel):
    """
    An object that represents the provider for a virtual service.
    """

    virtualNode: Optional[VirtualNodeServiceProvider] = None
    virtualRouter: Optional[VirtualRouterServiceProvider] = None


class FileAccessLog(VirtualGatewayFileAccessLog):
    """
    An object that represents an access log file.
    """

    pass


class AccessLog(BaseModel):
    """
    An object that represents the access logging information for a virtual node.
    """

    file: Optional[FileAccessLog] = None


class PortSet(BaseModel):
    __root__: List[PortNumber]


class ListenerTlsFileCertificate(VirtualGatewayListenerTlsFileCertificate):
    """
    An object that represents a local file certificate. The certificate must meet specific requirements and you must have proxy authorization enabled. For more information, see <a href="https://docs.aws.amazon.com/app-mesh/latest/userguide/tls.html#virtual-node-tls-prerequisites">Transport Layer Security (TLS)</a>.
    """

    pass


class ListenerTlsSdsCertificate(TlsValidationContextSdsTrust):
    """
    An object that represents the listener's Secret Discovery Service certificate. The proxy must be configured with a local SDS provider via a Unix Domain Socket. See App Mesh <a href="https://docs.aws.amazon.com/app-mesh/latest/userguide/tls.html">TLS documentation</a> for more info.
    """

    pass


class TagList(BaseModel):
    __root__: Annotated[List[TagRef], Field(max_items=50, min_items=0)]


class MeshSpec(BaseModel):
    """
    An object that represents the specification of a service mesh.
    """

    egressFilter: Optional[EgressFilter] = None


class CreateMeshInput(BaseModel):
    """
    <zonbook></zonbook><xhtml></xhtml>
    """

    clientToken: Optional[String] = None
    meshName: ResourceName
    spec: Optional[MeshSpec] = None
    tags: Optional[TagList] = None


class VirtualRouterSpec(BaseModel):
    """
    An object that represents the specification of a virtual router.
    """

    listeners: Optional[VirtualRouterListeners] = None


class CreateVirtualRouterInput(BaseModel):
    """
    <zonbook></zonbook><xhtml></xhtml>
    """

    clientToken: Optional[String] = None
    spec: VirtualRouterSpec
    tags: Optional[TagList] = None
    virtualRouterName: ResourceName


class VirtualServiceSpec(BaseModel):
    """
    An object that represents the specification of a virtual service.
    """

    provider: Optional[VirtualServiceProvider] = None


class CreateVirtualServiceInput(BaseModel):
    """
    <zonbook></zonbook><xhtml></xhtml>
    """

    clientToken: Optional[String] = None
    spec: VirtualServiceSpec
    tags: Optional[TagList] = None
    virtualServiceName: ServiceName


class ResourceMetadata(BaseModel):
    """
    An object that represents metadata for a resource.
    """

    arn: Arn
    createdAt: Timestamp
    lastUpdatedAt: Timestamp
    meshOwner: AccountId
    resourceOwner: AccountId
    uid: String
    version: Long


class GatewayRouteStatus(BaseModel):
    """
    An object that represents the current status of a gateway route.
    """

    status: GatewayRouteStatusCode


class GatewayRouteRef(BaseModel):
    """
    An object that represents a gateway route returned by a list operation.
    """

    arn: Arn
    createdAt: Timestamp
    gatewayRouteName: ResourceName
    lastUpdatedAt: Timestamp
    meshName: ResourceName
    meshOwner: AccountId
    resourceOwner: AccountId
    version: Long
    virtualGatewayName: ResourceName


class GatewayRouteList(BaseModel):
    __root__: List[GatewayRouteRef]


class GrpcGatewayRouteAction(BaseModel):
    """
    An object that represents the action to take if a match is determined.
    """

    rewrite: Optional[GrpcGatewayRouteRewrite] = None
    target: GatewayRouteTarget


class GrpcMetadataMatchMethod(GrpcRouteMetadataMatchMethod):
    """
    An object representing the method header to be matched.
    """

    pass


class GrpcGatewayRouteMetadata(BaseModel):
    """
    An object representing the metadata of the gateway route.
    """

    invert: Optional[Boolean] = None
    match: Optional[GrpcMetadataMatchMethod] = None
    name: HeaderName


class GrpcRetryPolicyEvents(BaseModel):
    __root__: Annotated[List[GrpcRetryPolicyEvent], Field(max_items=5, min_items=1)]


class HttpRetryPolicyEvents(BaseModel):
    __root__: Annotated[List[HttpRetryPolicyEvent], Field(max_items=25, min_items=1)]


class TcpRetryPolicyEvents(BaseModel):
    __root__: Annotated[List[TcpRetryPolicyEvent], Field(max_items=1, min_items=1)]


class GrpcRetryPolicy(BaseModel):
    """
    An object that represents a retry policy. Specify at least one value for at least one of the types of <code>RetryEvents</code>, a value for <code>maxRetries</code>, and a value for <code>perRetryTimeout</code>. Both <code>server-error</code> and <code>gateway-error</code> under <code>httpRetryEvents</code> include the Envoy <code>reset</code> policy. For more information on the <code>reset</code> policy, see the <a href="https://www.envoyproxy.io/docs/envoy/latest/configuration/http/http_filters/router_filter#x-envoy-retry-on">Envoy documentation</a>.
    """

    grpcRetryEvents: Optional[GrpcRetryPolicyEvents] = None
    httpRetryEvents: Optional[HttpRetryPolicyEvents] = None
    maxRetries: MaxRetries
    perRetryTimeout: Duration
    tcpRetryEvents: Optional[TcpRetryPolicyEvents] = None


class WeightedTargets(BaseModel):
    __root__: Annotated[List[WeightedTarget], Field(max_items=10, min_items=1)]


class GrpcRouteMetadataList(BaseModel):
    __root__: Annotated[List[GrpcRouteMetadata], Field(max_items=10, min_items=1)]


class HttpGatewayRouteRewrite(BaseModel):
    """
    An object representing the gateway route to rewrite.
    """

    hostname: Optional[GatewayRouteHostnameRewrite] = None
    path: Optional[HttpGatewayRoutePathRewrite] = None
    prefix: Optional[HttpGatewayRoutePrefixRewrite] = None


class HttpPathMatch(BaseModel):
    """
    An object representing the path to match in the request.
    """

    exact: Optional[HttpPathExact] = None
    regex: Optional[HttpPathRegex] = None


class HttpQueryParameters(BaseModel):
    __root__: Annotated[List[HttpQueryParameter], Field(max_items=10, min_items=1)]


class HttpRetryPolicy(BaseModel):
    """
    An object that represents a retry policy. Specify at least one value for at least one of the types of <code>RetryEvents</code>, a value for <code>maxRetries</code>, and a value for <code>perRetryTimeout</code>. Both <code>server-error</code> and <code>gateway-error</code> under <code>httpRetryEvents</code> include the Envoy <code>reset</code> policy. For more information on the <code>reset</code> policy, see the <a href="https://www.envoyproxy.io/docs/envoy/latest/configuration/http/http_filters/router_filter#x-envoy-retry-on">Envoy documentation</a>.
    """

    httpRetryEvents: Optional[HttpRetryPolicyEvents] = None
    maxRetries: MaxRetries
    perRetryTimeout: Duration
    tcpRetryEvents: Optional[TcpRetryPolicyEvents] = None


class HttpRouteAction(BaseModel):
    """
    An object that represents the action to take if a match is determined.
    """

    weightedTargets: WeightedTargets


class HttpRouteMatch(BaseModel):
    """
    An object that represents the requirements for a route to match HTTP requests for a virtual router.
    """

    headers: Optional[HttpRouteHeaders] = None
    method: Optional[HttpMethod] = None
    path: Optional[HttpPathMatch] = None
    prefix: Optional[String] = None
    queryParameters: Optional[HttpQueryParameters] = None
    scheme: Optional[HttpScheme] = None


class MeshList(BaseModel):
    __root__: List[MeshRef]


class RouteList(BaseModel):
    __root__: List[RouteRef]


class VirtualGatewayList(BaseModel):
    __root__: List[VirtualGatewayRef]


class VirtualNodeList(BaseModel):
    __root__: List[VirtualNodeRef]


class VirtualRouterList(BaseModel):
    __root__: List[VirtualRouterRef]


class VirtualServiceList(BaseModel):
    __root__: List[VirtualServiceRef]


class VirtualNodeConnectionPool(BaseModel):
    """
    <p>An object that represents the type of virtual node connection pool.</p> <p>Only one protocol is used at a time and should be the same protocol as the one chosen under port mapping.</p> <p>If not present the default value for <code>maxPendingRequests</code> is <code>2147483647</code>.</p> <p/>
    """

    grpc: Optional[VirtualNodeGrpcConnectionPool] = None
    http: Optional[VirtualNodeHttpConnectionPool] = None
    http2: Optional[VirtualNodeHttp2ConnectionPool] = None
    tcp: Optional[VirtualNodeTcpConnectionPool] = None


class OutlierDetection(BaseModel):
    """
    An object that represents the outlier detection for a virtual node's listener.
    """

    baseEjectionDuration: Duration
    interval: Duration
    maxEjectionPercent: OutlierDetectionMaxEjectionPercent
    maxServerErrors: OutlierDetectionMaxServerErrors


class ListenerTimeout(BaseModel):
    """
    An object that represents timeouts for different protocols.
    """

    grpc: Optional[GrpcTimeout] = None
    http: Optional[HttpTimeout] = None
    http2: Optional[HttpTimeout] = None
    tcp: Optional[TcpTimeout] = None


class ListenerTlsCertificate(BaseModel):
    """
    An object that represents a listener's Transport Layer Security (TLS) certificate.
    """

    acm: Optional[ListenerTlsAcmCertificate] = None
    file: Optional[ListenerTlsFileCertificate] = None
    sds: Optional[ListenerTlsSdsCertificate] = None


class SubjectAlternativeNames(BaseModel):
    """
    An object that represents the subject alternative names secured by the certificate.
    """

    match: SubjectAlternativeNameMatchers


class ListenerTlsValidationContextTrust(BaseModel):
    """
    An object that represents a listener's Transport Layer Security (TLS) validation context trust.
    """

    file: Optional[TlsValidationContextFileTrust] = None
    sds: Optional[TlsValidationContextSdsTrust] = None


class MeshStatus(BaseModel):
    """
    An object that represents the status of a service mesh.
    """

    status: Optional[GatewayRouteStatusCode] = None


class RouteStatus(GatewayRouteStatus):
    """
    An object that represents the current status of a route.
    """

    pass


class TagResourceInput(BaseModel):
    """
    <zonbook></zonbook><xhtml></xhtml>
    """

    tags: TagList


class TcpRouteAction(HttpRouteAction):
    """
    An object that represents the action to take if a match is determined.
    """

    pass


class TlsValidationContextTrust(BaseModel):
    """
    An object that represents a Transport Layer Security (TLS) validation context trust.
    """

    acm: Optional[TlsValidationContextAcmTrust] = None
    file: Optional[TlsValidationContextFileTrust] = None
    sds: Optional[TlsValidationContextSdsTrust] = None


class UpdateMeshInput(BaseModel):
    """
    <zonbook></zonbook><xhtml></xhtml>
    """

    clientToken: Optional[String] = None
    spec: Optional[MeshSpec] = None


class UpdateVirtualRouterInput(BaseModel):
    """
    <zonbook></zonbook><xhtml></xhtml>
    """

    clientToken: Optional[String] = None
    spec: VirtualRouterSpec


class UpdateVirtualServiceInput(BaseModel):
    """
    <zonbook></zonbook><xhtml></xhtml>
    """

    clientToken: Optional[String] = None
    spec: VirtualServiceSpec


class VirtualGatewayListenerTlsSdsCertificate(
    VirtualGatewayTlsValidationContextSdsTrust
):
    """
    An object that represents the virtual gateway's listener's Secret Discovery Service certificate.The proxy must be configured with a local SDS provider via a Unix Domain Socket. See App Mesh<a href="https://docs.aws.amazon.com/app-mesh/latest/userguide/tls.html">TLS documentation</a> for more info.
    """

    pass


class VirtualGatewayStatus(GatewayRouteStatus):
    """
    An object that represents the status of the mesh resource.
    """

    pass


class VirtualGatewayListenerTlsCertificate(BaseModel):
    """
    An object that represents a listener's Transport Layer Security (TLS) certificate.
    """

    acm: Optional[VirtualGatewayListenerTlsAcmCertificate] = None
    file: Optional[VirtualGatewayListenerTlsFileCertificate] = None
    sds: Optional[VirtualGatewayListenerTlsSdsCertificate] = None


class VirtualGatewayListenerTlsValidationContextTrust(BaseModel):
    """
    An object that represents a virtual gateway's listener's Transport Layer Security (TLS) validation context trust.
    """

    file: Optional[VirtualGatewayTlsValidationContextFileTrust] = None
    sds: Optional[VirtualGatewayTlsValidationContextSdsTrust] = None


class VirtualGatewayTlsValidationContextTrust(BaseModel):
    """
    An object that represents a Transport Layer Security (TLS) validation context trust.
    """

    acm: Optional[VirtualGatewayTlsValidationContextAcmTrust] = None
    file: Optional[VirtualGatewayTlsValidationContextFileTrust] = None
    sds: Optional[VirtualGatewayTlsValidationContextSdsTrust] = None


class VirtualNodeStatus(GatewayRouteStatus):
    """
    An object that represents the current status of the virtual node.
    """

    pass


class VirtualRouterStatus(GatewayRouteStatus):
    """
    An object that represents the status of a virtual router.
    """

    pass


class VirtualServiceStatus(GatewayRouteStatus):
    """
    An object that represents the status of a virtual service.
    """

    pass


class HttpRoute(BaseModel):
    """
    An object that represents an HTTP or HTTP/2 route type.
    """

    action: HttpRouteAction
    match: HttpRouteMatch
    retryPolicy: Optional[HttpRetryPolicy] = None
    timeout: Optional[HttpTimeout] = None


class TcpRoute(BaseModel):
    """
    An object that represents a TCP route type.
    """

    action: TcpRouteAction
    timeout: Optional[TcpTimeout] = None


class Logging(BaseModel):
    """
    An object that represents the logging information for a virtual node.
    """

    accessLog: Optional[AccessLog] = None


class ListGatewayRoutesOutput(BaseModel):
    gatewayRoutes: GatewayRouteList
    nextToken: Optional[String] = None


class ListMeshesOutput(BaseModel):
    """
    <zonbook></zonbook><xhtml></xhtml>
    """

    meshes: MeshList
    nextToken: Optional[String] = None


class ListRoutesOutput(BaseModel):
    """
    <zonbook></zonbook><xhtml></xhtml>
    """

    nextToken: Optional[String] = None
    routes: RouteList


class ListTagsForResourceOutput(BaseModel):
    """
    <zonbook></zonbook><xhtml></xhtml>
    """

    nextToken: Optional[String] = None
    tags: TagList


class ListVirtualGatewaysOutput(BaseModel):
    nextToken: Optional[String] = None
    virtualGateways: VirtualGatewayList


class ListVirtualNodesOutput(BaseModel):
    """
    <zonbook></zonbook><xhtml></xhtml>
    """

    nextToken: Optional[String] = None
    virtualNodes: VirtualNodeList


class ListVirtualRoutersOutput(BaseModel):
    """
    <zonbook></zonbook><xhtml></xhtml>
    """

    nextToken: Optional[String] = None
    virtualRouters: VirtualRouterList


class ListVirtualServicesOutput(BaseModel):
    """
    <zonbook></zonbook><xhtml></xhtml>
    """

    nextToken: Optional[String] = None
    virtualServices: VirtualServiceList


class ClientTlsCertificate(BaseModel):
    """
    An object that represents the client's certificate.
    """

    file: Optional[ListenerTlsFileCertificate] = None
    sds: Optional[ListenerTlsSdsCertificate] = None


class TlsValidationContext(BaseModel):
    """
    An object that represents how the proxy will validate its peer during Transport Layer Security (TLS) negotiation.
    """

    subjectAlternativeNames: Optional[SubjectAlternativeNames] = None
    trust: TlsValidationContextTrust


class MeshData(BaseModel):
    """
    An object that represents a service mesh returned by a describe operation.
    """

    meshName: ResourceName
    metadata: ResourceMetadata
    spec: MeshSpec
    status: MeshStatus


class VirtualRouterData(BaseModel):
    """
    An object that represents a virtual router returned by a describe operation.
    """

    meshName: ResourceName
    metadata: ResourceMetadata
    spec: VirtualRouterSpec
    status: VirtualRouterStatus
    virtualRouterName: ResourceName


class VirtualServiceData(BaseModel):
    """
    An object that represents a virtual service returned by a describe operation.
    """

    meshName: ResourceName
    metadata: ResourceMetadata
    spec: VirtualServiceSpec
    status: VirtualServiceStatus
    virtualServiceName: ServiceName


class GrpcGatewayRouteMetadataList(BaseModel):
    __root__: Annotated[
        List[GrpcGatewayRouteMetadata], Field(max_items=10, min_items=1)
    ]


class GrpcRouteAction(HttpRouteAction):
    """
    An object that represents the action to take if a match is determined.
    """

    pass


class GrpcRouteMatch(BaseModel):
    """
    An object that represents the criteria for determining a request match.
    """

    metadata: Optional[GrpcRouteMetadataList] = None
    methodName: Optional[MethodName] = None
    serviceName: Optional[ServiceName] = None


class HttpGatewayRouteAction(BaseModel):
    """
    An object that represents the action to take if a match is determined.
    """

    rewrite: Optional[HttpGatewayRouteRewrite] = None
    target: GatewayRouteTarget


class HttpGatewayRouteMatch(BaseModel):
    """
    An object that represents the criteria for determining a request match.
    """

    headers: Optional[HttpGatewayRouteHeaders] = None
    hostname: Optional[GatewayRouteHostnameMatch] = None
    method: Optional[HttpMethod] = None
    path: Optional[HttpPathMatch] = None
    prefix: Optional[String] = None
    queryParameters: Optional[HttpQueryParameters] = None


class ListenerTlsValidationContext(BaseModel):
    """
    An object that represents a listener's Transport Layer Security (TLS) validation context.
    """

    subjectAlternativeNames: Optional[SubjectAlternativeNames] = None
    trust: ListenerTlsValidationContextTrust


class VirtualGatewayClientTlsCertificate(BaseModel):
    """
    An object that represents the virtual gateway's client's Transport Layer Security (TLS) certificate.
    """

    file: Optional[VirtualGatewayListenerTlsFileCertificate] = None
    sds: Optional[VirtualGatewayListenerTlsSdsCertificate] = None


class VirtualGatewayTlsValidationContext(BaseModel):
    """
    An object that represents a Transport Layer Security (TLS) validation context.
    """

    subjectAlternativeNames: Optional[SubjectAlternativeNames] = None
    trust: VirtualGatewayTlsValidationContextTrust


class VirtualGatewayListenerTlsValidationContext(BaseModel):
    """
    An object that represents a virtual gateway's listener's Transport Layer Security (TLS) validation context.
    """

    subjectAlternativeNames: Optional[SubjectAlternativeNames] = None
    trust: VirtualGatewayListenerTlsValidationContextTrust


class HttpGatewayRoute(BaseModel):
    """
    An object that represents an HTTP gateway route.
    """

    action: HttpGatewayRouteAction
    match: HttpGatewayRouteMatch


class CreateMeshOutput(BaseModel):
    """
    <zonbook></zonbook><xhtml></xhtml>
    """

    mesh: MeshData


class GrpcRoute(BaseModel):
    """
    An object that represents a gRPC route type.
    """

    action: GrpcRouteAction
    match: GrpcRouteMatch
    retryPolicy: Optional[GrpcRetryPolicy] = None
    timeout: Optional[GrpcTimeout] = None


class CreateVirtualRouterOutput(BaseModel):
    """
    <zonbook></zonbook><xhtml></xhtml>
    """

    virtualRouter: VirtualRouterData


class CreateVirtualServiceOutput(BaseModel):
    """
    <zonbook></zonbook><xhtml></xhtml>
    """

    virtualService: VirtualServiceData


class DeleteMeshOutput(CreateMeshOutput):
    """
    <zonbook></zonbook><xhtml></xhtml>
    """

    pass


class DeleteVirtualRouterOutput(CreateVirtualRouterOutput):
    """
    <zonbook></zonbook><xhtml></xhtml>
    """

    pass


class DeleteVirtualServiceOutput(CreateVirtualServiceOutput):
    """
    <zonbook></zonbook><xhtml></xhtml>
    """

    pass


class DescribeMeshOutput(CreateMeshOutput):
    """
    <zonbook></zonbook><xhtml></xhtml>
    """

    pass


class DescribeVirtualRouterOutput(CreateVirtualRouterOutput):
    """
    <zonbook></zonbook><xhtml></xhtml>
    """

    pass


class DescribeVirtualServiceOutput(CreateVirtualServiceOutput):
    """
    <zonbook></zonbook><xhtml></xhtml>
    """

    pass


class UpdateMeshOutput(CreateMeshOutput):
    """
    <zonbook></zonbook><xhtml></xhtml>
    """

    pass


class UpdateVirtualRouterOutput(CreateVirtualRouterOutput):
    """
    <zonbook></zonbook><xhtml></xhtml>
    """

    pass


class UpdateVirtualServiceOutput(CreateVirtualServiceOutput):
    """
    <zonbook></zonbook><xhtml></xhtml>
    """

    pass


class ClientPolicyTls(BaseModel):
    """
    A reference to an object that represents a Transport Layer Security (TLS) client policy.
    """

    certificate: Optional[ClientTlsCertificate] = None
    enforce: Optional[Boolean] = None
    ports: Optional[PortSet] = None
    validation: TlsValidationContext


class RouteSpec(BaseModel):
    """
    An object that represents a route specification. Specify one route type.
    """

    grpcRoute: Optional[GrpcRoute] = None
    http2Route: Optional[HttpRoute] = None
    httpRoute: Optional[HttpRoute] = None
    priority: Optional[RoutePriority] = None
    tcpRoute: Optional[TcpRoute] = None


class CreateRouteInput(BaseModel):
    """
    <zonbook></zonbook><xhtml></xhtml>
    """

    clientToken: Optional[String] = None
    routeName: ResourceName
    spec: RouteSpec
    tags: Optional[TagList] = None


class RouteData(BaseModel):
    """
    An object that represents a route returned by a describe operation.
    """

    meshName: ResourceName
    metadata: ResourceMetadata
    routeName: ResourceName
    spec: RouteSpec
    status: RouteStatus
    virtualRouterName: ResourceName


class GrpcGatewayRouteMatch(BaseModel):
    """
    An object that represents the criteria for determining a request match.
    """

    hostname: Optional[GatewayRouteHostnameMatch] = None
    metadata: Optional[GrpcGatewayRouteMetadataList] = None
    serviceName: Optional[ServiceName] = None


class ListenerTls(BaseModel):
    """
    An object that represents the Transport Layer Security (TLS) properties for a listener.
    """

    certificate: ListenerTlsCertificate
    mode: ListenerTlsMode
    validation: Optional[ListenerTlsValidationContext] = None


class Listener(BaseModel):
    """
    An object that represents a listener for a virtual node.
    """

    connectionPool: Optional[VirtualNodeConnectionPool] = None
    healthCheck: Optional[HealthCheckPolicy] = None
    outlierDetection: Optional[OutlierDetection] = None
    portMapping: PortMapping
    timeout: Optional[ListenerTimeout] = None
    tls: Optional[ListenerTls] = None


class UpdateRouteInput(BaseModel):
    """
    <zonbook></zonbook><xhtml></xhtml>
    """

    clientToken: Optional[String] = None
    spec: RouteSpec


class VirtualGatewayClientPolicyTls(BaseModel):
    """
    An object that represents a Transport Layer Security (TLS) client policy.
    """

    certificate: Optional[VirtualGatewayClientTlsCertificate] = None
    enforce: Optional[Boolean] = None
    ports: Optional[PortSet] = None
    validation: VirtualGatewayTlsValidationContext


class VirtualGatewayListenerTls(BaseModel):
    """
    An object that represents the Transport Layer Security (TLS) properties for a listener.
    """

    certificate: VirtualGatewayListenerTlsCertificate
    mode: ListenerTlsMode
    validation: Optional[VirtualGatewayListenerTlsValidationContext] = None


class VirtualGatewayListener(BaseModel):
    """
    An object that represents a listener for a virtual gateway.
    """

    connectionPool: Optional[VirtualGatewayConnectionPool] = None
    healthCheck: Optional[VirtualGatewayHealthCheckPolicy] = None
    portMapping: VirtualGatewayPortMapping
    tls: Optional[VirtualGatewayListenerTls] = None


class GrpcGatewayRoute(BaseModel):
    """
    An object that represents a gRPC gateway route.
    """

    action: GrpcGatewayRouteAction
    match: GrpcGatewayRouteMatch


class CreateRouteOutput(BaseModel):
    """
    <zonbook></zonbook><xhtml></xhtml>
    """

    route: RouteData


class VirtualGatewayListeners(BaseModel):
    __root__: Annotated[List[VirtualGatewayListener], Field(max_items=1, min_items=0)]


class Listeners(BaseModel):
    __root__: Annotated[List[Listener], Field(max_items=1, min_items=0)]


class DeleteRouteOutput(CreateRouteOutput):
    """
    <zonbook></zonbook><xhtml></xhtml>
    """

    pass


class DescribeRouteOutput(CreateRouteOutput):
    """
    <zonbook></zonbook><xhtml></xhtml>
    """

    pass


class UpdateRouteOutput(CreateRouteOutput):
    """
    <zonbook></zonbook><xhtml></xhtml>
    """

    pass


class ClientPolicy(BaseModel):
    """
    An object that represents a client policy.
    """

    tls: Optional[ClientPolicyTls] = None


class GatewayRouteSpec(BaseModel):
    """
    An object that represents a gateway route specification. Specify one gateway route type.
    """

    grpcRoute: Optional[GrpcGatewayRoute] = None
    http2Route: Optional[HttpGatewayRoute] = None
    httpRoute: Optional[HttpGatewayRoute] = None
    priority: Optional[GatewayRoutePriority] = None


class CreateGatewayRouteInput(BaseModel):
    clientToken: Optional[String] = None
    gatewayRouteName: ResourceName
    spec: GatewayRouteSpec
    tags: Optional[TagList] = None


class GatewayRouteData(BaseModel):
    """
    An object that represents a gateway route returned by a describe operation.
    """

    gatewayRouteName: ResourceName
    meshName: ResourceName
    metadata: ResourceMetadata
    spec: GatewayRouteSpec
    status: GatewayRouteStatus
    virtualGatewayName: ResourceName


class UpdateGatewayRouteInput(BaseModel):
    clientToken: Optional[String] = None
    spec: GatewayRouteSpec


class VirtualGatewayClientPolicy(BaseModel):
    """
    An object that represents a client policy.
    """

    tls: Optional[VirtualGatewayClientPolicyTls] = None


class CreateGatewayRouteOutput(BaseModel):
    gatewayRoute: GatewayRouteData


class VirtualGatewayBackendDefaults(BaseModel):
    """
    An object that represents the default properties for a backend.
    """

    clientPolicy: Optional[VirtualGatewayClientPolicy] = None


class BackendDefaults(BaseModel):
    """
    An object that represents the default properties for a backend.
    """

    clientPolicy: Optional[ClientPolicy] = None


class DeleteGatewayRouteOutput(CreateGatewayRouteOutput):
    pass


class DescribeGatewayRouteOutput(CreateGatewayRouteOutput):
    pass


class UpdateGatewayRouteOutput(CreateGatewayRouteOutput):
    pass


class VirtualServiceBackend(BaseModel):
    """
    An object that represents a virtual service backend for a virtual node.
    """

    clientPolicy: Optional[ClientPolicy] = None
    virtualServiceName: ServiceName


class Backend(BaseModel):
    """
    An object that represents the backends that a virtual node is expected to send outbound traffic to.
    """

    virtualService: Optional[VirtualServiceBackend] = None


class VirtualGatewaySpec(BaseModel):
    """
    An object that represents the specification of a service mesh resource.
    """

    backendDefaults: Optional[VirtualGatewayBackendDefaults] = None
    listeners: VirtualGatewayListeners
    logging: Optional[VirtualGatewayLogging] = None


class CreateVirtualGatewayInput(BaseModel):
    clientToken: Optional[String] = None
    spec: VirtualGatewaySpec
    tags: Optional[TagList] = None
    virtualGatewayName: ResourceName


class VirtualGatewayData(BaseModel):
    """
    An object that represents a virtual gateway returned by a describe operation.
    """

    meshName: ResourceName
    metadata: ResourceMetadata
    spec: VirtualGatewaySpec
    status: VirtualGatewayStatus
    virtualGatewayName: ResourceName


class UpdateVirtualGatewayInput(BaseModel):
    clientToken: Optional[String] = None
    spec: VirtualGatewaySpec


class CreateVirtualGatewayOutput(BaseModel):
    virtualGateway: VirtualGatewayData


class Backends(BaseModel):
    __root__: List[Backend]


class DeleteVirtualGatewayOutput(CreateVirtualGatewayOutput):
    pass


class DescribeVirtualGatewayOutput(CreateVirtualGatewayOutput):
    pass


class UpdateVirtualGatewayOutput(CreateVirtualGatewayOutput):
    pass


class VirtualNodeSpec(BaseModel):
    """
    An object that represents the specification of a virtual node.
    """

    backendDefaults: Optional[BackendDefaults] = None
    backends: Optional[Backends] = None
    listeners: Optional[Listeners] = None
    logging: Optional[Logging] = None
    serviceDiscovery: Optional[ServiceDiscovery] = None


class CreateVirtualNodeInput(BaseModel):
    """
    <zonbook></zonbook><xhtml></xhtml>
    """

    clientToken: Optional[String] = None
    spec: VirtualNodeSpec
    tags: Optional[TagList] = None
    virtualNodeName: ResourceName


class VirtualNodeData(BaseModel):
    """
    An object that represents a virtual node returned by a describe operation.
    """

    meshName: ResourceName
    metadata: ResourceMetadata
    spec: VirtualNodeSpec
    status: VirtualNodeStatus
    virtualNodeName: ResourceName


class UpdateVirtualNodeInput(BaseModel):
    """
    <zonbook></zonbook><xhtml></xhtml>
    """

    clientToken: Optional[String] = None
    spec: VirtualNodeSpec


class CreateVirtualNodeOutput(BaseModel):
    """
    <zonbook></zonbook><xhtml></xhtml>
    """

    virtualNode: VirtualNodeData


class DeleteVirtualNodeOutput(CreateVirtualNodeOutput):
    """
    <zonbook></zonbook><xhtml></xhtml>
    """

    pass


class DescribeVirtualNodeOutput(CreateVirtualNodeOutput):
    """
    <zonbook></zonbook><xhtml></xhtml>
    """

    pass


class UpdateVirtualNodeOutput(CreateVirtualNodeOutput):
    """
    <zonbook></zonbook><xhtml></xhtml>
    """

    pass
