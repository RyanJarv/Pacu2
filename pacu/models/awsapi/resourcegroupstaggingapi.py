# generated by datamodel-codegen:
#   filename:  openapi.yaml
#   timestamp: 2021-12-31T02:54:49+00:00

from __future__ import annotations

from enum import Enum
from typing import Annotated, Any, List, Optional

from pydantic import BaseModel, Extra, Field


class DescribeReportCreationInput(BaseModel):
    pass


class ConstraintViolationException(BaseModel):
    __root__: Any


class InternalServiceException(ConstraintViolationException):
    pass


class InvalidParameterException(ConstraintViolationException):
    pass


class ThrottledException(ConstraintViolationException):
    pass


class PaginationTokenExpiredException(ConstraintViolationException):
    pass


class StartReportCreationOutput(BaseModel):
    pass


class ConcurrentModificationException(ConstraintViolationException):
    pass


class AmazonResourceType(BaseModel):
    __root__: Annotated[str, Field(max_length=256, min_length=0, regex='[\\s\\S]*')]


class ComplianceStatus(BaseModel):
    __root__: bool


class Status(BaseModel):
    __root__: str


class S3Location(Status):
    pass


class ErrorMessage(Status):
    pass


class ErrorCode(Enum):
    InternalServiceException = 'InternalServiceException'
    InvalidParameterException = 'InvalidParameterException'


class ExcludeCompliantResources(ComplianceStatus):
    pass


class FailedResourcesMap(BaseModel):
    pass

    class Config:
        extra = Extra.allow


class StatusCode(BaseModel):
    __root__: int


class ResourceTypeFilterList(BaseModel):
    __root__: List[AmazonResourceType]


class MaxResultsGetComplianceSummary(BaseModel):
    __root__: Annotated[int, Field(ge=1.0, le=1000.0)]


class PaginationToken(BaseModel):
    __root__: Annotated[str, Field(max_length=2048, min_length=0, regex='[\\s\\S]*')]


class ResourcesPerPage(StatusCode):
    pass


class TagsPerPage(StatusCode):
    pass


class IncludeComplianceDetails(ComplianceStatus):
    pass


class TagKey(BaseModel):
    __root__: Annotated[str, Field(max_length=128, min_length=1, regex='[\\s\\S]*')]


class GroupByAttribute(Enum):
    TARGET_ID = 'TARGET_ID'
    REGION = 'REGION'
    RESOURCE_TYPE = 'RESOURCE_TYPE'


class LastUpdated(Status):
    pass


class NonCompliantResources(StatusCode):
    pass


class Region(BaseModel):
    __root__: Annotated[str, Field(max_length=256, min_length=1, regex='[\\s\\S]*')]


class ResourceARN(BaseModel):
    __root__: Annotated[str, Field(max_length=1011, min_length=1, regex='[\\s\\S]*')]


class ResourceARNListForTagUntag(BaseModel):
    __root__: Annotated[List[ResourceARN], Field(max_items=20, min_items=1)]


class S3Bucket(BaseModel):
    __root__: Annotated[str, Field(max_length=63, min_length=3, regex='[a-z0-9.-]*')]


class TargetId(BaseModel):
    __root__: Annotated[str, Field(max_length=68, min_length=6, regex='[a-zA-Z0-9-]*')]


class TargetIdType(Enum):
    ACCOUNT = 'ACCOUNT'
    OU = 'OU'
    ROOT = 'ROOT'


class Summary(BaseModel):
    """
    A count of noncompliant resources.
    """

    LastUpdated: Optional[LastUpdated] = None
    TargetId: Optional[TargetId] = None
    TargetIdType: Optional[TargetIdType] = None
    Region: Optional[Region] = None
    ResourceType: Optional[AmazonResourceType] = None
    NonCompliantResources: Optional[NonCompliantResources] = None


class TagValue(AmazonResourceType):
    pass


class Tag(BaseModel):
    """
    The metadata that you apply to AWS resources to help you categorize and organize them. Each tag consists of a key and a value, both of which you define. For more information, see <a href="http://docs.aws.amazon.com/general/latest/gr/aws_tagging.html">Tagging AWS Resources</a> in the <i>AWS General Reference</i>.
    """

    Key: TagKey
    Value: TagValue


class TagValueList(BaseModel):
    __root__: Annotated[List[TagValue], Field(max_items=20, min_items=0)]


class TagFilter(BaseModel):
    """
    A list of tags (keys and values) that are used to specify the associated resources.
    """

    Key: Optional[TagKey] = None
    Values: Optional[TagValueList] = None


class TagKeyListForUntag(BaseModel):
    __root__: Annotated[List[TagKey], Field(max_items=50, min_items=1)]


class TagMap(BaseModel):
    pass

    class Config:
        extra = Extra.allow


class DescribeReportCreationOutput(BaseModel):
    Status: Optional[Status] = None
    S3Location: Optional[S3Location] = None
    ErrorMessage: Optional[ErrorMessage] = None


class GetTagKeysInput(BaseModel):
    PaginationToken: Optional[PaginationToken] = None


class GetTagValuesInput(BaseModel):
    PaginationToken: Optional[PaginationToken] = None
    Key: TagKey


class StartReportCreationInput(BaseModel):
    S3Bucket: S3Bucket


class TagResourcesOutput(BaseModel):
    FailedResourcesMap: Optional[FailedResourcesMap] = None


class TagResourcesInput(BaseModel):
    ResourceARNList: ResourceARNListForTagUntag
    Tags: TagMap


class UntagResourcesOutput(TagResourcesOutput):
    pass


class UntagResourcesInput(BaseModel):
    ResourceARNList: ResourceARNListForTagUntag
    TagKeys: TagKeyListForUntag


class TagKeyList(BaseModel):
    __root__: List[TagKey]


class ComplianceDetails(BaseModel):
    """
    Information that shows whether a resource is compliant with the effective tag policy, including details on any noncompliant tag keys.
    """

    NoncompliantKeys: Optional[TagKeyList] = None
    KeysWithNoncompliantValues: Optional[TagKeyList] = None
    ComplianceStatus: Optional[ComplianceStatus] = None


class FailureInfo(BaseModel):
    """
    <p>Information about the errors that are returned for each failed resource. This information can include <code>InternalServiceException</code> and <code>InvalidParameterException</code> errors. It can also include any valid error code returned by the AWS service that hosts the resource that the ARN key represents.</p> <p>The following are common error codes that you might receive from other AWS services:</p> <ul> <li> <p> <b>InternalServiceException</b> – This can mean that the Resource Groups Tagging API didn't receive a response from another AWS service. It can also mean the the resource type in the request is not supported by the Resource Groups Tagging API. In these cases, it's safe to retry the request and then call <a href="http://docs.aws.amazon.com/resourcegroupstagging/latest/APIReference/API_GetResources.html">GetResources</a> to verify the changes.</p> </li> <li> <p> <b>AccessDeniedException</b> – This can mean that you need permission to calling tagging operations in the AWS service that contains the resource. For example, to use the Resource Groups Tagging API to tag a CloudWatch alarm resource, you need permission to call <a href="http://docs.aws.amazon.com/resourcegroupstagging/latest/APIReference/API_TagResources.html"> <code>TagResources</code> </a> <i>and</i> <a href="http://docs.aws.amazon.com/AmazonCloudWatch/latest/APIReference/API_TagResource.html"> <code>TagResource</code> </a> in the CloudWatch API. </p> </li> </ul> <p>For more information on errors that are generated from other AWS services, see the documentation for that service. </p>
    """

    StatusCode: Optional[StatusCode] = None
    ErrorCode: Optional[ErrorCode] = None
    ErrorMessage: Optional[ErrorMessage] = None


class TargetIdFilterList(BaseModel):
    __root__: Annotated[List[TargetId], Field(max_items=100, min_items=1)]


class RegionFilterList(BaseModel):
    __root__: Annotated[List[Region], Field(max_items=100, min_items=1)]


class TagKeyFilterList(TagKeyListForUntag):
    pass


class GroupBy(BaseModel):
    __root__: List[GroupByAttribute]


class SummaryList(BaseModel):
    __root__: List[Summary]


class TagFilterList(BaseModel):
    __root__: Annotated[List[TagFilter], Field(max_items=50, min_items=0)]


class ResourceARNListForGet(BaseModel):
    __root__: Annotated[List[ResourceARN], Field(max_items=100, min_items=1)]


class TagValuesOutputList(BaseModel):
    __root__: List[TagValue]


class TagList(BaseModel):
    __root__: List[Tag]


class ResourceTagMapping(BaseModel):
    """
    A list of resource ARNs and the tags (keys and values) that are associated with each.
    """

    ResourceARN: Optional[ResourceARN] = None
    Tags: Optional[TagList] = None
    ComplianceDetails: Optional[ComplianceDetails] = None


class GetComplianceSummaryOutput(BaseModel):
    SummaryList: Optional[SummaryList] = None
    PaginationToken: Optional[PaginationToken] = None


class GetComplianceSummaryInput(BaseModel):
    TargetIdFilters: Optional[TargetIdFilterList] = None
    RegionFilters: Optional[RegionFilterList] = None
    ResourceTypeFilters: Optional[ResourceTypeFilterList] = None
    TagKeyFilters: Optional[TagKeyFilterList] = None
    GroupBy: Optional[GroupBy] = None
    MaxResults: Optional[MaxResultsGetComplianceSummary] = None
    PaginationToken: Optional[PaginationToken] = None


class GetResourcesInput(BaseModel):
    PaginationToken: Optional[PaginationToken] = None
    TagFilters: Optional[TagFilterList] = None
    ResourcesPerPage: Optional[ResourcesPerPage] = None
    TagsPerPage: Optional[TagsPerPage] = None
    ResourceTypeFilters: Optional[ResourceTypeFilterList] = None
    IncludeComplianceDetails: Optional[IncludeComplianceDetails] = None
    ExcludeCompliantResources: Optional[ExcludeCompliantResources] = None
    ResourceARNList: Optional[ResourceARNListForGet] = None


class GetTagKeysOutput(BaseModel):
    PaginationToken: Optional[PaginationToken] = None
    TagKeys: Optional[TagKeyList] = None


class GetTagValuesOutput(BaseModel):
    PaginationToken: Optional[PaginationToken] = None
    TagValues: Optional[TagValuesOutputList] = None


class ResourceTagMappingList(BaseModel):
    __root__: List[ResourceTagMapping]


class GetResourcesOutput(BaseModel):
    PaginationToken: Optional[PaginationToken] = None
    ResourceTagMappingList: Optional[ResourceTagMappingList] = None
