# generated by datamodel-codegen:
#   filename:  openapi.yaml
#   timestamp: 2021-12-31T02:47:07+00:00

from __future__ import annotations

from enum import Enum
from typing import Annotated, Any, List, Optional

from pydantic import BaseModel, Extra, Field


class CompleteAttachmentUploadResponse(BaseModel):
    pass


class ArtifactId(BaseModel):
    __root__: Annotated[str, Field(max_length=256, min_length=1)]


class AccessDeniedException(BaseModel):
    __root__: Any


class InternalServerException(AccessDeniedException):
    pass


class ThrottlingException(AccessDeniedException):
    pass


class ValidationException(AccessDeniedException):
    pass


class ServiceQuotaExceededException(AccessDeniedException):
    pass


class ConflictException(AccessDeniedException):
    pass


class ConnectionType(Enum):
    WEBSOCKET = 'WEBSOCKET'
    CONNECTION_CREDENTIALS = 'CONNECTION_CREDENTIALS'


class DisconnectParticipantResponse(CompleteAttachmentUploadResponse):
    pass


class ChatItemId(ArtifactId):
    pass


class Instant(BaseModel):
    __root__: Annotated[str, Field(max_length=100, min_length=1)]


class MostRecent(BaseModel):
    __root__: Annotated[int, Field(ge=0.0, le=100.0)]


class SendEventResponse(BaseModel):
    Id: Optional[ChatItemId] = None
    AbsoluteTime: Optional[Instant] = None


class SendMessageResponse(SendEventResponse):
    pass


class ArtifactStatus(Enum):
    APPROVED = 'APPROVED'
    REJECTED = 'REJECTED'
    IN_PROGRESS = 'IN_PROGRESS'


class AttachmentIdList(BaseModel):
    __root__: Annotated[List[ArtifactId], Field(max_items=1, min_items=1)]


class ContentType(BaseModel):
    __root__: Annotated[str, Field(max_length=255, min_length=1)]


class AttachmentName(ArtifactId):
    pass


class AttachmentItem(BaseModel):
    """
    The case-insensitive input to indicate standard MIME type that describes the format of the file that will be uploaded.
    """

    ContentType: Optional[ContentType] = None
    AttachmentId: Optional[ArtifactId] = None
    AttachmentName: Optional[AttachmentName] = None
    Status: Optional[ArtifactStatus] = None


class AttachmentSizeInBytes(BaseModel):
    __root__: Annotated[int, Field(ge=1.0)]


class Attachments(BaseModel):
    __root__: List[AttachmentItem]


class ChatContent(BaseModel):
    __root__: Annotated[str, Field(max_length=1024, min_length=1)]


class ChatContentType(Instant):
    pass


class ChatItemType(Enum):
    TYPING = 'TYPING'
    PARTICIPANT_JOINED = 'PARTICIPANT_JOINED'
    PARTICIPANT_LEFT = 'PARTICIPANT_LEFT'
    CHAT_ENDED = 'CHAT_ENDED'
    TRANSFER_SUCCEEDED = 'TRANSFER_SUCCEEDED'
    TRANSFER_FAILED = 'TRANSFER_FAILED'
    MESSAGE = 'MESSAGE'
    EVENT = 'EVENT'
    ATTACHMENT = 'ATTACHMENT'
    CONNECTION_ACK = 'CONNECTION_ACK'


class ClientToken(BaseModel):
    __root__: Annotated[str, Field(max_length=500)]


class NonEmptyClientToken(BaseModel):
    __root__: Annotated[str, Field(max_length=500, min_length=1)]


class ParticipantToken(BaseModel):
    __root__: Annotated[str, Field(max_length=1000, min_length=1)]


class CompleteAttachmentUploadRequest(BaseModel):
    AttachmentIds: AttachmentIdList
    ClientToken: NonEmptyClientToken


class ISO8601Datetime(BaseModel):
    __root__: str


class ConnectionCredentials(BaseModel):
    """
    Connection credentials.
    """

    ConnectionToken: Optional[ParticipantToken] = None
    Expiry: Optional[ISO8601Datetime] = None


class ConnectionTypeList(BaseModel):
    __root__: Annotated[List[ConnectionType], Field(min_items=1)]


class ContactId(ArtifactId):
    pass


class CreateParticipantConnectionRequest(BaseModel):
    Type: ConnectionTypeList


class DisconnectParticipantRequest(BaseModel):
    ClientToken: Optional[ClientToken] = None


class DisplayName(ArtifactId):
    pass


class GetAttachmentRequest(BaseModel):
    AttachmentId: ArtifactId


class PreSignedAttachmentUrl(BaseModel):
    __root__: Annotated[str, Field(max_length=2000, min_length=1)]


class MaxResults(MostRecent):
    pass


class NextToken(ParticipantToken):
    pass


class ScanDirection(Enum):
    FORWARD = 'FORWARD'
    BACKWARD = 'BACKWARD'


class SortKey(Enum):
    DESCENDING = 'DESCENDING'
    ASCENDING = 'ASCENDING'


class StartPosition(BaseModel):
    """
    A filtering option for where to start. For example, if you sent 100 messages, start with message 50.
    """

    Id: Optional[ChatItemId] = None
    AbsoluteTime: Optional[Instant] = None
    MostRecent: Optional[MostRecent] = None


class GetTranscriptRequest(BaseModel):
    ContactId: Optional[ContactId] = None
    MaxResults: Optional[MaxResults] = None
    NextToken: Optional[NextToken] = None
    ScanDirection: Optional[ScanDirection] = None
    SortOrder: Optional[SortKey] = None
    StartPosition: Optional[StartPosition] = None


class ParticipantId(ArtifactId):
    pass


class ParticipantRole(Enum):
    AGENT = 'AGENT'
    CUSTOMER = 'CUSTOMER'
    SYSTEM = 'SYSTEM'


class Item(BaseModel):
    """
    An item - message or event - that has been sent.
    """

    AbsoluteTime: Optional[Instant] = None
    Content: Optional[ChatContent] = None
    ContentType: Optional[ChatContentType] = None
    Id: Optional[ChatItemId] = None
    Type: Optional[ChatItemType] = None
    ParticipantId: Optional[ParticipantId] = None
    DisplayName: Optional[DisplayName] = None
    ParticipantRole: Optional[ParticipantRole] = None
    Attachments: Optional[Attachments] = None


class PreSignedConnectionUrl(PreSignedAttachmentUrl):
    pass


class SendEventRequest(BaseModel):
    ContentType: ChatContentType
    Content: Optional[ChatContent] = None
    ClientToken: Optional[ClientToken] = None


class SendMessageRequest(BaseModel):
    ContentType: ChatContentType
    Content: ChatContent
    ClientToken: Optional[ClientToken] = None


class StartAttachmentUploadRequest(BaseModel):
    ContentType: ContentType
    AttachmentSizeInBytes: AttachmentSizeInBytes
    AttachmentName: AttachmentName
    ClientToken: NonEmptyClientToken


class UploadMetadataUrl(PreSignedAttachmentUrl):
    pass


class UploadMetadataSignedHeaders(BaseModel):
    pass

    class Config:
        extra = Extra.allow


class UploadMetadataSignedHeadersValue(ArtifactId):
    pass


class UploadMetadataSignedHeadersKey(BaseModel):
    __root__: Annotated[str, Field(max_length=128, min_length=1)]


class GetAttachmentResponse(BaseModel):
    Url: Optional[PreSignedAttachmentUrl] = None
    UrlExpiry: Optional[ISO8601Datetime] = None


class Websocket(BaseModel):
    """
    The websocket for the participant's connection.
    """

    Url: Optional[PreSignedConnectionUrl] = None
    ConnectionExpiry: Optional[ISO8601Datetime] = None


class Transcript(BaseModel):
    __root__: List[Item]


class UploadMetadata(BaseModel):
    """
    Fields to be used while uploading the attachment.
    """

    Url: Optional[UploadMetadataUrl] = None
    UrlExpiry: Optional[ISO8601Datetime] = None
    HeadersToInclude: Optional[UploadMetadataSignedHeaders] = None


class CreateParticipantConnectionResponse(BaseModel):
    Websocket: Optional[Websocket] = None
    ConnectionCredentials: Optional[ConnectionCredentials] = None


class GetTranscriptResponse(BaseModel):
    InitialContactId: Optional[ContactId] = None
    Transcript: Optional[Transcript] = None
    NextToken: Optional[NextToken] = None


class StartAttachmentUploadResponse(BaseModel):
    AttachmentId: Optional[ArtifactId] = None
    UploadMetadata: Optional[UploadMetadata] = None
