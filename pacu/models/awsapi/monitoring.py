# generated by datamodel-codegen:
#   filename:  openapi.yaml
#   timestamp: 2021-12-31T02:53:14+00:00

from __future__ import annotations

from datetime import datetime
from enum import Enum
from typing import Annotated, Any, List, Optional

from pydantic import BaseModel, Extra, Field


class AlarmName(BaseModel):
    __root__: Annotated[str, Field(max_length=255, min_length=1)]


class ResourceNotFound(BaseModel):
    __root__: Any


class DeleteAnomalyDetectorOutput(BaseModel):
    pass


class ResourceNotFoundException(ResourceNotFound):
    pass


class InternalServiceFault(ResourceNotFound):
    pass


class InvalidParameterValueException(ResourceNotFound):
    pass


class MissingRequiredParameterException(ResourceNotFound):
    pass


class DeleteDashboardsOutput(DeleteAnomalyDetectorOutput):
    pass


class DashboardName(BaseModel):
    __root__: str


class DashboardNotFoundError(ResourceNotFound):
    pass


class InsightRuleName(BaseModel):
    __root__: Annotated[
        str, Field(max_length=128, min_length=1, regex='[\\x20-\\x7E]+')
    ]


class DeleteMetricStreamOutput(DeleteAnomalyDetectorOutput):
    pass


class AlarmType(Enum):
    CompositeAlarm = 'CompositeAlarm'
    MetricAlarm = 'MetricAlarm'


class InvalidNextToken(ResourceNotFound):
    pass


class LimitExceededException(ResourceNotFound):
    pass


class InsightRuleMetricName(BaseModel):
    __root__: Annotated[str, Field(max_length=32, min_length=1, regex='[\\x20-\\x7E]+')]


class GetMetricDataLabelTimezone(DashboardName):
    pass


class Statistic(Enum):
    SampleCount = 'SampleCount'
    Average = 'Average'
    Sum = 'Sum'
    Minimum = 'Minimum'
    Maximum = 'Maximum'


class ExtendedStatistic(BaseModel):
    __root__: Annotated[str, Field(regex='p(\\d{1,2}(\\.\\d{0,2})?|100)')]


class InvalidParameterCombinationException(ResourceNotFound):
    pass


class PutAnomalyDetectorOutput(DeleteAnomalyDetectorOutput):
    pass


class AnomalyDetectorMetricTimezone(BaseModel):
    __root__: Annotated[str, Field(max_length=50, regex='.*')]


class ResourceName(BaseModel):
    __root__: Annotated[str, Field(max_length=1024, min_length=1)]


class LimitExceededFault(ResourceNotFound):
    pass


class DashboardInvalidInputError(ResourceNotFound):
    pass


class PutInsightRuleOutput(DeleteAnomalyDetectorOutput):
    pass


class ConcurrentModificationException(ResourceNotFound):
    pass


class InvalidFormatFault(ResourceNotFound):
    pass


class StartMetricStreamsOutput(DeleteAnomalyDetectorOutput):
    pass


class MetricStreamName(AlarmName):
    pass


class StopMetricStreamsOutput(DeleteAnomalyDetectorOutput):
    pass


class TagResourceOutput(DeleteAnomalyDetectorOutput):
    pass


class UntagResourceOutput(DeleteAnomalyDetectorOutput):
    pass


class TagKey(BaseModel):
    __root__: Annotated[str, Field(max_length=128, min_length=1)]


class AccountId(AlarmName):
    pass


class ActionPrefix(ResourceName):
    pass


class ActionsEnabled(BaseModel):
    __root__: bool


class AlarmArn(BaseModel):
    __root__: Annotated[str, Field(max_length=1600, min_length=1)]


class AlarmDescription(BaseModel):
    __root__: Annotated[str, Field(max_length=1024, min_length=0)]


class Timestamp(BaseModel):
    __root__: datetime


class HistoryItemType(Enum):
    ConfigurationUpdate = 'ConfigurationUpdate'
    StateUpdate = 'StateUpdate'
    Action = 'Action'


class HistorySummary(AlarmName):
    pass


class HistoryData(BaseModel):
    __root__: Annotated[str, Field(max_length=4095, min_length=1)]


class AlarmHistoryItem(BaseModel):
    """
    Represents the history of a specific alarm.
    """

    AlarmName: Optional[AlarmName] = None
    AlarmType: Optional[AlarmType] = None
    Timestamp: Optional[Timestamp] = None
    HistoryItemType: Optional[HistoryItemType] = None
    HistorySummary: Optional[HistorySummary] = None
    HistoryData: Optional[HistoryData] = None


class AlarmHistoryItems(BaseModel):
    __root__: List[AlarmHistoryItem]


class AlarmNamePrefix(AlarmName):
    pass


class AlarmNames(BaseModel):
    __root__: Annotated[List[AlarmName], Field(max_items=100)]


class AlarmRule(BaseModel):
    __root__: Annotated[str, Field(max_length=10240, min_length=1)]


class AlarmTypes(BaseModel):
    __root__: List[AlarmType]


class AmazonResourceName(ResourceName):
    pass


class Namespace(BaseModel):
    __root__: Annotated[str, Field(max_length=255, min_length=1, regex='[^:].*')]


class MetricName(AlarmName):
    pass


class AnomalyDetectorMetricStat(BaseModel):
    __root__: Annotated[
        str,
        Field(
            regex='(SampleCount|Average|Sum|Minimum|Maximum|p(\\d{1,2}|100)(\\.\\d{0,2})?|[ou]\\d+(\\.\\d*)?)(_E|_L|_H)?'
        ),
    ]


class AnomalyDetectorStateValue(Enum):
    PENDING_TRAINING = 'PENDING_TRAINING'
    TRAINED_INSUFFICIENT_DATA = 'TRAINED_INSUFFICIENT_DATA'
    TRAINED = 'TRAINED'


class Range(BaseModel):
    """
    Specifies one range of days or times to exclude from use for training an anomaly detection model.
    """

    StartTime: Timestamp
    EndTime: Timestamp


class ComparisonOperator(Enum):
    GreaterThanOrEqualToThreshold = 'GreaterThanOrEqualToThreshold'
    GreaterThanThreshold = 'GreaterThanThreshold'
    LessThanThreshold = 'LessThanThreshold'
    LessThanOrEqualToThreshold = 'LessThanOrEqualToThreshold'
    LessThanLowerOrGreaterThanUpperThreshold = (
        'LessThanLowerOrGreaterThanUpperThreshold'
    )
    LessThanLowerThreshold = 'LessThanLowerThreshold'
    GreaterThanUpperThreshold = 'GreaterThanUpperThreshold'


class ResourceList(BaseModel):
    __root__: Annotated[List[ResourceName], Field(max_items=5)]


class StateReason(BaseModel):
    __root__: Annotated[str, Field(max_length=1023, min_length=0)]


class StateReasonData(BaseModel):
    __root__: Annotated[str, Field(max_length=4000, min_length=0)]


class StateValue1(Enum):
    OK = 'OK'
    ALARM = 'ALARM'
    INSUFFICIENT_DATA = 'INSUFFICIENT_DATA'


class CompositeAlarm(BaseModel):
    """
    The details about a composite alarm.
    """

    ActionsEnabled: Optional[ActionsEnabled] = None
    AlarmActions: Optional[ResourceList] = None
    AlarmArn: Optional[AlarmArn] = None
    AlarmConfigurationUpdatedTimestamp: Optional[Timestamp] = None
    AlarmDescription: Optional[AlarmDescription] = None
    AlarmName: Optional[AlarmName] = None
    AlarmRule: Optional[AlarmRule] = None
    InsufficientDataActions: Optional[ResourceList] = None
    OKActions: Optional[ResourceList] = None
    StateReason: Optional[StateReason] = None
    StateReasonData: Optional[StateReasonData] = None
    StateUpdatedTimestamp: Optional[Timestamp] = None
    StateValue: Optional[StateValue1] = None


class CompositeAlarms(BaseModel):
    __root__: List[CompositeAlarm]


class DatapointValue(BaseModel):
    __root__: float


class Counts(BaseModel):
    __root__: List[DatapointValue]


class DashboardArn(DashboardName):
    pass


class DashboardBody(DashboardName):
    pass


class LastModified(Timestamp):
    pass


class Size(BaseModel):
    __root__: int


class DashboardNamePrefix(DashboardName):
    pass


class DashboardNames(BaseModel):
    __root__: List[DashboardName]


class DataPath(DashboardName):
    pass


class Message(DashboardName):
    pass


class DashboardValidationMessage(BaseModel):
    """
    An error or warning for the operation.
    """

    DataPath: Optional[DataPath] = None
    Message: Optional[Message] = None


class DashboardValidationMessages(BaseModel):
    __root__: List[DashboardValidationMessage]


class StandardUnit(Enum):
    Seconds = 'Seconds'
    Microseconds = 'Microseconds'
    Milliseconds = 'Milliseconds'
    Bytes = 'Bytes'
    Kilobytes = 'Kilobytes'
    Megabytes = 'Megabytes'
    Gigabytes = 'Gigabytes'
    Terabytes = 'Terabytes'
    Bits = 'Bits'
    Kilobits = 'Kilobits'
    Megabits = 'Megabits'
    Gigabits = 'Gigabits'
    Terabits = 'Terabits'
    Percent = 'Percent'
    Count = 'Count'
    Bytes_Second = 'Bytes/Second'
    Kilobytes_Second = 'Kilobytes/Second'
    Megabytes_Second = 'Megabytes/Second'
    Gigabytes_Second = 'Gigabytes/Second'
    Terabytes_Second = 'Terabytes/Second'
    Bits_Second = 'Bits/Second'
    Kilobits_Second = 'Kilobits/Second'
    Megabits_Second = 'Megabits/Second'
    Gigabits_Second = 'Gigabits/Second'
    Terabits_Second = 'Terabits/Second'
    Count_Second = 'Count/Second'
    None_ = 'None'


class DatapointValueMap(BaseModel):
    pass

    class Config:
        extra = Extra.allow


class Datapoint(BaseModel):
    """
    Encapsulates the statistical data that CloudWatch computes from metric data.
    """

    Timestamp: Optional[Timestamp] = None
    SampleCount: Optional[DatapointValue] = None
    Average: Optional[DatapointValue] = None
    Sum: Optional[DatapointValue] = None
    Minimum: Optional[DatapointValue] = None
    Maximum: Optional[DatapointValue] = None
    Unit: Optional[StandardUnit] = None
    ExtendedStatistics: Optional[DatapointValueMap] = None


class DatapointValues(Counts):
    pass


class Datapoints(BaseModel):
    __root__: List[Datapoint]


class DatapointsToAlarm(BaseModel):
    __root__: Annotated[int, Field(ge=1.0)]


class DeleteAlarmsInput(BaseModel):
    AlarmNames: AlarmNames


class DeleteDashboardsInput(BaseModel):
    DashboardNames: DashboardNames


class InsightRuleNames(BaseModel):
    __root__: List[InsightRuleName]


class DeleteInsightRulesInput(BaseModel):
    RuleNames: InsightRuleNames


class DeleteMetricStreamInput(BaseModel):
    Name: MetricStreamName


class MaxRecords(BaseModel):
    __root__: Annotated[int, Field(ge=1.0, le=100.0)]


class NextToken(DashboardName):
    pass


class ScanBy(Enum):
    TimestampDescending = 'TimestampDescending'
    TimestampAscending = 'TimestampAscending'


class DescribeAlarmHistoryInput(BaseModel):
    AlarmName: Optional[AlarmName] = None
    AlarmTypes: Optional[AlarmTypes] = None
    HistoryItemType: Optional[HistoryItemType] = None
    StartDate: Optional[Timestamp] = None
    EndDate: Optional[Timestamp] = None
    MaxRecords: Optional[MaxRecords] = None
    NextToken: Optional[NextToken] = None
    ScanBy: Optional[ScanBy] = None


class Period(DatapointsToAlarm):
    pass


class DescribeAlarmsInput(BaseModel):
    AlarmNames: Optional[AlarmNames] = None
    AlarmNamePrefix: Optional[AlarmNamePrefix] = None
    AlarmTypes: Optional[AlarmTypes] = None
    ChildrenOfAlarmName: Optional[AlarmName] = None
    ParentsOfAlarmName: Optional[AlarmName] = None
    StateValue: Optional[StateValue1] = None
    ActionPrefix: Optional[ActionPrefix] = None
    MaxRecords: Optional[MaxRecords] = None
    NextToken: Optional[NextToken] = None


class MaxReturnedResultsCount(DatapointsToAlarm):
    pass


class InsightRuleMaxResults(BaseModel):
    __root__: Annotated[int, Field(ge=1.0, le=500.0)]


class DescribeInsightRulesInput(BaseModel):
    NextToken: Optional[NextToken] = None
    MaxResults: Optional[InsightRuleMaxResults] = None


class DimensionName(AlarmName):
    pass


class DimensionValue(AlarmName):
    pass


class DisableAlarmActionsInput(BaseModel):
    AlarmNames: AlarmNames


class DisableInsightRulesInput(BaseModel):
    RuleNames: InsightRuleNames


class EnableAlarmActionsInput(BaseModel):
    AlarmNames: AlarmNames


class EnableInsightRulesInput(BaseModel):
    RuleNames: InsightRuleNames


class EvaluateLowSampleCountPercentile(AlarmName):
    pass


class EvaluationPeriods(DatapointsToAlarm):
    pass


class ExceptionType(DashboardName):
    pass


class ExtendedStatistics1(BaseModel):
    __root__: Annotated[List[ExtendedStatistic], Field(max_items=10, min_items=1)]


class FailureCode(DashboardName):
    pass


class FailureDescription(DashboardName):
    pass


class FailureResource(DashboardName):
    pass


class GetDashboardInput(BaseModel):
    DashboardName: DashboardName


class InsightRuleUnboundInteger(Size):
    pass


class InsightRuleMetricList(BaseModel):
    __root__: List[InsightRuleMetricName]


class InsightRuleOrderBy(InsightRuleMetricName):
    pass


class GetInsightRuleReportInput(BaseModel):
    RuleName: InsightRuleName
    StartTime: Timestamp
    EndTime: Timestamp
    Period: Period
    MaxContributorCount: Optional[InsightRuleUnboundInteger] = None
    Metrics: Optional[InsightRuleMetricList] = None
    OrderBy: Optional[InsightRuleOrderBy] = None


class InsightRuleAggregationStatistic(DashboardName):
    pass


class InsightRuleUnboundDouble(DatapointValue):
    pass


class InsightRuleUnboundLong(Size):
    pass


class GetMetricDataMaxDatapoints(Size):
    pass


class LabelOptions(BaseModel):
    """
    <p>This structure includes the <code>Timezone</code> parameter, which you can use to specify your time zone so that the labels that are associated with returned metrics display the correct time for your time zone. </p> <p>The <code>Timezone</code> value affects a label only if you have a time-based dynamic expression in the label. For more information about dynamic expressions in labels, see <a href="https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/graph-dynamic-labels.html">Using Dynamic Labels</a>.</p>
    """

    Timezone: Optional[GetMetricDataLabelTimezone] = None


class Statistics(BaseModel):
    __root__: Annotated[List[Statistic], Field(max_items=5, min_items=1)]


class MetricLabel(DashboardName):
    pass


class GetMetricStreamInput(BaseModel):
    Name: MetricStreamName


class MetricStreamState(DashboardName):
    pass


class MetricStreamOutputFormat(Enum):
    json = 'json'
    opentelemetry0_7 = 'opentelemetry0.7'


class MetricWidget(DashboardName):
    pass


class OutputFormat1(DashboardName):
    pass


class GetMetricWidgetImageInput(BaseModel):
    MetricWidget: MetricWidget
    OutputFormat: Optional[OutputFormat1] = None


class MetricWidgetImage(DashboardName):
    pass


class InsightRuleState(InsightRuleMetricName):
    pass


class InsightRuleSchema(DashboardName):
    pass


class InsightRuleDefinition(BaseModel):
    __root__: Annotated[
        str, Field(max_length=8192, min_length=1, regex='[\\x00-\\x7F]+')
    ]


class InsightRule(BaseModel):
    """
    This structure contains the definition for a Contributor Insights rule.
    """

    Name: InsightRuleName
    State: InsightRuleState
    Schema: InsightRuleSchema
    Definition: InsightRuleDefinition


class InsightRuleContributorDatapoint(BaseModel):
    """
    <p>One data point related to one contributor.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/AmazonCloudWatch/latest/APIReference/API_GetInsightRuleReport.html">GetInsightRuleReport</a> and <a href="https://docs.aws.amazon.com/AmazonCloudWatch/latest/APIReference/API_InsightRuleContributor.html">InsightRuleContributor</a>.</p>
    """

    Timestamp: Timestamp
    ApproximateValue: InsightRuleUnboundDouble


class InsightRuleContributorKey(DashboardName):
    pass


class InsightRuleContributorKeyLabel(DashboardName):
    pass


class InsightRuleMetricDatapoint(BaseModel):
    """
    <p>One data point from the metric time series returned in a Contributor Insights rule report.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/AmazonCloudWatch/latest/APIReference/API_GetInsightRuleReport.html">GetInsightRuleReport</a>.</p>
    """

    Timestamp: Timestamp
    UniqueContributors: Optional[InsightRuleUnboundDouble] = None
    MaxContributorValue: Optional[InsightRuleUnboundDouble] = None
    SampleCount: Optional[InsightRuleUnboundDouble] = None
    Average: Optional[InsightRuleUnboundDouble] = None
    Sum: Optional[InsightRuleUnboundDouble] = None
    Minimum: Optional[InsightRuleUnboundDouble] = None
    Maximum: Optional[InsightRuleUnboundDouble] = None


class ListDashboardsInput(BaseModel):
    DashboardNamePrefix: Optional[DashboardNamePrefix] = None
    NextToken: Optional[NextToken] = None


class ListMetricStreamsMaxResults(InsightRuleMaxResults):
    pass


class ListMetricStreamsInput(BaseModel):
    NextToken: Optional[NextToken] = None
    MaxResults: Optional[ListMetricStreamsMaxResults] = None


class RecentlyActive(Enum):
    PT3H = 'PT3H'


class ListTagsForResourceInput(BaseModel):
    ResourceARN: AmazonResourceName


class MessageDataCode(DashboardName):
    pass


class MessageDataValue(DashboardName):
    pass


class MessageData(BaseModel):
    """
    <p>A message returned by the <code>GetMetricData</code>API, including a code and a description.</p> <p>If a cross-Region <code>GetMetricData</code> operation fails with a code of <code>Forbidden</code> and a value of <code>Authentication too complex to retrieve cross region data</code>, you can correct the problem by running the <code>GetMetricData</code> operation in the same Region where the metric data is.</p>
    """

    Code: Optional[MessageDataCode] = None
    Value: Optional[MessageDataValue] = None


class Threshold(DatapointValue):
    pass


class TreatMissingData(AlarmName):
    pass


class MetricId(AlarmName):
    pass


class MetricExpression(ResourceName):
    pass


class ReturnData(ActionsEnabled):
    pass


class Timestamps(BaseModel):
    __root__: List[Timestamp]


class StatusCode(Enum):
    Complete = 'Complete'
    InternalError = 'InternalError'
    PartialData = 'PartialData'


class StatisticSet(BaseModel):
    """
    Represents a set of statistics that describes a specific metric.
    """

    SampleCount: DatapointValue
    Sum: DatapointValue
    Minimum: DatapointValue
    Maximum: DatapointValue


class Values(Counts):
    pass


class StorageResolution(DatapointsToAlarm):
    pass


class Stat(DashboardName):
    pass


class MetricStreamEntry(BaseModel):
    """
    This structure contains the configuration information about one metric stream.
    """

    Arn: Optional[AmazonResourceName] = None
    CreationDate: Optional[Timestamp] = None
    LastUpdateDate: Optional[Timestamp] = None
    Name: Optional[MetricStreamName] = None
    FirehoseArn: Optional[AmazonResourceName] = None
    State: Optional[MetricStreamState] = None
    OutputFormat: Optional[MetricStreamOutputFormat] = None


class MetricStreamNames(BaseModel):
    __root__: List[MetricStreamName]


class PutDashboardInput(BaseModel):
    DashboardName: DashboardName
    DashboardBody: DashboardBody


class SetAlarmStateInput(BaseModel):
    AlarmName: AlarmName
    StateValue: StateValue1
    StateReason: StateReason
    StateReasonData: Optional[StateReasonData] = None


class StartMetricStreamsInput(BaseModel):
    Names: MetricStreamNames


class StopMetricStreamsInput(BaseModel):
    Names: MetricStreamNames


class TagValue(BaseModel):
    __root__: Annotated[str, Field(max_length=256, min_length=0)]


class TagKeyList(BaseModel):
    __root__: List[TagKey]


class UntagResourceInput(BaseModel):
    ResourceARN: AmazonResourceName
    TagKeys: TagKeyList


class Dimension(BaseModel):
    """
    A dimension is a name/value pair that is part of the identity of a metric. You can assign up to 10 dimensions to a metric. Because dimensions are part of the unique identifier for a metric, whenever you add a unique name/value pair to one of your metrics, you are creating a new variation of that metric.
    """

    Name: DimensionName
    Value: DimensionValue


class DescribeAlarmHistoryOutput(BaseModel):
    AlarmHistoryItems: Optional[AlarmHistoryItems] = None
    NextToken: Optional[NextToken] = None


class GetDashboardOutput(BaseModel):
    DashboardArn: Optional[DashboardArn] = None
    DashboardBody: Optional[DashboardBody] = None
    DashboardName: Optional[DashboardName] = None


class GetMetricStatisticsOutput(BaseModel):
    Label: Optional[MetricLabel] = None
    Datapoints: Optional[Datapoints] = None


class GetMetricWidgetImageOutput(BaseModel):
    MetricWidgetImage: Optional[MetricWidgetImage] = None


class DimensionFilter(BaseModel):
    """
    Represents filters for a dimension.
    """

    Name: DimensionName
    Value: Optional[DimensionValue] = None


class AnomalyDetectorExcludedTimeRanges(BaseModel):
    __root__: List[Range]


class Tag(BaseModel):
    """
    A key-value pair associated with a CloudWatch resource.
    """

    Key: TagKey
    Value: TagValue


class PutDashboardOutput(BaseModel):
    DashboardValidationMessages: Optional[DashboardValidationMessages] = None


class PutMetricStreamOutput(BaseModel):
    Arn: Optional[AmazonResourceName] = None


class MetricStreamFilter(BaseModel):
    """
    This structure contains the name of one of the metric namespaces that is listed in a filter of a metric stream.
    """

    Namespace: Optional[Namespace] = None


class Dimensions(BaseModel):
    __root__: Annotated[List[Dimension], Field(max_items=10)]


class AnomalyDetectorConfiguration(BaseModel):
    """
    The configuration specifies details about how the anomaly detection model is to be trained, including time ranges to exclude from use for training the model and the time zone to use for the metric.
    """

    ExcludedTimeRanges: Optional[AnomalyDetectorExcludedTimeRanges] = None
    MetricTimezone: Optional[AnomalyDetectorMetricTimezone] = None


class AnomalyDetector(BaseModel):
    """
    An anomaly detection model associated with a particular CloudWatch metric and statistic. You can use the model to display a band of expected normal values when the metric is graphed.
    """

    Namespace: Optional[Namespace] = None
    MetricName: Optional[MetricName] = None
    Dimensions: Optional[Dimensions] = None
    Stat: Optional[AnomalyDetectorMetricStat] = None
    Configuration: Optional[AnomalyDetectorConfiguration] = None
    StateValue: Optional[AnomalyDetectorStateValue] = None


class AnomalyDetectors(BaseModel):
    __root__: List[AnomalyDetector]


class PartialFailure(BaseModel):
    """
    This array is empty if the API operation was successful for all the rules specified in the request. If the operation could not process one of the rules, the following data is returned for each of those rules.
    """

    FailureResource: Optional[FailureResource] = None
    ExceptionType: Optional[ExceptionType] = None
    FailureCode: Optional[FailureCode] = None
    FailureDescription: Optional[FailureDescription] = None


class BatchFailures(BaseModel):
    __root__: List[PartialFailure]


class DashboardEntry(BaseModel):
    """
    Represents a specific dashboard.
    """

    DashboardName: Optional[DashboardName] = None
    DashboardArn: Optional[DashboardArn] = None
    LastModified: Optional[LastModified] = None
    Size: Optional[Size] = None


class DashboardEntries(BaseModel):
    __root__: List[DashboardEntry]


class DeleteAnomalyDetectorInput(BaseModel):
    Namespace: Namespace
    MetricName: MetricName
    Dimensions: Optional[Dimensions] = None
    Stat: AnomalyDetectorMetricStat


class DescribeAlarmsForMetricInput(BaseModel):
    MetricName: MetricName
    Namespace: Namespace
    Statistic: Optional[Statistic] = None
    ExtendedStatistic: Optional[ExtendedStatistic] = None
    Dimensions: Optional[Dimensions] = None
    Period: Optional[Period] = None
    Unit: Optional[StandardUnit] = None


class DescribeAnomalyDetectorsInput(BaseModel):
    NextToken: Optional[NextToken] = None
    MaxResults: Optional[MaxReturnedResultsCount] = None
    Namespace: Optional[Namespace] = None
    MetricName: Optional[MetricName] = None
    Dimensions: Optional[Dimensions] = None


class InsightRules(BaseModel):
    __root__: List[InsightRule]


class DimensionFilters(BaseModel):
    __root__: Annotated[List[DimensionFilter], Field(max_items=10)]


class InsightRuleContributorKeyLabels(BaseModel):
    __root__: List[InsightRuleContributorKeyLabel]


class InsightRuleMetricDatapoints(BaseModel):
    __root__: List[InsightRuleMetricDatapoint]


class MetricDataResultMessages(BaseModel):
    __root__: List[MessageData]


class GetMetricStatisticsInput(BaseModel):
    Namespace: Namespace
    MetricName: MetricName
    Dimensions: Optional[Dimensions] = None
    StartTime: Timestamp
    EndTime: Timestamp
    Period: Period
    Statistics: Optional[Statistics] = None
    ExtendedStatistics: Optional[ExtendedStatistics1] = None
    Unit: Optional[StandardUnit] = None


class MetricStreamFilters(BaseModel):
    __root__: List[MetricStreamFilter]


class InsightRuleContributorKeys(BaseModel):
    __root__: List[InsightRuleContributorKey]


class InsightRuleContributorDatapoints(BaseModel):
    __root__: List[InsightRuleContributorDatapoint]


class InsightRuleContributor(BaseModel):
    """
    <p>One of the unique contributors found by a Contributor Insights rule. If the rule contains multiple keys, then a unique contributor is a unique combination of values from all the keys in the rule.</p> <p>If the rule contains a single key, then each unique contributor is each unique value for this key.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/AmazonCloudWatch/latest/APIReference/API_GetInsightRuleReport.html">GetInsightRuleReport</a>.</p>
    """

    Keys: InsightRuleContributorKeys
    ApproximateAggregateValue: InsightRuleUnboundDouble
    Datapoints: InsightRuleContributorDatapoints


class MetricStreamEntries(BaseModel):
    __root__: List[MetricStreamEntry]


class ListMetricsInput(BaseModel):
    Namespace: Optional[Namespace] = None
    MetricName: Optional[MetricName] = None
    Dimensions: Optional[DimensionFilters] = None
    NextToken: Optional[NextToken] = None
    RecentlyActive: Optional[RecentlyActive] = None


class TagList(BaseModel):
    __root__: List[Tag]


class Metric(BaseModel):
    """
    Represents a specific metric.
    """

    Namespace: Optional[Namespace] = None
    MetricName: Optional[MetricName] = None
    Dimensions: Optional[Dimensions] = None


class MetricStat(BaseModel):
    """
    This structure defines the metric to be returned, along with the statistics, period, and units.
    """

    Metric: Metric
    Period: Period
    Stat: Stat
    Unit: Optional[StandardUnit] = None


class MetricDataResult(BaseModel):
    """
    A <code>GetMetricData</code> call returns an array of <code>MetricDataResult</code> structures. Each of these structures includes the data points for that metric, along with the timestamps of those data points and other identifying information.
    """

    Id: Optional[MetricId] = None
    Label: Optional[MetricLabel] = None
    Timestamps: Optional[Timestamps] = None
    Values: Optional[DatapointValues] = None
    StatusCode: Optional[StatusCode] = None
    Messages: Optional[MetricDataResultMessages] = None


class PutAnomalyDetectorInput(BaseModel):
    Namespace: Namespace
    MetricName: MetricName
    Dimensions: Optional[Dimensions] = None
    Stat: AnomalyDetectorMetricStat
    Configuration: Optional[AnomalyDetectorConfiguration] = None


class PutCompositeAlarmInput(BaseModel):
    ActionsEnabled: Optional[ActionsEnabled] = None
    AlarmActions: Optional[ResourceList] = None
    AlarmDescription: Optional[AlarmDescription] = None
    AlarmName: AlarmName
    AlarmRule: AlarmRule
    InsufficientDataActions: Optional[ResourceList] = None
    OKActions: Optional[ResourceList] = None
    Tags: Optional[TagList] = None


class PutInsightRuleInput(BaseModel):
    RuleName: InsightRuleName
    RuleState: Optional[InsightRuleState] = None
    RuleDefinition: InsightRuleDefinition
    Tags: Optional[TagList] = None


class PutMetricStreamInput(BaseModel):
    Name: MetricStreamName
    IncludeFilters: Optional[MetricStreamFilters] = None
    ExcludeFilters: Optional[MetricStreamFilters] = None
    FirehoseArn: AmazonResourceName
    RoleArn: AmazonResourceName
    OutputFormat: MetricStreamOutputFormat
    Tags: Optional[TagList] = None


class TagResourceInput(BaseModel):
    ResourceARN: AmazonResourceName
    Tags: TagList


class DeleteInsightRulesOutput(BaseModel):
    Failures: Optional[BatchFailures] = None


class DescribeAnomalyDetectorsOutput(BaseModel):
    AnomalyDetectors: Optional[AnomalyDetectors] = None
    NextToken: Optional[NextToken] = None


class DescribeInsightRulesOutput(BaseModel):
    NextToken: Optional[NextToken] = None
    InsightRules: Optional[InsightRules] = None


class DisableInsightRulesOutput(DeleteInsightRulesOutput):
    pass


class EnableInsightRulesOutput(DeleteInsightRulesOutput):
    pass


class MetricDataQuery(BaseModel):
    """
    <p>This structure is used in both <code>GetMetricData</code> and <code>PutMetricAlarm</code>. The supported use of this structure is different for those two operations.</p> <p>When used in <code>GetMetricData</code>, it indicates the metric data to return, and whether this call is just retrieving a batch set of data for one metric, or is performing a math expression on metric data. A single <code>GetMetricData</code> call can include up to 500 <code>MetricDataQuery</code> structures.</p> <p>When used in <code>PutMetricAlarm</code>, it enables you to create an alarm based on a metric math expression. Each <code>MetricDataQuery</code> in the array specifies either a metric to retrieve, or a math expression to be performed on retrieved metrics. A single <code>PutMetricAlarm</code> call can include up to 20 <code>MetricDataQuery</code> structures in the array. The 20 structures can include as many as 10 structures that contain a <code>MetricStat</code> parameter to retrieve a metric, and as many as 10 structures that contain the <code>Expression</code> parameter to perform a math expression. Of those <code>Expression</code> structures, one must have <code>True</code> as the value for <code>ReturnData</code>. The result of this expression is the value the alarm watches.</p> <p>Any expression used in a <code>PutMetricAlarm</code> operation must return a single time series. For more information, see <a href="https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/using-metric-math.html#metric-math-syntax">Metric Math Syntax and Functions</a> in the <i>Amazon CloudWatch User Guide</i>.</p> <p>Some of the parameters of this structure also have different uses whether you are using this structure in a <code>GetMetricData</code> operation or a <code>PutMetricAlarm</code> operation. These differences are explained in the following parameter list.</p>
    """

    Id: MetricId
    MetricStat: Optional[MetricStat] = None
    Expression: Optional[MetricExpression] = None
    Label: Optional[MetricLabel] = None
    ReturnData: Optional[ReturnData] = None
    Period: Optional[Period] = None
    AccountId: Optional[AccountId] = None


class GetMetricStreamOutput(BaseModel):
    Arn: Optional[AmazonResourceName] = None
    Name: Optional[MetricStreamName] = None
    IncludeFilters: Optional[MetricStreamFilters] = None
    ExcludeFilters: Optional[MetricStreamFilters] = None
    FirehoseArn: Optional[AmazonResourceName] = None
    RoleArn: Optional[AmazonResourceName] = None
    State: Optional[MetricStreamState] = None
    CreationDate: Optional[Timestamp] = None
    LastUpdateDate: Optional[Timestamp] = None
    OutputFormat: Optional[MetricStreamOutputFormat] = None


class ListDashboardsOutput(BaseModel):
    DashboardEntries: Optional[DashboardEntries] = None
    NextToken: Optional[NextToken] = None


class ListMetricStreamsOutput(BaseModel):
    NextToken: Optional[NextToken] = None
    Entries: Optional[MetricStreamEntries] = None


class ListTagsForResourceOutput(BaseModel):
    Tags: Optional[TagList] = None


class MetricDatum(BaseModel):
    """
    Encapsulates the information sent to either create a metric or add new values to be aggregated into an existing metric.
    """

    MetricName: MetricName
    Dimensions: Optional[Dimensions] = None
    Timestamp: Optional[Timestamp] = None
    Value: Optional[DatapointValue] = None
    StatisticValues: Optional[StatisticSet] = None
    Values: Optional[Values] = None
    Counts: Optional[Counts] = None
    Unit: Optional[StandardUnit] = None
    StorageResolution: Optional[StorageResolution] = None


class InsightRuleContributors(BaseModel):
    __root__: List[InsightRuleContributor]


class MetricDataQueries(BaseModel):
    __root__: List[MetricDataQuery]


class GetMetricDataInput(BaseModel):
    MetricDataQueries: MetricDataQueries
    StartTime: Timestamp
    EndTime: Timestamp
    NextToken: Optional[NextToken] = None
    ScanBy: Optional[ScanBy] = None
    MaxDatapoints: Optional[GetMetricDataMaxDatapoints] = None
    LabelOptions: Optional[LabelOptions] = None


class MetricDataResults(BaseModel):
    __root__: List[MetricDataResult]


class Metrics(BaseModel):
    __root__: List[Metric]


class MetricAlarm(BaseModel):
    """
    The details about a metric alarm.
    """

    AlarmName: Optional[AlarmName] = None
    AlarmArn: Optional[AlarmArn] = None
    AlarmDescription: Optional[AlarmDescription] = None
    AlarmConfigurationUpdatedTimestamp: Optional[Timestamp] = None
    ActionsEnabled: Optional[ActionsEnabled] = None
    OKActions: Optional[ResourceList] = None
    AlarmActions: Optional[ResourceList] = None
    InsufficientDataActions: Optional[ResourceList] = None
    StateValue: Optional[StateValue1] = None
    StateReason: Optional[StateReason] = None
    StateReasonData: Optional[StateReasonData] = None
    StateUpdatedTimestamp: Optional[Timestamp] = None
    MetricName: Optional[MetricName] = None
    Namespace: Optional[Namespace] = None
    Statistic: Optional[Statistic] = None
    ExtendedStatistic: Optional[ExtendedStatistic] = None
    Dimensions: Optional[Dimensions] = None
    Period: Optional[Period] = None
    Unit: Optional[StandardUnit] = None
    EvaluationPeriods: Optional[EvaluationPeriods] = None
    DatapointsToAlarm: Optional[DatapointsToAlarm] = None
    Threshold: Optional[Threshold] = None
    ComparisonOperator: Optional[ComparisonOperator] = None
    TreatMissingData: Optional[TreatMissingData] = None
    EvaluateLowSampleCountPercentile: Optional[EvaluateLowSampleCountPercentile] = None
    Metrics: Optional[MetricDataQueries] = None
    ThresholdMetricId: Optional[MetricId] = None


class MetricData(BaseModel):
    __root__: List[MetricDatum]


class PutMetricAlarmInput(BaseModel):
    AlarmName: AlarmName
    AlarmDescription: Optional[AlarmDescription] = None
    ActionsEnabled: Optional[ActionsEnabled] = None
    OKActions: Optional[ResourceList] = None
    AlarmActions: Optional[ResourceList] = None
    InsufficientDataActions: Optional[ResourceList] = None
    MetricName: Optional[MetricName] = None
    Namespace: Optional[Namespace] = None
    Statistic: Optional[Statistic] = None
    ExtendedStatistic: Optional[ExtendedStatistic] = None
    Dimensions: Optional[Dimensions] = None
    Period: Optional[Period] = None
    Unit: Optional[StandardUnit] = None
    EvaluationPeriods: EvaluationPeriods
    DatapointsToAlarm: Optional[DatapointsToAlarm] = None
    Threshold: Optional[Threshold] = None
    ComparisonOperator: ComparisonOperator
    TreatMissingData: Optional[TreatMissingData] = None
    EvaluateLowSampleCountPercentile: Optional[EvaluateLowSampleCountPercentile] = None
    Metrics: Optional[MetricDataQueries] = None
    Tags: Optional[TagList] = None
    ThresholdMetricId: Optional[MetricId] = None


class PutMetricDataInput(BaseModel):
    Namespace: Namespace
    MetricData: MetricData


class GetInsightRuleReportOutput(BaseModel):
    KeyLabels: Optional[InsightRuleContributorKeyLabels] = None
    AggregationStatistic: Optional[InsightRuleAggregationStatistic] = None
    AggregateValue: Optional[InsightRuleUnboundDouble] = None
    ApproximateUniqueCount: Optional[InsightRuleUnboundLong] = None
    Contributors: Optional[InsightRuleContributors] = None
    MetricDatapoints: Optional[InsightRuleMetricDatapoints] = None


class GetMetricDataOutput(BaseModel):
    MetricDataResults: Optional[MetricDataResults] = None
    NextToken: Optional[NextToken] = None
    Messages: Optional[MetricDataResultMessages] = None


class ListMetricsOutput(BaseModel):
    Metrics: Optional[Metrics] = None
    NextToken: Optional[NextToken] = None


class MetricAlarms(BaseModel):
    __root__: List[MetricAlarm]


class DescribeAlarmsOutput(BaseModel):
    CompositeAlarms: Optional[CompositeAlarms] = None
    MetricAlarms: Optional[MetricAlarms] = None
    NextToken: Optional[NextToken] = None


class DescribeAlarmsForMetricOutput(BaseModel):
    MetricAlarms: Optional[MetricAlarms] = None
