# generated by datamodel-codegen:
#   filename:  openapi.yaml
#   timestamp: 2021-12-31T02:47:05+00:00

from __future__ import annotations

from enum import Enum
from typing import Annotated, Any, List, Optional

from pydantic import BaseModel, Extra, Field


class InvalidRequestException(BaseModel):
    __root__: Any


class AccessDeniedException(InvalidRequestException):
    pass


class ResourceNotFoundException(InvalidRequestException):
    pass


class InternalServiceException(InvalidRequestException):
    pass


class ThrottlingException(InvalidRequestException):
    pass


class MatchedDetails(BaseModel):
    pass

    class Config:
        extra = Extra.allow


class CategoryName(BaseModel):
    __root__: Annotated[str, Field(max_length=256, min_length=1, regex='.*\\S.*')]


class CharacterOffset(BaseModel):
    __root__: Annotated[int, Field(ge=0.0)]


class CharacterOffsets(BaseModel):
    """
    For characters that were detected as issues, where they occur in the transcript.
    """

    BeginOffsetChar: CharacterOffset
    EndOffsetChar: CharacterOffset


class ContactId(CategoryName):
    pass


class InstanceId(CategoryName):
    pass


class IssueDetected(BaseModel):
    """
    Potential issues that are detected based on an artificial intelligence analysis of each turn in the conversation.
    """

    CharacterOffsets: CharacterOffsets


class IssuesDetected(BaseModel):
    __root__: Annotated[List[IssueDetected], Field(max_items=20, min_items=0)]


class MaxResults(BaseModel):
    __root__: Annotated[int, Field(ge=1.0, le=100.0)]


class NextToken(BaseModel):
    __root__: Annotated[str, Field(max_length=131070, min_length=1, regex='.*\\S.*')]


class ListRealtimeContactAnalysisSegmentsRequest(BaseModel):
    InstanceId: InstanceId
    ContactId: ContactId
    MaxResults: Optional[MaxResults] = None
    NextToken: Optional[NextToken] = None


class OffsetMillis(CharacterOffset):
    pass


class ParticipantId(CategoryName):
    pass


class ParticipantRole(CategoryName):
    pass


class PointOfInterest(BaseModel):
    """
    The section of the contact audio where that category rule was detected.
    """

    BeginOffsetMillis: OffsetMillis
    EndOffsetMillis: OffsetMillis


class SentimentValue(Enum):
    POSITIVE = 'POSITIVE'
    NEUTRAL = 'NEUTRAL'
    NEGATIVE = 'NEGATIVE'


class TranscriptId(CategoryName):
    pass


class TranscriptContent(BaseModel):
    __root__: Annotated[str, Field(min_length=1, regex='.*\\S.*')]


class MatchedCategories(BaseModel):
    __root__: Annotated[List[CategoryName], Field(max_items=150, min_items=0)]


class Categories(BaseModel):
    """
    Provides the category rules that are used to automatically categorize contacts based on uttered keywords and phrases.
    """

    MatchedCategories: MatchedCategories
    MatchedDetails: MatchedDetails


class PointsOfInterest(BaseModel):
    __root__: Annotated[List[PointOfInterest], Field(max_items=20, min_items=0)]


class CategoryDetails(BaseModel):
    """
    Provides information about the category rule that was matched.
    """

    PointsOfInterest: PointsOfInterest


class Transcript(BaseModel):
    """
    A list of messages in the session.
    """

    Id: TranscriptId
    ParticipantId: ParticipantId
    ParticipantRole: ParticipantRole
    Content: TranscriptContent
    BeginOffsetMillis: OffsetMillis
    EndOffsetMillis: OffsetMillis
    Sentiment: SentimentValue
    IssuesDetected: Optional[IssuesDetected] = None


class RealtimeContactAnalysisSegment(BaseModel):
    """
    An analyzed segment for a real-time analysis session.
    """

    Transcript: Optional[Transcript] = None
    Categories: Optional[Categories] = None


class RealtimeContactAnalysisSegments(BaseModel):
    __root__: Annotated[
        List[RealtimeContactAnalysisSegment], Field(max_items=100, min_items=0)
    ]


class ListRealtimeContactAnalysisSegmentsResponse(BaseModel):
    Segments: RealtimeContactAnalysisSegments
    NextToken: Optional[NextToken] = None
