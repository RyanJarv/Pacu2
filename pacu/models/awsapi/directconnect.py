# generated by datamodel-codegen:
#   filename:  openapi.yaml
#   timestamp: 2021-12-31T02:47:31+00:00

from __future__ import annotations

from datetime import datetime
from enum import Enum
from typing import Annotated, Any, List, Optional

from pydantic import BaseModel, Field


class DirectConnectServerException(BaseModel):
    __root__: Any


class DirectConnectClientException(DirectConnectServerException):
    pass


class DuplicateTagKeysException(DirectConnectServerException):
    pass


class TooManyTagsException(DirectConnectServerException):
    pass


class TagResourceResponse(BaseModel):
    pass


class UntagResourceResponse(TagResourceResponse):
    pass


class ASN(BaseModel):
    __root__: int


class DirectConnectGatewayId(BaseModel):
    __root__: str


class DirectConnectGatewayAssociationProposalId(DirectConnectGatewayId):
    pass


class OwnerAccount(DirectConnectGatewayId):
    pass


class AddressFamily(Enum):
    ipv4 = 'ipv4'
    ipv6 = 'ipv6'


class Bandwidth(DirectConnectGatewayId):
    pass


class ConnectionName(DirectConnectGatewayId):
    pass


class InterconnectId(DirectConnectGatewayId):
    pass


class VLAN(ASN):
    pass


class ConnectionId(DirectConnectGatewayId):
    pass


class AmazonAddress(DirectConnectGatewayId):
    pass


class LagId(DirectConnectGatewayId):
    pass


class SecretARN(DirectConnectGatewayId):
    pass


class Ckn(DirectConnectGatewayId):
    pass


class Cak(DirectConnectGatewayId):
    pass


class VirtualInterfaceId(DirectConnectGatewayId):
    pass


class GatewayIdentifier(DirectConnectGatewayId):
    pass


class GatewayType(Enum):
    virtualPrivateGateway = 'virtualPrivateGateway'
    transitGateway = 'transitGateway'


class Region(DirectConnectGatewayId):
    pass


class AssociatedGateway(BaseModel):
    """
    Information about the associated gateway.
    """

    id: Optional[GatewayIdentifier] = None
    type: Optional[GatewayType] = None
    ownerAccount: Optional[OwnerAccount] = None
    region: Optional[Region] = None


class AssociatedGatewayId(DirectConnectGatewayId):
    pass


class PortSpeed(DirectConnectGatewayId):
    pass


class AvailableMacSecPortSpeeds(BaseModel):
    __root__: List[PortSpeed]


class AvailablePortSpeeds(AvailableMacSecPortSpeeds):
    pass


class AwsDevice(DirectConnectGatewayId):
    pass


class AwsDeviceV2(DirectConnectGatewayId):
    pass


class AwsLogicalDeviceId(DirectConnectGatewayId):
    pass


class BGPAuthKey(DirectConnectGatewayId):
    pass


class BGPPeerId(DirectConnectGatewayId):
    pass


class CustomerAddress(DirectConnectGatewayId):
    pass


class BGPPeerState(Enum):
    verifying = 'verifying'
    pending = 'pending'
    available = 'available'
    deleting = 'deleting'
    deleted = 'deleted'


class BGPStatus(Enum):
    up = 'up'
    down = 'down'
    unknown = 'unknown'


class BGPPeer(BaseModel):
    """
    Information about a BGP peer.
    """

    bgpPeerId: Optional[BGPPeerId] = None
    asn: Optional[ASN] = None
    authKey: Optional[BGPAuthKey] = None
    addressFamily: Optional[AddressFamily] = None
    amazonAddress: Optional[AmazonAddress] = None
    customerAddress: Optional[CustomerAddress] = None
    bgpPeerState: Optional[BGPPeerState] = None
    bgpStatus: Optional[BGPStatus] = None
    awsDeviceV2: Optional[AwsDeviceV2] = None
    awsLogicalDeviceId: Optional[AwsLogicalDeviceId] = None


class BGPPeerIdList(BaseModel):
    __root__: List[BGPPeerId]


class BGPPeerList(BaseModel):
    __root__: List[BGPPeer]


class BooleanFlag(BaseModel):
    __root__: bool


class CIDR(DirectConnectGatewayId):
    pass


class ConnectionState(Enum):
    ordering = 'ordering'
    requested = 'requested'
    pending = 'pending'
    available = 'available'
    down = 'down'
    deleting = 'deleting'
    deleted = 'deleted'
    rejected = 'rejected'
    unknown = 'unknown'


class VirtualGatewayId(DirectConnectGatewayId):
    pass


class VirtualInterfaceState(Enum):
    confirming = 'confirming'
    verifying = 'verifying'
    pending = 'pending'
    available = 'available'
    down = 'down'
    deleting = 'deleting'
    deleted = 'deleted'
    rejected = 'rejected'
    unknown = 'unknown'


class LocationCode(DirectConnectGatewayId):
    pass


class PartnerName(DirectConnectGatewayId):
    pass


class LoaIssueTime(BaseModel):
    __root__: datetime


class JumboFrameCapable(BooleanFlag):
    pass


class HasLogicalRedundancy(Enum):
    unknown = 'unknown'
    yes = 'yes'
    no = 'no'


class ProviderName(DirectConnectGatewayId):
    pass


class MacSecCapable(BooleanFlag):
    pass


class PortEncryptionStatus(DirectConnectGatewayId):
    pass


class EncryptionMode(DirectConnectGatewayId):
    pass


class Count(ASN):
    pass


class NewBGPPeer(BaseModel):
    """
    Information about a new BGP peer.
    """

    asn: Optional[ASN] = None
    authKey: Optional[BGPAuthKey] = None
    addressFamily: Optional[AddressFamily] = None
    amazonAddress: Optional[AmazonAddress] = None
    customerAddress: Optional[CustomerAddress] = None


class RequestMACSec(BooleanFlag):
    pass


class GatewayIdToAssociate(DirectConnectGatewayId):
    pass


class DirectConnectGatewayName(DirectConnectGatewayId):
    pass


class LongAsn(ASN):
    pass


class InterconnectName(DirectConnectGatewayId):
    pass


class LagName(DirectConnectGatewayId):
    pass


class DirectConnectGatewayAssociationId(DirectConnectGatewayId):
    pass


class InterconnectState(Enum):
    requested = 'requested'
    pending = 'pending'
    available = 'available'
    down = 'down'
    deleting = 'deleting'
    deleted = 'deleted'
    unknown = 'unknown'


class LoaContentType(Enum):
    application_pdf = 'application/pdf'


class MaxResultSetSize(ASN):
    pass


class PaginationToken(DirectConnectGatewayId):
    pass


class DirectConnectGatewayState(Enum):
    pending = 'pending'
    available = 'available'
    deleting = 'deleting'
    deleted = 'deleted'


class StateChangeError(DirectConnectGatewayId):
    pass


class DirectConnectGatewayAssociationState(Enum):
    associating = 'associating'
    associated = 'associated'
    disassociating = 'disassociating'
    disassociated = 'disassociated'
    updating = 'updating'


class VirtualGatewayRegion(DirectConnectGatewayId):
    pass


class DirectConnectGatewayAssociationProposalState(Enum):
    requested = 'requested'
    accepted = 'accepted'
    deleted = 'deleted'


class VirtualInterfaceRegion(DirectConnectGatewayId):
    pass


class DirectConnectGatewayAttachmentState(Enum):
    attaching = 'attaching'
    attached = 'attached'
    detaching = 'detaching'
    detached = 'detached'


class DirectConnectGatewayAttachmentType(Enum):
    TransitVirtualInterface = 'TransitVirtualInterface'
    PrivateVirtualInterface = 'PrivateVirtualInterface'


class DirectConnectGatewayAttachment(BaseModel):
    """
    Information about an attachment between a Direct Connect gateway and a virtual interface.
    """

    directConnectGatewayId: Optional[DirectConnectGatewayId] = None
    virtualInterfaceId: Optional[VirtualInterfaceId] = None
    virtualInterfaceRegion: Optional[VirtualInterfaceRegion] = None
    virtualInterfaceOwnerAccount: Optional[OwnerAccount] = None
    attachmentState: Optional[DirectConnectGatewayAttachmentState] = None
    attachmentType: Optional[DirectConnectGatewayAttachmentType] = None
    stateChangeError: Optional[StateChangeError] = None


class EndTime(LoaIssueTime):
    pass


class FailureTestHistoryStatus(DirectConnectGatewayId):
    pass


class TestId(DirectConnectGatewayId):
    pass


class LoaContent(DirectConnectGatewayId):
    pass


class LocationName(DirectConnectGatewayId):
    pass


class ProviderList(BaseModel):
    __root__: List[ProviderName]


class Location7(BaseModel):
    """
    Information about an Direct Connect location.
    """

    locationCode: Optional[LocationCode] = None
    locationName: Optional[LocationName] = None
    region: Optional[Region] = None
    availablePortSpeeds: Optional[AvailablePortSpeeds] = None
    availableProviders: Optional[ProviderList] = None
    availableMacSecPortSpeeds: Optional[AvailableMacSecPortSpeeds] = None


class LocationList(BaseModel):
    __root__: List[Location7]


class MTU(ASN):
    pass


class State(DirectConnectGatewayId):
    pass


class StartOnDate(DirectConnectGatewayId):
    pass


class MacSecKey(BaseModel):
    """
    Information about the MAC Security (MACsec) secret key.
    """

    secretARN: Optional[SecretARN] = None
    ckn: Optional[Ckn] = None
    state: Optional[State] = None
    startOn: Optional[StartOnDate] = None


class VirtualInterfaceName(DirectConnectGatewayId):
    pass


class ResourceArn(DirectConnectGatewayId):
    pass


class RouteFilterPrefix(BaseModel):
    """
    Information about a route filter prefix that a customer can advertise through Border Gateway Protocol (BGP) over a public virtual interface.
    """

    cidr: Optional[CIDR] = None


class RouterConfig(DirectConnectGatewayId):
    pass


class TestDuration(ASN):
    pass


class StartTime(LoaIssueTime):
    pass


class TagKey(BaseModel):
    __root__: Annotated[
        str,
        Field(
            max_length=128, min_length=1, regex='^([\\p{L}\\p{Z}\\p{N}_.:/=+\\-@]*)$'
        ),
    ]


class TagValue(BaseModel):
    __root__: Annotated[
        str,
        Field(
            max_length=256, min_length=0, regex='^([\\p{L}\\p{Z}\\p{N}_.:/=+\\-@]*)$'
        ),
    ]


class Tag(BaseModel):
    """
    Information about a tag.
    """

    key: TagKey
    value: Optional[TagValue] = None


class TagKeyList(BaseModel):
    __root__: List[TagKey]


class VirtualGatewayState(DirectConnectGatewayId):
    pass


class VirtualGateway(BaseModel):
    """
    Information about a virtual private gateway for a private virtual interface.
    """

    virtualGatewayId: Optional[VirtualGatewayId] = None
    virtualGatewayState: Optional[VirtualGatewayState] = None


class VirtualGatewayList(BaseModel):
    __root__: List[VirtualGateway]


class VirtualInterfaceType(DirectConnectGatewayId):
    pass


class AllocateConnectionOnInterconnectRequest(BaseModel):
    bandwidth: Bandwidth
    connectionName: ConnectionName
    ownerAccount: OwnerAccount
    interconnectId: InterconnectId
    vlan: VLAN


class AssociateConnectionWithLagRequest(BaseModel):
    connectionId: ConnectionId
    lagId: LagId


class AssociateHostedConnectionRequest(BaseModel):
    connectionId: ConnectionId
    parentConnectionId: ConnectionId


class AssociateMacSecKeyRequest(BaseModel):
    connectionId: ConnectionId
    secretARN: Optional[SecretARN] = None
    ckn: Optional[Ckn] = None
    cak: Optional[Cak] = None


class AssociateVirtualInterfaceRequest(BaseModel):
    virtualInterfaceId: VirtualInterfaceId
    connectionId: ConnectionId


class ConfirmConnectionResponse(BaseModel):
    connectionState: Optional[ConnectionState] = None


class ConfirmConnectionRequest(BaseModel):
    connectionId: ConnectionId


class ConfirmPrivateVirtualInterfaceResponse(BaseModel):
    virtualInterfaceState: Optional[VirtualInterfaceState] = None


class ConfirmPrivateVirtualInterfaceRequest(BaseModel):
    virtualInterfaceId: VirtualInterfaceId
    virtualGatewayId: Optional[VirtualGatewayId] = None
    directConnectGatewayId: Optional[DirectConnectGatewayId] = None


class ConfirmPublicVirtualInterfaceResponse(ConfirmPrivateVirtualInterfaceResponse):
    pass


class ConfirmPublicVirtualInterfaceRequest(BaseModel):
    virtualInterfaceId: VirtualInterfaceId


class ConfirmTransitVirtualInterfaceResponse(ConfirmPrivateVirtualInterfaceResponse):
    pass


class ConfirmTransitVirtualInterfaceRequest(BaseModel):
    virtualInterfaceId: VirtualInterfaceId
    directConnectGatewayId: DirectConnectGatewayId


class CreateBGPPeerRequest(BaseModel):
    virtualInterfaceId: Optional[VirtualInterfaceId] = None
    newBGPPeer: Optional[NewBGPPeer] = None


class CreateDirectConnectGatewayRequest(BaseModel):
    directConnectGatewayName: DirectConnectGatewayName
    amazonSideAsn: Optional[LongAsn] = None


class DeleteBGPPeerRequest(BaseModel):
    virtualInterfaceId: Optional[VirtualInterfaceId] = None
    asn: Optional[ASN] = None
    customerAddress: Optional[CustomerAddress] = None
    bgpPeerId: Optional[BGPPeerId] = None


class DeleteConnectionRequest(BaseModel):
    connectionId: ConnectionId


class DeleteDirectConnectGatewayRequest(BaseModel):
    directConnectGatewayId: DirectConnectGatewayId


class DeleteDirectConnectGatewayAssociationRequest(BaseModel):
    associationId: Optional[DirectConnectGatewayAssociationId] = None
    directConnectGatewayId: Optional[DirectConnectGatewayId] = None
    virtualGatewayId: Optional[VirtualGatewayId] = None


class DeleteDirectConnectGatewayAssociationProposalRequest(BaseModel):
    proposalId: DirectConnectGatewayAssociationProposalId


class DeleteInterconnectResponse(BaseModel):
    interconnectState: Optional[InterconnectState] = None


class DeleteInterconnectRequest(BaseModel):
    interconnectId: InterconnectId


class DeleteLagRequest(BaseModel):
    lagId: LagId


class DeleteVirtualInterfaceResponse(ConfirmPrivateVirtualInterfaceResponse):
    pass


class DeleteVirtualInterfaceRequest(BaseModel):
    virtualInterfaceId: VirtualInterfaceId


class DescribeConnectionLoaRequest(BaseModel):
    connectionId: ConnectionId
    providerName: Optional[ProviderName] = None
    loaContentType: Optional[LoaContentType] = None


class DescribeConnectionsRequest(BaseModel):
    connectionId: Optional[ConnectionId] = None


class DescribeConnectionsOnInterconnectRequest(BaseModel):
    interconnectId: InterconnectId


class DescribeDirectConnectGatewayAssociationProposalsRequest(BaseModel):
    directConnectGatewayId: Optional[DirectConnectGatewayId] = None
    proposalId: Optional[DirectConnectGatewayAssociationProposalId] = None
    associatedGatewayId: Optional[AssociatedGatewayId] = None
    maxResults: Optional[MaxResultSetSize] = None
    nextToken: Optional[PaginationToken] = None


class DescribeDirectConnectGatewayAssociationsRequest(BaseModel):
    associationId: Optional[DirectConnectGatewayAssociationId] = None
    associatedGatewayId: Optional[AssociatedGatewayId] = None
    directConnectGatewayId: Optional[DirectConnectGatewayId] = None
    maxResults: Optional[MaxResultSetSize] = None
    nextToken: Optional[PaginationToken] = None
    virtualGatewayId: Optional[VirtualGatewayId] = None


class DescribeDirectConnectGatewayAttachmentsRequest(BaseModel):
    directConnectGatewayId: Optional[DirectConnectGatewayId] = None
    virtualInterfaceId: Optional[VirtualInterfaceId] = None
    maxResults: Optional[MaxResultSetSize] = None
    nextToken: Optional[PaginationToken] = None


class DescribeDirectConnectGatewaysRequest(BaseModel):
    directConnectGatewayId: Optional[DirectConnectGatewayId] = None
    maxResults: Optional[MaxResultSetSize] = None
    nextToken: Optional[PaginationToken] = None


class DescribeHostedConnectionsRequest(BaseModel):
    connectionId: ConnectionId


class DescribeInterconnectLoaRequest(BaseModel):
    interconnectId: InterconnectId
    providerName: Optional[ProviderName] = None
    loaContentType: Optional[LoaContentType] = None


class DescribeInterconnectsRequest(BaseModel):
    interconnectId: Optional[InterconnectId] = None


class DescribeLagsRequest(BaseModel):
    lagId: Optional[LagId] = None


class Loa(BaseModel):
    """
    Information about a Letter of Authorization - Connecting Facility Assignment (LOA-CFA) for a connection.
    """

    loaContent: Optional[LoaContent] = None
    loaContentType: Optional[LoaContentType] = None


class DescribeLoaRequest(BaseModel):
    connectionId: ConnectionId
    providerName: Optional[ProviderName] = None
    loaContentType: Optional[LoaContentType] = None


class Locations(BaseModel):
    locations: Optional[LocationList] = None


class VirtualGateways(BaseModel):
    virtualGateways: Optional[VirtualGatewayList] = None


class DescribeVirtualInterfacesRequest(BaseModel):
    connectionId: Optional[ConnectionId] = None
    virtualInterfaceId: Optional[VirtualInterfaceId] = None


class DisassociateConnectionFromLagRequest(BaseModel):
    connectionId: ConnectionId
    lagId: LagId


class DisassociateMacSecKeyRequest(BaseModel):
    connectionId: ConnectionId
    secretARN: SecretARN


class ListVirtualInterfaceTestHistoryRequest(BaseModel):
    testId: Optional[TestId] = None
    virtualInterfaceId: Optional[VirtualInterfaceId] = None
    bgpPeers: Optional[BGPPeerIdList] = None
    status: Optional[FailureTestHistoryStatus] = None
    maxResults: Optional[MaxResultSetSize] = None
    nextToken: Optional[PaginationToken] = None


class StartBgpFailoverTestRequest(BaseModel):
    virtualInterfaceId: VirtualInterfaceId
    bgpPeers: Optional[BGPPeerIdList] = None
    testDurationInMinutes: Optional[TestDuration] = None


class StopBgpFailoverTestRequest(BaseModel):
    virtualInterfaceId: VirtualInterfaceId


class UntagResourceRequest(BaseModel):
    resourceArn: ResourceArn
    tagKeys: TagKeyList


class UpdateConnectionRequest(BaseModel):
    connectionId: ConnectionId
    connectionName: Optional[ConnectionName] = None
    encryptionMode: Optional[EncryptionMode] = None


class UpdateLagRequest(BaseModel):
    lagId: LagId
    lagName: Optional[LagName] = None
    minimumLinks: Optional[Count] = None
    encryptionMode: Optional[EncryptionMode] = None


class UpdateVirtualInterfaceAttributesRequest(BaseModel):
    virtualInterfaceId: VirtualInterfaceId
    mtu: Optional[MTU] = None


class RouteFilterPrefixList(BaseModel):
    __root__: List[RouteFilterPrefix]


class DirectConnectGatewayAssociation(BaseModel):
    """
    Information about an association between a Direct Connect gateway and a virtual private gateway or transit gateway.
    """

    directConnectGatewayId: Optional[DirectConnectGatewayId] = None
    directConnectGatewayOwnerAccount: Optional[OwnerAccount] = None
    associationState: Optional[DirectConnectGatewayAssociationState] = None
    stateChangeError: Optional[StateChangeError] = None
    associatedGateway: Optional[AssociatedGateway] = None
    associationId: Optional[DirectConnectGatewayAssociationId] = None
    allowedPrefixesToDirectConnectGateway: Optional[RouteFilterPrefixList] = None
    virtualGatewayId: Optional[VirtualGatewayId] = None
    virtualGatewayRegion: Optional[VirtualGatewayRegion] = None
    virtualGatewayOwnerAccount: Optional[OwnerAccount] = None


class TagList(BaseModel):
    __root__: Annotated[List[Tag], Field(min_items=1)]


class NewPrivateVirtualInterfaceAllocation(BaseModel):
    """
    Information about a private virtual interface to be provisioned on a connection.
    """

    virtualInterfaceName: VirtualInterfaceName
    vlan: VLAN
    asn: ASN
    mtu: Optional[MTU] = None
    authKey: Optional[BGPAuthKey] = None
    amazonAddress: Optional[AmazonAddress] = None
    addressFamily: Optional[AddressFamily] = None
    customerAddress: Optional[CustomerAddress] = None
    tags: Optional[TagList] = None


class NewPublicVirtualInterfaceAllocation(BaseModel):
    """
    Information about a public virtual interface to be provisioned on a connection.
    """

    virtualInterfaceName: VirtualInterfaceName
    vlan: VLAN
    asn: ASN
    authKey: Optional[BGPAuthKey] = None
    amazonAddress: Optional[AmazonAddress] = None
    customerAddress: Optional[CustomerAddress] = None
    addressFamily: Optional[AddressFamily] = None
    routeFilterPrefixes: Optional[RouteFilterPrefixList] = None
    tags: Optional[TagList] = None


class NewTransitVirtualInterfaceAllocation(BaseModel):
    """
    Information about a transit virtual interface to be provisioned on a connection.
    """

    virtualInterfaceName: Optional[VirtualInterfaceName] = None
    vlan: Optional[VLAN] = None
    asn: Optional[ASN] = None
    mtu: Optional[MTU] = None
    authKey: Optional[BGPAuthKey] = None
    amazonAddress: Optional[AmazonAddress] = None
    customerAddress: Optional[CustomerAddress] = None
    addressFamily: Optional[AddressFamily] = None
    tags: Optional[TagList] = None


class MacSecKeyList(BaseModel):
    __root__: List[MacSecKey]


class DirectConnectGatewayAssociationProposal(BaseModel):
    """
    Information about the proposal request to attach a virtual private gateway to a Direct Connect gateway.
    """

    proposalId: Optional[DirectConnectGatewayAssociationProposalId] = None
    directConnectGatewayId: Optional[DirectConnectGatewayId] = None
    directConnectGatewayOwnerAccount: Optional[OwnerAccount] = None
    proposalState: Optional[DirectConnectGatewayAssociationProposalState] = None
    associatedGateway: Optional[AssociatedGateway] = None
    existingAllowedPrefixesToDirectConnectGateway: Optional[
        RouteFilterPrefixList
    ] = None
    requestedAllowedPrefixesToDirectConnectGateway: Optional[
        RouteFilterPrefixList
    ] = None


class DirectConnectGateway(BaseModel):
    """
    Information about a Direct Connect gateway, which enables you to connect virtual interfaces and virtual private gateway or transit gateways.
    """

    directConnectGatewayId: Optional[DirectConnectGatewayId] = None
    directConnectGatewayName: Optional[DirectConnectGatewayName] = None
    amazonSideAsn: Optional[LongAsn] = None
    ownerAccount: Optional[OwnerAccount] = None
    directConnectGatewayState: Optional[DirectConnectGatewayState] = None
    stateChangeError: Optional[StateChangeError] = None


class NewPrivateVirtualInterface(BaseModel):
    """
    Information about a private virtual interface.
    """

    virtualInterfaceName: VirtualInterfaceName
    vlan: VLAN
    asn: ASN
    mtu: Optional[MTU] = None
    authKey: Optional[BGPAuthKey] = None
    amazonAddress: Optional[AmazonAddress] = None
    customerAddress: Optional[CustomerAddress] = None
    addressFamily: Optional[AddressFamily] = None
    virtualGatewayId: Optional[VirtualGatewayId] = None
    directConnectGatewayId: Optional[DirectConnectGatewayId] = None
    tags: Optional[TagList] = None


class NewPublicVirtualInterface(NewPublicVirtualInterfaceAllocation):
    """
    Information about a public virtual interface.
    """

    pass


class NewTransitVirtualInterface(BaseModel):
    """
    Information about a transit virtual interface.
    """

    virtualInterfaceName: Optional[VirtualInterfaceName] = None
    vlan: Optional[VLAN] = None
    asn: Optional[ASN] = None
    mtu: Optional[MTU] = None
    authKey: Optional[BGPAuthKey] = None
    amazonAddress: Optional[AmazonAddress] = None
    customerAddress: Optional[CustomerAddress] = None
    addressFamily: Optional[AddressFamily] = None
    directConnectGatewayId: Optional[DirectConnectGatewayId] = None
    tags: Optional[TagList] = None


class DirectConnectGatewayAssociationProposalList(BaseModel):
    __root__: List[DirectConnectGatewayAssociationProposal]


class DirectConnectGatewayAssociationList(BaseModel):
    __root__: List[DirectConnectGatewayAssociation]


class DirectConnectGatewayAttachmentList(BaseModel):
    __root__: List[DirectConnectGatewayAttachment]


class DirectConnectGatewayList(BaseModel):
    __root__: List[DirectConnectGateway]


class ResourceArnList(BaseModel):
    __root__: List[ResourceArn]


class ResourceTag(BaseModel):
    """
    Information about a tag associated with an Direct Connect resource.
    """

    resourceArn: Optional[ResourceArn] = None
    tags: Optional[TagList] = None


class VirtualInterfaceTestHistory(BaseModel):
    """
    Information about the virtual interface failover test.
    """

    testId: Optional[TestId] = None
    virtualInterfaceId: Optional[VirtualInterfaceId] = None
    bgpPeers: Optional[BGPPeerIdList] = None
    status: Optional[FailureTestHistoryStatus] = None
    ownerAccount: Optional[OwnerAccount] = None
    testDurationInMinutes: Optional[TestDuration] = None
    startTime: Optional[StartTime] = None
    endTime: Optional[EndTime] = None


class AcceptDirectConnectGatewayAssociationProposalResult(BaseModel):
    directConnectGatewayAssociation: Optional[DirectConnectGatewayAssociation] = None


class AcceptDirectConnectGatewayAssociationProposalRequest(BaseModel):
    directConnectGatewayId: DirectConnectGatewayId
    proposalId: DirectConnectGatewayAssociationProposalId
    associatedGatewayOwnerAccount: OwnerAccount
    overrideAllowedPrefixesToDirectConnectGateway: Optional[
        RouteFilterPrefixList
    ] = None


class Connection(BaseModel):
    """
    Information about an Direct Connect connection.
    """

    ownerAccount: Optional[OwnerAccount] = None
    connectionId: Optional[ConnectionId] = None
    connectionName: Optional[ConnectionName] = None
    connectionState: Optional[ConnectionState] = None
    region: Optional[Region] = None
    location: Optional[LocationCode] = None
    bandwidth: Optional[Bandwidth] = None
    vlan: Optional[VLAN] = None
    partnerName: Optional[PartnerName] = None
    loaIssueTime: Optional[LoaIssueTime] = None
    lagId: Optional[LagId] = None
    awsDevice: Optional[AwsDevice] = None
    jumboFrameCapable: Optional[JumboFrameCapable] = None
    awsDeviceV2: Optional[AwsDeviceV2] = None
    awsLogicalDeviceId: Optional[AwsLogicalDeviceId] = None
    hasLogicalRedundancy: Optional[HasLogicalRedundancy] = None
    tags: Optional[TagList] = None
    providerName: Optional[ProviderName] = None
    macSecCapable: Optional[MacSecCapable] = None
    portEncryptionStatus: Optional[PortEncryptionStatus] = None
    encryptionMode: Optional[EncryptionMode] = None
    macSecKeys: Optional[MacSecKeyList] = None


class AllocateHostedConnectionRequest(BaseModel):
    connectionId: ConnectionId
    ownerAccount: OwnerAccount
    bandwidth: Bandwidth
    connectionName: ConnectionName
    vlan: VLAN
    tags: Optional[TagList] = None


class VirtualInterface(BaseModel):
    """
    Information about a virtual interface.
    """

    ownerAccount: Optional[OwnerAccount] = None
    virtualInterfaceId: Optional[VirtualInterfaceId] = None
    location: Optional[LocationCode] = None
    connectionId: Optional[ConnectionId] = None
    virtualInterfaceType: Optional[VirtualInterfaceType] = None
    virtualInterfaceName: Optional[VirtualInterfaceName] = None
    vlan: Optional[VLAN] = None
    asn: Optional[ASN] = None
    amazonSideAsn: Optional[LongAsn] = None
    authKey: Optional[BGPAuthKey] = None
    amazonAddress: Optional[AmazonAddress] = None
    customerAddress: Optional[CustomerAddress] = None
    addressFamily: Optional[AddressFamily] = None
    virtualInterfaceState: Optional[VirtualInterfaceState] = None
    customerRouterConfig: Optional[RouterConfig] = None
    mtu: Optional[MTU] = None
    jumboFrameCapable: Optional[JumboFrameCapable] = None
    virtualGatewayId: Optional[VirtualGatewayId] = None
    directConnectGatewayId: Optional[DirectConnectGatewayId] = None
    routeFilterPrefixes: Optional[RouteFilterPrefixList] = None
    bgpPeers: Optional[BGPPeerList] = None
    region: Optional[Region] = None
    awsDeviceV2: Optional[AwsDeviceV2] = None
    awsLogicalDeviceId: Optional[AwsLogicalDeviceId] = None
    tags: Optional[TagList] = None


class AllocatePrivateVirtualInterfaceRequest(BaseModel):
    connectionId: ConnectionId
    ownerAccount: OwnerAccount
    newPrivateVirtualInterfaceAllocation: NewPrivateVirtualInterfaceAllocation


class AllocatePublicVirtualInterfaceRequest(BaseModel):
    connectionId: ConnectionId
    ownerAccount: OwnerAccount
    newPublicVirtualInterfaceAllocation: NewPublicVirtualInterfaceAllocation


class AllocateTransitVirtualInterfaceResult(BaseModel):
    virtualInterface: Optional[VirtualInterface] = None


class AllocateTransitVirtualInterfaceRequest(BaseModel):
    connectionId: ConnectionId
    ownerAccount: OwnerAccount
    newTransitVirtualInterfaceAllocation: NewTransitVirtualInterfaceAllocation


class AssociateMacSecKeyResponse(BaseModel):
    connectionId: Optional[ConnectionId] = None
    macSecKeys: Optional[MacSecKeyList] = None


class CreateBGPPeerResponse(AllocateTransitVirtualInterfaceResult):
    pass


class CreateConnectionRequest(BaseModel):
    location: LocationCode
    bandwidth: Bandwidth
    connectionName: ConnectionName
    lagId: Optional[LagId] = None
    tags: Optional[TagList] = None
    providerName: Optional[ProviderName] = None
    requestMACSec: Optional[RequestMACSec] = None


class CreateDirectConnectGatewayResult(BaseModel):
    directConnectGateway: Optional[DirectConnectGateway] = None


class CreateDirectConnectGatewayAssociationResult(
    AcceptDirectConnectGatewayAssociationProposalResult
):
    pass


class CreateDirectConnectGatewayAssociationRequest(BaseModel):
    directConnectGatewayId: DirectConnectGatewayId
    gatewayId: Optional[GatewayIdToAssociate] = None
    addAllowedPrefixesToDirectConnectGateway: Optional[RouteFilterPrefixList] = None
    virtualGatewayId: Optional[VirtualGatewayId] = None


class CreateDirectConnectGatewayAssociationProposalResult(BaseModel):
    directConnectGatewayAssociationProposal: Optional[
        DirectConnectGatewayAssociationProposal
    ] = None


class CreateDirectConnectGatewayAssociationProposalRequest(BaseModel):
    directConnectGatewayId: DirectConnectGatewayId
    directConnectGatewayOwnerAccount: OwnerAccount
    gatewayId: GatewayIdToAssociate
    addAllowedPrefixesToDirectConnectGateway: Optional[RouteFilterPrefixList] = None
    removeAllowedPrefixesToDirectConnectGateway: Optional[RouteFilterPrefixList] = None


class Interconnect(BaseModel):
    """
    Information about an interconnect.
    """

    interconnectId: Optional[InterconnectId] = None
    interconnectName: Optional[InterconnectName] = None
    interconnectState: Optional[InterconnectState] = None
    region: Optional[Region] = None
    location: Optional[LocationCode] = None
    bandwidth: Optional[Bandwidth] = None
    loaIssueTime: Optional[LoaIssueTime] = None
    lagId: Optional[LagId] = None
    awsDevice: Optional[AwsDevice] = None
    jumboFrameCapable: Optional[JumboFrameCapable] = None
    awsDeviceV2: Optional[AwsDeviceV2] = None
    awsLogicalDeviceId: Optional[AwsLogicalDeviceId] = None
    hasLogicalRedundancy: Optional[HasLogicalRedundancy] = None
    tags: Optional[TagList] = None
    providerName: Optional[ProviderName] = None


class CreateInterconnectRequest(BaseModel):
    interconnectName: InterconnectName
    bandwidth: Bandwidth
    location: LocationCode
    lagId: Optional[LagId] = None
    tags: Optional[TagList] = None
    providerName: Optional[ProviderName] = None


class CreateLagRequest(BaseModel):
    numberOfConnections: Count
    location: LocationCode
    connectionsBandwidth: Bandwidth
    lagName: LagName
    connectionId: Optional[ConnectionId] = None
    tags: Optional[TagList] = None
    childConnectionTags: Optional[TagList] = None
    providerName: Optional[ProviderName] = None
    requestMACSec: Optional[RequestMACSec] = None


class CreatePrivateVirtualInterfaceRequest(BaseModel):
    connectionId: ConnectionId
    newPrivateVirtualInterface: NewPrivateVirtualInterface


class CreatePublicVirtualInterfaceRequest(BaseModel):
    connectionId: ConnectionId
    newPublicVirtualInterface: NewPublicVirtualInterface


class CreateTransitVirtualInterfaceResult(AllocateTransitVirtualInterfaceResult):
    pass


class CreateTransitVirtualInterfaceRequest(BaseModel):
    connectionId: ConnectionId
    newTransitVirtualInterface: NewTransitVirtualInterface


class DeleteBGPPeerResponse(AllocateTransitVirtualInterfaceResult):
    pass


class DeleteDirectConnectGatewayResult(CreateDirectConnectGatewayResult):
    pass


class DeleteDirectConnectGatewayAssociationResult(
    AcceptDirectConnectGatewayAssociationProposalResult
):
    pass


class DeleteDirectConnectGatewayAssociationProposalResult(
    CreateDirectConnectGatewayAssociationProposalResult
):
    pass


class DescribeConnectionLoaResponse(BaseModel):
    loa: Optional[Loa] = None


class DescribeDirectConnectGatewayAssociationProposalsResult(BaseModel):
    directConnectGatewayAssociationProposals: Optional[
        DirectConnectGatewayAssociationProposalList
    ] = None
    nextToken: Optional[PaginationToken] = None


class DescribeDirectConnectGatewayAssociationsResult(BaseModel):
    directConnectGatewayAssociations: Optional[
        DirectConnectGatewayAssociationList
    ] = None
    nextToken: Optional[PaginationToken] = None


class DescribeDirectConnectGatewayAttachmentsResult(BaseModel):
    directConnectGatewayAttachments: Optional[DirectConnectGatewayAttachmentList] = None
    nextToken: Optional[PaginationToken] = None


class DescribeDirectConnectGatewaysResult(BaseModel):
    directConnectGateways: Optional[DirectConnectGatewayList] = None
    nextToken: Optional[PaginationToken] = None


class DescribeInterconnectLoaResponse(DescribeConnectionLoaResponse):
    pass


class DescribeTagsRequest(BaseModel):
    resourceArns: ResourceArnList


class DisassociateMacSecKeyResponse(AssociateMacSecKeyResponse):
    pass


class StartBgpFailoverTestResponse(BaseModel):
    virtualInterfaceTest: Optional[VirtualInterfaceTestHistory] = None


class StopBgpFailoverTestResponse(StartBgpFailoverTestResponse):
    pass


class TagResourceRequest(BaseModel):
    resourceArn: ResourceArn
    tags: TagList


class UpdateDirectConnectGatewayAssociationResult(
    AcceptDirectConnectGatewayAssociationProposalResult
):
    pass


class UpdateDirectConnectGatewayAssociationRequest(BaseModel):
    associationId: Optional[DirectConnectGatewayAssociationId] = None
    addAllowedPrefixesToDirectConnectGateway: Optional[RouteFilterPrefixList] = None
    removeAllowedPrefixesToDirectConnectGateway: Optional[RouteFilterPrefixList] = None


class ConnectionList(BaseModel):
    __root__: List[Connection]


class ResourceTagList(BaseModel):
    __root__: List[ResourceTag]


class InterconnectList(BaseModel):
    __root__: List[Interconnect]


class VirtualInterfaceTestHistoryList(BaseModel):
    __root__: List[VirtualInterfaceTestHistory]


class VirtualInterfaceList(BaseModel):
    __root__: List[VirtualInterface]


class Lag(BaseModel):
    """
    Information about a link aggregation group (LAG).
    """

    connectionsBandwidth: Optional[Bandwidth] = None
    numberOfConnections: Optional[Count] = None
    lagId: Optional[LagId] = None
    ownerAccount: Optional[OwnerAccount] = None
    lagName: Optional[LagName] = None
    lagState: Optional[InterconnectState] = None
    location: Optional[LocationCode] = None
    region: Optional[Region] = None
    minimumLinks: Optional[Count] = None
    awsDevice: Optional[AwsDevice] = None
    awsDeviceV2: Optional[AwsDeviceV2] = None
    awsLogicalDeviceId: Optional[AwsLogicalDeviceId] = None
    connections: Optional[ConnectionList] = None
    allowsHostedConnections: Optional[BooleanFlag] = None
    jumboFrameCapable: Optional[JumboFrameCapable] = None
    hasLogicalRedundancy: Optional[HasLogicalRedundancy] = None
    tags: Optional[TagList] = None
    providerName: Optional[ProviderName] = None
    macSecCapable: Optional[MacSecCapable] = None
    encryptionMode: Optional[EncryptionMode] = None
    macSecKeys: Optional[MacSecKeyList] = None


class Connections1(BaseModel):
    connections: Optional[ConnectionList] = None


class Interconnects(BaseModel):
    interconnects: Optional[InterconnectList] = None


class DescribeTagsResponse(BaseModel):
    resourceTags: Optional[ResourceTagList] = None


class VirtualInterfaces(BaseModel):
    virtualInterfaces: Optional[VirtualInterfaceList] = None


class ListVirtualInterfaceTestHistoryResponse(BaseModel):
    virtualInterfaceTestHistory: Optional[VirtualInterfaceTestHistoryList] = None
    nextToken: Optional[PaginationToken] = None


class LagList(BaseModel):
    __root__: List[Lag]


class Lags(BaseModel):
    lags: Optional[LagList] = None
