# generated by datamodel-codegen:
#   filename:  openapi.yaml
#   timestamp: 2021-12-31T02:53:31+00:00

from __future__ import annotations

from datetime import datetime
from enum import Enum
from typing import Annotated, Any, List, Optional

from pydantic import BaseModel, Extra, Field


class _String(BaseModel):
    __root__: str


class ValidationException(BaseModel):
    __root__: Any


class InternalServerErrorException(ValidationException):
    pass


class ServiceQuotaExceededException(ValidationException):
    pass


class AccessDeniedException(ValidationException):
    pass


class ResourceNotFoundException(ValidationException):
    pass


class ThrottlingException(ValidationException):
    pass


class ConflictException(ValidationException):
    pass


class EC2SubnetId(_String):
    pass


class LaunchProfileProtocolVersion(BaseModel):
    __root__: Annotated[
        str,
        Field(
            description='The version number of the protocol that is used by the launch profile. The only valid version is "2021-03-31".',
            max_length=10,
            regex='^2021\\-03\\-31$',
        ),
    ]


class StreamingClipboardMode(Enum):
    ENABLED = 'ENABLED'
    DISABLED = 'DISABLED'


class StreamConfigurationMaxSessionLengthInMinutes(BaseModel):
    __root__: Annotated[int, Field(description='', ge=1.0, le=690.0)]


class StudioEncryptionConfigurationKeyArn(BaseModel):
    __root__: Annotated[
        str,
        Field(
            description='The Amazon Resource Name (ARN) for a KMS key that is used to encrypt studio data.',
            min_length=4,
            regex='^arn:.*',
        ),
    ]


class StudioEncryptionConfigurationKeyType(Enum):
    """
    The type of KMS key that is used to encrypt studio data.
    """

    AWS_OWNED_KEY = 'AWS_OWNED_KEY'
    CUSTOMER_MANAGED_KEY = 'CUSTOMER_MANAGED_KEY'


class ComputeFarmConfiguration(BaseModel):
    """
    The configuration for a render farm that is associated with a studio resource.
    """

    activeDirectoryUser: Optional[_String] = None
    endpoint: Optional[_String] = None


class LicenseServiceConfiguration(BaseModel):
    """
    The configuration for a license service that is associated with a studio resource.
    """

    endpoint: Optional[_String] = None


class SecurityGroupId(BaseModel):
    __root__: Annotated[str, Field(description='')]


class DeleteLaunchProfileMemberResponse(BaseModel):
    pass


class DeleteStudioMemberResponse(DeleteLaunchProfileMemberResponse):
    pass


class PutLaunchProfileMembersResponse(DeleteLaunchProfileMemberResponse):
    pass


class PutStudioMembersResponse(DeleteLaunchProfileMemberResponse):
    pass


class TagResourceResponse(DeleteLaunchProfileMemberResponse):
    pass


class UntagResourceResponse(DeleteLaunchProfileMemberResponse):
    pass


class ClientToken(BaseModel):
    __root__: Annotated[str, Field(max_length=64, min_length=1)]


class EulaIdList(BaseModel):
    __root__: Annotated[List[_String], Field(description='')]


class AcceptEulasRequest(BaseModel):
    """
    A collection of EULA acceptances.
    """

    eulaIds: Optional[EulaIdList] = None


class ActiveDirectoryComputerAttributeName(BaseModel):
    __root__: Annotated[
        str,
        Field(
            description='The name for the LDAP attribute.', max_length=40, min_length=1
        ),
    ]


class ActiveDirectoryComputerAttributeValue(BaseModel):
    __root__: Annotated[
        str,
        Field(
            description='The value for the LDAP attribute.', max_length=64, min_length=1
        ),
    ]


class ActiveDirectoryComputerAttribute(BaseModel):
    """
    An LDAP attribute of an Active Directory computer account, in the form of a name:value pair.
    """

    name: Optional[ActiveDirectoryComputerAttributeName] = None
    value: Optional[ActiveDirectoryComputerAttributeValue] = None


class ActiveDirectoryComputerAttributeList(BaseModel):
    """
    A collection of LDAP attributes to apply to Active Directory computer accounts that are created for streaming sessions.
    """

    __root__: Annotated[
        List[ActiveDirectoryComputerAttribute],
        Field(
            description='A collection of LDAP attributes to apply to Active Directory computer accounts that are created for streaming sessions.',
            max_items=50,
        ),
    ]


class DirectoryId(_String):
    pass


class ActiveDirectoryOrganizationalUnitDistinguishedName(BaseModel):
    __root__: Annotated[
        str,
        Field(
            description='The fully-qualified distinguished name of the organizational unit to place the computer account in.',
            max_length=2000,
            min_length=1,
        ),
    ]


class ActiveDirectoryDnsIpAddress(_String):
    pass


class ActiveDirectoryDnsIpAddressList(BaseModel):
    __root__: Annotated[
        List[ActiveDirectoryDnsIpAddress], Field(description='', max_items=10)
    ]


class LaunchProfileDescription(BaseModel):
    __root__: Annotated[str, Field(max_length=256)]


class EC2SubnetIdList(BaseModel):
    __root__: Annotated[List[EC2SubnetId], Field(description='', max_items=6)]


class LaunchProfileProtocolVersionList(BaseModel):
    __root__: Annotated[List[LaunchProfileProtocolVersion], Field(description='')]


class LaunchProfileName(BaseModel):
    __root__: Annotated[str, Field(max_length=64)]


class LaunchProfileStudioComponentIdList(BaseModel):
    __root__: Annotated[
        List[_String], Field(description='', max_items=100, min_items=1)
    ]


class Tags(BaseModel):
    pass

    class Config:
        extra = Extra.allow


class StreamingImageDescription(BaseModel):
    __root__: Annotated[str, Field(description='The description.', max_length=256)]


class EC2ImageId(BaseModel):
    __root__: Annotated[str, Field(description='', regex='^ami-[0-9A-z]+$')]


class StreamingImageName(BaseModel):
    __root__: Annotated[
        str,
        Field(
            description='A friendly name for a streaming image resource.', max_length=64
        ),
    ]


class CreateStreamingImageRequest(BaseModel):
    """
    A collection of streaming images.
    """

    description: Optional[StreamingImageDescription] = None
    ec2ImageId: EC2ImageId
    name: StreamingImageName
    tags: Optional[Tags] = None


class StreamingInstanceType(Enum):
    g4dn_xlarge = 'g4dn.xlarge'
    g4dn_2xlarge = 'g4dn.2xlarge'
    g4dn_4xlarge = 'g4dn.4xlarge'
    g4dn_8xlarge = 'g4dn.8xlarge'
    g4dn_12xlarge = 'g4dn.12xlarge'
    g4dn_16xlarge = 'g4dn.16xlarge'


class StreamingImageId(BaseModel):
    __root__: Annotated[
        str, Field(description='', max_length=22, regex='^[a-zA-Z0-9-_]*$')
    ]


class CreateStreamingSessionRequest(BaseModel):
    """
    A collection of streaming sessions.
    """

    ec2InstanceType: Optional[StreamingInstanceType] = None
    launchProfileId: Optional[_String] = None
    ownedBy: Optional[_String] = None
    streamingImageId: Optional[StreamingImageId] = None
    tags: Optional[Tags] = None


class StreamingSessionStreamExpirationInSeconds(BaseModel):
    __root__: Annotated[int, Field(description='', ge=60.0, le=3600.0)]


class CreateStreamingSessionStreamRequest(BaseModel):
    """
    A list collection streams.
    """

    expirationInSeconds: Optional[StreamingSessionStreamExpirationInSeconds] = None


class StudioComponentDescription(BaseModel):
    __root__: Annotated[str, Field(description='', max_length=256)]


class StudioComponentSecurityGroupIdList(BaseModel):
    __root__: Annotated[
        List[SecurityGroupId], Field(description='', max_items=30, min_items=1)
    ]


class StudioComponentName(BaseModel):
    __root__: Annotated[str, Field(description='', max_length=64)]


class StudioComponentSubtype(Enum):
    AWS_MANAGED_MICROSOFT_AD = 'AWS_MANAGED_MICROSOFT_AD'
    AMAZON_FSX_FOR_WINDOWS = 'AMAZON_FSX_FOR_WINDOWS'
    AMAZON_FSX_FOR_LUSTRE = 'AMAZON_FSX_FOR_LUSTRE'
    CUSTOM = 'CUSTOM'


class StudioComponentType(Enum):
    ACTIVE_DIRECTORY = 'ACTIVE_DIRECTORY'
    SHARED_FILE_SYSTEM = 'SHARED_FILE_SYSTEM'
    COMPUTE_FARM = 'COMPUTE_FARM'
    LICENSE_SERVICE = 'LICENSE_SERVICE'
    CUSTOM = 'CUSTOM'


class StudioDisplayName(LaunchProfileName):
    pass


class StudioEncryptionConfiguration(BaseModel):
    """
    Configuration of the encryption method that is used for the studio.
    """

    keyArn: Optional[StudioEncryptionConfigurationKeyArn] = None
    keyType: StudioEncryptionConfigurationKeyType


class StudioName(BaseModel):
    __root__: Annotated[
        str, Field(description='', max_length=64, min_length=3, regex='^[a-z0-9]*$')
    ]


class CreateStudioRequest(BaseModel):
    """
    A collection of studio resources.
    """

    adminRoleArn: _String
    displayName: StudioDisplayName
    studioEncryptionConfiguration: Optional[StudioEncryptionConfiguration] = None
    studioName: StudioName
    tags: Optional[Tags] = None
    userRoleArn: _String


class DeleteLaunchProfileMemberRequest(BaseModel):
    pass


class DeleteLaunchProfileRequest(BaseModel):
    pass


class DeleteStreamingImageRequest(BaseModel):
    pass


class DeleteStreamingSessionRequest(BaseModel):
    pass


class DeleteStudioComponentRequest(BaseModel):
    pass


class DeleteStudioMemberRequest(BaseModel):
    pass


class DeleteStudioRequest(BaseModel):
    pass


class Timestamp(BaseModel):
    __root__: Annotated[datetime, Field(description='')]


class EulaId(BaseModel):
    __root__: Annotated[
        str,
        Field(
            description='Represents a EULA resource.',
            max_length=22,
            regex='^[a-zA-Z0-9-_]*$',
        ),
    ]


class EulaName(LaunchProfileName):
    pass


class Eula(BaseModel):
    """
    Represents a EULA resource.
    """

    content: Optional[_String] = None
    createdAt: Optional[Timestamp] = None
    eulaId: Optional[EulaId] = None
    name: Optional[EulaName] = None
    updatedAt: Optional[Timestamp] = None


class EulaAcceptanceId(BaseModel):
    __root__: Annotated[
        str,
        Field(
            description='The EULA acceptance ID.',
            max_length=22,
            regex='^[a-zA-Z0-9-_]*$',
        ),
    ]


class EulaAcceptance(BaseModel):
    acceptedAt: Optional[Timestamp] = None
    acceptedBy: Optional[_String] = None
    accepteeId: Optional[_String] = None
    eulaAcceptanceId: Optional[EulaAcceptanceId] = None
    eulaId: Optional[EulaId] = None


class EulaList(BaseModel):
    __root__: Annotated[List[Eula], Field(description='')]


class GetEulaRequest(BaseModel):
    pass


class GetLaunchProfileDetailsRequest(BaseModel):
    pass


class MultiValueQueryStringList(BaseModel):
    __root__: List[_String]


class GetLaunchProfileInitializationRequest(BaseModel):
    pass


class GetLaunchProfileMemberRequest(BaseModel):
    pass


class GetLaunchProfileRequest(BaseModel):
    pass


class GetStreamingImageRequest(BaseModel):
    pass


class GetStreamingSessionRequest(BaseModel):
    pass


class GetStreamingSessionStreamRequest(BaseModel):
    pass


class GetStudioComponentRequest(BaseModel):
    pass


class GetStudioMemberRequest(BaseModel):
    pass


class GetStudioRequest(BaseModel):
    pass


class LaunchProfileId(BaseModel):
    __root__: Annotated[str, Field(max_length=22, regex='^[a-zA-Z0-9-_]*$')]


class LaunchProfileState(Enum):
    CREATE_IN_PROGRESS = 'CREATE_IN_PROGRESS'
    READY = 'READY'
    UPDATE_IN_PROGRESS = 'UPDATE_IN_PROGRESS'
    DELETE_IN_PROGRESS = 'DELETE_IN_PROGRESS'
    DELETED = 'DELETED'
    DELETE_FAILED = 'DELETE_FAILED'
    CREATE_FAILED = 'CREATE_FAILED'
    UPDATE_FAILED = 'UPDATE_FAILED'


class LaunchProfileStatusCode(Enum):
    LAUNCH_PROFILE_CREATED = 'LAUNCH_PROFILE_CREATED'
    LAUNCH_PROFILE_UPDATED = 'LAUNCH_PROFILE_UPDATED'
    LAUNCH_PROFILE_DELETED = 'LAUNCH_PROFILE_DELETED'
    LAUNCH_PROFILE_CREATE_IN_PROGRESS = 'LAUNCH_PROFILE_CREATE_IN_PROGRESS'
    LAUNCH_PROFILE_UPDATE_IN_PROGRESS = 'LAUNCH_PROFILE_UPDATE_IN_PROGRESS'
    LAUNCH_PROFILE_DELETE_IN_PROGRESS = 'LAUNCH_PROFILE_DELETE_IN_PROGRESS'
    INTERNAL_ERROR = 'INTERNAL_ERROR'
    STREAMING_IMAGE_NOT_FOUND = 'STREAMING_IMAGE_NOT_FOUND'
    STREAMING_IMAGE_NOT_READY = 'STREAMING_IMAGE_NOT_READY'
    LAUNCH_PROFILE_WITH_STREAM_SESSIONS_NOT_DELETED = (
        'LAUNCH_PROFILE_WITH_STREAM_SESSIONS_NOT_DELETED'
    )
    ENCRYPTION_KEY_ACCESS_DENIED = 'ENCRYPTION_KEY_ACCESS_DENIED'
    ENCRYPTION_KEY_NOT_FOUND = 'ENCRYPTION_KEY_NOT_FOUND'
    INVALID_SUBNETS_PROVIDED = 'INVALID_SUBNETS_PROVIDED'


class LaunchProfileSecurityGroupIdList(BaseModel):
    __root__: Annotated[List[SecurityGroupId], Field(description='', min_items=1)]


class LaunchPurpose(BaseModel):
    __root__: Annotated[
        str,
        Field(description='The launch purpose.', max_length=64, regex='^[A-Z0-9_]+$'),
    ]


class LaunchProfilePlatform(Enum):
    LINUX = 'LINUX'
    WINDOWS = 'WINDOWS'


class StudioComponentId(LaunchProfileId):
    pass


class StudioComponentInitializationScriptContent(BaseModel):
    __root__: Annotated[str, Field(description='', max_length=5120, min_length=1)]


class LaunchProfileInitializationScript(BaseModel):
    script: Optional[StudioComponentInitializationScriptContent] = None
    studioComponentId: Optional[StudioComponentId] = None
    studioComponentName: Optional[StudioComponentName] = None


class LaunchProfilePersona(Enum):
    USER = 'USER'


class LinuxMountPoint(BaseModel):
    __root__: Annotated[
        str,
        Field(
            description='', max_length=128, regex='^(/?|(\\$HOME)?(/[^/\\n\\s\\\\]+)*)$'
        ),
    ]


class ListEulaAcceptancesRequest(BaseModel):
    pass


class ListEulasRequest(BaseModel):
    pass


class MaxResults(BaseModel):
    __root__: Annotated[int, Field(ge=1.0, le=100.0)]


class ListLaunchProfileMembersRequest(BaseModel):
    pass


class ListLaunchProfilesRequest(BaseModel):
    pass


class ListStreamingImagesRequest(BaseModel):
    pass


class ListStreamingSessionsRequest(BaseModel):
    pass


class ListStudioComponentsRequest(BaseModel):
    pass


class ListStudioMembersRequest(BaseModel):
    pass


class ListStudiosRequest(BaseModel):
    pass


class ListTagsForResourceRequest(BaseModel):
    pass


class StudioPersona(Enum):
    ADMINISTRATOR = 'ADMINISTRATOR'


class Region(BaseModel):
    __root__: Annotated[
        str,
        Field(
            description='',
            max_length=50,
            regex='[a-z]{2}-?(iso|gov)?-{1}[a-z]*-{1}[0-9]',
        ),
    ]


class ScriptParameterKey(BaseModel):
    __root__: Annotated[
        str,
        Field(
            description='A script parameter key.',
            max_length=64,
            min_length=1,
            regex='^[a-zA-Z_][a-zA-Z0-9_]+$',
        ),
    ]


class ScriptParameterValue(BaseModel):
    __root__: Annotated[
        str,
        Field(description='A script parameter value.', max_length=256, min_length=1),
    ]


class WindowsMountDrive(BaseModel):
    __root__: Annotated[str, Field(description='', regex='^[A-Z]$')]


class StartStudioSSOConfigurationRepairRequest(BaseModel):
    pass


class StreamingImageOwner(BaseModel):
    __root__: Annotated[
        str,
        Field(
            description="<p>StreamingImageOwner is the owner of a particular streaming image.</p> <p>This string is either the studioId that contains the streaming image, or the word 'AMAZON' for images provided by Nimble Studio.</p>"
        ),
    ]


class StreamingImagePlatform(BaseModel):
    __root__: Annotated[
        str,
        Field(
            description='The platform of this Streaming Image, either WINDOWS or LINUX.',
            regex='^[a-zA-Z]*$',
        ),
    ]


class StreamingImageState(Enum):
    CREATE_IN_PROGRESS = 'CREATE_IN_PROGRESS'
    READY = 'READY'
    DELETE_IN_PROGRESS = 'DELETE_IN_PROGRESS'
    DELETED = 'DELETED'
    UPDATE_IN_PROGRESS = 'UPDATE_IN_PROGRESS'
    UPDATE_FAILED = 'UPDATE_FAILED'
    CREATE_FAILED = 'CREATE_FAILED'
    DELETE_FAILED = 'DELETE_FAILED'


class StreamingImageStatusCode(Enum):
    """
    The status code.
    """

    STREAMING_IMAGE_CREATE_IN_PROGRESS = 'STREAMING_IMAGE_CREATE_IN_PROGRESS'
    STREAMING_IMAGE_READY = 'STREAMING_IMAGE_READY'
    STREAMING_IMAGE_DELETE_IN_PROGRESS = 'STREAMING_IMAGE_DELETE_IN_PROGRESS'
    STREAMING_IMAGE_DELETED = 'STREAMING_IMAGE_DELETED'
    STREAMING_IMAGE_UPDATE_IN_PROGRESS = 'STREAMING_IMAGE_UPDATE_IN_PROGRESS'
    INTERNAL_ERROR = 'INTERNAL_ERROR'


class StreamingImageEncryptionConfigurationKeyArn(BaseModel):
    __root__: Annotated[str, Field(description='', min_length=4, regex='^arn:.*')]


class StreamingImageEncryptionConfigurationKeyType(Enum):
    CUSTOMER_MANAGED_KEY = 'CUSTOMER_MANAGED_KEY'


class StreamingSessionId(_String):
    pass


class StreamingSessionState(Enum):
    """
    The streaming session state.
    """

    CREATE_IN_PROGRESS = 'CREATE_IN_PROGRESS'
    DELETE_IN_PROGRESS = 'DELETE_IN_PROGRESS'
    READY = 'READY'
    DELETED = 'DELETED'
    CREATE_FAILED = 'CREATE_FAILED'
    DELETE_FAILED = 'DELETE_FAILED'


class StreamingSessionStatusCode(Enum):
    STREAMING_SESSION_READY = 'STREAMING_SESSION_READY'
    STREAMING_SESSION_DELETED = 'STREAMING_SESSION_DELETED'
    STREAMING_SESSION_CREATE_IN_PROGRESS = 'STREAMING_SESSION_CREATE_IN_PROGRESS'
    STREAMING_SESSION_DELETE_IN_PROGRESS = 'STREAMING_SESSION_DELETE_IN_PROGRESS'
    INTERNAL_ERROR = 'INTERNAL_ERROR'
    INSUFFICIENT_CAPACITY = 'INSUFFICIENT_CAPACITY'
    ACTIVE_DIRECTORY_DOMAIN_JOIN_ERROR = 'ACTIVE_DIRECTORY_DOMAIN_JOIN_ERROR'
    NETWORK_CONNECTION_ERROR = 'NETWORK_CONNECTION_ERROR'
    INITIALIZATION_SCRIPT_ERROR = 'INITIALIZATION_SCRIPT_ERROR'
    DECRYPT_STREAMING_IMAGE_ERROR = 'DECRYPT_STREAMING_IMAGE_ERROR'
    NETWORK_INTERFACE_ERROR = 'NETWORK_INTERFACE_ERROR'


class StreamingSessionStreamState(Enum):
    READY = 'READY'
    CREATE_IN_PROGRESS = 'CREATE_IN_PROGRESS'
    DELETE_IN_PROGRESS = 'DELETE_IN_PROGRESS'
    DELETED = 'DELETED'
    CREATE_FAILED = 'CREATE_FAILED'
    DELETE_FAILED = 'DELETE_FAILED'


class StreamingSessionStreamStatusCode(Enum):
    STREAM_CREATE_IN_PROGRESS = 'STREAM_CREATE_IN_PROGRESS'
    STREAM_READY = 'STREAM_READY'
    STREAM_DELETE_IN_PROGRESS = 'STREAM_DELETE_IN_PROGRESS'
    STREAM_DELETED = 'STREAM_DELETED'
    INTERNAL_ERROR = 'INTERNAL_ERROR'
    NETWORK_CONNECTION_ERROR = 'NETWORK_CONNECTION_ERROR'


class StudioStatusCode(Enum):
    """
    The status code.
    """

    STUDIO_CREATED = 'STUDIO_CREATED'
    STUDIO_DELETED = 'STUDIO_DELETED'
    STUDIO_UPDATED = 'STUDIO_UPDATED'
    STUDIO_CREATE_IN_PROGRESS = 'STUDIO_CREATE_IN_PROGRESS'
    STUDIO_UPDATE_IN_PROGRESS = 'STUDIO_UPDATE_IN_PROGRESS'
    STUDIO_DELETE_IN_PROGRESS = 'STUDIO_DELETE_IN_PROGRESS'
    STUDIO_WITH_LAUNCH_PROFILES_NOT_DELETED = 'STUDIO_WITH_LAUNCH_PROFILES_NOT_DELETED'
    STUDIO_WITH_STUDIO_COMPONENTS_NOT_DELETED = (
        'STUDIO_WITH_STUDIO_COMPONENTS_NOT_DELETED'
    )
    STUDIO_WITH_STREAMING_IMAGES_NOT_DELETED = (
        'STUDIO_WITH_STREAMING_IMAGES_NOT_DELETED'
    )
    AWS_SSO_NOT_ENABLED = 'AWS_SSO_NOT_ENABLED'
    AWS_SSO_ACCESS_DENIED = 'AWS_SSO_ACCESS_DENIED'
    ROLE_NOT_OWNED_BY_STUDIO_OWNER = 'ROLE_NOT_OWNED_BY_STUDIO_OWNER'
    ROLE_COULD_NOT_BE_ASSUMED = 'ROLE_COULD_NOT_BE_ASSUMED'
    INTERNAL_ERROR = 'INTERNAL_ERROR'
    ENCRYPTION_KEY_NOT_FOUND = 'ENCRYPTION_KEY_NOT_FOUND'
    ENCRYPTION_KEY_ACCESS_DENIED = 'ENCRYPTION_KEY_ACCESS_DENIED'
    AWS_SSO_CONFIGURATION_REPAIRED = 'AWS_SSO_CONFIGURATION_REPAIRED'
    AWS_SSO_CONFIGURATION_REPAIR_IN_PROGRESS = (
        'AWS_SSO_CONFIGURATION_REPAIR_IN_PROGRESS'
    )


class StudioComponentStatusCode(Enum):
    """
    <p>The current status of the studio component resource.</p> <p>When the resource is in the 'READY' state, the status code signals what the last mutation made to the resource was.</p> <p>When the resource is in a CREATE_FAILED/UPDATE_FAILED/DELETE_FAILED state, the status code signals what went wrong and why the mutation failed.</p>
    """

    ACTIVE_DIRECTORY_ALREADY_EXISTS = 'ACTIVE_DIRECTORY_ALREADY_EXISTS'
    STUDIO_COMPONENT_CREATED = 'STUDIO_COMPONENT_CREATED'
    STUDIO_COMPONENT_UPDATED = 'STUDIO_COMPONENT_UPDATED'
    STUDIO_COMPONENT_DELETED = 'STUDIO_COMPONENT_DELETED'
    ENCRYPTION_KEY_ACCESS_DENIED = 'ENCRYPTION_KEY_ACCESS_DENIED'
    ENCRYPTION_KEY_NOT_FOUND = 'ENCRYPTION_KEY_NOT_FOUND'
    STUDIO_COMPONENT_CREATE_IN_PROGRESS = 'STUDIO_COMPONENT_CREATE_IN_PROGRESS'
    STUDIO_COMPONENT_UPDATE_IN_PROGRESS = 'STUDIO_COMPONENT_UPDATE_IN_PROGRESS'
    STUDIO_COMPONENT_DELETE_IN_PROGRESS = 'STUDIO_COMPONENT_DELETE_IN_PROGRESS'
    INTERNAL_ERROR = 'INTERNAL_ERROR'


class StudioComponentInitializationScriptRunContext(Enum):
    SYSTEM_INITIALIZATION = 'SYSTEM_INITIALIZATION'
    USER_INITIALIZATION = 'USER_INITIALIZATION'


class StudioComponentSummary(BaseModel):
    createdAt: Optional[Timestamp] = None
    createdBy: Optional[_String] = None
    description: Optional[StudioComponentDescription] = None
    name: Optional[StudioComponentName] = None
    studioComponentId: Optional[StudioComponentId] = None
    subtype: Optional[StudioComponentSubtype] = None
    type: Optional[StudioComponentType] = None
    updatedAt: Optional[Timestamp] = None
    updatedBy: Optional[_String] = None


class TagResourceRequest(BaseModel):
    """
    The ARN for the role that manages access.
    """

    tags: Optional[Tags] = None


class UntagResourceRequest(BaseModel):
    pass


class UpdateLaunchProfileMemberRequest(BaseModel):
    """
    The principal ID.
    """

    persona: LaunchProfilePersona


class UpdateStreamingImageRequest(BaseModel):
    """
    The streaming image ID.
    """

    description: Optional[StreamingImageDescription] = None
    name: Optional[StreamingImageName] = None


class UpdateStudioRequest(BaseModel):
    """
    The studio ID.
    """

    adminRoleArn: Optional[_String] = None
    displayName: Optional[StudioDisplayName] = None
    userRoleArn: Optional[_String] = None


class StreamingInstanceTypeList(BaseModel):
    """
    The EC2 instance types that users can select from when launching a streaming session with this launch profile.
    """

    __root__: Annotated[
        List[StreamingInstanceType],
        Field(
            description='The EC2 instance types that users can select from when launching a streaming session with this launch profile.',
            max_items=30,
            min_items=1,
        ),
    ]


class StreamingImageIdList(BaseModel):
    """
    A list of streaming image IDs that users can select from when launching a streaming session with this launch profile.
    """

    __root__: Annotated[
        List[StreamingImageId],
        Field(
            description='A list of streaming image IDs that users can select from when launching a streaming session with this launch profile.',
            max_items=20,
        ),
    ]


class ActiveDirectoryConfiguration(BaseModel):
    """
    The configuration for a Microsoft Active Directory (Microsoft AD) studio resource.
    """

    computerAttributes: Optional[ActiveDirectoryComputerAttributeList] = None
    directoryId: Optional[DirectoryId] = None
    organizationalUnitDistinguishedName: Optional[
        ActiveDirectoryOrganizationalUnitDistinguishedName
    ] = None


class SharedFileSystemConfiguration(BaseModel):
    """
    The configuration for a shared file storage system that is associated with a studio resource.
    """

    endpoint: Optional[_String] = None
    fileSystemId: Optional[_String] = None
    linuxMountPoint: Optional[LinuxMountPoint] = None
    shareName: Optional[_String] = None
    windowsMountDrive: Optional[WindowsMountDrive] = None


class StudioComponentInitializationScript(BaseModel):
    """
    Initialization scripts for studio components.
    """

    launchProfileProtocolVersion: Optional[LaunchProfileProtocolVersion] = None
    platform: Optional[LaunchProfilePlatform] = None
    runContext: Optional[StudioComponentInitializationScriptRunContext] = None
    script: Optional[StudioComponentInitializationScriptContent] = None


class ScriptParameterKeyValue(BaseModel):
    """
    A parameter for a studio component script, in the form of a key:value pair.
    """

    key: Optional[ScriptParameterKey] = None
    value: Optional[ScriptParameterValue] = None


class GetEulaResponse(BaseModel):
    eula: Optional[Eula] = None


class ListEulasResponse(BaseModel):
    eulas: Optional[EulaList] = None
    nextToken: Optional[_String] = None


class ListTagsForResourceResponse(BaseModel):
    tags: Optional[Tags] = None


class NewLaunchProfileMember(BaseModel):
    persona: LaunchProfilePersona
    principalId: _String


class NewStudioMember(BaseModel):
    persona: StudioPersona
    principalId: _String


class EulaAcceptanceList(BaseModel):
    __root__: Annotated[List[EulaAcceptance], Field(description='')]


class StreamConfigurationCreate(BaseModel):
    clipboardMode: StreamingClipboardMode
    ec2InstanceTypes: StreamingInstanceTypeList
    maxSessionLengthInMinutes: Optional[
        StreamConfigurationMaxSessionLengthInMinutes
    ] = None
    streamingImageIds: StreamingImageIdList


class CreateLaunchProfileRequest(BaseModel):
    """
    A collection of launch profiles.
    """

    description: Optional[LaunchProfileDescription] = None
    ec2SubnetIds: EC2SubnetIdList
    launchProfileProtocolVersions: LaunchProfileProtocolVersionList
    name: LaunchProfileName
    streamConfiguration: StreamConfigurationCreate
    studioComponentIds: LaunchProfileStudioComponentIdList
    tags: Optional[Tags] = None


class StreamingSession(BaseModel):
    arn: Optional[_String] = None
    createdAt: Optional[Timestamp] = None
    createdBy: Optional[_String] = None
    ec2InstanceType: Optional[_String] = None
    launchProfileId: Optional[_String] = None
    ownedBy: Optional[_String] = None
    sessionId: Optional[StreamingSessionId] = None
    state: Optional[StreamingSessionState] = None
    statusCode: Optional[StreamingSessionStatusCode] = None
    statusMessage: Optional[_String] = None
    streamingImageId: Optional[StreamingImageId] = None
    tags: Optional[Tags] = None
    terminateAt: Optional[Timestamp] = None
    updatedAt: Optional[Timestamp] = None
    updatedBy: Optional[_String] = None


class StreamingSessionStream(BaseModel):
    createdAt: Optional[Timestamp] = None
    createdBy: Optional[_String] = None
    expiresAt: Optional[Timestamp] = None
    ownedBy: Optional[_String] = None
    state: Optional[StreamingSessionStreamState] = None
    statusCode: Optional[StreamingSessionStreamStatusCode] = None
    streamId: Optional[_String] = None
    url: Optional[_String] = None


class StudioComponentConfiguration(BaseModel):
    """
    The configuration of the studio component, based on component type.
    """

    activeDirectoryConfiguration: Optional[ActiveDirectoryConfiguration] = None
    computeFarmConfiguration: Optional[ComputeFarmConfiguration] = None
    licenseServiceConfiguration: Optional[LicenseServiceConfiguration] = None
    sharedFileSystemConfiguration: Optional[SharedFileSystemConfiguration] = None


class StudioComponentInitializationScriptList(BaseModel):
    __root__: Annotated[
        List[StudioComponentInitializationScript], Field(description='')
    ]


class StudioComponentScriptParameterKeyValueList(BaseModel):
    __root__: Annotated[
        List[ScriptParameterKeyValue], Field(description='', max_items=30)
    ]


class CreateStudioComponentRequest(BaseModel):
    """
    The studio components.
    """

    configuration: Optional[StudioComponentConfiguration] = None
    description: Optional[StudioComponentDescription] = None
    ec2SecurityGroupIds: Optional[StudioComponentSecurityGroupIdList] = None
    initializationScripts: Optional[StudioComponentInitializationScriptList] = None
    name: StudioComponentName
    scriptParameters: Optional[StudioComponentScriptParameterKeyValueList] = None
    subtype: Optional[StudioComponentSubtype] = None
    tags: Optional[Tags] = None
    type: StudioComponentType


class StudioComponent(BaseModel):
    """
    A network that is used by a studio’s users and workflows, including render farm, Active Directory, licensing, and file system.
    """

    arn: Optional[_String] = None
    configuration: Optional[StudioComponentConfiguration] = None
    createdAt: Optional[Timestamp] = None
    createdBy: Optional[_String] = None
    description: Optional[StudioComponentDescription] = None
    ec2SecurityGroupIds: Optional[StudioComponentSecurityGroupIdList] = None
    initializationScripts: Optional[StudioComponentInitializationScriptList] = None
    name: Optional[StudioComponentName] = None
    scriptParameters: Optional[StudioComponentScriptParameterKeyValueList] = None
    state: Optional[LaunchProfileState] = None
    statusCode: Optional[StudioComponentStatusCode] = None
    statusMessage: Optional[_String] = None
    studioComponentId: Optional[StudioComponentId] = None
    subtype: Optional[StudioComponentSubtype] = None
    tags: Optional[Tags] = None
    type: Optional[StudioComponentType] = None
    updatedAt: Optional[Timestamp] = None
    updatedBy: Optional[_String] = None


class Studio(BaseModel):
    adminRoleArn: Optional[_String] = None
    arn: Optional[_String] = None
    createdAt: Optional[Timestamp] = None
    displayName: Optional[StudioDisplayName] = None
    homeRegion: Optional[Region] = None
    ssoClientId: Optional[_String] = None
    state: Optional[LaunchProfileState] = None
    statusCode: Optional[StudioStatusCode] = None
    statusMessage: Optional[_String] = None
    studioEncryptionConfiguration: Optional[StudioEncryptionConfiguration] = None
    studioId: Optional[_String] = None
    studioName: Optional[StudioName] = None
    studioUrl: Optional[_String] = None
    tags: Optional[Tags] = None
    updatedAt: Optional[Timestamp] = None
    userRoleArn: Optional[_String] = None


class StudioComponentSummaryList(BaseModel):
    __root__: Annotated[List[StudioComponentSummary], Field(description='')]


class LaunchProfileMembership(BaseModel):
    identityStoreId: Optional[_String] = None
    persona: Optional[LaunchProfilePersona] = None
    principalId: Optional[_String] = None


class StudioMembership(BaseModel):
    identityStoreId: Optional[_String] = None
    persona: Optional[StudioPersona] = None
    principalId: Optional[_String] = None


class StreamConfiguration(BaseModel):
    """
    A configuration for a streaming session.
    """

    clipboardMode: Optional[StreamingClipboardMode] = None
    ec2InstanceTypes: Optional[StreamingInstanceTypeList] = None
    maxSessionLengthInMinutes: Optional[
        StreamConfigurationMaxSessionLengthInMinutes
    ] = None
    streamingImageIds: Optional[StreamingImageIdList] = None


class LaunchProfileInitializationActiveDirectory(BaseModel):
    computerAttributes: Optional[ActiveDirectoryComputerAttributeList] = None
    directoryId: Optional[DirectoryId] = None
    directoryName: Optional[_String] = None
    dnsIpAddresses: Optional[ActiveDirectoryDnsIpAddressList] = None
    organizationalUnitDistinguishedName: Optional[
        ActiveDirectoryOrganizationalUnitDistinguishedName
    ] = None
    studioComponentId: Optional[StudioComponentId] = None
    studioComponentName: Optional[StudioComponentName] = None


class LaunchProfileInitializationScriptList(BaseModel):
    __root__: Annotated[List[LaunchProfileInitializationScript], Field(description='')]


class LaunchProfileMembershipList(BaseModel):
    __root__: Annotated[
        List[LaunchProfileMembership], Field(description='', max_items=20)
    ]


class StreamingSessionList(BaseModel):
    __root__: Annotated[List[StreamingSession], Field(description='')]


class StudioComponentList(BaseModel):
    __root__: Annotated[List[StudioComponent], Field(description='', max_items=50)]


class StudioMembershipList(BaseModel):
    __root__: Annotated[List[StudioMembership], Field(description='', max_items=20)]


class StudioList(BaseModel):
    __root__: Annotated[List[Studio], Field(description='')]


class NewLaunchProfileMemberList(BaseModel):
    __root__: Annotated[
        List[NewLaunchProfileMember], Field(description='', max_items=20, min_items=1)
    ]


class NewStudioMemberList(BaseModel):
    __root__: Annotated[
        List[NewStudioMember], Field(description='', max_items=20, min_items=1)
    ]


class PutLaunchProfileMembersRequest(BaseModel):
    """
    Information about a launch profile membership.
    """

    identityStoreId: _String
    members: NewLaunchProfileMemberList


class PutStudioMembersRequest(BaseModel):
    """
    A launch profile membership collection.
    """

    identityStoreId: _String
    members: NewStudioMemberList


class StreamingImageEncryptionConfiguration(BaseModel):
    keyArn: Optional[StreamingImageEncryptionConfigurationKeyArn] = None
    keyType: StreamingImageEncryptionConfigurationKeyType


class UpdateLaunchProfileRequest(BaseModel):
    """
    The launch profile ID.
    """

    description: Optional[LaunchProfileDescription] = None
    launchProfileProtocolVersions: Optional[LaunchProfileProtocolVersionList] = None
    name: Optional[LaunchProfileName] = None
    streamConfiguration: Optional[StreamConfigurationCreate] = None
    studioComponentIds: Optional[LaunchProfileStudioComponentIdList] = None


class UpdateStudioComponentRequest(BaseModel):
    """
    The studio component ID.
    """

    configuration: Optional[StudioComponentConfiguration] = None
    description: Optional[StudioComponentDescription] = None
    ec2SecurityGroupIds: Optional[StudioComponentSecurityGroupIdList] = None
    initializationScripts: Optional[StudioComponentInitializationScriptList] = None
    name: Optional[StudioComponentName] = None
    scriptParameters: Optional[StudioComponentScriptParameterKeyValueList] = None
    subtype: Optional[StudioComponentSubtype] = None
    type: Optional[StudioComponentType] = None


class AcceptEulasResponse(BaseModel):
    eulaAcceptances: Optional[EulaAcceptanceList] = None


class CreateStreamingSessionResponse(BaseModel):
    session: Optional[StreamingSession] = None


class CreateStreamingSessionStreamResponse(BaseModel):
    stream: Optional[StreamingSessionStream] = None


class CreateStudioResponse(BaseModel):
    studio: Optional[Studio] = None


class CreateStudioComponentResponse(BaseModel):
    studioComponent: Optional[StudioComponent] = None


class DeleteStreamingSessionResponse(CreateStreamingSessionResponse):
    pass


class DeleteStudioResponse(CreateStudioResponse):
    pass


class DeleteStudioComponentResponse(CreateStudioComponentResponse):
    pass


class GetLaunchProfileMemberResponse(BaseModel):
    member: Optional[LaunchProfileMembership] = None


class GetStreamingSessionResponse(CreateStreamingSessionResponse):
    pass


class GetStreamingSessionStreamResponse(CreateStreamingSessionStreamResponse):
    pass


class GetStudioResponse(CreateStudioResponse):
    pass


class GetStudioComponentResponse(CreateStudioComponentResponse):
    pass


class GetStudioMemberResponse(BaseModel):
    member: Optional[StudioMembership] = None


class ListEulaAcceptancesResponse(BaseModel):
    eulaAcceptances: Optional[EulaAcceptanceList] = None
    nextToken: Optional[_String] = None


class ListLaunchProfileMembersResponse(BaseModel):
    members: Optional[LaunchProfileMembershipList] = None
    nextToken: Optional[_String] = None


class ListStreamingSessionsResponse(BaseModel):
    nextToken: Optional[_String] = None
    sessions: Optional[StreamingSessionList] = None


class ListStudioComponentsResponse(BaseModel):
    nextToken: Optional[_String] = None
    studioComponents: Optional[StudioComponentList] = None


class ListStudioMembersResponse(BaseModel):
    members: Optional[StudioMembershipList] = None
    nextToken: Optional[_String] = None


class ListStudiosResponse(BaseModel):
    nextToken: Optional[_String] = None
    studios: Optional[StudioList] = None


class StartStudioSSOConfigurationRepairResponse(CreateStudioResponse):
    pass


class UpdateLaunchProfileMemberResponse(GetLaunchProfileMemberResponse):
    pass


class UpdateStudioResponse(CreateStudioResponse):
    pass


class UpdateStudioComponentResponse(CreateStudioComponentResponse):
    pass


class LaunchProfile(BaseModel):
    arn: Optional[_String] = None
    createdAt: Optional[Timestamp] = None
    createdBy: Optional[_String] = None
    description: Optional[LaunchProfileDescription] = None
    ec2SubnetIds: Optional[EC2SubnetIdList] = None
    launchProfileId: Optional[LaunchProfileId] = None
    launchProfileProtocolVersions: Optional[LaunchProfileProtocolVersionList] = None
    name: Optional[LaunchProfileName] = None
    state: Optional[LaunchProfileState] = None
    statusCode: Optional[LaunchProfileStatusCode] = None
    statusMessage: Optional[_String] = None
    streamConfiguration: Optional[StreamConfiguration] = None
    studioComponentIds: Optional[LaunchProfileStudioComponentIdList] = None
    tags: Optional[Tags] = None
    updatedAt: Optional[Timestamp] = None
    updatedBy: Optional[_String] = None


class StreamingImage(BaseModel):
    arn: Optional[_String] = None
    description: Optional[StreamingImageDescription] = None
    ec2ImageId: Optional[EC2ImageId] = None
    encryptionConfiguration: Optional[StreamingImageEncryptionConfiguration] = None
    eulaIds: Optional[EulaIdList] = None
    name: Optional[StreamingImageName] = None
    owner: Optional[StreamingImageOwner] = None
    platform: Optional[StreamingImagePlatform] = None
    state: Optional[StreamingImageState] = None
    statusCode: Optional[StreamingImageStatusCode] = None
    statusMessage: Optional[_String] = None
    streamingImageId: Optional[StreamingImageId] = None
    tags: Optional[Tags] = None


class StreamingImageList(BaseModel):
    __root__: Annotated[List[StreamingImage], Field(description='')]


class LaunchProfileInitialization(BaseModel):
    activeDirectory: Optional[LaunchProfileInitializationActiveDirectory] = None
    ec2SecurityGroupIds: Optional[LaunchProfileSecurityGroupIdList] = None
    launchProfileId: Optional[LaunchProfileId] = None
    launchProfileProtocolVersion: Optional[LaunchProfileProtocolVersion] = None
    launchPurpose: Optional[LaunchPurpose] = None
    name: Optional[LaunchProfileName] = None
    platform: Optional[LaunchProfilePlatform] = None
    systemInitializationScripts: Optional[LaunchProfileInitializationScriptList] = None
    userInitializationScripts: Optional[LaunchProfileInitializationScriptList] = None


class LaunchProfileList(BaseModel):
    __root__: Annotated[List[LaunchProfile], Field(description='')]


class CreateLaunchProfileResponse(BaseModel):
    launchProfile: Optional[LaunchProfile] = None


class CreateStreamingImageResponse(BaseModel):
    streamingImage: Optional[StreamingImage] = None


class DeleteLaunchProfileResponse(CreateLaunchProfileResponse):
    pass


class DeleteStreamingImageResponse(CreateStreamingImageResponse):
    pass


class GetLaunchProfileResponse(CreateLaunchProfileResponse):
    pass


class GetLaunchProfileDetailsResponse(BaseModel):
    launchProfile: Optional[LaunchProfile] = None
    streamingImages: Optional[StreamingImageList] = None
    studioComponentSummaries: Optional[StudioComponentSummaryList] = None


class GetLaunchProfileInitializationResponse(BaseModel):
    launchProfileInitialization: Optional[LaunchProfileInitialization] = None


class GetStreamingImageResponse(CreateStreamingImageResponse):
    pass


class ListLaunchProfilesResponse(BaseModel):
    launchProfiles: Optional[LaunchProfileList] = None
    nextToken: Optional[_String] = None


class ListStreamingImagesResponse(BaseModel):
    nextToken: Optional[_String] = None
    streamingImages: Optional[StreamingImageList] = None


class UpdateLaunchProfileResponse(CreateLaunchProfileResponse):
    pass


class UpdateStreamingImageResponse(CreateStreamingImageResponse):
    pass
