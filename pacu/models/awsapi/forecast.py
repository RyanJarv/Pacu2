# generated by datamodel-codegen:
#   filename:  openapi.yaml
#   timestamp: 2021-12-31T02:49:39+00:00

from __future__ import annotations

from datetime import datetime
from enum import Enum
from typing import Annotated, Any, List, Optional

from pydantic import BaseModel, Extra, Field, SecretStr


class InvalidInputException(BaseModel):
    __root__: Any


class ResourceAlreadyExistsException(InvalidInputException):
    pass


class LimitExceededException(InvalidInputException):
    pass


class ResourceNotFoundException(InvalidInputException):
    pass


class ResourceInUseException(InvalidInputException):
    pass


class InvalidNextTokenException(InvalidInputException):
    pass


class TagResourceResponse(BaseModel):
    pass


class UntagResourceResponse(TagResourceResponse):
    pass


class UpdateDatasetGroupResponse(TagResourceResponse):
    pass


class Arn(BaseModel):
    __root__: Annotated[
        str, Field(max_length=256, regex='^[a-zA-Z0-9\\-\\_\\.\\/\\:]+$')
    ]


class ArnList(BaseModel):
    __root__: List[Arn]


class AttributeType(Enum):
    string = 'string'
    integer = 'integer'
    float = 'float'
    timestamp = 'timestamp'
    geolocation = 'geolocation'


class AutoMLOverrideStrategy(Enum):
    LatencyOptimized = 'LatencyOptimized'


class Boolean(BaseModel):
    __root__: bool


class Name(BaseModel):
    __root__: Annotated[
        str, Field(max_length=63, min_length=1, regex='^[a-zA-Z][a-zA-Z0-9_]*')
    ]


class Double(BaseModel):
    __root__: float


class ScalingType(Enum):
    Auto = 'Auto'
    Linear = 'Linear'
    Logarithmic = 'Logarithmic'
    ReverseLogarithmic = 'ReverseLogarithmic'


class ContinuousParameterRange(BaseModel):
    """
    Specifies a continuous hyperparameter and it's range of tunable values. This object is part of the <a>ParameterRanges</a> object.
    """

    Name: Name
    MaxValue: Double
    MinValue: Double
    ScalingType: Optional[ScalingType] = None


class ContinuousParameterRanges(BaseModel):
    __root__: Annotated[
        List[ContinuousParameterRange], Field(max_items=20, min_items=1)
    ]


class Domain(Enum):
    RETAIL = 'RETAIL'
    CUSTOM = 'CUSTOM'
    INVENTORY_PLANNING = 'INVENTORY_PLANNING'
    EC2_CAPACITY = 'EC2_CAPACITY'
    WORK_FORCE = 'WORK_FORCE'
    WEB_TRAFFIC = 'WEB_TRAFFIC'
    METRICS = 'METRICS'


class TimestampFormat(BaseModel):
    __root__: Annotated[
        str, Field(max_length=256, regex="^[a-zA-Z0-9\\-\\:\\.\\,\\'\\s]+$")
    ]


class TimeZone(BaseModel):
    __root__: Annotated[str, Field(max_length=256, regex='^[a-zA-Z0-9\\/\\+\\-\\_]+$')]


class UseGeolocationForTimeZone(Boolean):
    pass


class GeolocationFormat(BaseModel):
    __root__: Annotated[str, Field(max_length=256, regex='^[a-zA-Z0-9_]+$')]


class DatasetType(Enum):
    TARGET_TIME_SERIES = 'TARGET_TIME_SERIES'
    RELATED_TIME_SERIES = 'RELATED_TIME_SERIES'
    ITEM_METADATA = 'ITEM_METADATA'


class Frequency(BaseModel):
    __root__: Annotated[str, Field(regex='^Y|M|W|D|H|30min|15min|10min|5min|1min$')]


class Integer(BaseModel):
    __root__: int


class TrainingParameters(BaseModel):
    pass

    class Config:
        extra = Extra.allow


class EvaluationParameters(BaseModel):
    """
    Parameters that define how to split a dataset into training data and testing data, and the number of iterations to perform. These parameters are specified in the predefined algorithms but you can override them in the <a>CreatePredictor</a> request.
    """

    NumberOfBacktestWindows: Optional[Integer] = None
    BackTestWindowOffset: Optional[Integer] = None


class OptimizationMetric(Enum):
    WAPE = 'WAPE'
    RMSE = 'RMSE'
    AverageWeightedQuantileLoss = 'AverageWeightedQuantileLoss'
    MASE = 'MASE'
    MAPE = 'MAPE'


class Timestamp(BaseModel):
    __root__: datetime


class DatasetGroupSummary(BaseModel):
    """
    Provides a summary of the dataset group properties used in the <a>ListDatasetGroups</a> operation. To get the complete set of properties, call the <a>DescribeDatasetGroup</a> operation, and provide the <code>DatasetGroupArn</code>.
    """

    DatasetGroupArn: Optional[Arn] = None
    DatasetGroupName: Optional[Name] = None
    CreationTime: Optional[Timestamp] = None
    LastModificationTime: Optional[Timestamp] = None


class DatasetGroups(BaseModel):
    __root__: List[DatasetGroupSummary]


class Status(BaseModel):
    __root__: Annotated[str, Field(max_length=256)]


class ErrorMessage(BaseModel):
    __root__: str


class DatasetSummary(BaseModel):
    """
    Provides a summary of the dataset properties used in the <a>ListDatasets</a> operation. To get the complete set of properties, call the <a>DescribeDataset</a> operation, and provide the <code>DatasetArn</code>.
    """

    DatasetArn: Optional[Arn] = None
    DatasetName: Optional[Name] = None
    DatasetType: Optional[DatasetType] = None
    Domain: Optional[Domain] = None
    CreationTime: Optional[Timestamp] = None
    LastModificationTime: Optional[Timestamp] = None


class Datasets(BaseModel):
    __root__: List[DatasetSummary]


class Long(Integer):
    pass


class FieldStatistics(BaseModel):
    pass

    class Config:
        extra = Extra.allow


class Message(ErrorMessage):
    pass


class String(BaseModel):
    __root__: Annotated[str, Field(max_length=256, regex='^[a-zA-Z0-9\\_]+$')]


class KMSKeyArn(BaseModel):
    __root__: Annotated[str, Field(max_length=256, regex='arn:aws:kms:.*:key/.*')]


class ForecastType(BaseModel):
    __root__: Annotated[str, Field(regex='(^0?\\.\\d\\d?$|^mean$)')]


class ErrorMetric(BaseModel):
    """
    Provides detailed error metrics to evaluate the performance of a predictor. This object is part of the <a>Metrics</a> object.
    """

    ForecastType: Optional[ForecastType] = None
    WAPE: Optional[Double] = None
    RMSE: Optional[Double] = None
    MASE: Optional[Double] = None
    MAPE: Optional[Double] = None


class ErrorMetrics(BaseModel):
    __root__: List[ErrorMetric]


class EvaluationType(Enum):
    SUMMARY = 'SUMMARY'
    COMPUTED = 'COMPUTED'


class ForecastDimensions(BaseModel):
    __root__: Annotated[List[Name], Field(max_items=5, min_items=1)]


class FeaturizationMethodName(Enum):
    filling = 'filling'


class FeaturizationMethodParameters(TrainingParameters):
    pass


class FeaturizationMethod(BaseModel):
    """
    <p>Provides information about the method that featurizes (transforms) a dataset field. The method is part of the <code>FeaturizationPipeline</code> of the <a>Featurization</a> object. </p> <p>The following is an example of how you specify a <code>FeaturizationMethod</code> object.</p> <p> <code>{</code> </p> <p> <code>"FeaturizationMethodName": "filling",</code> </p> <p> <code>"FeaturizationMethodParameters": {"aggregation": "sum", "middlefill": "zero", "backfill": "zero"}</code> </p> <p> <code>}</code> </p>
    """

    FeaturizationMethodName: FeaturizationMethodName
    FeaturizationMethodParameters: Optional[FeaturizationMethodParameters] = None


class ParameterValue(BaseModel):
    __root__: Annotated[
        str,
        Field(max_length=256, regex='^[a-zA-Z0-9\\-\\_\\.\\/\\[\\]\\,\\"\\\\\\s]+$'),
    ]


class Statistics(BaseModel):
    """
    Provides statistics for each data field imported into to an Amazon Forecast dataset with the <a>CreateDatasetImportJob</a> operation.
    """

    Count: Optional[Integer] = None
    CountDistinct: Optional[Integer] = None
    CountNull: Optional[Integer] = None
    CountNan: Optional[Integer] = None
    Min: Optional[String] = None
    Max: Optional[String] = None
    Avg: Optional[Double] = None
    Stddev: Optional[Double] = None
    CountLong: Optional[Long] = None
    CountDistinctLong: Optional[Long] = None
    CountNullLong: Optional[Long] = None
    CountNanLong: Optional[Long] = None


class FilterConditionString(Enum):
    IS = 'IS'
    IS_NOT = 'IS_NOT'


class Filter(BaseModel):
    """
    Describes a filter for choosing a subset of objects. Each filter consists of a condition and a match statement. The condition is either <code>IS</code> or <code>IS_NOT</code>, which specifies whether to include or exclude the objects that match the statement, respectively. The match statement consists of a key and a value.
    """

    Key: String
    Value: Arn
    Condition: FilterConditionString


class Filters(BaseModel):
    __root__: List[Filter]


class ForecastSummary(BaseModel):
    """
    Provides a summary of the forecast properties used in the <a>ListForecasts</a> operation. To get the complete set of properties, call the <a>DescribeForecast</a> operation, and provide the <code>ForecastArn</code> that is listed in the summary.
    """

    ForecastArn: Optional[Arn] = None
    ForecastName: Optional[Name] = None
    PredictorArn: Optional[String] = None
    DatasetGroupArn: Optional[String] = None
    Status: Optional[Status] = None
    Message: Optional[ErrorMessage] = None
    CreationTime: Optional[Timestamp] = None
    LastModificationTime: Optional[Timestamp] = None


class Forecasts(BaseModel):
    __root__: List[ForecastSummary]


class IntegerParameterRange(BaseModel):
    """
    Specifies an integer hyperparameter and it's range of tunable values. This object is part of the <a>ParameterRanges</a> object.
    """

    Name: Name
    MaxValue: Integer
    MinValue: Integer
    ScalingType: Optional[ScalingType] = None


class IntegerParameterRanges(BaseModel):
    __root__: Annotated[List[IntegerParameterRange], Field(max_items=20, min_items=1)]


class NextToken(BaseModel):
    __root__: Annotated[str, Field(max_length=3000, min_length=1)]


class MaxResults(BaseModel):
    __root__: Annotated[int, Field(ge=1.0, le=100.0)]


class ParameterKey(BaseModel):
    __root__: Annotated[
        str, Field(max_length=256, regex='^[a-zA-Z0-9\\-\\_\\.\\/\\[\\]\\,\\\\]+$')
    ]


class PredictorSummary(BaseModel):
    """
    Provides a summary of the predictor properties that are used in the <a>ListPredictors</a> operation. To get the complete set of properties, call the <a>DescribePredictor</a> operation, and provide the listed <code>PredictorArn</code>.
    """

    PredictorArn: Optional[Arn] = None
    PredictorName: Optional[Name] = None
    DatasetGroupArn: Optional[Arn] = None
    Status: Optional[Status] = None
    Message: Optional[ErrorMessage] = None
    CreationTime: Optional[Timestamp] = None
    LastModificationTime: Optional[Timestamp] = None


class S3Path(BaseModel):
    __root__: Annotated[str, Field(regex='^s3://[a-z0-9].+$')]


class SchemaAttribute(BaseModel):
    """
    An attribute of a schema, which defines a dataset field. A schema attribute is required for every field in a dataset. The <a>Schema</a> object contains an array of <code>SchemaAttribute</code> objects.
    """

    AttributeName: Optional[Name] = None
    AttributeType: Optional[AttributeType] = None


class Value(BaseModel):
    __root__: Annotated[str, Field(max_length=256, regex='^[a-zA-Z0-9\\_\\-]+$')]


class SupplementaryFeature(BaseModel):
    """
    <p>Describes a supplementary feature of a dataset group. This object is part of the <a>InputDataConfig</a> object. Forecast supports the Weather Index and Holidays built-in featurizations.</p> <p> <b>Weather Index</b> </p> <p>The Amazon Forecast Weather Index is a built-in featurization that incorporates historical and projected weather information into your model. The Weather Index supplements your datasets with over two years of historical weather data and up to 14 days of projected weather data. For more information, see <a href="https://docs.aws.amazon.com/forecast/latest/dg/weather.html">Amazon Forecast Weather Index</a>.</p> <p> <b>Holidays</b> </p> <p>Holidays is a built-in featurization that incorporates a feature-engineered dataset of national holiday information into your model. It provides native support for the holiday calendars of 66 countries. To view the holiday calendars, refer to the <a href="http://jollyday.sourceforge.net/data.html">Jollyday</a> library. For more information, see <a href="https://docs.aws.amazon.com/forecast/latest/dg/holidays.html">Holidays Featurization</a>.</p>
    """

    Name: Name
    Value: Value


class TagKey(BaseModel):
    __root__: Annotated[
        SecretStr,
        Field(
            max_length=128, min_length=1, regex='^([\\p{L}\\p{Z}\\p{N}_.:/=+\\-@]*)$'
        ),
    ]


class TagValue(BaseModel):
    __root__: Annotated[
        SecretStr,
        Field(
            max_length=256, min_length=0, regex='^([\\p{L}\\p{Z}\\p{N}_.:/=+\\-@]*)$'
        ),
    ]


class Tag(BaseModel):
    """
    <p>The optional metadata that you apply to a resource to help you categorize and organize them. Each tag consists of a key and an optional value, both of which you define.</p> <p>The following basic restrictions apply to tags:</p> <ul> <li> <p>Maximum number of tags per resource - 50.</p> </li> <li> <p>For each resource, each tag key must be unique, and each tag key can have only one value.</p> </li> <li> <p>Maximum key length - 128 Unicode characters in UTF-8.</p> </li> <li> <p>Maximum value length - 256 Unicode characters in UTF-8.</p> </li> <li> <p>If your tagging schema is used across multiple services and resources, remember that other services may have restrictions on allowed characters. Generally allowed characters are: letters, numbers, and spaces representable in UTF-8, and the following characters: + - = . _ : / @.</p> </li> <li> <p>Tag keys and values are case sensitive.</p> </li> <li> <p>Do not use <code>aws:</code>, <code>AWS:</code>, or any upper or lowercase combination of such as a prefix for keys as it is reserved for AWS use. You cannot edit or delete tag keys with this prefix. Values can have this prefix. If a tag value has <code>aws</code> as its prefix but the key does not, then Forecast considers it to be a user tag and will count against the limit of 50 tags. Tags with only the key prefix of <code>aws</code> do not count against your tags per resource limit.</p> </li> </ul>
    """

    Key: TagKey
    Value: TagValue


class TagKeys(BaseModel):
    __root__: Annotated[List[TagKey], Field(max_items=200, min_items=0)]


class TestWindowSummary(BaseModel):
    """
    The status, start time, and end time of a backtest, as well as a failure reason if applicable.
    """

    TestWindowStart: Optional[Timestamp] = None
    TestWindowEnd: Optional[Timestamp] = None
    Status: Optional[Status] = None
    Message: Optional[ErrorMessage] = None


class WeightedQuantileLoss(BaseModel):
    """
    The weighted loss value for a quantile. This object is part of the <a>Metrics</a> object.
    """

    Quantile: Optional[Double] = None
    LossValue: Optional[Double] = None


class CreateDatasetResponse(BaseModel):
    DatasetArn: Optional[Arn] = None


class CreateDatasetGroupResponse(BaseModel):
    DatasetGroupArn: Optional[Arn] = None


class CreateDatasetImportJobResponse(BaseModel):
    DatasetImportJobArn: Optional[Arn] = None


class CreateForecastResponse(BaseModel):
    ForecastArn: Optional[Arn] = None


class CreateForecastExportJobResponse(BaseModel):
    ForecastExportJobArn: Optional[Arn] = None


class CreatePredictorResponse(BaseModel):
    PredictorArn: Optional[Arn] = None


class CreatePredictorBacktestExportJobResponse(BaseModel):
    PredictorBacktestExportJobArn: Optional[Arn] = None


class DeleteDatasetRequest(BaseModel):
    DatasetArn: Arn


class DeleteDatasetGroupRequest(BaseModel):
    DatasetGroupArn: Arn


class DeleteDatasetImportJobRequest(BaseModel):
    DatasetImportJobArn: Arn


class DeleteForecastRequest(BaseModel):
    ForecastArn: Arn


class DeleteForecastExportJobRequest(BaseModel):
    ForecastExportJobArn: Arn


class DeletePredictorRequest(BaseModel):
    PredictorArn: Arn


class DeletePredictorBacktestExportJobRequest(BaseModel):
    PredictorBacktestExportJobArn: Arn


class DeleteResourceTreeRequest(BaseModel):
    ResourceArn: Arn


class DescribeDatasetRequest(BaseModel):
    DatasetArn: Arn


class DescribeDatasetGroupResponse(BaseModel):
    DatasetGroupName: Optional[Name] = None
    DatasetGroupArn: Optional[Arn] = None
    DatasetArns: Optional[ArnList] = None
    Domain: Optional[Domain] = None
    Status: Optional[Status] = None
    CreationTime: Optional[Timestamp] = None
    LastModificationTime: Optional[Timestamp] = None


class DescribeDatasetGroupRequest(BaseModel):
    DatasetGroupArn: Arn


class DescribeDatasetImportJobRequest(BaseModel):
    DatasetImportJobArn: Arn


class DescribeForecastRequest(BaseModel):
    ForecastArn: Arn


class DescribeForecastExportJobRequest(BaseModel):
    ForecastExportJobArn: Arn


class DescribePredictorRequest(BaseModel):
    PredictorArn: Arn


class DescribePredictorBacktestExportJobRequest(BaseModel):
    PredictorBacktestExportJobArn: Arn


class GetAccuracyMetricsRequest(BaseModel):
    PredictorArn: Arn


class ListDatasetGroupsResponse(BaseModel):
    DatasetGroups: Optional[DatasetGroups] = None
    NextToken: Optional[NextToken] = None


class ListDatasetGroupsRequest(BaseModel):
    NextToken: Optional[NextToken] = None
    MaxResults: Optional[MaxResults] = None


class ListDatasetImportJobsRequest(BaseModel):
    NextToken: Optional[NextToken] = None
    MaxResults: Optional[MaxResults] = None
    Filters: Optional[Filters] = None


class ListDatasetsResponse(BaseModel):
    Datasets: Optional[Datasets] = None
    NextToken: Optional[NextToken] = None


class ListDatasetsRequest(BaseModel):
    NextToken: Optional[NextToken] = None
    MaxResults: Optional[MaxResults] = None


class ListForecastExportJobsRequest(BaseModel):
    NextToken: Optional[NextToken] = None
    MaxResults: Optional[MaxResults] = None
    Filters: Optional[Filters] = None


class ListForecastsResponse(BaseModel):
    Forecasts: Optional[Forecasts] = None
    NextToken: Optional[NextToken] = None


class ListForecastsRequest(BaseModel):
    NextToken: Optional[NextToken] = None
    MaxResults: Optional[MaxResults] = None
    Filters: Optional[Filters] = None


class ListPredictorBacktestExportJobsRequest(BaseModel):
    NextToken: Optional[NextToken] = None
    MaxResults: Optional[MaxResults] = None
    Filters: Optional[Filters] = None


class ListPredictorsRequest(BaseModel):
    NextToken: Optional[NextToken] = None
    MaxResults: Optional[MaxResults] = None
    Filters: Optional[Filters] = None


class ListTagsForResourceRequest(BaseModel):
    ResourceArn: Arn


class StopResourceRequest(BaseModel):
    ResourceArn: Arn


class UntagResourceRequest(BaseModel):
    ResourceArn: Arn
    TagKeys: TagKeys


class UpdateDatasetGroupRequest(BaseModel):
    DatasetGroupArn: Arn
    DatasetArns: ArnList


class Values(BaseModel):
    __root__: Annotated[List[Value], Field(max_items=20, min_items=1)]


class CategoricalParameterRange(BaseModel):
    """
    Specifies a categorical hyperparameter and it's range of tunable values. This object is part of the <a>ParameterRanges</a> object.
    """

    Name: Name
    Values: Values


class CategoricalParameterRanges(BaseModel):
    __root__: Annotated[
        List[CategoricalParameterRange], Field(max_items=20, min_items=1)
    ]


class Tags(BaseModel):
    __root__: Annotated[List[Tag], Field(max_items=200, min_items=0)]


class EncryptionConfig(BaseModel):
    """
    An AWS Key Management Service (KMS) key and an AWS Identity and Access Management (IAM) role that Amazon Forecast can assume to access the key. You can specify this optional object in the <a>CreateDataset</a> and <a>CreatePredictor</a> requests.
    """

    RoleArn: Arn
    KMSKeyArn: KMSKeyArn


class ForecastTypes(BaseModel):
    __root__: Annotated[List[ForecastType], Field(max_items=20, min_items=1)]


class S3Config(BaseModel):
    """
    The path to the file(s) in an Amazon Simple Storage Service (Amazon S3) bucket, and an AWS Identity and Access Management (IAM) role that Amazon Forecast can assume to access the file(s). Optionally, includes an AWS Key Management Service (KMS) key. This object is part of the <a>DataSource</a> object that is submitted in the <a>CreateDatasetImportJob</a> request, and part of the <a>DataDestination</a> object.
    """

    Path: S3Path
    RoleArn: Arn
    KMSKeyArn: Optional[KMSKeyArn] = None


class FeaturizationPipeline(BaseModel):
    __root__: Annotated[List[FeaturizationMethod], Field(max_items=1, min_items=1)]


class Featurization(BaseModel):
    """
    <p>Provides featurization (transformation) information for a dataset field. This object is part of the <a>FeaturizationConfig</a> object.</p> <p>For example:</p> <p> <code>{</code> </p> <p> <code>"AttributeName": "demand",</code> </p> <p> <code>FeaturizationPipeline [ {</code> </p> <p> <code>"FeaturizationMethodName": "filling",</code> </p> <p> <code>"FeaturizationMethodParameters": {"aggregation": "avg", "backfill": "nan"}</code> </p> <p> <code>} ]</code> </p> <p> <code>}</code> </p>
    """

    AttributeName: Name
    FeaturizationPipeline: Optional[FeaturizationPipeline] = None


class Featurizations(BaseModel):
    __root__: Annotated[List[Featurization], Field(max_items=50, min_items=1)]


class ParameterRanges(BaseModel):
    """
    Specifies the categorical, continuous, and integer hyperparameters, and their ranges of tunable values. The range of tunable values determines which values that a hyperparameter tuning job can choose for the specified hyperparameter. This object is part of the <a>HyperParameterTuningJobConfig</a> object.
    """

    CategoricalParameterRanges: Optional[CategoricalParameterRanges] = None
    ContinuousParameterRanges: Optional[ContinuousParameterRanges] = None
    IntegerParameterRanges: Optional[IntegerParameterRanges] = None


class SupplementaryFeatures(BaseModel):
    __root__: Annotated[List[SupplementaryFeature], Field(max_items=2, min_items=1)]


class Predictors(BaseModel):
    __root__: List[PredictorSummary]


class WeightedQuantileLosses(BaseModel):
    __root__: List[WeightedQuantileLoss]


class Metrics(BaseModel):
    """
    Provides metrics that are used to evaluate the performance of a predictor. This object is part of the <a>WindowSummary</a> object.
    """

    RMSE: Optional[Double] = None
    WeightedQuantileLosses: Optional[WeightedQuantileLosses] = None
    ErrorMetrics: Optional[ErrorMetrics] = None
    AverageWeightedQuantileLoss: Optional[Double] = None


class TestWindowDetails(BaseModel):
    __root__: List[TestWindowSummary]


class PredictorExecution(BaseModel):
    """
    The algorithm used to perform a backtest and the status of those tests.
    """

    AlgorithmArn: Optional[Arn] = None
    TestWindows: Optional[TestWindowDetails] = None


class PredictorExecutions(BaseModel):
    __root__: Annotated[List[PredictorExecution], Field(max_items=5, min_items=1)]


class SchemaAttributes(BaseModel):
    __root__: Annotated[List[SchemaAttribute], Field(max_items=100, min_items=1)]


class WindowSummary(BaseModel):
    """
    <p>The metrics for a time range within the evaluation portion of a dataset. This object is part of the <a>EvaluationResult</a> object.</p> <p>The <code>TestWindowStart</code> and <code>TestWindowEnd</code> parameters are determined by the <code>BackTestWindowOffset</code> parameter of the <a>EvaluationParameters</a> object.</p>
    """

    TestWindowStart: Optional[Timestamp] = None
    TestWindowEnd: Optional[Timestamp] = None
    ItemCount: Optional[Integer] = None
    EvaluationType: Optional[EvaluationType] = None
    Metrics: Optional[Metrics] = None


class CreateDatasetGroupRequest(BaseModel):
    DatasetGroupName: Name
    Domain: Domain
    DatasetArns: Optional[ArnList] = None
    Tags: Optional[Tags] = None


class CreateForecastRequest(BaseModel):
    ForecastName: Name
    PredictorArn: Arn
    ForecastTypes: Optional[ForecastTypes] = None
    Tags: Optional[Tags] = None


class DescribeForecastResponse(BaseModel):
    ForecastArn: Optional[Arn] = None
    ForecastName: Optional[Name] = None
    ForecastTypes: Optional[ForecastTypes] = None
    PredictorArn: Optional[Arn] = None
    DatasetGroupArn: Optional[Arn] = None
    EstimatedTimeRemainingInMinutes: Optional[Long] = None
    Status: Optional[String] = None
    Message: Optional[ErrorMessage] = None
    CreationTime: Optional[Timestamp] = None
    LastModificationTime: Optional[Timestamp] = None


class ListPredictorsResponse(BaseModel):
    Predictors: Optional[Predictors] = None
    NextToken: Optional[NextToken] = None


class ListTagsForResourceResponse(BaseModel):
    Tags: Optional[Tags] = None


class TagResourceRequest(BaseModel):
    ResourceArn: Arn
    Tags: Tags


class DataSource(BaseModel):
    """
    The source of your training data, an AWS Identity and Access Management (IAM) role that allows Amazon Forecast to access the data and, optionally, an AWS Key Management Service (KMS) key. This object is submitted in the <a>CreateDatasetImportJob</a> request.
    """

    S3Config: S3Config


class Schema(BaseModel):
    """
    Defines the fields of a dataset. You specify this object in the <a>CreateDataset</a> request.
    """

    Attributes: Optional[SchemaAttributes] = None


class DataDestination(DataSource):
    """
    The destination for an export job. Provide an S3 path, an AWS Identity and Access Management (IAM) role that allows Amazon Forecast to access the location, and an AWS Key Management Service (KMS) key (optional).
    """

    pass


class HyperParameterTuningJobConfig(BaseModel):
    """
    <p>Configuration information for a hyperparameter tuning job. You specify this object in the <a>CreatePredictor</a> request.</p> <p>A <i>hyperparameter</i> is a parameter that governs the model training process. You set hyperparameters before training starts, unlike model parameters, which are determined during training. The values of the hyperparameters effect which values are chosen for the model parameters.</p> <p>In a <i>hyperparameter tuning job</i>, Amazon Forecast chooses the set of hyperparameter values that optimize a specified metric. Forecast accomplishes this by running many training jobs over a range of hyperparameter values. The optimum set of values depends on the algorithm, the training data, and the specified metric objective.</p>
    """

    ParameterRanges: Optional[ParameterRanges] = None


class InputDataConfig(BaseModel):
    """
    The data used to train a predictor. The data includes a dataset group and any supplementary features. You specify this object in the <a>CreatePredictor</a> request.
    """

    DatasetGroupArn: Arn
    SupplementaryFeatures: Optional[SupplementaryFeatures] = None


class FeaturizationConfig(BaseModel):
    """
    <p>In a <a>CreatePredictor</a> operation, the specified algorithm trains a model using the specified dataset group. You can optionally tell the operation to modify data fields prior to training a model. These modifications are referred to as <i>featurization</i>.</p> <p>You define featurization using the <code>FeaturizationConfig</code> object. You specify an array of transformations, one for each field that you want to featurize. You then include the <code>FeaturizationConfig</code> object in your <code>CreatePredictor</code> request. Amazon Forecast applies the featurization to the <code>TARGET_TIME_SERIES</code> and <code>RELATED_TIME_SERIES</code> datasets before model training.</p> <p>You can create multiple featurization configurations. For example, you might call the <code>CreatePredictor</code> operation twice by specifying different featurization configurations.</p>
    """

    ForecastFrequency: Frequency
    ForecastDimensions: Optional[ForecastDimensions] = None
    Featurizations: Optional[Featurizations] = None


class DatasetImportJobSummary(BaseModel):
    """
    Provides a summary of the dataset import job properties used in the <a>ListDatasetImportJobs</a> operation. To get the complete set of properties, call the <a>DescribeDatasetImportJob</a> operation, and provide the <code>DatasetImportJobArn</code>.
    """

    DatasetImportJobArn: Optional[Arn] = None
    DatasetImportJobName: Optional[Name] = None
    DataSource: Optional[DataSource] = None
    Status: Optional[Status] = None
    Message: Optional[ErrorMessage] = None
    CreationTime: Optional[Timestamp] = None
    LastModificationTime: Optional[Timestamp] = None


class DatasetImportJobs(BaseModel):
    __root__: List[DatasetImportJobSummary]


class PredictorExecutionDetails(BaseModel):
    """
    Contains details on the backtests performed to evaluate the accuracy of the predictor. The tests are returned in descending order of accuracy, with the most accurate backtest appearing first. You specify the number of backtests to perform when you call the operation.
    """

    PredictorExecutions: Optional[PredictorExecutions] = None


class TestWindows(BaseModel):
    __root__: List[WindowSummary]


class EvaluationResult(BaseModel):
    """
    The results of evaluating an algorithm. Returned as part of the <a>GetAccuracyMetrics</a> response.
    """

    AlgorithmArn: Optional[Arn] = None
    TestWindows: Optional[TestWindows] = None


class ForecastExportJobSummary(BaseModel):
    """
    Provides a summary of the forecast export job properties used in the <a>ListForecastExportJobs</a> operation. To get the complete set of properties, call the <a>DescribeForecastExportJob</a> operation, and provide the listed <code>ForecastExportJobArn</code>.
    """

    ForecastExportJobArn: Optional[Arn] = None
    ForecastExportJobName: Optional[Name] = None
    Destination: Optional[DataDestination] = None
    Status: Optional[Status] = None
    Message: Optional[ErrorMessage] = None
    CreationTime: Optional[Timestamp] = None
    LastModificationTime: Optional[Timestamp] = None


class ForecastExportJobs(BaseModel):
    __root__: List[ForecastExportJobSummary]


class PredictorEvaluationResults(BaseModel):
    __root__: List[EvaluationResult]


class PredictorBacktestExportJobSummary(BaseModel):
    """
    Provides a summary of the predictor backtest export job properties used in the <a>ListPredictorBacktestExportJobs</a> operation. To get a complete set of properties, call the <a>DescribePredictorBacktestExportJob</a> operation, and provide the listed <code>PredictorBacktestExportJobArn</code>.
    """

    PredictorBacktestExportJobArn: Optional[Arn] = None
    PredictorBacktestExportJobName: Optional[Name] = None
    Destination: Optional[DataDestination] = None
    Status: Optional[Status] = None
    Message: Optional[ErrorMessage] = None
    CreationTime: Optional[Timestamp] = None
    LastModificationTime: Optional[Timestamp] = None


class CreateDatasetRequest(BaseModel):
    DatasetName: Name
    Domain: Domain
    DatasetType: DatasetType
    DataFrequency: Optional[Frequency] = None
    Schema: Schema
    EncryptionConfig: Optional[EncryptionConfig] = None
    Tags: Optional[Tags] = None


class CreateDatasetImportJobRequest(BaseModel):
    DatasetImportJobName: Name
    DatasetArn: Arn
    DataSource: DataSource
    TimestampFormat: Optional[TimestampFormat] = None
    TimeZone: Optional[TimeZone] = None
    UseGeolocationForTimeZone: Optional[UseGeolocationForTimeZone] = None
    GeolocationFormat: Optional[GeolocationFormat] = None
    Tags: Optional[Tags] = None


class CreateForecastExportJobRequest(BaseModel):
    ForecastExportJobName: Name
    ForecastArn: Arn
    Destination: DataDestination
    Tags: Optional[Tags] = None


class CreatePredictorRequest(BaseModel):
    PredictorName: Name
    AlgorithmArn: Optional[Arn] = None
    ForecastHorizon: Integer
    ForecastTypes: Optional[ForecastTypes] = None
    PerformAutoML: Optional[Boolean] = None
    AutoMLOverrideStrategy: Optional[AutoMLOverrideStrategy] = None
    PerformHPO: Optional[Boolean] = None
    TrainingParameters: Optional[TrainingParameters] = None
    EvaluationParameters: Optional[EvaluationParameters] = None
    HPOConfig: Optional[HyperParameterTuningJobConfig] = None
    InputDataConfig: InputDataConfig
    FeaturizationConfig: FeaturizationConfig
    EncryptionConfig: Optional[EncryptionConfig] = None
    Tags: Optional[Tags] = None
    OptimizationMetric: Optional[OptimizationMetric] = None


class CreatePredictorBacktestExportJobRequest(BaseModel):
    PredictorBacktestExportJobName: Name
    PredictorArn: Arn
    Destination: DataDestination
    Tags: Optional[Tags] = None


class DescribeDatasetResponse(BaseModel):
    DatasetArn: Optional[Arn] = None
    DatasetName: Optional[Name] = None
    Domain: Optional[Domain] = None
    DatasetType: Optional[DatasetType] = None
    DataFrequency: Optional[Frequency] = None
    Schema: Optional[Schema] = None
    EncryptionConfig: Optional[EncryptionConfig] = None
    Status: Optional[Status] = None
    CreationTime: Optional[Timestamp] = None
    LastModificationTime: Optional[Timestamp] = None


class DescribeDatasetImportJobResponse(BaseModel):
    DatasetImportJobName: Optional[Name] = None
    DatasetImportJobArn: Optional[Arn] = None
    DatasetArn: Optional[Arn] = None
    TimestampFormat: Optional[TimestampFormat] = None
    TimeZone: Optional[TimeZone] = None
    UseGeolocationForTimeZone: Optional[UseGeolocationForTimeZone] = None
    GeolocationFormat: Optional[GeolocationFormat] = None
    DataSource: Optional[DataSource] = None
    EstimatedTimeRemainingInMinutes: Optional[Long] = None
    FieldStatistics: Optional[FieldStatistics] = None
    DataSize: Optional[Double] = None
    Status: Optional[Status] = None
    Message: Optional[Message] = None
    CreationTime: Optional[Timestamp] = None
    LastModificationTime: Optional[Timestamp] = None


class DescribeForecastExportJobResponse(BaseModel):
    ForecastExportJobArn: Optional[Arn] = None
    ForecastExportJobName: Optional[Name] = None
    ForecastArn: Optional[Arn] = None
    Destination: Optional[DataDestination] = None
    Message: Optional[Message] = None
    Status: Optional[Status] = None
    CreationTime: Optional[Timestamp] = None
    LastModificationTime: Optional[Timestamp] = None


class DescribePredictorResponse(BaseModel):
    PredictorArn: Optional[Name] = None
    PredictorName: Optional[Name] = None
    AlgorithmArn: Optional[Arn] = None
    ForecastHorizon: Optional[Integer] = None
    ForecastTypes: Optional[ForecastTypes] = None
    PerformAutoML: Optional[Boolean] = None
    AutoMLOverrideStrategy: Optional[AutoMLOverrideStrategy] = None
    PerformHPO: Optional[Boolean] = None
    TrainingParameters: Optional[TrainingParameters] = None
    EvaluationParameters: Optional[EvaluationParameters] = None
    HPOConfig: Optional[HyperParameterTuningJobConfig] = None
    InputDataConfig: Optional[InputDataConfig] = None
    FeaturizationConfig: Optional[FeaturizationConfig] = None
    EncryptionConfig: Optional[EncryptionConfig] = None
    PredictorExecutionDetails: Optional[PredictorExecutionDetails] = None
    EstimatedTimeRemainingInMinutes: Optional[Long] = None
    DatasetImportJobArns: Optional[ArnList] = None
    AutoMLAlgorithmArns: Optional[ArnList] = None
    Status: Optional[Status] = None
    Message: Optional[Message] = None
    CreationTime: Optional[Timestamp] = None
    LastModificationTime: Optional[Timestamp] = None
    OptimizationMetric: Optional[OptimizationMetric] = None


class DescribePredictorBacktestExportJobResponse(BaseModel):
    PredictorBacktestExportJobArn: Optional[Arn] = None
    PredictorBacktestExportJobName: Optional[Name] = None
    PredictorArn: Optional[Arn] = None
    Destination: Optional[DataDestination] = None
    Message: Optional[Message] = None
    Status: Optional[Status] = None
    CreationTime: Optional[Timestamp] = None
    LastModificationTime: Optional[Timestamp] = None


class GetAccuracyMetricsResponse(BaseModel):
    PredictorEvaluationResults: Optional[PredictorEvaluationResults] = None
    AutoMLOverrideStrategy: Optional[AutoMLOverrideStrategy] = None
    OptimizationMetric: Optional[OptimizationMetric] = None


class ListDatasetImportJobsResponse(BaseModel):
    DatasetImportJobs: Optional[DatasetImportJobs] = None
    NextToken: Optional[NextToken] = None


class ListForecastExportJobsResponse(BaseModel):
    ForecastExportJobs: Optional[ForecastExportJobs] = None
    NextToken: Optional[NextToken] = None


class PredictorBacktestExportJobs(BaseModel):
    __root__: List[PredictorBacktestExportJobSummary]


class ListPredictorBacktestExportJobsResponse(BaseModel):
    PredictorBacktestExportJobs: Optional[PredictorBacktestExportJobs] = None
    NextToken: Optional[NextToken] = None
