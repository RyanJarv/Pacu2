# generated by datamodel-codegen:
#   filename:  openapi.yaml
#   timestamp: 2021-12-31T02:54:32+00:00

from __future__ import annotations

from enum import Enum
from typing import Annotated, Any, List, Optional

from pydantic import BaseModel, Field


class BadRequestException(BaseModel):
    __root__: Any


class StatementTimeoutException(BadRequestException):
    pass


class InternalServerErrorException(BadRequestException):
    pass


class ForbiddenException(BadRequestException):
    pass


class ServiceUnavailableError(BadRequestException):
    pass


class NotFoundException(BadRequestException):
    pass


class DecimalReturnType(Enum):
    STRING = 'STRING'
    DOUBLE_OR_LONG = 'DOUBLE_OR_LONG'


class Arn(BaseModel):
    __root__: Annotated[str, Field(max_length=100, min_length=11)]


class DbName(BaseModel):
    __root__: Annotated[str, Field(max_length=64, min_length=0)]


class SqlStatement(BaseModel):
    __root__: Annotated[str, Field(max_length=65536, min_length=0)]


class Id(BaseModel):
    __root__: Annotated[str, Field(max_length=192, min_length=0)]


class BeginTransactionRequest(BaseModel):
    """
    The request parameters represent the input of a request to start a SQL transaction.
    """

    database: Optional[DbName] = None
    resourceArn: Arn
    schema_: Annotated[Optional[DbName], Field(alias='schema')] = None
    secretArn: Arn


class Blob(BaseModel):
    __root__: str


class Boolean(BaseModel):
    __root__: bool


class BoxedBoolean(Boolean):
    pass


class BoxedDouble(BaseModel):
    __root__: float


class BoxedFloat(BoxedDouble):
    pass


class BoxedInteger(BaseModel):
    __root__: int


class BoxedLong(BoxedInteger):
    pass


class Integer(BoxedInteger):
    pass


class String(Blob):
    pass


class ColumnMetadata1(BaseModel):
    """
    Contains the metadata for a column.
    """

    arrayBaseColumnType: Optional[Integer] = None
    isAutoIncrement: Optional[Boolean] = None
    isCaseSensitive: Optional[Boolean] = None
    isCurrency: Optional[Boolean] = None
    isSigned: Optional[Boolean] = None
    label: Optional[String] = None
    name: Optional[String] = None
    nullable: Optional[Integer] = None
    precision: Optional[Integer] = None
    scale: Optional[Integer] = None
    schemaName: Optional[String] = None
    tableName: Optional[String] = None
    type: Optional[Integer] = None
    typeName: Optional[String] = None


class CommitTransactionRequest(BaseModel):
    """
    The request parameters represent the input of a commit transaction request.
    """

    resourceArn: Arn
    secretArn: Arn
    transactionId: Id


class TransactionStatus(BaseModel):
    __root__: Annotated[str, Field(max_length=128, min_length=0)]


class ExecuteSqlRequest(BaseModel):
    """
    The request parameters represent the input of a request to run one or more SQL statements.
    """

    awsSecretStoreArn: Arn
    database: Optional[DbName] = None
    dbClusterOrInstanceArn: Arn
    schema_: Annotated[Optional[DbName], Field(alias='schema')] = None
    sqlStatements: SqlStatement


class ResultSetOptions(BaseModel):
    """
    Options that control how the result set is returned.
    """

    decimalReturnType: Optional[DecimalReturnType] = None


class Metadata(BaseModel):
    __root__: List[ColumnMetadata1]


class RecordsUpdated(BoxedInteger):
    pass


class Long(BoxedInteger):
    pass


class ParameterName(Blob):
    pass


class ResultSetMetadata(BaseModel):
    """
    The metadata of the result set returned by a SQL statement.
    """

    columnCount: Optional[Long] = None
    columnMetadata: Optional[Metadata] = None


class RollbackTransactionRequest(BaseModel):
    """
    The request parameters represent the input of a request to perform a rollback of a transaction.
    """

    resourceArn: Arn
    secretArn: Arn
    transactionId: Id


class TypeHint(Enum):
    JSON = 'JSON'
    UUID = 'UUID'
    TIMESTAMP = 'TIMESTAMP'
    DATE = 'DATE'
    TIME = 'TIME'
    DECIMAL = 'DECIMAL'


class BeginTransactionResponse(BaseModel):
    """
    The response elements represent the output of a request to start a SQL transaction.
    """

    transactionId: Optional[Id] = None


class CommitTransactionResponse(BaseModel):
    """
    The response elements represent the output of a commit transaction request.
    """

    transactionStatus: Optional[TransactionStatus] = None


class RollbackTransactionResponse(CommitTransactionResponse):
    """
    The response elements represent the output of a request to perform a rollback of a transaction.
    """

    pass


class BooleanArray(BaseModel):
    """
    <p>An array of Boolean values.</p> <note> <p>Some array entries can be null.</p> </note>
    """

    __root__: Annotated[
        List[BoxedBoolean],
        Field(
            description='<p>An array of Boolean values.</p> <note> <p>Some array entries can be null.</p> </note>'
        ),
    ]


class DoubleArray(BaseModel):
    """
    <p>An array of floating point numbers.</p> <note> <p>Some array entries can be null.</p> </note>
    """

    __root__: Annotated[
        List[BoxedDouble],
        Field(
            description='<p>An array of floating point numbers.</p> <note> <p>Some array entries can be null.</p> </note>'
        ),
    ]


class LongArray(BaseModel):
    """
    <p>An array of integers.</p> <note> <p>Some array entries can be null.</p> </note>
    """

    __root__: Annotated[
        List[BoxedLong],
        Field(
            description='<p>An array of integers.</p> <note> <p>Some array entries can be null.</p> </note>'
        ),
    ]


class StringArray(BaseModel):
    """
    <p>An array of strings.</p> <note> <p>Some array entries can be null.</p> </note>
    """

    __root__: Annotated[
        List[String],
        Field(
            description='<p>An array of strings.</p> <note> <p>Some array entries can be null.</p> </note>'
        ),
    ]


class BatchExecuteStatementResponse(BaseModel):
    """
    The response elements represent the output of a SQL statement over an array of data.
    """

    updateResults: Optional[UpdateResults] = None


class SqlParametersList(BaseModel):
    __root__: List[SqlParameter]


class ExecuteSqlResponse(BaseModel):
    """
    The response elements represent the output of a request to run one or more SQL statements.
    """

    sqlStatementResults: Optional[SqlStatementResults] = None


class ExecuteStatementResponse(BaseModel):
    """
    The response elements represent the output of a request to run a SQL statement against a database.
    """

    columnMetadata: Optional[Metadata] = None
    generatedFields: Optional[FieldList] = None
    numberOfRecordsUpdated: Optional[RecordsUpdated] = None
    records: Optional[SqlRecords] = None


class SqlParameter(BaseModel):
    """
    A parameter used in a SQL statement.
    """

    name: Optional[ParameterName] = None
    typeHint: Optional[TypeHint] = None
    value: Optional[FieldModel] = None


class ArrayValue(BaseModel):
    """
    Contains an array.
    """

    arrayValues: Optional[ArrayOfArray] = None
    booleanValues: Optional[BooleanArray] = None
    doubleValues: Optional[DoubleArray] = None
    longValues: Optional[LongArray] = None
    stringValues: Optional[StringArray] = None


class ArrayOfArray(BaseModel):
    """
    <p>An array of arrays.</p> <note> <p>Some array entries can be null.</p> </note>
    """

    __root__: Annotated[
        List[ArrayValue],
        Field(
            description='<p>An array of arrays.</p> <note> <p>Some array entries can be null.</p> </note>'
        ),
    ]


class Value1(BaseModel):
    """
    <p>Contains the value of a column.</p> <pre><code> &lt;important&gt; &lt;p&gt;This data type is deprecated.&lt;/p&gt; &lt;/important&gt; </code></pre>
    """

    arrayValues: Optional[ArrayValueList] = None
    bigIntValue: Optional[BoxedLong] = None
    bitValue: Optional[BoxedBoolean] = None
    blobValue: Optional[Blob] = None
    doubleValue: Optional[BoxedDouble] = None
    intValue: Optional[BoxedInteger] = None
    isNull: Optional[BoxedBoolean] = None
    realValue: Optional[BoxedFloat] = None
    stringValue: Optional[String] = None
    structValue: Optional[StructValue] = None


class ArrayValueList(BaseModel):
    __root__: List[Value1]


class SqlParameterSets(BaseModel):
    __root__: List[SqlParametersList]


class BatchExecuteStatementRequest(BaseModel):
    """
    The request parameters represent the input of a SQL statement over an array of data.
    """

    database: Optional[DbName] = None
    parameterSets: Optional[SqlParameterSets] = None
    resourceArn: Arn
    schema_: Annotated[Optional[DbName], Field(alias='schema')] = None
    secretArn: Arn
    sql: SqlStatement
    transactionId: Optional[Id] = None


class UpdateResults(BaseModel):
    __root__: List[UpdateResult]


class SqlStatementResults(BaseModel):
    __root__: List[SqlStatementResult]


class ExecuteStatementRequest(BaseModel):
    """
    The request parameters represent the input of a request to run a SQL statement against a database.
    """

    continueAfterTimeout: Optional[Boolean] = None
    database: Optional[DbName] = None
    includeResultMetadata: Optional[Boolean] = None
    parameters: Optional[SqlParametersList] = None
    resourceArn: Arn
    resultSetOptions: Optional[ResultSetOptions] = None
    schema_: Annotated[Optional[DbName], Field(alias='schema')] = None
    secretArn: Arn
    sql: SqlStatement
    transactionId: Optional[Id] = None


class FieldList(BaseModel):
    __root__: List[FieldModel]


class SqlRecords(BaseModel):
    __root__: List[FieldList]


class FieldModel(BaseModel):
    """
    Contains a value.
    """

    arrayValue: Optional[ArrayValue] = None
    blobValue: Optional[Blob] = None
    booleanValue: Optional[BoxedBoolean] = None
    doubleValue: Optional[BoxedDouble] = None
    isNull: Optional[BoxedBoolean] = None
    longValue: Optional[BoxedLong] = None
    stringValue: Optional[String] = None


class Row(ArrayValueList):
    pass


class Record(BaseModel):
    """
    A record returned by a call.
    """

    values: Optional[Row] = None


class Records1(BaseModel):
    __root__: List[Record]


class ResultFrame(BaseModel):
    """
    The result set returned by a SQL statement.
    """

    records: Optional[Records1] = None
    resultSetMetadata: Optional[ResultSetMetadata] = None


class SqlStatementResult(BaseModel):
    """
    <p>The result of a SQL statement.</p> <pre><code> &lt;important&gt; &lt;p&gt;This data type is deprecated.&lt;/p&gt; &lt;/important&gt; </code></pre>
    """

    numberOfRecordsUpdated: Optional[RecordsUpdated] = None
    resultFrame: Optional[ResultFrame] = None


class StructValue(BaseModel):
    """
    A structure value returned by a call.
    """

    attributes: Optional[ArrayValueList] = None


class UpdateResult(BaseModel):
    """
    The response elements represent the results of an update.
    """

    generatedFields: Optional[FieldList] = None


BatchExecuteStatementResponse.update_forward_refs()
SqlParametersList.update_forward_refs()
ExecuteSqlResponse.update_forward_refs()
ExecuteStatementResponse.update_forward_refs()
SqlParameter.update_forward_refs()
ArrayValue.update_forward_refs()
Value1.update_forward_refs()
UpdateResults.update_forward_refs()
SqlStatementResults.update_forward_refs()
FieldList.update_forward_refs()
