# generated by datamodel-codegen:
#   filename:  openapi.yaml
#   timestamp: 2021-12-31T02:55:02+00:00

from __future__ import annotations

from datetime import datetime
from enum import Enum
from typing import Annotated, Any, List, Optional

from pydantic import BaseModel, Field, SecretStr


class InvalidInput(BaseModel):
    __root__: Any


class OperationLimitExceeded(InvalidInput):
    pass


class DomainLimitExceeded(InvalidInput):
    pass


class UnsupportedTLD(InvalidInput):
    pass


class DeleteTagsForDomainResponse(BaseModel):
    pass


class DisableDomainAutoRenewResponse(DeleteTagsForDomainResponse):
    pass


class DuplicateRequest(InvalidInput):
    pass


class TLDRulesViolation(InvalidInput):
    pass


class EnableDomainAutoRenewResponse(DeleteTagsForDomainResponse):
    pass


class UpdateTagsForDomainResponse(DeleteTagsForDomainResponse):
    pass


class DomainName(BaseModel):
    __root__: Annotated[str, Field(max_length=255)]


class String(BaseModel):
    __root__: str


class OperationId(DomainName):
    pass


class AccountId(BaseModel):
    __root__: Annotated[str, Field(regex='^(\\d{12})$')]


class AddressLine(DomainName):
    pass


class OperationType(Enum):
    REGISTER_DOMAIN = 'REGISTER_DOMAIN'
    DELETE_DOMAIN = 'DELETE_DOMAIN'
    TRANSFER_IN_DOMAIN = 'TRANSFER_IN_DOMAIN'
    UPDATE_DOMAIN_CONTACT = 'UPDATE_DOMAIN_CONTACT'
    UPDATE_NAMESERVER = 'UPDATE_NAMESERVER'
    CHANGE_PRIVACY_PROTECTION = 'CHANGE_PRIVACY_PROTECTION'
    DOMAIN_LOCK = 'DOMAIN_LOCK'
    ENABLE_AUTORENEW = 'ENABLE_AUTORENEW'
    DISABLE_AUTORENEW = 'DISABLE_AUTORENEW'
    ADD_DNSSEC = 'ADD_DNSSEC'
    REMOVE_DNSSEC = 'REMOVE_DNSSEC'
    EXPIRE_DOMAIN = 'EXPIRE_DOMAIN'
    TRANSFER_OUT_DOMAIN = 'TRANSFER_OUT_DOMAIN'
    CHANGE_DOMAIN_OWNER = 'CHANGE_DOMAIN_OWNER'
    RENEW_DOMAIN = 'RENEW_DOMAIN'
    PUSH_DOMAIN = 'PUSH_DOMAIN'
    INTERNAL_TRANSFER_OUT_DOMAIN = 'INTERNAL_TRANSFER_OUT_DOMAIN'
    INTERNAL_TRANSFER_IN_DOMAIN = 'INTERNAL_TRANSFER_IN_DOMAIN'


class InvoiceId(String):
    pass


class Timestamp(BaseModel):
    __root__: datetime


class Price(BaseModel):
    __root__: float


class BillingRecord(BaseModel):
    """
    Information for one billing record.
    """

    DomainName: Optional[DomainName] = None
    Operation: Optional[OperationType] = None
    InvoiceId: Optional[InvoiceId] = None
    BillDate: Optional[Timestamp] = None
    Price: Optional[Price] = None


class BillingRecords(BaseModel):
    __root__: List[BillingRecord]


class Boolean(BaseModel):
    __root__: bool


class LangCode(BaseModel):
    __root__: Annotated[str, Field(max_length=3)]


class DomainAvailability(Enum):
    AVAILABLE = 'AVAILABLE'
    AVAILABLE_RESERVED = 'AVAILABLE_RESERVED'
    AVAILABLE_PREORDER = 'AVAILABLE_PREORDER'
    UNAVAILABLE = 'UNAVAILABLE'
    UNAVAILABLE_PREMIUM = 'UNAVAILABLE_PREMIUM'
    UNAVAILABLE_RESTRICTED = 'UNAVAILABLE_RESTRICTED'
    RESERVED = 'RESERVED'
    DONT_KNOW = 'DONT_KNOW'


class DomainAuthCode(BaseModel):
    __root__: Annotated[SecretStr, Field(max_length=1024)]


class City(DomainName):
    pass


class ContactName(DomainName):
    pass


class ContactType(Enum):
    PERSON = 'PERSON'
    COMPANY = 'COMPANY'
    ASSOCIATION = 'ASSOCIATION'
    PUBLIC_BODY = 'PUBLIC_BODY'
    RESELLER = 'RESELLER'


class State(DomainName):
    pass


class CountryCode(Enum):
    AD = 'AD'
    AE = 'AE'
    AF = 'AF'
    AG = 'AG'
    AI = 'AI'
    AL = 'AL'
    AM = 'AM'
    AN = 'AN'
    AO = 'AO'
    AQ = 'AQ'
    AR = 'AR'
    AS = 'AS'
    AT = 'AT'
    AU = 'AU'
    AW = 'AW'
    AZ = 'AZ'
    BA = 'BA'
    BB = 'BB'
    BD = 'BD'
    BE = 'BE'
    BF = 'BF'
    BG = 'BG'
    BH = 'BH'
    BI = 'BI'
    BJ = 'BJ'
    BL = 'BL'
    BM = 'BM'
    BN = 'BN'
    BO = 'BO'
    BR = 'BR'
    BS = 'BS'
    BT = 'BT'
    BW = 'BW'
    BY = 'BY'
    BZ = 'BZ'
    CA = 'CA'
    CC = 'CC'
    CD = 'CD'
    CF = 'CF'
    CG = 'CG'
    CH = 'CH'
    CI = 'CI'
    CK = 'CK'
    CL = 'CL'
    CM = 'CM'
    CN = 'CN'
    CO = 'CO'
    CR = 'CR'
    CU = 'CU'
    CV = 'CV'
    CX = 'CX'
    CY = 'CY'
    CZ = 'CZ'
    DE = 'DE'
    DJ = 'DJ'
    DK = 'DK'
    DM = 'DM'
    DO = 'DO'
    DZ = 'DZ'
    EC = 'EC'
    EE = 'EE'
    EG = 'EG'
    ER = 'ER'
    ES = 'ES'
    ET = 'ET'
    FI = 'FI'
    FJ = 'FJ'
    FK = 'FK'
    FM = 'FM'
    FO = 'FO'
    FR = 'FR'
    GA = 'GA'
    GB = 'GB'
    GD = 'GD'
    GE = 'GE'
    GH = 'GH'
    GI = 'GI'
    GL = 'GL'
    GM = 'GM'
    GN = 'GN'
    GQ = 'GQ'
    GR = 'GR'
    GT = 'GT'
    GU = 'GU'
    GW = 'GW'
    GY = 'GY'
    HK = 'HK'
    HN = 'HN'
    HR = 'HR'
    HT = 'HT'
    HU = 'HU'
    ID = 'ID'
    IE = 'IE'
    IL = 'IL'
    IM = 'IM'
    IN = 'IN'
    IQ = 'IQ'
    IR = 'IR'
    IS = 'IS'
    IT = 'IT'
    JM = 'JM'
    JO = 'JO'
    JP = 'JP'
    KE = 'KE'
    KG = 'KG'
    KH = 'KH'
    KI = 'KI'
    KM = 'KM'
    KN = 'KN'
    KP = 'KP'
    KR = 'KR'
    KW = 'KW'
    KY = 'KY'
    KZ = 'KZ'
    LA = 'LA'
    LB = 'LB'
    LC = 'LC'
    LI = 'LI'
    LK = 'LK'
    LR = 'LR'
    LS = 'LS'
    LT = 'LT'
    LU = 'LU'
    LV = 'LV'
    LY = 'LY'
    MA = 'MA'
    MC = 'MC'
    MD = 'MD'
    ME = 'ME'
    MF = 'MF'
    MG = 'MG'
    MH = 'MH'
    MK = 'MK'
    ML = 'ML'
    MM = 'MM'
    MN = 'MN'
    MO = 'MO'
    MP = 'MP'
    MR = 'MR'
    MS = 'MS'
    MT = 'MT'
    MU = 'MU'
    MV = 'MV'
    MW = 'MW'
    MX = 'MX'
    MY = 'MY'
    MZ = 'MZ'
    NA = 'NA'
    NC = 'NC'
    NE = 'NE'
    NG = 'NG'
    NI = 'NI'
    NL = 'NL'
    NO = 'NO'
    NP = 'NP'
    NR = 'NR'
    NU = 'NU'
    NZ = 'NZ'
    OM = 'OM'
    PA = 'PA'
    PE = 'PE'
    PF = 'PF'
    PG = 'PG'
    PH = 'PH'
    PK = 'PK'
    PL = 'PL'
    PM = 'PM'
    PN = 'PN'
    PR = 'PR'
    PT = 'PT'
    PW = 'PW'
    PY = 'PY'
    QA = 'QA'
    RO = 'RO'
    RS = 'RS'
    RU = 'RU'
    RW = 'RW'
    SA = 'SA'
    SB = 'SB'
    SC = 'SC'
    SD = 'SD'
    SE = 'SE'
    SG = 'SG'
    SH = 'SH'
    SI = 'SI'
    SK = 'SK'
    SL = 'SL'
    SM = 'SM'
    SN = 'SN'
    SO = 'SO'
    SR = 'SR'
    ST = 'ST'
    SV = 'SV'
    SY = 'SY'
    SZ = 'SZ'
    TC = 'TC'
    TD = 'TD'
    TG = 'TG'
    TH = 'TH'
    TJ = 'TJ'
    TK = 'TK'
    TL = 'TL'
    TM = 'TM'
    TN = 'TN'
    TO = 'TO'
    TR = 'TR'
    TT = 'TT'
    TV = 'TV'
    TW = 'TW'
    TZ = 'TZ'
    UA = 'UA'
    UG = 'UG'
    US = 'US'
    UY = 'UY'
    UZ = 'UZ'
    VA = 'VA'
    VC = 'VC'
    VE = 'VE'
    VG = 'VG'
    VI = 'VI'
    VN = 'VN'
    VU = 'VU'
    WF = 'WF'
    WS = 'WS'
    YE = 'YE'
    YT = 'YT'
    ZA = 'ZA'
    ZM = 'ZM'
    ZW = 'ZW'


class ZipCode(DomainName):
    pass


class ContactNumber(BaseModel):
    __root__: Annotated[str, Field(max_length=30)]


class Email(BaseModel):
    __root__: Annotated[str, Field(max_length=254)]


class CurrentExpiryYear(BaseModel):
    __root__: int


class DNSSec(String):
    pass


class DomainStatus(String):
    pass


class DomainStatusList(BaseModel):
    __root__: List[DomainStatus]


class DomainSuggestion(BaseModel):
    """
    Information about one suggested domain name.
    """

    DomainName: Optional[DomainName] = None
    Availability: Optional[String] = None


class DomainSuggestionsList(BaseModel):
    __root__: List[DomainSuggestion]


class DomainSummary(BaseModel):
    """
    Summary information about one domain.
    """

    DomainName: DomainName
    AutoRenew: Optional[Boolean] = None
    TransferLock: Optional[Boolean] = None
    Expiry: Optional[Timestamp] = None


class DomainSummaryList(BaseModel):
    __root__: List[DomainSummary]


class Transferable(Enum):
    """
    <p>Whether the domain name can be transferred to Route 53.</p> <note> <p>You can transfer only domains that have a value of <code>TRANSFERABLE</code> for <code>Transferable</code>.</p> </note> <p>Valid values:</p> <dl> <dt>TRANSFERABLE</dt> <dd> <p>The domain name can be transferred to Route 53.</p> </dd> <dt>UNTRANSFERRABLE</dt> <dd> <p>The domain name can't be transferred to Route 53.</p> </dd> <dt>DONT_KNOW</dt> <dd> <p>Reserved for future use.</p> </dd> </dl>
    """

    TRANSFERABLE = 'TRANSFERABLE'
    UNTRANSFERABLE = 'UNTRANSFERABLE'
    DONT_KNOW = 'DONT_KNOW'


class DurationInYears(BaseModel):
    __root__: Annotated[int, Field(ge=1.0, le=10.0)]


class ErrorMessage(String):
    pass


class ExtraParamName(Enum):
    DUNS_NUMBER = 'DUNS_NUMBER'
    BRAND_NUMBER = 'BRAND_NUMBER'
    BIRTH_DEPARTMENT = 'BIRTH_DEPARTMENT'
    BIRTH_DATE_IN_YYYY_MM_DD = 'BIRTH_DATE_IN_YYYY_MM_DD'
    BIRTH_COUNTRY = 'BIRTH_COUNTRY'
    BIRTH_CITY = 'BIRTH_CITY'
    DOCUMENT_NUMBER = 'DOCUMENT_NUMBER'
    AU_ID_NUMBER = 'AU_ID_NUMBER'
    AU_ID_TYPE = 'AU_ID_TYPE'
    CA_LEGAL_TYPE = 'CA_LEGAL_TYPE'
    CA_BUSINESS_ENTITY_TYPE = 'CA_BUSINESS_ENTITY_TYPE'
    CA_LEGAL_REPRESENTATIVE = 'CA_LEGAL_REPRESENTATIVE'
    CA_LEGAL_REPRESENTATIVE_CAPACITY = 'CA_LEGAL_REPRESENTATIVE_CAPACITY'
    ES_IDENTIFICATION = 'ES_IDENTIFICATION'
    ES_IDENTIFICATION_TYPE = 'ES_IDENTIFICATION_TYPE'
    ES_LEGAL_FORM = 'ES_LEGAL_FORM'
    FI_BUSINESS_NUMBER = 'FI_BUSINESS_NUMBER'
    FI_ID_NUMBER = 'FI_ID_NUMBER'
    FI_NATIONALITY = 'FI_NATIONALITY'
    FI_ORGANIZATION_TYPE = 'FI_ORGANIZATION_TYPE'
    IT_NATIONALITY = 'IT_NATIONALITY'
    IT_PIN = 'IT_PIN'
    IT_REGISTRANT_ENTITY_TYPE = 'IT_REGISTRANT_ENTITY_TYPE'
    RU_PASSPORT_DATA = 'RU_PASSPORT_DATA'
    SE_ID_NUMBER = 'SE_ID_NUMBER'
    SG_ID_NUMBER = 'SG_ID_NUMBER'
    VAT_NUMBER = 'VAT_NUMBER'
    UK_CONTACT_TYPE = 'UK_CONTACT_TYPE'
    UK_COMPANY_NUMBER = 'UK_COMPANY_NUMBER'


class ExtraParamValue(BaseModel):
    __root__: Annotated[str, Field(max_length=2048)]


class ExtraParam(BaseModel):
    """
    ExtraParam includes the following elements.
    """

    Name: ExtraParamName
    Value: ExtraParamValue


class FIAuthKey(String):
    pass


class ReachabilityStatus(Enum):
    PENDING = 'PENDING'
    DONE = 'DONE'
    EXPIRED = 'EXPIRED'


class RegistrarName(String):
    pass


class RegistrarWhoIsServer(String):
    pass


class RegistrarUrl(String):
    pass


class RegistryDomainId(String):
    pass


class Reseller(String):
    pass


class Integer(CurrentExpiryYear):
    pass


class OperationStatus(Enum):
    SUBMITTED = 'SUBMITTED'
    IN_PROGRESS = 'IN_PROGRESS'
    ERROR = 'ERROR'
    SUCCESSFUL = 'SUCCESSFUL'
    FAILED = 'FAILED'


class GlueIp(BaseModel):
    __root__: Annotated[str, Field(max_length=45)]


class GlueIpList(BaseModel):
    __root__: List[GlueIp]


class HostName(BaseModel):
    __root__: Annotated[str, Field(max_length=255, regex='[a-zA-Z0-9_\\-.]*')]


class PageMarker(BaseModel):
    __root__: Annotated[str, Field(max_length=4096)]


class PageMaxItems(BaseModel):
    __root__: Annotated[int, Field(le=100.0)]


class Nameserver(BaseModel):
    """
    Nameserver includes the following elements.
    """

    Name: HostName
    GlueIps: Optional[GlueIpList] = None


class OperationSummary(BaseModel):
    """
    OperationSummary includes the following elements.
    """

    OperationId: OperationId
    Status: OperationStatus
    Type: OperationType
    SubmittedDate: Timestamp


class TagKey(String):
    pass


class TagValue(String):
    pass


class Tag(BaseModel):
    """
    Each tag includes the following elements.
    """

    Key: Optional[TagKey] = None
    Value: Optional[TagValue] = None


class AcceptDomainTransferFromAnotherAwsAccountResponse(BaseModel):
    """
    The AcceptDomainTransferFromAnotherAwsAccount response includes the following element.
    """

    OperationId: Optional[OperationId] = None


class AcceptDomainTransferFromAnotherAwsAccountRequest(BaseModel):
    """
    The AcceptDomainTransferFromAnotherAwsAccount request includes the following elements.
    """

    DomainName: DomainName
    Password: String


class CancelDomainTransferToAnotherAwsAccountResponse(
    AcceptDomainTransferFromAnotherAwsAccountResponse
):
    """
    The <code>CancelDomainTransferToAnotherAwsAccount</code> response includes the following element.
    """

    pass


class CancelDomainTransferToAnotherAwsAccountRequest(BaseModel):
    """
    The CancelDomainTransferToAnotherAwsAccount request includes the following element.
    """

    DomainName: DomainName


class CheckDomainAvailabilityResponse(BaseModel):
    """
    The CheckDomainAvailability response includes the following elements.
    """

    Availability: DomainAvailability


class CheckDomainAvailabilityRequest(BaseModel):
    """
    The CheckDomainAvailability request contains the following elements.
    """

    DomainName: DomainName
    IdnLangCode: Optional[LangCode] = None


class CheckDomainTransferabilityRequest(BaseModel):
    """
    The CheckDomainTransferability request contains the following elements.
    """

    DomainName: DomainName
    AuthCode: Optional[DomainAuthCode] = None


class DisableDomainAutoRenewRequest(BaseModel):
    DomainName: DomainName


class DisableDomainTransferLockResponse(BaseModel):
    """
    The DisableDomainTransferLock response includes the following element.
    """

    OperationId: OperationId


class DisableDomainTransferLockRequest(BaseModel):
    """
    The DisableDomainTransferLock request includes the following element.
    """

    DomainName: DomainName


class EnableDomainAutoRenewRequest(BaseModel):
    DomainName: DomainName


class EnableDomainTransferLockResponse(DisableDomainTransferLockResponse):
    """
    The EnableDomainTransferLock response includes the following elements.
    """

    pass


class EnableDomainTransferLockRequest(BaseModel):
    """
    A request to set the transfer lock for the specified domain.
    """

    DomainName: DomainName


class GetContactReachabilityStatusResponse(BaseModel):
    domainName: Optional[DomainName] = None
    status: Optional[ReachabilityStatus] = None


class GetContactReachabilityStatusRequest(BaseModel):
    domainName: Optional[DomainName] = None


class GetDomainDetailRequest(BaseModel):
    """
    The GetDomainDetail request includes the following element.
    """

    DomainName: DomainName


class GetDomainSuggestionsResponse(BaseModel):
    SuggestionsList: Optional[DomainSuggestionsList] = None


class GetDomainSuggestionsRequest(BaseModel):
    DomainName: DomainName
    SuggestionCount: Integer
    OnlyAvailable: Boolean


class GetOperationDetailResponse(BaseModel):
    """
    The GetOperationDetail response includes the following elements.
    """

    OperationId: Optional[OperationId] = None
    Status: Optional[OperationStatus] = None
    Message: Optional[ErrorMessage] = None
    DomainName: Optional[DomainName] = None
    Type: Optional[OperationType] = None
    SubmittedDate: Optional[Timestamp] = None


class GetOperationDetailRequest(BaseModel):
    """
    The <a href="https://docs.aws.amazon.com/Route53/latest/APIReference/API_domains_GetOperationDetail.html">GetOperationDetail</a> request includes the following element.
    """

    OperationId: OperationId


class ListDomainsResponse(BaseModel):
    """
    The ListDomains response includes the following elements.
    """

    Domains: DomainSummaryList
    NextPageMarker: Optional[PageMarker] = None


class ListDomainsRequest(BaseModel):
    """
    The ListDomains request includes the following elements.
    """

    Marker: Optional[PageMarker] = None
    MaxItems: Optional[PageMaxItems] = None


class ListOperationsRequest(BaseModel):
    """
    The ListOperations request includes the following elements.
    """

    SubmittedSince: Optional[Timestamp] = None
    Marker: Optional[PageMarker] = None
    MaxItems: Optional[PageMaxItems] = None


class ListTagsForDomainRequest(BaseModel):
    """
    The ListTagsForDomainRequest includes the following elements.
    """

    DomainName: DomainName


class RegisterDomainResponse(DisableDomainTransferLockResponse):
    """
    The RegisterDomain response includes the following element.
    """

    pass


class RejectDomainTransferFromAnotherAwsAccountResponse(
    AcceptDomainTransferFromAnotherAwsAccountResponse
):
    """
    The RejectDomainTransferFromAnotherAwsAccount response includes the following element.
    """

    pass


class RejectDomainTransferFromAnotherAwsAccountRequest(BaseModel):
    """
    The RejectDomainTransferFromAnotherAwsAccount request includes the following element.
    """

    DomainName: DomainName


class RenewDomainResponse(DisableDomainTransferLockResponse):
    pass


class RenewDomainRequest(BaseModel):
    """
    A <code>RenewDomain</code> request includes the number of years that you want to renew for and the current expiration year.
    """

    DomainName: DomainName
    DurationInYears: Optional[DurationInYears] = None
    CurrentExpiryYear: CurrentExpiryYear


class ResendContactReachabilityEmailResponse(BaseModel):
    domainName: Optional[DomainName] = None
    emailAddress: Optional[Email] = None
    isAlreadyVerified: Optional[Boolean] = None


class ResendContactReachabilityEmailRequest(BaseModel):
    domainName: Optional[DomainName] = None


class RetrieveDomainAuthCodeResponse(BaseModel):
    """
    The RetrieveDomainAuthCode response includes the following element.
    """

    AuthCode: DomainAuthCode


class RetrieveDomainAuthCodeRequest(BaseModel):
    """
    A request for the authorization code for the specified domain. To transfer a domain to another registrar, you provide this value to the new registrar.
    """

    DomainName: DomainName


class TransferDomainResponse(DisableDomainTransferLockResponse):
    """
    The TransferDomain response includes the following element.
    """

    pass


class TransferDomainToAnotherAwsAccountResponse(BaseModel):
    """
    The <code>TransferDomainToAnotherAwsAccount</code> response includes the following elements.
    """

    OperationId: Optional[OperationId] = None
    Password: Optional[String] = None


class TransferDomainToAnotherAwsAccountRequest(BaseModel):
    """
    The TransferDomainToAnotherAwsAccount request includes the following elements.
    """

    DomainName: DomainName
    AccountId: AccountId


class UpdateDomainContactResponse(DisableDomainTransferLockResponse):
    """
    The UpdateDomainContact response includes the following element.
    """

    pass


class UpdateDomainContactPrivacyResponse(DisableDomainTransferLockResponse):
    """
    The UpdateDomainContactPrivacy response includes the following element.
    """

    pass


class UpdateDomainContactPrivacyRequest(BaseModel):
    """
    The UpdateDomainContactPrivacy request includes the following elements.
    """

    DomainName: DomainName
    AdminPrivacy: Optional[Boolean] = None
    RegistrantPrivacy: Optional[Boolean] = None
    TechPrivacy: Optional[Boolean] = None


class UpdateDomainNameserversResponse(DisableDomainTransferLockResponse):
    """
    The UpdateDomainNameservers response includes the following element.
    """

    pass


class ViewBillingResponse(BaseModel):
    """
    The ViewBilling response includes the following elements.
    """

    NextPageMarker: Optional[PageMarker] = None
    BillingRecords: Optional[BillingRecords] = None


class ViewBillingRequest(BaseModel):
    """
    The ViewBilling request includes the following elements.
    """

    Start: Optional[Timestamp] = None
    End: Optional[Timestamp] = None
    Marker: Optional[PageMarker] = None
    MaxItems: Optional[PageMaxItems] = None


class DomainTransferability(BaseModel):
    """
    A complex type that contains information about whether the specified domain can be transferred to Route 53.
    """

    Transferable: Optional[Transferable] = None


class ExtraParamList(BaseModel):
    __root__: List[ExtraParam]


class ContactDetail(BaseModel):
    """
    ContactDetail includes the following elements.
    """

    FirstName: Optional[ContactName] = None
    LastName: Optional[ContactName] = None
    ContactType: Optional[ContactType] = None
    OrganizationName: Optional[ContactName] = None
    AddressLine1: Optional[AddressLine] = None
    AddressLine2: Optional[AddressLine] = None
    City: Optional[City] = None
    State: Optional[State] = None
    CountryCode: Optional[CountryCode] = None
    ZipCode: Optional[ZipCode] = None
    PhoneNumber: Optional[ContactNumber] = None
    Email: Optional[Email] = None
    Fax: Optional[ContactNumber] = None
    ExtraParams: Optional[ExtraParamList] = None


class TagKeyList(BaseModel):
    __root__: List[TagKey]


class NameserverList(BaseModel):
    __root__: List[Nameserver]


class OperationSummaryList(BaseModel):
    __root__: List[OperationSummary]


class TagList(BaseModel):
    __root__: List[Tag]


class CheckDomainTransferabilityResponse(BaseModel):
    """
    The CheckDomainTransferability response includes the following elements.
    """

    Transferability: DomainTransferability


class DeleteTagsForDomainRequest(BaseModel):
    """
    The DeleteTagsForDomainRequest includes the following elements.
    """

    DomainName: DomainName
    TagsToDelete: TagKeyList


class GetDomainDetailResponse(BaseModel):
    """
    The GetDomainDetail response includes the following elements.
    """

    DomainName: DomainName
    Nameservers: NameserverList
    AutoRenew: Optional[Boolean] = None
    AdminContact: ContactDetail
    RegistrantContact: ContactDetail
    TechContact: ContactDetail
    AdminPrivacy: Optional[Boolean] = None
    RegistrantPrivacy: Optional[Boolean] = None
    TechPrivacy: Optional[Boolean] = None
    RegistrarName: Optional[RegistrarName] = None
    WhoIsServer: Optional[RegistrarWhoIsServer] = None
    RegistrarUrl: Optional[RegistrarUrl] = None
    AbuseContactEmail: Optional[Email] = None
    AbuseContactPhone: Optional[ContactNumber] = None
    RegistryDomainId: Optional[RegistryDomainId] = None
    CreationDate: Optional[Timestamp] = None
    UpdatedDate: Optional[Timestamp] = None
    ExpirationDate: Optional[Timestamp] = None
    Reseller: Optional[Reseller] = None
    DnsSec: Optional[DNSSec] = None
    StatusList: Optional[DomainStatusList] = None


class ListOperationsResponse(BaseModel):
    """
    The ListOperations response includes the following elements.
    """

    Operations: OperationSummaryList
    NextPageMarker: Optional[PageMarker] = None


class ListTagsForDomainResponse(BaseModel):
    """
    The ListTagsForDomain response includes the following elements.
    """

    TagList: TagList


class RegisterDomainRequest(BaseModel):
    """
    The RegisterDomain request includes the following elements.
    """

    DomainName: DomainName
    IdnLangCode: Optional[LangCode] = None
    DurationInYears: DurationInYears
    AutoRenew: Optional[Boolean] = None
    AdminContact: ContactDetail
    RegistrantContact: ContactDetail
    TechContact: ContactDetail
    PrivacyProtectAdminContact: Optional[Boolean] = None
    PrivacyProtectRegistrantContact: Optional[Boolean] = None
    PrivacyProtectTechContact: Optional[Boolean] = None


class TransferDomainRequest(BaseModel):
    """
    The TransferDomain request includes the following elements.
    """

    DomainName: DomainName
    IdnLangCode: Optional[LangCode] = None
    DurationInYears: DurationInYears
    Nameservers: Optional[NameserverList] = None
    AuthCode: Optional[DomainAuthCode] = None
    AutoRenew: Optional[Boolean] = None
    AdminContact: ContactDetail
    RegistrantContact: ContactDetail
    TechContact: ContactDetail
    PrivacyProtectAdminContact: Optional[Boolean] = None
    PrivacyProtectRegistrantContact: Optional[Boolean] = None
    PrivacyProtectTechContact: Optional[Boolean] = None


class UpdateDomainContactRequest(BaseModel):
    """
    The UpdateDomainContact request includes the following elements.
    """

    DomainName: DomainName
    AdminContact: Optional[ContactDetail] = None
    RegistrantContact: Optional[ContactDetail] = None
    TechContact: Optional[ContactDetail] = None


class UpdateDomainNameserversRequest(BaseModel):
    """
    <p>Replaces the current set of name servers for the domain with the specified set of name servers. If you use Amazon Route 53 as your DNS service, specify the four name servers in the delegation set for the hosted zone for the domain.</p> <p>If successful, this operation returns an operation ID that you can use to track the progress and completion of the action. If the request is not completed successfully, the domain registrant will be notified by email. </p>
    """

    DomainName: DomainName
    FIAuthKey: Optional[FIAuthKey] = None
    Nameservers: NameserverList


class UpdateTagsForDomainRequest(BaseModel):
    """
    The UpdateTagsForDomainRequest includes the following elements.
    """

    DomainName: DomainName
    TagsToUpdate: Optional[TagList] = None
