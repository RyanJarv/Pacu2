# generated by datamodel-codegen:
#   filename:  openapi.yaml
#   timestamp: 2021-12-31T02:54:58+00:00

from __future__ import annotations

from enum import Enum
from typing import Annotated, Any, List, Optional

from pydantic import BaseModel, Field


class ValidationException(BaseModel):
    __root__: Any


class InternalServerException(ValidationException):
    pass


class ServiceQuotaExceededException(ValidationException):
    pass


class AccessDeniedException(ValidationException):
    pass


class ResourceNotFoundException(ValidationException):
    pass


class ThrottlingException(ValidationException):
    pass


class ConflictException(ValidationException):
    pass


class _String(BaseModel):
    __root__: str


class _StringMin1Max64PatternS(BaseModel):
    __root__: Annotated[str, Field(max_length=64, min_length=1, regex='^\\S+$')]


class _Integer(BaseModel):
    __root__: int


class DeleteClusterResponse(BaseModel):
    pass


class DeleteControlPanelResponse(DeleteClusterResponse):
    pass


class DeleteRoutingControlResponse(DeleteClusterResponse):
    pass


class DeleteSafetyRuleResponse(DeleteClusterResponse):
    pass


class Status(Enum):
    """
    <p>The deployment status of a resource. Status can be one of the following:</p> <p>PENDING: Amazon Route 53 Application Recovery Controller is creating the resource.</p> <p>DEPLOYED: The resource is deployed and ready to use.</p> <p>PENDING_DELETION: Amazon Route 53 Application Recovery Controller is deleting the resource.</p>
    """

    PENDING = 'PENDING'
    DEPLOYED = 'DEPLOYED'
    PENDING_DELETION = 'PENDING_DELETION'


class AssertionRuleUpdate(BaseModel):
    """
    An update to an assertion rule. You can update the name or the evaluation period (wait period). If you don't specify one of the items to update, the item is unchanged.
    """

    Name: _StringMin1Max64PatternS
    SafetyRuleArn: _String
    WaitPeriodMs: _Integer


class _StringMin1Max128(BaseModel):
    __root__: Annotated[str, Field(max_length=128, min_length=1)]


class _StringMin1Max32(BaseModel):
    __root__: Annotated[str, Field(max_length=32, min_length=1)]


class ClusterEndpoint(BaseModel):
    """
    A cluster endpoint. Specify an endpoint when you want to set or retrieve a routing control state in the cluster.
    """

    Endpoint: Optional[_StringMin1Max128] = None
    Region: Optional[_StringMin1Max32] = None


class _Boolean(BaseModel):
    __root__: bool


class ControlPanel(BaseModel):
    """
    A control panel represents a group of routing controls that can be changed together in a single transaction.
    """

    ClusterArn: Optional[_String] = None
    ControlPanelArn: Optional[_String] = None
    DefaultControlPanel: Optional[_Boolean] = None
    Name: Optional[_StringMin1Max64PatternS] = None
    RoutingControlCount: Optional[_Integer] = None
    Status: Optional[Status] = None


class _StringMax64(BaseModel):
    __root__: Annotated[str, Field(max_length=64)]


class CreateClusterRequest(BaseModel):
    """
    Creates a cluster.
    """

    ClientToken: Optional[_StringMax64] = None
    ClusterName: _StringMin1Max64PatternS


class CreateControlPanelRequest(BaseModel):
    """
    The details of the control panel that you're creating.
    """

    ClientToken: Optional[_StringMax64] = None
    ClusterArn: _String
    ControlPanelName: _StringMin1Max64PatternS


class CreateRoutingControlRequest(BaseModel):
    """
    The details of the routing control that you're creating.
    """

    ClientToken: Optional[_StringMax64] = None
    ClusterArn: _String
    ControlPanelArn: Optional[_String] = None
    RoutingControlName: _StringMin1Max64PatternS


class RoutingControl(BaseModel):
    """
    A routing control has one of two states: ON and OFF. You can map the routing control state to the state of an Amazon Route 53 health check, which can be used to control traffic routing.
    """

    ControlPanelArn: Optional[_String] = None
    Name: Optional[_StringMin1Max64PatternS] = None
    RoutingControlArn: Optional[_String] = None
    Status: Optional[Status] = None


class DeleteClusterRequest(BaseModel):
    pass


class DeleteControlPanelRequest(BaseModel):
    pass


class DeleteRoutingControlRequest(BaseModel):
    pass


class DeleteSafetyRuleRequest(BaseModel):
    pass


class DescribeClusterRequest(BaseModel):
    pass


class DescribeControlPanelRequest(BaseModel):
    pass


class DescribeRoutingControlRequest(BaseModel):
    pass


class DescribeSafetyRuleRequest(BaseModel):
    pass


class GatingRuleUpdate(AssertionRuleUpdate):
    """
    Update to a gating rule. You can update the name or the evaluation period (wait period). If you don't specify one of the items to update, the item is unchanged.
    """

    pass


class MaxResults(BaseModel):
    __root__: Annotated[int, Field(ge=1.0, le=1000.0)]


class ListAssociatedRoute53HealthChecksRequest(BaseModel):
    pass


class _StringMax8096(BaseModel):
    __root__: Annotated[str, Field(max_length=8096)]


class ListClustersRequest(BaseModel):
    pass


class ListControlPanelsRequest(BaseModel):
    pass


class _ListOfControlPanel(BaseModel):
    __root__: List[ControlPanel]


class ListRoutingControlsRequest(BaseModel):
    pass


class _ListOfRoutingControl(BaseModel):
    __root__: List[RoutingControl]


class ListSafetyRulesRequest(BaseModel):
    pass


class RuleType(Enum):
    """
    <p>An enumerated type that determines how the evaluated rules are processed. RuleType can be one of the following:</p> <p>ATLEAST - At least N routing controls must be set. You specify N as the Threshold in the rule configuration.</p> <p>AND - All routing controls must be set. This is a shortcut for "At least N," where N is the total number of controls in the rule.</p> <p>OR - Any control must be set. This is a shortcut for "At least N," where N is 1.</p>
    """

    ATLEAST = 'ATLEAST'
    AND = 'AND'
    OR = 'OR'


class UpdateControlPanelRequest(BaseModel):
    """
    The details of the control panel that you're updating.
    """

    ControlPanelArn: _String
    ControlPanelName: _StringMin1Max64PatternS


class UpdateRoutingControlRequest(BaseModel):
    """
    The details of the routing control that you're updating.
    """

    RoutingControlArn: _String
    RoutingControlName: _StringMin1Max64PatternS


class UpdateSafetyRuleRequest(BaseModel):
    AssertionRuleUpdate: Optional[AssertionRuleUpdate] = None
    GatingRuleUpdate: Optional[GatingRuleUpdate] = None


class CreateControlPanelResponse(BaseModel):
    ControlPanel: Optional[ControlPanel] = None


class CreateRoutingControlResponse(BaseModel):
    RoutingControl: Optional[RoutingControl] = None


class _ListOfString(BaseModel):
    __root__: List[_String]


class RuleConfig(BaseModel):
    """
    The rule configuration for an assertion rule. That is, the criteria that you set for specific assertion controls (routing controls) that specify how many controls must be enabled after a transaction completes.
    """

    Inverted: _Boolean
    Threshold: _Integer
    Type: RuleType


class DescribeControlPanelResponse(CreateControlPanelResponse):
    pass


class DescribeRoutingControlResponse(CreateRoutingControlResponse):
    pass


class ListAssociatedRoute53HealthChecksResponse(BaseModel):
    HealthCheckIds: Optional[_ListOfString] = None
    NextToken: Optional[_StringMax8096] = None


class ListControlPanelsResponse(BaseModel):
    ControlPanels: Optional[_ListOfControlPanel] = None
    NextToken: Optional[_StringMax8096] = None


class ListRoutingControlsResponse(BaseModel):
    NextToken: Optional[_StringMax8096] = None
    RoutingControls: Optional[_ListOfRoutingControl] = None


class UpdateControlPanelResponse(CreateControlPanelResponse):
    pass


class UpdateRoutingControlResponse(CreateRoutingControlResponse):
    pass


class AssertionRule(BaseModel):
    """
    An assertion rule enforces that, when a routing control state is changed, the criteria set by the rule configuration is met. Otherwise, the change to the routing control is not accepted.
    """

    AssertedControls: _ListOfString
    ControlPanelArn: _String
    Name: _StringMin1Max64PatternS
    RuleConfig: RuleConfig
    SafetyRuleArn: _String
    Status: Status
    WaitPeriodMs: _Integer


class _ListOfClusterEndpoint(BaseModel):
    __root__: List[ClusterEndpoint]


class Cluster(BaseModel):
    """
    A cluster is a set of five consensus-forming Regional endpoints that represent the infrastructure that hosts your routing controls. Typically, you host together on one cluster all of the routing controls for your applications.
    """

    ClusterArn: Optional[_String] = None
    ClusterEndpoints: Optional[_ListOfClusterEndpoint] = None
    Name: Optional[_StringMin1Max64PatternS] = None
    Status: Optional[Status] = None


class NewAssertionRule(BaseModel):
    """
    A new assertion rule for a control panel.
    """

    AssertedControls: _ListOfString
    ControlPanelArn: _String
    Name: _StringMin1Max64PatternS
    RuleConfig: RuleConfig
    WaitPeriodMs: _Integer


class NewGatingRule(BaseModel):
    """
    A new gating rule for a control panel.
    """

    ControlPanelArn: _String
    GatingControls: _ListOfString
    Name: _StringMin1Max64PatternS
    RuleConfig: RuleConfig
    TargetControls: _ListOfString
    WaitPeriodMs: _Integer


class CreateSafetyRuleRequest(BaseModel):
    """
    The request body that you include when you create a safety rule.
    """

    AssertionRule: Optional[NewAssertionRule] = None
    ClientToken: Optional[_StringMax64] = None
    GatingRule: Optional[NewGatingRule] = None


class GatingRule(BaseModel):
    """
    A gating rule verifies that a set of gating controls evaluates as true, based on a rule configuration that you specify. If the gating rule evaluates to true, Amazon Route 53 Application Recovery Controller allows a set of routing control state changes to run and complete against the set of target controls.
    """

    ControlPanelArn: _String
    GatingControls: _ListOfString
    Name: _StringMin1Max64PatternS
    RuleConfig: RuleConfig
    SafetyRuleArn: _String
    Status: Status
    TargetControls: _ListOfString
    WaitPeriodMs: _Integer


class _ListOfCluster(BaseModel):
    __root__: List[Cluster]


class Rule(BaseModel):
    """
    A safety rule. A safety rule can be an assertion rule or a gating rule.
    """

    ASSERTION: Optional[AssertionRule] = None
    GATING: Optional[GatingRule] = None


class CreateClusterResponse(BaseModel):
    Cluster: Optional[Cluster] = None


class CreateSafetyRuleResponse(BaseModel):
    AssertionRule: Optional[AssertionRule] = None
    GatingRule: Optional[GatingRule] = None


class DescribeClusterResponse(CreateClusterResponse):
    pass


class DescribeSafetyRuleResponse(CreateSafetyRuleResponse):
    pass


class ListClustersResponse(BaseModel):
    Clusters: Optional[_ListOfCluster] = None
    NextToken: Optional[_StringMax8096] = None


class UpdateSafetyRuleResponse(CreateSafetyRuleResponse):
    pass


class _ListOfRule(BaseModel):
    __root__: List[Rule]


class ListSafetyRulesResponse(BaseModel):
    NextToken: Optional[_StringMax8096] = None
    SafetyRules: Optional[_ListOfRule] = None
