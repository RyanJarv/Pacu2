# generated by datamodel-codegen:
#   filename:  openapi.yaml
#   timestamp: 2021-12-31T02:59:07+00:00

from __future__ import annotations

from datetime import datetime
from enum import Enum
from typing import Annotated, Any, List, Optional

from pydantic import BaseModel, Field


class UnknownResourceFault(BaseModel):
    __root__: Any


class OperationNotPermittedFault(UnknownResourceFault):
    pass


class TypeDeprecatedFault(UnknownResourceFault):
    pass


class DomainDeprecatedFault(UnknownResourceFault):
    pass


class LimitExceededFault(UnknownResourceFault):
    pass


class TypeAlreadyExistsFault(UnknownResourceFault):
    pass


class DomainAlreadyExistsFault(UnknownResourceFault):
    pass


class TooManyTagsFault(UnknownResourceFault):
    pass


class WorkflowExecutionAlreadyStartedFault(UnknownResourceFault):
    pass


class DefaultUndefinedFault(UnknownResourceFault):
    pass


class ActivityId(BaseModel):
    __root__: Annotated[str, Field(max_length=256, min_length=1)]


class TaskToken(BaseModel):
    __root__: Annotated[str, Field(max_length=1024, min_length=1)]


class EventId(BaseModel):
    __root__: int


class Data(BaseModel):
    __root__: Annotated[str, Field(max_length=32768)]


class ActivityTaskCancelRequestedEventAttributes(BaseModel):
    """
    Provides the details of the <code>ActivityTaskCancelRequested</code> event.
    """

    decisionTaskCompletedEventId: EventId
    activityId: ActivityId


class ActivityTaskCanceledEventAttributes(BaseModel):
    """
    Provides the details of the <code>ActivityTaskCanceled</code> event.
    """

    details: Optional[Data] = None
    scheduledEventId: EventId
    startedEventId: EventId
    latestCancelRequestedEventId: Optional[EventId] = None


class ActivityTaskCompletedEventAttributes(BaseModel):
    """
    Provides the details of the <code>ActivityTaskCompleted</code> event.
    """

    result: Optional[Data] = None
    scheduledEventId: EventId
    startedEventId: EventId


class FailureReason(BaseModel):
    __root__: Annotated[str, Field(max_length=256)]


class ActivityTaskFailedEventAttributes(BaseModel):
    """
    Provides the details of the <code>ActivityTaskFailed</code> event.
    """

    reason: Optional[FailureReason] = None
    details: Optional[Data] = None
    scheduledEventId: EventId
    startedEventId: EventId


class DurationInSecondsOptional(BaseModel):
    __root__: Annotated[str, Field(max_length=8)]


class TaskPriority(BaseModel):
    __root__: str


class Identity(FailureReason):
    pass


class ActivityTaskStartedEventAttributes(BaseModel):
    """
    Provides the details of the <code>ActivityTaskStarted</code> event.
    """

    identity: Optional[Identity] = None
    scheduledEventId: EventId


class Canceled(BaseModel):
    __root__: bool


class ActivityTaskTimeoutType(Enum):
    START_TO_CLOSE = 'START_TO_CLOSE'
    SCHEDULE_TO_START = 'SCHEDULE_TO_START'
    SCHEDULE_TO_CLOSE = 'SCHEDULE_TO_CLOSE'
    HEARTBEAT = 'HEARTBEAT'


class LimitedData(BaseModel):
    __root__: Annotated[str, Field(max_length=2048)]


class ActivityTaskTimedOutEventAttributes(BaseModel):
    """
    Provides the details of the <code>ActivityTaskTimedOut</code> event.
    """

    timeoutType: ActivityTaskTimeoutType
    scheduledEventId: EventId
    startedEventId: EventId
    details: Optional[LimitedData] = None


class Name(ActivityId):
    pass


class Version(BaseModel):
    __root__: Annotated[str, Field(max_length=64, min_length=1)]


class RegistrationStatus(Enum):
    REGISTERED = 'REGISTERED'
    DEPRECATED = 'DEPRECATED'


class Description(BaseModel):
    __root__: Annotated[str, Field(max_length=1024)]


class Timestamp(BaseModel):
    __root__: datetime


class PageToken(LimitedData):
    pass


class Arn(BaseModel):
    __root__: Annotated[str, Field(max_length=1600, min_length=1)]


class TimerId(ActivityId):
    pass


class CancelTimerDecisionAttributes(BaseModel):
    """
    <p>Provides the details of the <code>CancelTimer</code> decision.</p> <p> <b>Access Control</b> </p> <p>You can use IAM policies to control this decision's access to Amazon SWF resources as follows:</p> <ul> <li> <p>Use a <code>Resource</code> element with the domain name to limit the action to only specified domains.</p> </li> <li> <p>Use an <code>Action</code> element to allow or deny permission to call this action.</p> </li> <li> <p>You cannot use an IAM policy to constrain this action's parameters.</p> </li> </ul> <p>If the caller doesn't have sufficient permissions to invoke the action, or the parameter values fall outside the specified constraints, the action fails. The associated event attribute's <code>cause</code> parameter is set to <code>OPERATION_NOT_PERMITTED</code>. For details and example IAM policies, see <a href="https://docs.aws.amazon.com/amazonswf/latest/developerguide/swf-dev-iam.html">Using IAM to Manage Access to Amazon SWF Workflows</a> in the <i>Amazon SWF Developer Guide</i>.</p>
    """

    timerId: TimerId


class CancelTimerFailedCause(Enum):
    TIMER_ID_UNKNOWN = 'TIMER_ID_UNKNOWN'
    OPERATION_NOT_PERMITTED = 'OPERATION_NOT_PERMITTED'


class CancelTimerFailedEventAttributes(BaseModel):
    """
    Provides the details of the <code>CancelTimerFailed</code> event.
    """

    timerId: TimerId
    cause: CancelTimerFailedCause
    decisionTaskCompletedEventId: EventId


class CancelWorkflowExecutionDecisionAttributes(BaseModel):
    """
    <p>Provides the details of the <code>CancelWorkflowExecution</code> decision.</p> <p> <b>Access Control</b> </p> <p>You can use IAM policies to control this decision's access to Amazon SWF resources as follows:</p> <ul> <li> <p>Use a <code>Resource</code> element with the domain name to limit the action to only specified domains.</p> </li> <li> <p>Use an <code>Action</code> element to allow or deny permission to call this action.</p> </li> <li> <p>You cannot use an IAM policy to constrain this action's parameters.</p> </li> </ul> <p>If the caller doesn't have sufficient permissions to invoke the action, or the parameter values fall outside the specified constraints, the action fails. The associated event attribute's <code>cause</code> parameter is set to <code>OPERATION_NOT_PERMITTED</code>. For details and example IAM policies, see <a href="https://docs.aws.amazon.com/amazonswf/latest/developerguide/swf-dev-iam.html">Using IAM to Manage Access to Amazon SWF Workflows</a> in the <i>Amazon SWF Developer Guide</i>.</p>
    """

    details: Optional[Data] = None


class CancelWorkflowExecutionFailedCause(Enum):
    UNHANDLED_DECISION = 'UNHANDLED_DECISION'
    OPERATION_NOT_PERMITTED = 'OPERATION_NOT_PERMITTED'


class CancelWorkflowExecutionFailedEventAttributes(BaseModel):
    """
    Provides the details of the <code>CancelWorkflowExecutionFailed</code> event.
    """

    cause: CancelWorkflowExecutionFailedCause
    decisionTaskCompletedEventId: EventId


class CauseMessage(BaseModel):
    __root__: Annotated[str, Field(max_length=1728)]


class ChildPolicy(Enum):
    TERMINATE = 'TERMINATE'
    REQUEST_CANCEL = 'REQUEST_CANCEL'
    ABANDON = 'ABANDON'


class WorkflowType(BaseModel):
    """
    Represents a workflow type.
    """

    name: Name
    version: Version


class WorkflowExecutionTimeoutType(Enum):
    START_TO_CLOSE = 'START_TO_CLOSE'


class CloseStatus(Enum):
    COMPLETED = 'COMPLETED'
    FAILED = 'FAILED'
    CANCELED = 'CANCELED'
    TERMINATED = 'TERMINATED'
    CONTINUED_AS_NEW = 'CONTINUED_AS_NEW'
    TIMED_OUT = 'TIMED_OUT'


class CloseStatusFilter(BaseModel):
    """
    Used to filter the closed workflow executions in visibility APIs by their close status.
    """

    status: CloseStatus


class CompleteWorkflowExecutionDecisionAttributes(BaseModel):
    """
    <p>Provides the details of the <code>CompleteWorkflowExecution</code> decision.</p> <p> <b>Access Control</b> </p> <p>You can use IAM policies to control this decision's access to Amazon SWF resources as follows:</p> <ul> <li> <p>Use a <code>Resource</code> element with the domain name to limit the action to only specified domains.</p> </li> <li> <p>Use an <code>Action</code> element to allow or deny permission to call this action.</p> </li> <li> <p>You cannot use an IAM policy to constrain this action's parameters.</p> </li> </ul> <p>If the caller doesn't have sufficient permissions to invoke the action, or the parameter values fall outside the specified constraints, the action fails. The associated event attribute's <code>cause</code> parameter is set to <code>OPERATION_NOT_PERMITTED</code>. For details and example IAM policies, see <a href="https://docs.aws.amazon.com/amazonswf/latest/developerguide/swf-dev-iam.html">Using IAM to Manage Access to Amazon SWF Workflows</a> in the <i>Amazon SWF Developer Guide</i>.</p>
    """

    result: Optional[Data] = None


class CompleteWorkflowExecutionFailedEventAttributes(
    CancelWorkflowExecutionFailedEventAttributes
):
    """
    Provides the details of the <code>CompleteWorkflowExecutionFailed</code> event.
    """

    pass


class ContinueAsNewWorkflowExecutionFailedCause(Enum):
    UNHANDLED_DECISION = 'UNHANDLED_DECISION'
    WORKFLOW_TYPE_DEPRECATED = 'WORKFLOW_TYPE_DEPRECATED'
    WORKFLOW_TYPE_DOES_NOT_EXIST = 'WORKFLOW_TYPE_DOES_NOT_EXIST'
    DEFAULT_EXECUTION_START_TO_CLOSE_TIMEOUT_UNDEFINED = (
        'DEFAULT_EXECUTION_START_TO_CLOSE_TIMEOUT_UNDEFINED'
    )
    DEFAULT_TASK_START_TO_CLOSE_TIMEOUT_UNDEFINED = (
        'DEFAULT_TASK_START_TO_CLOSE_TIMEOUT_UNDEFINED'
    )
    DEFAULT_TASK_LIST_UNDEFINED = 'DEFAULT_TASK_LIST_UNDEFINED'
    DEFAULT_CHILD_POLICY_UNDEFINED = 'DEFAULT_CHILD_POLICY_UNDEFINED'
    CONTINUE_AS_NEW_WORKFLOW_EXECUTION_RATE_EXCEEDED = (
        'CONTINUE_AS_NEW_WORKFLOW_EXECUTION_RATE_EXCEEDED'
    )
    OPERATION_NOT_PERMITTED = 'OPERATION_NOT_PERMITTED'


class ContinueAsNewWorkflowExecutionFailedEventAttributes(BaseModel):
    """
    Provides the details of the <code>ContinueAsNewWorkflowExecutionFailed</code> event.
    """

    cause: ContinueAsNewWorkflowExecutionFailedCause
    decisionTaskCompletedEventId: EventId


class Count(BaseModel):
    __root__: Annotated[int, Field(ge=0.0)]


class DomainName(ActivityId):
    pass


class ExecutionTimeFilter(BaseModel):
    """
    Used to filter the workflow executions in visibility APIs by various time-based rules. Each parameter, if specified, defines a rule that must be satisfied by each returned query result. The parameter values are in the <a href="https://en.wikipedia.org/wiki/Unix_time">Unix Time format</a>. For example: <code>"oldestDate": 1325376070.</code>
    """

    oldestDate: Timestamp
    latestDate: Optional[Timestamp] = None


class DecisionType(Enum):
    ScheduleActivityTask = 'ScheduleActivityTask'
    RequestCancelActivityTask = 'RequestCancelActivityTask'
    CompleteWorkflowExecution = 'CompleteWorkflowExecution'
    FailWorkflowExecution = 'FailWorkflowExecution'
    CancelWorkflowExecution = 'CancelWorkflowExecution'
    ContinueAsNewWorkflowExecution = 'ContinueAsNewWorkflowExecution'
    RecordMarker = 'RecordMarker'
    StartTimer = 'StartTimer'
    CancelTimer = 'CancelTimer'
    SignalExternalWorkflowExecution = 'SignalExternalWorkflowExecution'
    RequestCancelExternalWorkflowExecution = 'RequestCancelExternalWorkflowExecution'
    StartChildWorkflowExecution = 'StartChildWorkflowExecution'
    ScheduleLambdaFunction = 'ScheduleLambdaFunction'


class RequestCancelActivityTaskDecisionAttributes(BaseModel):
    """
    <p>Provides the details of the <code>RequestCancelActivityTask</code> decision.</p> <p> <b>Access Control</b> </p> <p>You can use IAM policies to control this decision's access to Amazon SWF resources as follows:</p> <ul> <li> <p>Use a <code>Resource</code> element with the domain name to limit the action to only specified domains.</p> </li> <li> <p>Use an <code>Action</code> element to allow or deny permission to call this action.</p> </li> <li> <p>You cannot use an IAM policy to constrain this action's parameters.</p> </li> </ul> <p>If the caller doesn't have sufficient permissions to invoke the action, or the parameter values fall outside the specified constraints, the action fails. The associated event attribute's <code>cause</code> parameter is set to <code>OPERATION_NOT_PERMITTED</code>. For details and example IAM policies, see <a href="https://docs.aws.amazon.com/amazonswf/latest/developerguide/swf-dev-iam.html">Using IAM to Manage Access to Amazon SWF Workflows</a> in the <i>Amazon SWF Developer Guide</i>.</p>
    """

    activityId: ActivityId


class FailWorkflowExecutionDecisionAttributes(BaseModel):
    """
    <p>Provides the details of the <code>FailWorkflowExecution</code> decision.</p> <p> <b>Access Control</b> </p> <p>You can use IAM policies to control this decision's access to Amazon SWF resources as follows:</p> <ul> <li> <p>Use a <code>Resource</code> element with the domain name to limit the action to only specified domains.</p> </li> <li> <p>Use an <code>Action</code> element to allow or deny permission to call this action.</p> </li> <li> <p>You cannot use an IAM policy to constrain this action's parameters.</p> </li> </ul> <p>If the caller doesn't have sufficient permissions to invoke the action, or the parameter values fall outside the specified constraints, the action fails. The associated event attribute's <code>cause</code> parameter is set to <code>OPERATION_NOT_PERMITTED</code>. For details and example IAM policies, see <a href="https://docs.aws.amazon.com/amazonswf/latest/developerguide/swf-dev-iam.html">Using IAM to Manage Access to Amazon SWF Workflows</a> in the <i>Amazon SWF Developer Guide</i>.</p>
    """

    reason: Optional[FailureReason] = None
    details: Optional[Data] = None


class DecisionTaskCompletedEventAttributes(BaseModel):
    """
    Provides the details of the <code>DecisionTaskCompleted</code> event.
    """

    executionContext: Optional[Data] = None
    scheduledEventId: EventId
    startedEventId: EventId


class DecisionTaskStartedEventAttributes(ActivityTaskStartedEventAttributes):
    """
    Provides the details of the <code>DecisionTaskStarted</code> event.
    """

    pass


class DecisionTaskTimedOutEventAttributes(BaseModel):
    """
    Provides the details of the <code>DecisionTaskTimedOut</code> event.
    """

    timeoutType: WorkflowExecutionTimeoutType
    scheduledEventId: EventId
    startedEventId: EventId


class DurationInDays(BaseModel):
    __root__: Annotated[str, Field(max_length=8, min_length=1)]


class DomainConfiguration(BaseModel):
    """
    Contains the configuration settings of a domain.
    """

    workflowExecutionRetentionPeriodInDays: DurationInDays


class DomainInfo(BaseModel):
    """
    Contains general information about a domain.
    """

    name: DomainName
    status: RegistrationStatus
    description: Optional[Description] = None
    arn: Optional[Arn] = None


class DomainInfoList(BaseModel):
    __root__: List[DomainInfo]


class DurationInSeconds(DurationInDays):
    pass


class EventType(Enum):
    WorkflowExecutionStarted = 'WorkflowExecutionStarted'
    WorkflowExecutionCancelRequested = 'WorkflowExecutionCancelRequested'
    WorkflowExecutionCompleted = 'WorkflowExecutionCompleted'
    CompleteWorkflowExecutionFailed = 'CompleteWorkflowExecutionFailed'
    WorkflowExecutionFailed = 'WorkflowExecutionFailed'
    FailWorkflowExecutionFailed = 'FailWorkflowExecutionFailed'
    WorkflowExecutionTimedOut = 'WorkflowExecutionTimedOut'
    WorkflowExecutionCanceled = 'WorkflowExecutionCanceled'
    CancelWorkflowExecutionFailed = 'CancelWorkflowExecutionFailed'
    WorkflowExecutionContinuedAsNew = 'WorkflowExecutionContinuedAsNew'
    ContinueAsNewWorkflowExecutionFailed = 'ContinueAsNewWorkflowExecutionFailed'
    WorkflowExecutionTerminated = 'WorkflowExecutionTerminated'
    DecisionTaskScheduled = 'DecisionTaskScheduled'
    DecisionTaskStarted = 'DecisionTaskStarted'
    DecisionTaskCompleted = 'DecisionTaskCompleted'
    DecisionTaskTimedOut = 'DecisionTaskTimedOut'
    ActivityTaskScheduled = 'ActivityTaskScheduled'
    ScheduleActivityTaskFailed = 'ScheduleActivityTaskFailed'
    ActivityTaskStarted = 'ActivityTaskStarted'
    ActivityTaskCompleted = 'ActivityTaskCompleted'
    ActivityTaskFailed = 'ActivityTaskFailed'
    ActivityTaskTimedOut = 'ActivityTaskTimedOut'
    ActivityTaskCanceled = 'ActivityTaskCanceled'
    ActivityTaskCancelRequested = 'ActivityTaskCancelRequested'
    RequestCancelActivityTaskFailed = 'RequestCancelActivityTaskFailed'
    WorkflowExecutionSignaled = 'WorkflowExecutionSignaled'
    MarkerRecorded = 'MarkerRecorded'
    RecordMarkerFailed = 'RecordMarkerFailed'
    TimerStarted = 'TimerStarted'
    StartTimerFailed = 'StartTimerFailed'
    TimerFired = 'TimerFired'
    TimerCanceled = 'TimerCanceled'
    CancelTimerFailed = 'CancelTimerFailed'
    StartChildWorkflowExecutionInitiated = 'StartChildWorkflowExecutionInitiated'
    StartChildWorkflowExecutionFailed = 'StartChildWorkflowExecutionFailed'
    ChildWorkflowExecutionStarted = 'ChildWorkflowExecutionStarted'
    ChildWorkflowExecutionCompleted = 'ChildWorkflowExecutionCompleted'
    ChildWorkflowExecutionFailed = 'ChildWorkflowExecutionFailed'
    ChildWorkflowExecutionTimedOut = 'ChildWorkflowExecutionTimedOut'
    ChildWorkflowExecutionCanceled = 'ChildWorkflowExecutionCanceled'
    ChildWorkflowExecutionTerminated = 'ChildWorkflowExecutionTerminated'
    SignalExternalWorkflowExecutionInitiated = (
        'SignalExternalWorkflowExecutionInitiated'
    )
    SignalExternalWorkflowExecutionFailed = 'SignalExternalWorkflowExecutionFailed'
    ExternalWorkflowExecutionSignaled = 'ExternalWorkflowExecutionSignaled'
    RequestCancelExternalWorkflowExecutionInitiated = (
        'RequestCancelExternalWorkflowExecutionInitiated'
    )
    RequestCancelExternalWorkflowExecutionFailed = (
        'RequestCancelExternalWorkflowExecutionFailed'
    )
    ExternalWorkflowExecutionCancelRequested = (
        'ExternalWorkflowExecutionCancelRequested'
    )
    LambdaFunctionScheduled = 'LambdaFunctionScheduled'
    LambdaFunctionStarted = 'LambdaFunctionStarted'
    LambdaFunctionCompleted = 'LambdaFunctionCompleted'
    LambdaFunctionFailed = 'LambdaFunctionFailed'
    LambdaFunctionTimedOut = 'LambdaFunctionTimedOut'
    ScheduleLambdaFunctionFailed = 'ScheduleLambdaFunctionFailed'
    StartLambdaFunctionFailed = 'StartLambdaFunctionFailed'


class ExecutionStatus(Enum):
    OPEN = 'OPEN'
    CLOSED = 'CLOSED'


class FailWorkflowExecutionFailedEventAttributes(
    CancelWorkflowExecutionFailedEventAttributes
):
    """
    Provides the details of the <code>FailWorkflowExecutionFailed</code> event.
    """

    pass


class FunctionId(ActivityId):
    pass


class FunctionInput(BaseModel):
    __root__: Annotated[str, Field(max_length=32768, min_length=0)]


class FunctionName(Version):
    pass


class PageSize(BaseModel):
    __root__: Annotated[int, Field(ge=0.0, le=1000.0)]


class ReverseOrder(Canceled):
    pass


class WorkflowExecutionCompletedEventAttributes(BaseModel):
    """
    Provides the details of the <code>WorkflowExecutionCompleted</code> event.
    """

    result: Optional[Data] = None
    decisionTaskCompletedEventId: EventId


class WorkflowExecutionFailedEventAttributes(BaseModel):
    """
    Provides the details of the <code>WorkflowExecutionFailed</code> event.
    """

    reason: Optional[FailureReason] = None
    details: Optional[Data] = None
    decisionTaskCompletedEventId: EventId


class WorkflowExecutionTimedOutEventAttributes(BaseModel):
    """
    Provides the details of the <code>WorkflowExecutionTimedOut</code> event.
    """

    timeoutType: WorkflowExecutionTimeoutType
    childPolicy: ChildPolicy


class WorkflowExecutionCanceledEventAttributes(BaseModel):
    """
    Provides the details of the <code>WorkflowExecutionCanceled</code> event.
    """

    details: Optional[Data] = None
    decisionTaskCompletedEventId: EventId


class TimerStartedEventAttributes(BaseModel):
    """
    Provides the details of the <code>TimerStarted</code> event.
    """

    timerId: TimerId
    control: Optional[Data] = None
    startToFireTimeout: DurationInSeconds
    decisionTaskCompletedEventId: EventId


class TimerFiredEventAttributes(BaseModel):
    """
    Provides the details of the <code>TimerFired</code> event.
    """

    timerId: TimerId
    startedEventId: EventId


class TimerCanceledEventAttributes(BaseModel):
    """
    Provides the details of the <code>TimerCanceled</code> event.
    """

    timerId: TimerId
    startedEventId: EventId
    decisionTaskCompletedEventId: EventId


class LambdaFunctionScheduledEventAttributes(BaseModel):
    """
    Provides the details of the <code>LambdaFunctionScheduled</code> event. It isn't set for other event types.
    """

    id: FunctionId
    name: FunctionName
    control: Optional[Data] = None
    input: Optional[FunctionInput] = None
    startToCloseTimeout: Optional[DurationInSecondsOptional] = None
    decisionTaskCompletedEventId: EventId


class LambdaFunctionStartedEventAttributes(BaseModel):
    """
    Provides the details of the <code>LambdaFunctionStarted</code> event. It isn't set for other event types.
    """

    scheduledEventId: EventId


class LambdaFunctionCompletedEventAttributes(BaseModel):
    """
    Provides the details of the <code>LambdaFunctionCompleted</code> event. It isn't set for other event types.
    """

    scheduledEventId: EventId
    startedEventId: EventId
    result: Optional[Data] = None


class LambdaFunctionFailedEventAttributes(BaseModel):
    """
    Provides the details of the <code>LambdaFunctionFailed</code> event. It isn't set for other event types.
    """

    scheduledEventId: EventId
    startedEventId: EventId
    reason: Optional[FailureReason] = None
    details: Optional[Data] = None


class MarkerName(ActivityId):
    pass


class OpenDecisionTasksCount(BaseModel):
    __root__: Annotated[int, Field(ge=0.0, le=1.0)]


class Truncated(Canceled):
    pass


class RecordMarkerFailedCause(Enum):
    OPERATION_NOT_PERMITTED = 'OPERATION_NOT_PERMITTED'


class RequestCancelActivityTaskFailedCause(Enum):
    ACTIVITY_ID_UNKNOWN = 'ACTIVITY_ID_UNKNOWN'
    OPERATION_NOT_PERMITTED = 'OPERATION_NOT_PERMITTED'


class WorkflowId(ActivityId):
    pass


class WorkflowRunIdOptional(BaseModel):
    __root__: Annotated[str, Field(max_length=64)]


class RequestCancelExternalWorkflowExecutionFailedCause(Enum):
    UNKNOWN_EXTERNAL_WORKFLOW_EXECUTION = 'UNKNOWN_EXTERNAL_WORKFLOW_EXECUTION'
    REQUEST_CANCEL_EXTERNAL_WORKFLOW_EXECUTION_RATE_EXCEEDED = (
        'REQUEST_CANCEL_EXTERNAL_WORKFLOW_EXECUTION_RATE_EXCEEDED'
    )
    OPERATION_NOT_PERMITTED = 'OPERATION_NOT_PERMITTED'


class ResourceTagKey(BaseModel):
    __root__: Annotated[str, Field(max_length=128, min_length=1)]


class ResourceTagValue(FailureReason):
    pass


class ResourceTag(BaseModel):
    """
    <p>Tags are key-value pairs that can be associated with Amazon SWF state machines and activities.</p> <p>Tags may only contain unicode letters, digits, whitespace, or these symbols: <code>_ . : / = + - @</code>.</p>
    """

    key: ResourceTagKey
    value: Optional[ResourceTagValue] = None


class ResourceTagKeyList(BaseModel):
    __root__: List[ResourceTagKey]


class WorkflowRunId(Version):
    pass


class ScheduleActivityTaskFailedCause(Enum):
    ACTIVITY_TYPE_DEPRECATED = 'ACTIVITY_TYPE_DEPRECATED'
    ACTIVITY_TYPE_DOES_NOT_EXIST = 'ACTIVITY_TYPE_DOES_NOT_EXIST'
    ACTIVITY_ID_ALREADY_IN_USE = 'ACTIVITY_ID_ALREADY_IN_USE'
    OPEN_ACTIVITIES_LIMIT_EXCEEDED = 'OPEN_ACTIVITIES_LIMIT_EXCEEDED'
    ACTIVITY_CREATION_RATE_EXCEEDED = 'ACTIVITY_CREATION_RATE_EXCEEDED'
    DEFAULT_SCHEDULE_TO_CLOSE_TIMEOUT_UNDEFINED = (
        'DEFAULT_SCHEDULE_TO_CLOSE_TIMEOUT_UNDEFINED'
    )
    DEFAULT_TASK_LIST_UNDEFINED = 'DEFAULT_TASK_LIST_UNDEFINED'
    DEFAULT_SCHEDULE_TO_START_TIMEOUT_UNDEFINED = (
        'DEFAULT_SCHEDULE_TO_START_TIMEOUT_UNDEFINED'
    )
    DEFAULT_START_TO_CLOSE_TIMEOUT_UNDEFINED = (
        'DEFAULT_START_TO_CLOSE_TIMEOUT_UNDEFINED'
    )
    DEFAULT_HEARTBEAT_TIMEOUT_UNDEFINED = 'DEFAULT_HEARTBEAT_TIMEOUT_UNDEFINED'
    OPERATION_NOT_PERMITTED = 'OPERATION_NOT_PERMITTED'


class ScheduleLambdaFunctionFailedCause(Enum):
    ID_ALREADY_IN_USE = 'ID_ALREADY_IN_USE'
    OPEN_LAMBDA_FUNCTIONS_LIMIT_EXCEEDED = 'OPEN_LAMBDA_FUNCTIONS_LIMIT_EXCEEDED'
    LAMBDA_FUNCTION_CREATION_RATE_EXCEEDED = 'LAMBDA_FUNCTION_CREATION_RATE_EXCEEDED'
    LAMBDA_SERVICE_NOT_AVAILABLE_IN_REGION = 'LAMBDA_SERVICE_NOT_AVAILABLE_IN_REGION'


class SignalName(ActivityId):
    pass


class SignalExternalWorkflowExecutionFailedCause(Enum):
    UNKNOWN_EXTERNAL_WORKFLOW_EXECUTION = 'UNKNOWN_EXTERNAL_WORKFLOW_EXECUTION'
    SIGNAL_EXTERNAL_WORKFLOW_EXECUTION_RATE_EXCEEDED = (
        'SIGNAL_EXTERNAL_WORKFLOW_EXECUTION_RATE_EXCEEDED'
    )
    OPERATION_NOT_PERMITTED = 'OPERATION_NOT_PERMITTED'


class StartChildWorkflowExecutionFailedCause(Enum):
    WORKFLOW_TYPE_DOES_NOT_EXIST = 'WORKFLOW_TYPE_DOES_NOT_EXIST'
    WORKFLOW_TYPE_DEPRECATED = 'WORKFLOW_TYPE_DEPRECATED'
    OPEN_CHILDREN_LIMIT_EXCEEDED = 'OPEN_CHILDREN_LIMIT_EXCEEDED'
    OPEN_WORKFLOWS_LIMIT_EXCEEDED = 'OPEN_WORKFLOWS_LIMIT_EXCEEDED'
    CHILD_CREATION_RATE_EXCEEDED = 'CHILD_CREATION_RATE_EXCEEDED'
    WORKFLOW_ALREADY_RUNNING = 'WORKFLOW_ALREADY_RUNNING'
    DEFAULT_EXECUTION_START_TO_CLOSE_TIMEOUT_UNDEFINED = (
        'DEFAULT_EXECUTION_START_TO_CLOSE_TIMEOUT_UNDEFINED'
    )
    DEFAULT_TASK_LIST_UNDEFINED = 'DEFAULT_TASK_LIST_UNDEFINED'
    DEFAULT_TASK_START_TO_CLOSE_TIMEOUT_UNDEFINED = (
        'DEFAULT_TASK_START_TO_CLOSE_TIMEOUT_UNDEFINED'
    )
    DEFAULT_CHILD_POLICY_UNDEFINED = 'DEFAULT_CHILD_POLICY_UNDEFINED'
    OPERATION_NOT_PERMITTED = 'OPERATION_NOT_PERMITTED'


class StartLambdaFunctionFailedCause(Enum):
    ASSUME_ROLE_FAILED = 'ASSUME_ROLE_FAILED'


class StartTimerFailedCause(Enum):
    TIMER_ID_ALREADY_IN_USE = 'TIMER_ID_ALREADY_IN_USE'
    OPEN_TIMERS_LIMIT_EXCEEDED = 'OPEN_TIMERS_LIMIT_EXCEEDED'
    TIMER_CREATION_RATE_EXCEEDED = 'TIMER_CREATION_RATE_EXCEEDED'
    OPERATION_NOT_PERMITTED = 'OPERATION_NOT_PERMITTED'


class Tag(BaseModel):
    __root__: Annotated[str, Field(max_length=256, min_length=0)]


class TerminateReason(FailureReason):
    pass


class VersionOptional(WorkflowRunIdOptional):
    pass


class WorkflowExecutionCancelRequestedCause(Enum):
    CHILD_POLICY_APPLIED = 'CHILD_POLICY_APPLIED'


class WorkflowExecutionOpenCounts(BaseModel):
    """
    Contains the counts of open tasks, child workflow executions and timers for a workflow execution.
    """

    openActivityTasks: Count
    openDecisionTasks: OpenDecisionTasksCount
    openTimers: Count
    openChildWorkflowExecutions: Count
    openLambdaFunctions: Optional[Count] = None


class WorkflowExecutionTerminatedCause(Enum):
    CHILD_POLICY_APPLIED = 'CHILD_POLICY_APPLIED'
    EVENT_LIMIT_EXCEEDED = 'EVENT_LIMIT_EXCEEDED'
    OPERATOR_INITIATED = 'OPERATOR_INITIATED'


class WorkflowTypeInfo(BaseModel):
    """
    Contains information about a workflow type.
    """

    workflowType: WorkflowType
    status: RegistrationStatus
    description: Optional[Description] = None
    creationDate: Timestamp
    deprecationDate: Optional[Timestamp] = None


class WorkflowTypeInfoList(BaseModel):
    __root__: List[WorkflowTypeInfo]


class WorkflowExecutionCount(BaseModel):
    """
    Contains the count of workflow executions returned from <a>CountOpenWorkflowExecutions</a> or <a>CountClosedWorkflowExecutions</a>
    """

    count: Count
    truncated: Optional[Truncated] = None


class PendingTaskCount(WorkflowExecutionCount):
    """
    Contains the count of tasks in a task list.
    """

    pass


class DeprecateDomainInput(BaseModel):
    name: DomainName


class DeprecateWorkflowTypeInput(BaseModel):
    domain: DomainName
    workflowType: WorkflowType


class DomainDetail(BaseModel):
    """
    Contains details of a domain.
    """

    domainInfo: DomainInfo
    configuration: DomainConfiguration


class DescribeDomainInput(BaseModel):
    name: DomainName


class DescribeWorkflowTypeInput(BaseModel):
    domain: DomainName
    workflowType: WorkflowType


class ListActivityTypesInput(BaseModel):
    domain: DomainName
    name: Optional[Name] = None
    registrationStatus: RegistrationStatus
    nextPageToken: Optional[PageToken] = None
    maximumPageSize: Optional[PageSize] = None
    reverseOrder: Optional[ReverseOrder] = None


class DomainInfos(BaseModel):
    """
    Contains a paginated collection of DomainInfo structures.
    """

    domainInfos: DomainInfoList
    nextPageToken: Optional[PageToken] = None


class ListDomainsInput(BaseModel):
    nextPageToken: Optional[PageToken] = None
    registrationStatus: RegistrationStatus
    maximumPageSize: Optional[PageSize] = None
    reverseOrder: Optional[ReverseOrder] = None


class ListTagsForResourceInput(BaseModel):
    resourceArn: Arn


class WorkflowTypeInfos(BaseModel):
    """
    Contains a paginated list of information structures about workflow types.
    """

    typeInfos: WorkflowTypeInfoList
    nextPageToken: Optional[PageToken] = None


class ListWorkflowTypesInput(BaseModel):
    domain: DomainName
    name: Optional[Name] = None
    registrationStatus: RegistrationStatus
    nextPageToken: Optional[PageToken] = None
    maximumPageSize: Optional[PageSize] = None
    reverseOrder: Optional[ReverseOrder] = None


class ActivityTaskStatus(BaseModel):
    """
    Status information about an activity task.
    """

    cancelRequested: Canceled


class RecordActivityTaskHeartbeatInput(BaseModel):
    taskToken: TaskToken
    details: Optional[LimitedData] = None


class RequestCancelWorkflowExecutionInput(BaseModel):
    domain: DomainName
    workflowId: WorkflowId
    runId: Optional[WorkflowRunIdOptional] = None


class RespondActivityTaskCanceledInput(BaseModel):
    taskToken: TaskToken
    details: Optional[Data] = None


class RespondActivityTaskCompletedInput(BaseModel):
    taskToken: TaskToken
    result: Optional[Data] = None


class RespondActivityTaskFailedInput(BaseModel):
    taskToken: TaskToken
    reason: Optional[FailureReason] = None
    details: Optional[Data] = None


class SignalWorkflowExecutionInput(BaseModel):
    domain: DomainName
    workflowId: WorkflowId
    runId: Optional[WorkflowRunIdOptional] = None
    signalName: SignalName
    input: Optional[Data] = None


class Run(BaseModel):
    """
    Specifies the <code>runId</code> of a workflow execution.
    """

    runId: Optional[WorkflowRunId] = None


class TerminateWorkflowExecutionInput(BaseModel):
    domain: DomainName
    workflowId: WorkflowId
    runId: Optional[WorkflowRunIdOptional] = None
    reason: Optional[TerminateReason] = None
    details: Optional[Data] = None
    childPolicy: Optional[ChildPolicy] = None


class UndeprecateDomainInput(BaseModel):
    name: DomainName


class UndeprecateWorkflowTypeInput(BaseModel):
    domain: DomainName
    workflowType: WorkflowType


class UntagResourceInput(BaseModel):
    resourceArn: Arn
    tagKeys: ResourceTagKeyList


class WorkflowExecution(BaseModel):
    """
    Represents a workflow execution.
    """

    workflowId: WorkflowId
    runId: WorkflowRunId


class ActivityType(WorkflowType):
    """
    Represents an activity type.
    """

    pass


class TaskList(BaseModel):
    """
    Represents a task list.
    """

    name: Name


class ActivityTaskScheduledEventAttributes(BaseModel):
    """
    Provides the details of the <code>ActivityTaskScheduled</code> event.
    """

    activityType: ActivityType
    activityId: ActivityId
    input: Optional[Data] = None
    control: Optional[Data] = None
    scheduleToStartTimeout: Optional[DurationInSecondsOptional] = None
    scheduleToCloseTimeout: Optional[DurationInSecondsOptional] = None
    startToCloseTimeout: Optional[DurationInSecondsOptional] = None
    taskList: TaskList
    taskPriority: Optional[TaskPriority] = None
    decisionTaskCompletedEventId: EventId
    heartbeatTimeout: Optional[DurationInSecondsOptional] = None


class ActivityTypeConfiguration(BaseModel):
    """
    Configuration settings registered with the activity type.
    """

    defaultTaskStartToCloseTimeout: Optional[DurationInSecondsOptional] = None
    defaultTaskHeartbeatTimeout: Optional[DurationInSecondsOptional] = None
    defaultTaskList: Optional[TaskList] = None
    defaultTaskPriority: Optional[TaskPriority] = None
    defaultTaskScheduleToStartTimeout: Optional[DurationInSecondsOptional] = None
    defaultTaskScheduleToCloseTimeout: Optional[DurationInSecondsOptional] = None


class ActivityTypeInfo(BaseModel):
    """
    Detailed information about an activity type.
    """

    activityType: ActivityType
    status: RegistrationStatus
    description: Optional[Description] = None
    creationDate: Timestamp
    deprecationDate: Optional[Timestamp] = None


class ActivityTypeInfoList(BaseModel):
    __root__: List[ActivityTypeInfo]


class ChildWorkflowExecutionCanceledEventAttributes(BaseModel):
    """
    Provide details of the <code>ChildWorkflowExecutionCanceled</code> event.
    """

    workflowExecution: WorkflowExecution
    workflowType: WorkflowType
    details: Optional[Data] = None
    initiatedEventId: EventId
    startedEventId: EventId


class ChildWorkflowExecutionCompletedEventAttributes(BaseModel):
    """
    Provides the details of the <code>ChildWorkflowExecutionCompleted</code> event.
    """

    workflowExecution: WorkflowExecution
    workflowType: WorkflowType
    result: Optional[Data] = None
    initiatedEventId: EventId
    startedEventId: EventId


class ChildWorkflowExecutionFailedEventAttributes(BaseModel):
    """
    Provides the details of the <code>ChildWorkflowExecutionFailed</code> event.
    """

    workflowExecution: WorkflowExecution
    workflowType: WorkflowType
    reason: Optional[FailureReason] = None
    details: Optional[Data] = None
    initiatedEventId: EventId
    startedEventId: EventId


class ChildWorkflowExecutionStartedEventAttributes(BaseModel):
    """
    Provides the details of the <code>ChildWorkflowExecutionStarted</code> event.
    """

    workflowExecution: WorkflowExecution
    workflowType: WorkflowType
    initiatedEventId: EventId


class ChildWorkflowExecutionTerminatedEventAttributes(BaseModel):
    """
    Provides the details of the <code>ChildWorkflowExecutionTerminated</code> event.
    """

    workflowExecution: WorkflowExecution
    workflowType: WorkflowType
    initiatedEventId: EventId
    startedEventId: EventId


class ChildWorkflowExecutionTimedOutEventAttributes(BaseModel):
    """
    Provides the details of the <code>ChildWorkflowExecutionTimedOut</code> event.
    """

    workflowExecution: WorkflowExecution
    workflowType: WorkflowType
    timeoutType: WorkflowExecutionTimeoutType
    initiatedEventId: EventId
    startedEventId: EventId


class TagList(BaseModel):
    __root__: Annotated[List[Tag], Field(max_items=5)]


class ContinueAsNewWorkflowExecutionDecisionAttributes(BaseModel):
    """
    <p>Provides the details of the <code>ContinueAsNewWorkflowExecution</code> decision.</p> <p> <b>Access Control</b> </p> <p>You can use IAM policies to control this decision's access to Amazon SWF resources as follows:</p> <ul> <li> <p>Use a <code>Resource</code> element with the domain name to limit the action to only specified domains.</p> </li> <li> <p>Use an <code>Action</code> element to allow or deny permission to call this action.</p> </li> <li> <p>Constrain the following parameters by using a <code>Condition</code> element with the appropriate keys.</p> <ul> <li> <p> <code>tag</code> – A tag used to identify the workflow execution</p> </li> <li> <p> <code>taskList</code> – String constraint. The key is <code>swf:taskList.name</code>.</p> </li> <li> <p> <code>workflowType.version</code> – String constraint. The key is <code>swf:workflowType.version</code>.</p> </li> </ul> </li> </ul> <p>If the caller doesn't have sufficient permissions to invoke the action, or the parameter values fall outside the specified constraints, the action fails. The associated event attribute's <code>cause</code> parameter is set to <code>OPERATION_NOT_PERMITTED</code>. For details and example IAM policies, see <a href="https://docs.aws.amazon.com/amazonswf/latest/developerguide/swf-dev-iam.html">Using IAM to Manage Access to Amazon SWF Workflows</a> in the <i>Amazon SWF Developer Guide</i>.</p>
    """

    input: Optional[Data] = None
    executionStartToCloseTimeout: Optional[DurationInSecondsOptional] = None
    taskList: Optional[TaskList] = None
    taskPriority: Optional[TaskPriority] = None
    taskStartToCloseTimeout: Optional[DurationInSecondsOptional] = None
    childPolicy: Optional[ChildPolicy] = None
    tagList: Optional[TagList] = None
    workflowTypeVersion: Optional[Version] = None
    lambdaRole: Optional[Arn] = None


class WorkflowExecutionFilter(BaseModel):
    """
    Used to filter the workflow executions in visibility APIs by their <code>workflowId</code>.
    """

    workflowId: WorkflowId


class WorkflowTypeFilter(BaseModel):
    """
    Used to filter workflow execution query results by type. Each parameter, if specified, defines a rule that must be satisfied by each returned result.
    """

    name: Name
    version: Optional[VersionOptional] = None


class TagFilter(BaseModel):
    """
    Used to filter the workflow executions in visibility APIs based on a tag.
    """

    tag: Tag


class ScheduleActivityTaskDecisionAttributes(BaseModel):
    """
    <p>Provides the details of the <code>ScheduleActivityTask</code> decision.</p> <p> <b>Access Control</b> </p> <p>You can use IAM policies to control this decision's access to Amazon SWF resources as follows:</p> <ul> <li> <p>Use a <code>Resource</code> element with the domain name to limit the action to only specified domains.</p> </li> <li> <p>Use an <code>Action</code> element to allow or deny permission to call this action.</p> </li> <li> <p>Constrain the following parameters by using a <code>Condition</code> element with the appropriate keys.</p> <ul> <li> <p> <code>activityType.name</code> – String constraint. The key is <code>swf:activityType.name</code>.</p> </li> <li> <p> <code>activityType.version</code> – String constraint. The key is <code>swf:activityType.version</code>.</p> </li> <li> <p> <code>taskList</code> – String constraint. The key is <code>swf:taskList.name</code>.</p> </li> </ul> </li> </ul> <p>If the caller doesn't have sufficient permissions to invoke the action, or the parameter values fall outside the specified constraints, the action fails. The associated event attribute's <code>cause</code> parameter is set to <code>OPERATION_NOT_PERMITTED</code>. For details and example IAM policies, see <a href="https://docs.aws.amazon.com/amazonswf/latest/developerguide/swf-dev-iam.html">Using IAM to Manage Access to Amazon SWF Workflows</a> in the <i>Amazon SWF Developer Guide</i>.</p>
    """

    activityType: ActivityType
    activityId: ActivityId
    control: Optional[Data] = None
    input: Optional[Data] = None
    scheduleToCloseTimeout: Optional[DurationInSecondsOptional] = None
    taskList: Optional[TaskList] = None
    taskPriority: Optional[TaskPriority] = None
    scheduleToStartTimeout: Optional[DurationInSecondsOptional] = None
    startToCloseTimeout: Optional[DurationInSecondsOptional] = None
    heartbeatTimeout: Optional[DurationInSecondsOptional] = None


class RecordMarkerDecisionAttributes(BaseModel):
    """
    <p>Provides the details of the <code>RecordMarker</code> decision.</p> <p> <b>Access Control</b> </p> <p>You can use IAM policies to control this decision's access to Amazon SWF resources as follows:</p> <ul> <li> <p>Use a <code>Resource</code> element with the domain name to limit the action to only specified domains.</p> </li> <li> <p>Use an <code>Action</code> element to allow or deny permission to call this action.</p> </li> <li> <p>You cannot use an IAM policy to constrain this action's parameters.</p> </li> </ul> <p>If the caller doesn't have sufficient permissions to invoke the action, or the parameter values fall outside the specified constraints, the action fails. The associated event attribute's <code>cause</code> parameter is set to <code>OPERATION_NOT_PERMITTED</code>. For details and example IAM policies, see <a href="https://docs.aws.amazon.com/amazonswf/latest/developerguide/swf-dev-iam.html">Using IAM to Manage Access to Amazon SWF Workflows</a> in the <i>Amazon SWF Developer Guide</i>.</p>
    """

    markerName: MarkerName
    details: Optional[Data] = None


class StartTimerDecisionAttributes(BaseModel):
    """
    <p>Provides the details of the <code>StartTimer</code> decision.</p> <p> <b>Access Control</b> </p> <p>You can use IAM policies to control this decision's access to Amazon SWF resources as follows:</p> <ul> <li> <p>Use a <code>Resource</code> element with the domain name to limit the action to only specified domains.</p> </li> <li> <p>Use an <code>Action</code> element to allow or deny permission to call this action.</p> </li> <li> <p>You cannot use an IAM policy to constrain this action's parameters.</p> </li> </ul> <p>If the caller doesn't have sufficient permissions to invoke the action, or the parameter values fall outside the specified constraints, the action fails. The associated event attribute's <code>cause</code> parameter is set to <code>OPERATION_NOT_PERMITTED</code>. For details and example IAM policies, see <a href="https://docs.aws.amazon.com/amazonswf/latest/developerguide/swf-dev-iam.html">Using IAM to Manage Access to Amazon SWF Workflows</a> in the <i>Amazon SWF Developer Guide</i>.</p>
    """

    timerId: TimerId
    control: Optional[Data] = None
    startToFireTimeout: DurationInSeconds


class SignalExternalWorkflowExecutionDecisionAttributes(BaseModel):
    """
    <p>Provides the details of the <code>SignalExternalWorkflowExecution</code> decision.</p> <p> <b>Access Control</b> </p> <p>You can use IAM policies to control this decision's access to Amazon SWF resources as follows:</p> <ul> <li> <p>Use a <code>Resource</code> element with the domain name to limit the action to only specified domains.</p> </li> <li> <p>Use an <code>Action</code> element to allow or deny permission to call this action.</p> </li> <li> <p>You cannot use an IAM policy to constrain this action's parameters.</p> </li> </ul> <p>If the caller doesn't have sufficient permissions to invoke the action, or the parameter values fall outside the specified constraints, the action fails. The associated event attribute's <code>cause</code> parameter is set to <code>OPERATION_NOT_PERMITTED</code>. For details and example IAM policies, see <a href="https://docs.aws.amazon.com/amazonswf/latest/developerguide/swf-dev-iam.html">Using IAM to Manage Access to Amazon SWF Workflows</a> in the <i>Amazon SWF Developer Guide</i>.</p>
    """

    workflowId: WorkflowId
    runId: Optional[WorkflowRunIdOptional] = None
    signalName: SignalName
    input: Optional[Data] = None
    control: Optional[Data] = None


class RequestCancelExternalWorkflowExecutionDecisionAttributes(BaseModel):
    """
    <p>Provides the details of the <code>RequestCancelExternalWorkflowExecution</code> decision.</p> <p> <b>Access Control</b> </p> <p>You can use IAM policies to control this decision's access to Amazon SWF resources as follows:</p> <ul> <li> <p>Use a <code>Resource</code> element with the domain name to limit the action to only specified domains.</p> </li> <li> <p>Use an <code>Action</code> element to allow or deny permission to call this action.</p> </li> <li> <p>You cannot use an IAM policy to constrain this action's parameters.</p> </li> </ul> <p>If the caller doesn't have sufficient permissions to invoke the action, or the parameter values fall outside the specified constraints, the action fails. The associated event attribute's <code>cause</code> parameter is set to <code>OPERATION_NOT_PERMITTED</code>. For details and example IAM policies, see <a href="https://docs.aws.amazon.com/amazonswf/latest/developerguide/swf-dev-iam.html">Using IAM to Manage Access to Amazon SWF Workflows</a> in the <i>Amazon SWF Developer Guide</i>.</p>
    """

    workflowId: WorkflowId
    runId: Optional[WorkflowRunIdOptional] = None
    control: Optional[Data] = None


class StartChildWorkflowExecutionDecisionAttributes(BaseModel):
    """
    <p>Provides the details of the <code>StartChildWorkflowExecution</code> decision.</p> <p> <b>Access Control</b> </p> <p>You can use IAM policies to control this decision's access to Amazon SWF resources as follows:</p> <ul> <li> <p>Use a <code>Resource</code> element with the domain name to limit the action to only specified domains.</p> </li> <li> <p>Use an <code>Action</code> element to allow or deny permission to call this action.</p> </li> <li> <p>Constrain the following parameters by using a <code>Condition</code> element with the appropriate keys.</p> <ul> <li> <p> <code>tagList.member.N</code> – The key is "swf:tagList.N" where N is the tag number from 0 to 4, inclusive.</p> </li> <li> <p> <code>taskList</code> – String constraint. The key is <code>swf:taskList.name</code>.</p> </li> <li> <p> <code>workflowType.name</code> – String constraint. The key is <code>swf:workflowType.name</code>.</p> </li> <li> <p> <code>workflowType.version</code> – String constraint. The key is <code>swf:workflowType.version</code>.</p> </li> </ul> </li> </ul> <p>If the caller doesn't have sufficient permissions to invoke the action, or the parameter values fall outside the specified constraints, the action fails. The associated event attribute's <code>cause</code> parameter is set to <code>OPERATION_NOT_PERMITTED</code>. For details and example IAM policies, see <a href="https://docs.aws.amazon.com/amazonswf/latest/developerguide/swf-dev-iam.html">Using IAM to Manage Access to Amazon SWF Workflows</a> in the <i>Amazon SWF Developer Guide</i>.</p>
    """

    workflowType: WorkflowType
    workflowId: WorkflowId
    control: Optional[Data] = None
    input: Optional[Data] = None
    executionStartToCloseTimeout: Optional[DurationInSecondsOptional] = None
    taskList: Optional[TaskList] = None
    taskPriority: Optional[TaskPriority] = None
    taskStartToCloseTimeout: Optional[DurationInSecondsOptional] = None
    childPolicy: Optional[ChildPolicy] = None
    tagList: Optional[TagList] = None
    lambdaRole: Optional[Arn] = None


class ScheduleLambdaFunctionDecisionAttributes(BaseModel):
    """
    Decision attributes specified in <code>scheduleLambdaFunctionDecisionAttributes</code> within the list of decisions <code>decisions</code> passed to <a>RespondDecisionTaskCompleted</a>.
    """

    id: FunctionId
    name: FunctionName
    control: Optional[Data] = None
    input: Optional[FunctionInput] = None
    startToCloseTimeout: Optional[DurationInSecondsOptional] = None


class Decision(BaseModel):
    """
    <p>Specifies a decision made by the decider. A decision can be one of these types:</p> <ul> <li> <p> <code>CancelTimer</code> – Cancels a previously started timer and records a <code>TimerCanceled</code> event in the history.</p> </li> <li> <p> <code>CancelWorkflowExecution</code> – Closes the workflow execution and records a <code>WorkflowExecutionCanceled</code> event in the history.</p> </li> <li> <p> <code>CompleteWorkflowExecution</code> – Closes the workflow execution and records a <code>WorkflowExecutionCompleted</code> event in the history .</p> </li> <li> <p> <code>ContinueAsNewWorkflowExecution</code> – Closes the workflow execution and starts a new workflow execution of the same type using the same workflow ID and a unique run Id. A <code>WorkflowExecutionContinuedAsNew</code> event is recorded in the history.</p> </li> <li> <p> <code>FailWorkflowExecution</code> – Closes the workflow execution and records a <code>WorkflowExecutionFailed</code> event in the history.</p> </li> <li> <p> <code>RecordMarker</code> – Records a <code>MarkerRecorded</code> event in the history. Markers can be used for adding custom information in the history for instance to let deciders know that they don't need to look at the history beyond the marker event.</p> </li> <li> <p> <code>RequestCancelActivityTask</code> – Attempts to cancel a previously scheduled activity task. If the activity task was scheduled but has not been assigned to a worker, then it is canceled. If the activity task was already assigned to a worker, then the worker is informed that cancellation has been requested in the response to <a>RecordActivityTaskHeartbeat</a>.</p> </li> <li> <p> <code>RequestCancelExternalWorkflowExecution</code> – Requests that a request be made to cancel the specified external workflow execution and records a <code>RequestCancelExternalWorkflowExecutionInitiated</code> event in the history.</p> </li> <li> <p> <code>ScheduleActivityTask</code> – Schedules an activity task.</p> </li> <li> <p> <code>SignalExternalWorkflowExecution</code> – Requests a signal to be delivered to the specified external workflow execution and records a <code>SignalExternalWorkflowExecutionInitiated</code> event in the history.</p> </li> <li> <p> <code>StartChildWorkflowExecution</code> – Requests that a child workflow execution be started and records a <code>StartChildWorkflowExecutionInitiated</code> event in the history. The child workflow execution is a separate workflow execution with its own history.</p> </li> <li> <p> <code>StartTimer</code> – Starts a timer for this workflow execution and records a <code>TimerStarted</code> event in the history. This timer fires after the specified delay and record a <code>TimerFired</code> event.</p> </li> </ul> <p> <b>Access Control</b> </p> <p>If you grant permission to use <code>RespondDecisionTaskCompleted</code>, you can use IAM policies to express permissions for the list of decisions returned by this action as if they were members of the API. Treating decisions as a pseudo API maintains a uniform conceptual model and helps keep policies readable. For details and example IAM policies, see <a href="https://docs.aws.amazon.com/amazonswf/latest/developerguide/swf-dev-iam.html">Using IAM to Manage Access to Amazon SWF Workflows</a> in the <i>Amazon SWF Developer Guide</i>.</p> <p> <b>Decision Failure</b> </p> <p>Decisions can fail for several reasons</p> <ul> <li> <p>The ordering of decisions should follow a logical flow. Some decisions might not make sense in the current context of the workflow execution and therefore fails.</p> </li> <li> <p>A limit on your account was reached.</p> </li> <li> <p>The decision lacks sufficient permissions.</p> </li> </ul> <p>One of the following events might be added to the history to indicate an error. The event attribute's <code>cause</code> parameter indicates the cause. If <code>cause</code> is set to <code>OPERATION_NOT_PERMITTED</code>, the decision failed because it lacked sufficient permissions. For details and example IAM policies, see <a href="https://docs.aws.amazon.com/amazonswf/latest/developerguide/swf-dev-iam.html">Using IAM to Manage Access to Amazon SWF Workflows</a> in the <i>Amazon SWF Developer Guide</i>.</p> <ul> <li> <p> <code>ScheduleActivityTaskFailed</code> – A <code>ScheduleActivityTask</code> decision failed. This could happen if the activity type specified in the decision isn't registered, is in a deprecated state, or the decision isn't properly configured.</p> </li> <li> <p> <code>RequestCancelActivityTaskFailed</code> – A <code>RequestCancelActivityTask</code> decision failed. This could happen if there is no open activity task with the specified activityId.</p> </li> <li> <p> <code>StartTimerFailed</code> – A <code>StartTimer</code> decision failed. This could happen if there is another open timer with the same timerId.</p> </li> <li> <p> <code>CancelTimerFailed</code> – A <code>CancelTimer</code> decision failed. This could happen if there is no open timer with the specified timerId.</p> </li> <li> <p> <code>StartChildWorkflowExecutionFailed</code> – A <code>StartChildWorkflowExecution</code> decision failed. This could happen if the workflow type specified isn't registered, is deprecated, or the decision isn't properly configured.</p> </li> <li> <p> <code>SignalExternalWorkflowExecutionFailed</code> – A <code>SignalExternalWorkflowExecution</code> decision failed. This could happen if the <code>workflowID</code> specified in the decision was incorrect.</p> </li> <li> <p> <code>RequestCancelExternalWorkflowExecutionFailed</code> – A <code>RequestCancelExternalWorkflowExecution</code> decision failed. This could happen if the <code>workflowID</code> specified in the decision was incorrect.</p> </li> <li> <p> <code>CancelWorkflowExecutionFailed</code> – A <code>CancelWorkflowExecution</code> decision failed. This could happen if there is an unhandled decision task pending in the workflow execution.</p> </li> <li> <p> <code>CompleteWorkflowExecutionFailed</code> – A <code>CompleteWorkflowExecution</code> decision failed. This could happen if there is an unhandled decision task pending in the workflow execution.</p> </li> <li> <p> <code>ContinueAsNewWorkflowExecutionFailed</code> – A <code>ContinueAsNewWorkflowExecution</code> decision failed. This could happen if there is an unhandled decision task pending in the workflow execution or the ContinueAsNewWorkflowExecution decision was not configured correctly.</p> </li> <li> <p> <code>FailWorkflowExecutionFailed</code> – A <code>FailWorkflowExecution</code> decision failed. This could happen if there is an unhandled decision task pending in the workflow execution.</p> </li> </ul> <p>The preceding error events might occur due to an error in the decider logic, which might put the workflow execution in an unstable state The cause field in the event structure for the error event indicates the cause of the error.</p> <note> <p>A workflow execution may be closed by the decider by returning one of the following decisions when completing a decision task: <code>CompleteWorkflowExecution</code>, <code>FailWorkflowExecution</code>, <code>CancelWorkflowExecution</code> and <code>ContinueAsNewWorkflowExecution</code>. An <code>UnhandledDecision</code> fault is returned if a workflow closing decision is specified and a signal or activity event had been added to the history while the decision task was being performed by the decider. Unlike the above situations which are logic issues, this fault is always possible because of race conditions in a distributed system. The right action here is to call <a>RespondDecisionTaskCompleted</a> without any decisions. This would result in another decision task with these new events included in the history. The decider should handle the new events and may decide to close the workflow execution.</p> </note> <p> <b>How to Code a Decision</b> </p> <p>You code a decision by first setting the decision type field to one of the above decision values, and then set the corresponding attributes field shown below:</p> <ul> <li> <p> <code> <a>ScheduleActivityTaskDecisionAttributes</a> </code> </p> </li> <li> <p> <code> <a>RequestCancelActivityTaskDecisionAttributes</a> </code> </p> </li> <li> <p> <code> <a>CompleteWorkflowExecutionDecisionAttributes</a> </code> </p> </li> <li> <p> <code> <a>FailWorkflowExecutionDecisionAttributes</a> </code> </p> </li> <li> <p> <code> <a>CancelWorkflowExecutionDecisionAttributes</a> </code> </p> </li> <li> <p> <code> <a>ContinueAsNewWorkflowExecutionDecisionAttributes</a> </code> </p> </li> <li> <p> <code> <a>RecordMarkerDecisionAttributes</a> </code> </p> </li> <li> <p> <code> <a>StartTimerDecisionAttributes</a> </code> </p> </li> <li> <p> <code> <a>CancelTimerDecisionAttributes</a> </code> </p> </li> <li> <p> <code> <a>SignalExternalWorkflowExecutionDecisionAttributes</a> </code> </p> </li> <li> <p> <code> <a>RequestCancelExternalWorkflowExecutionDecisionAttributes</a> </code> </p> </li> <li> <p> <code> <a>StartChildWorkflowExecutionDecisionAttributes</a> </code> </p> </li> </ul>
    """

    decisionType: DecisionType
    scheduleActivityTaskDecisionAttributes: Optional[
        ScheduleActivityTaskDecisionAttributes
    ] = None
    requestCancelActivityTaskDecisionAttributes: Optional[
        RequestCancelActivityTaskDecisionAttributes
    ] = None
    completeWorkflowExecutionDecisionAttributes: Optional[
        CompleteWorkflowExecutionDecisionAttributes
    ] = None
    failWorkflowExecutionDecisionAttributes: Optional[
        FailWorkflowExecutionDecisionAttributes
    ] = None
    cancelWorkflowExecutionDecisionAttributes: Optional[
        CancelWorkflowExecutionDecisionAttributes
    ] = None
    continueAsNewWorkflowExecutionDecisionAttributes: Optional[
        ContinueAsNewWorkflowExecutionDecisionAttributes
    ] = None
    recordMarkerDecisionAttributes: Optional[RecordMarkerDecisionAttributes] = None
    startTimerDecisionAttributes: Optional[StartTimerDecisionAttributes] = None
    cancelTimerDecisionAttributes: Optional[CancelTimerDecisionAttributes] = None
    signalExternalWorkflowExecutionDecisionAttributes: Optional[
        SignalExternalWorkflowExecutionDecisionAttributes
    ] = None
    requestCancelExternalWorkflowExecutionDecisionAttributes: Optional[
        RequestCancelExternalWorkflowExecutionDecisionAttributes
    ] = None
    startChildWorkflowExecutionDecisionAttributes: Optional[
        StartChildWorkflowExecutionDecisionAttributes
    ] = None
    scheduleLambdaFunctionDecisionAttributes: Optional[
        ScheduleLambdaFunctionDecisionAttributes
    ] = None


class DecisionList(BaseModel):
    __root__: List[Decision]


class DecisionTaskScheduledEventAttributes(BaseModel):
    """
    Provides details about the <code>DecisionTaskScheduled</code> event.
    """

    taskList: TaskList
    taskPriority: Optional[TaskPriority] = None
    startToCloseTimeout: Optional[DurationInSecondsOptional] = None


class ExternalWorkflowExecutionCancelRequestedEventAttributes(BaseModel):
    """
    Provides the details of the <code>ExternalWorkflowExecutionCancelRequested</code> event.
    """

    workflowExecution: WorkflowExecution
    initiatedEventId: EventId


class ExternalWorkflowExecutionSignaledEventAttributes(
    ExternalWorkflowExecutionCancelRequestedEventAttributes
):
    """
    Provides the details of the <code>ExternalWorkflowExecutionSignaled</code> event.
    """

    pass


class WorkflowExecutionStartedEventAttributes(BaseModel):
    """
    Provides details of <code>WorkflowExecutionStarted</code> event.
    """

    input: Optional[Data] = None
    executionStartToCloseTimeout: Optional[DurationInSecondsOptional] = None
    taskStartToCloseTimeout: Optional[DurationInSecondsOptional] = None
    childPolicy: ChildPolicy
    taskList: TaskList
    taskPriority: Optional[TaskPriority] = None
    workflowType: WorkflowType
    tagList: Optional[TagList] = None
    continuedExecutionRunId: Optional[WorkflowRunIdOptional] = None
    parentWorkflowExecution: Optional[WorkflowExecution] = None
    parentInitiatedEventId: Optional[EventId] = None
    lambdaRole: Optional[Arn] = None


class WorkflowExecutionContinuedAsNewEventAttributes(BaseModel):
    """
    Provides the details of the <code>WorkflowExecutionContinuedAsNew</code> event.
    """

    input: Optional[Data] = None
    decisionTaskCompletedEventId: EventId
    newExecutionRunId: WorkflowRunId
    executionStartToCloseTimeout: Optional[DurationInSecondsOptional] = None
    taskList: TaskList
    taskPriority: Optional[TaskPriority] = None
    taskStartToCloseTimeout: Optional[DurationInSecondsOptional] = None
    childPolicy: ChildPolicy
    tagList: Optional[TagList] = None
    workflowType: WorkflowType
    lambdaRole: Optional[Arn] = None


class WorkflowExecutionTerminatedEventAttributes(BaseModel):
    """
    Provides the details of the <code>WorkflowExecutionTerminated</code> event.
    """

    reason: Optional[TerminateReason] = None
    details: Optional[Data] = None
    childPolicy: ChildPolicy
    cause: Optional[WorkflowExecutionTerminatedCause] = None


class WorkflowExecutionCancelRequestedEventAttributes(BaseModel):
    """
    Provides the details of the <code>WorkflowExecutionCancelRequested</code> event.
    """

    externalWorkflowExecution: Optional[WorkflowExecution] = None
    externalInitiatedEventId: Optional[EventId] = None
    cause: Optional[WorkflowExecutionCancelRequestedCause] = None


class WorkflowExecutionSignaledEventAttributes(BaseModel):
    """
    Provides the details of the <code>WorkflowExecutionSignaled</code> event.
    """

    signalName: SignalName
    input: Optional[Data] = None
    externalWorkflowExecution: Optional[WorkflowExecution] = None
    externalInitiatedEventId: Optional[EventId] = None


class MarkerRecordedEventAttributes(BaseModel):
    """
    Provides the details of the <code>MarkerRecorded</code> event.
    """

    markerName: MarkerName
    details: Optional[Data] = None
    decisionTaskCompletedEventId: EventId


class RecordMarkerFailedEventAttributes(BaseModel):
    """
    Provides the details of the <code>RecordMarkerFailed</code> event.
    """

    markerName: MarkerName
    cause: RecordMarkerFailedCause
    decisionTaskCompletedEventId: EventId


class StartChildWorkflowExecutionInitiatedEventAttributes(BaseModel):
    """
    Provides the details of the <code>StartChildWorkflowExecutionInitiated</code> event.
    """

    workflowId: WorkflowId
    workflowType: WorkflowType
    control: Optional[Data] = None
    input: Optional[Data] = None
    executionStartToCloseTimeout: Optional[DurationInSecondsOptional] = None
    taskList: TaskList
    taskPriority: Optional[TaskPriority] = None
    decisionTaskCompletedEventId: EventId
    childPolicy: ChildPolicy
    taskStartToCloseTimeout: Optional[DurationInSecondsOptional] = None
    tagList: Optional[TagList] = None
    lambdaRole: Optional[Arn] = None


class SignalExternalWorkflowExecutionInitiatedEventAttributes(BaseModel):
    """
    Provides the details of the <code>SignalExternalWorkflowExecutionInitiated</code> event.
    """

    workflowId: WorkflowId
    runId: Optional[WorkflowRunIdOptional] = None
    signalName: SignalName
    input: Optional[Data] = None
    decisionTaskCompletedEventId: EventId
    control: Optional[Data] = None


class SignalExternalWorkflowExecutionFailedEventAttributes(BaseModel):
    """
    Provides the details of the <code>SignalExternalWorkflowExecutionFailed</code> event.
    """

    workflowId: WorkflowId
    runId: Optional[WorkflowRunIdOptional] = None
    cause: SignalExternalWorkflowExecutionFailedCause
    initiatedEventId: EventId
    decisionTaskCompletedEventId: EventId
    control: Optional[Data] = None


class RequestCancelExternalWorkflowExecutionInitiatedEventAttributes(BaseModel):
    """
    Provides the details of the <code>RequestCancelExternalWorkflowExecutionInitiated</code> event.
    """

    workflowId: WorkflowId
    runId: Optional[WorkflowRunIdOptional] = None
    decisionTaskCompletedEventId: EventId
    control: Optional[Data] = None


class RequestCancelExternalWorkflowExecutionFailedEventAttributes(BaseModel):
    """
    Provides the details of the <code>RequestCancelExternalWorkflowExecutionFailed</code> event.
    """

    workflowId: WorkflowId
    runId: Optional[WorkflowRunIdOptional] = None
    cause: RequestCancelExternalWorkflowExecutionFailedCause
    initiatedEventId: EventId
    decisionTaskCompletedEventId: EventId
    control: Optional[Data] = None


class ScheduleActivityTaskFailedEventAttributes(BaseModel):
    """
    Provides the details of the <code>ScheduleActivityTaskFailed</code> event.
    """

    activityType: ActivityType
    activityId: ActivityId
    cause: ScheduleActivityTaskFailedCause
    decisionTaskCompletedEventId: EventId


class RequestCancelActivityTaskFailedEventAttributes(BaseModel):
    """
    Provides the details of the <code>RequestCancelActivityTaskFailed</code> event.
    """

    activityId: ActivityId
    cause: RequestCancelActivityTaskFailedCause
    decisionTaskCompletedEventId: EventId


class StartTimerFailedEventAttributes(BaseModel):
    """
    Provides the details of the <code>StartTimerFailed</code> event.
    """

    timerId: TimerId
    cause: StartTimerFailedCause
    decisionTaskCompletedEventId: EventId


class StartChildWorkflowExecutionFailedEventAttributes(BaseModel):
    """
    Provides the details of the <code>StartChildWorkflowExecutionFailed</code> event.
    """

    workflowType: WorkflowType
    cause: StartChildWorkflowExecutionFailedCause
    workflowId: WorkflowId
    initiatedEventId: EventId
    decisionTaskCompletedEventId: EventId
    control: Optional[Data] = None


class LambdaFunctionTimedOutEventAttributes(BaseModel):
    """
    Provides details of the <code>LambdaFunctionTimedOut</code> event.
    """

    scheduledEventId: EventId
    startedEventId: EventId
    timeoutType: Optional[WorkflowExecutionTimeoutType] = None


class ScheduleLambdaFunctionFailedEventAttributes(BaseModel):
    """
    Provides the details of the <code>ScheduleLambdaFunctionFailed</code> event. It isn't set for other event types.
    """

    id: FunctionId
    name: FunctionName
    cause: ScheduleLambdaFunctionFailedCause
    decisionTaskCompletedEventId: EventId


class StartLambdaFunctionFailedEventAttributes(BaseModel):
    """
    Provides the details of the <code>StartLambdaFunctionFailed</code> event. It isn't set for other event types.
    """

    scheduledEventId: Optional[EventId] = None
    cause: Optional[StartLambdaFunctionFailedCause] = None
    message: Optional[CauseMessage] = None


class HistoryEvent(BaseModel):
    """
    <p>Event within a workflow execution. A history event can be one of these types:</p> <ul> <li> <p> <code>ActivityTaskCancelRequested</code> – A <code>RequestCancelActivityTask</code> decision was received by the system.</p> </li> <li> <p> <code>ActivityTaskCanceled</code> – The activity task was successfully canceled.</p> </li> <li> <p> <code>ActivityTaskCompleted</code> – An activity worker successfully completed an activity task by calling <a>RespondActivityTaskCompleted</a>.</p> </li> <li> <p> <code>ActivityTaskFailed</code> – An activity worker failed an activity task by calling <a>RespondActivityTaskFailed</a>.</p> </li> <li> <p> <code>ActivityTaskScheduled</code> – An activity task was scheduled for execution.</p> </li> <li> <p> <code>ActivityTaskStarted</code> – The scheduled activity task was dispatched to a worker.</p> </li> <li> <p> <code>ActivityTaskTimedOut</code> – The activity task timed out.</p> </li> <li> <p> <code>CancelTimerFailed</code> – Failed to process CancelTimer decision. This happens when the decision isn't configured properly, for example no timer exists with the specified timer Id.</p> </li> <li> <p> <code>CancelWorkflowExecutionFailed</code> – A request to cancel a workflow execution failed.</p> </li> <li> <p> <code>ChildWorkflowExecutionCanceled</code> – A child workflow execution, started by this workflow execution, was canceled and closed.</p> </li> <li> <p> <code>ChildWorkflowExecutionCompleted</code> – A child workflow execution, started by this workflow execution, completed successfully and was closed.</p> </li> <li> <p> <code>ChildWorkflowExecutionFailed</code> – A child workflow execution, started by this workflow execution, failed to complete successfully and was closed.</p> </li> <li> <p> <code>ChildWorkflowExecutionStarted</code> – A child workflow execution was successfully started.</p> </li> <li> <p> <code>ChildWorkflowExecutionTerminated</code> – A child workflow execution, started by this workflow execution, was terminated.</p> </li> <li> <p> <code>ChildWorkflowExecutionTimedOut</code> – A child workflow execution, started by this workflow execution, timed out and was closed.</p> </li> <li> <p> <code>CompleteWorkflowExecutionFailed</code> – The workflow execution failed to complete.</p> </li> <li> <p> <code>ContinueAsNewWorkflowExecutionFailed</code> – The workflow execution failed to complete after being continued as a new workflow execution.</p> </li> <li> <p> <code>DecisionTaskCompleted</code> – The decider successfully completed a decision task by calling <a>RespondDecisionTaskCompleted</a>.</p> </li> <li> <p> <code>DecisionTaskScheduled</code> – A decision task was scheduled for the workflow execution.</p> </li> <li> <p> <code>DecisionTaskStarted</code> – The decision task was dispatched to a decider.</p> </li> <li> <p> <code>DecisionTaskTimedOut</code> – The decision task timed out.</p> </li> <li> <p> <code>ExternalWorkflowExecutionCancelRequested</code> – Request to cancel an external workflow execution was successfully delivered to the target execution.</p> </li> <li> <p> <code>ExternalWorkflowExecutionSignaled</code> – A signal, requested by this workflow execution, was successfully delivered to the target external workflow execution.</p> </li> <li> <p> <code>FailWorkflowExecutionFailed</code> – A request to mark a workflow execution as failed, itself failed.</p> </li> <li> <p> <code>MarkerRecorded</code> – A marker was recorded in the workflow history as the result of a <code>RecordMarker</code> decision.</p> </li> <li> <p> <code>RecordMarkerFailed</code> – A <code>RecordMarker</code> decision was returned as failed.</p> </li> <li> <p> <code>RequestCancelActivityTaskFailed</code> – Failed to process RequestCancelActivityTask decision. This happens when the decision isn't configured properly.</p> </li> <li> <p> <code>RequestCancelExternalWorkflowExecutionFailed</code> – Request to cancel an external workflow execution failed.</p> </li> <li> <p> <code>RequestCancelExternalWorkflowExecutionInitiated</code> – A request was made to request the cancellation of an external workflow execution.</p> </li> <li> <p> <code>ScheduleActivityTaskFailed</code> – Failed to process ScheduleActivityTask decision. This happens when the decision isn't configured properly, for example the activity type specified isn't registered.</p> </li> <li> <p> <code>SignalExternalWorkflowExecutionFailed</code> – The request to signal an external workflow execution failed.</p> </li> <li> <p> <code>SignalExternalWorkflowExecutionInitiated</code> – A request to signal an external workflow was made.</p> </li> <li> <p> <code>StartActivityTaskFailed</code> – A scheduled activity task failed to start.</p> </li> <li> <p> <code>StartChildWorkflowExecutionFailed</code> – Failed to process StartChildWorkflowExecution decision. This happens when the decision isn't configured properly, for example the workflow type specified isn't registered.</p> </li> <li> <p> <code>StartChildWorkflowExecutionInitiated</code> – A request was made to start a child workflow execution.</p> </li> <li> <p> <code>StartTimerFailed</code> – Failed to process StartTimer decision. This happens when the decision isn't configured properly, for example a timer already exists with the specified timer Id.</p> </li> <li> <p> <code>TimerCanceled</code> – A timer, previously started for this workflow execution, was successfully canceled.</p> </li> <li> <p> <code>TimerFired</code> – A timer, previously started for this workflow execution, fired.</p> </li> <li> <p> <code>TimerStarted</code> – A timer was started for the workflow execution due to a <code>StartTimer</code> decision.</p> </li> <li> <p> <code>WorkflowExecutionCancelRequested</code> – A request to cancel this workflow execution was made.</p> </li> <li> <p> <code>WorkflowExecutionCanceled</code> – The workflow execution was successfully canceled and closed.</p> </li> <li> <p> <code>WorkflowExecutionCompleted</code> – The workflow execution was closed due to successful completion.</p> </li> <li> <p> <code>WorkflowExecutionContinuedAsNew</code> – The workflow execution was closed and a new execution of the same type was created with the same workflowId.</p> </li> <li> <p> <code>WorkflowExecutionFailed</code> – The workflow execution closed due to a failure.</p> </li> <li> <p> <code>WorkflowExecutionSignaled</code> – An external signal was received for the workflow execution.</p> </li> <li> <p> <code>WorkflowExecutionStarted</code> – The workflow execution was started.</p> </li> <li> <p> <code>WorkflowExecutionTerminated</code> – The workflow execution was terminated.</p> </li> <li> <p> <code>WorkflowExecutionTimedOut</code> – The workflow execution was closed because a time out was exceeded.</p> </li> </ul>
    """

    eventTimestamp: Timestamp
    eventType: EventType
    eventId: EventId
    workflowExecutionStartedEventAttributes: Optional[
        WorkflowExecutionStartedEventAttributes
    ] = None
    workflowExecutionCompletedEventAttributes: Optional[
        WorkflowExecutionCompletedEventAttributes
    ] = None
    completeWorkflowExecutionFailedEventAttributes: Optional[
        CompleteWorkflowExecutionFailedEventAttributes
    ] = None
    workflowExecutionFailedEventAttributes: Optional[
        WorkflowExecutionFailedEventAttributes
    ] = None
    failWorkflowExecutionFailedEventAttributes: Optional[
        FailWorkflowExecutionFailedEventAttributes
    ] = None
    workflowExecutionTimedOutEventAttributes: Optional[
        WorkflowExecutionTimedOutEventAttributes
    ] = None
    workflowExecutionCanceledEventAttributes: Optional[
        WorkflowExecutionCanceledEventAttributes
    ] = None
    cancelWorkflowExecutionFailedEventAttributes: Optional[
        CancelWorkflowExecutionFailedEventAttributes
    ] = None
    workflowExecutionContinuedAsNewEventAttributes: Optional[
        WorkflowExecutionContinuedAsNewEventAttributes
    ] = None
    continueAsNewWorkflowExecutionFailedEventAttributes: Optional[
        ContinueAsNewWorkflowExecutionFailedEventAttributes
    ] = None
    workflowExecutionTerminatedEventAttributes: Optional[
        WorkflowExecutionTerminatedEventAttributes
    ] = None
    workflowExecutionCancelRequestedEventAttributes: Optional[
        WorkflowExecutionCancelRequestedEventAttributes
    ] = None
    decisionTaskScheduledEventAttributes: Optional[
        DecisionTaskScheduledEventAttributes
    ] = None
    decisionTaskStartedEventAttributes: Optional[
        DecisionTaskStartedEventAttributes
    ] = None
    decisionTaskCompletedEventAttributes: Optional[
        DecisionTaskCompletedEventAttributes
    ] = None
    decisionTaskTimedOutEventAttributes: Optional[
        DecisionTaskTimedOutEventAttributes
    ] = None
    activityTaskScheduledEventAttributes: Optional[
        ActivityTaskScheduledEventAttributes
    ] = None
    activityTaskStartedEventAttributes: Optional[
        ActivityTaskStartedEventAttributes
    ] = None
    activityTaskCompletedEventAttributes: Optional[
        ActivityTaskCompletedEventAttributes
    ] = None
    activityTaskFailedEventAttributes: Optional[
        ActivityTaskFailedEventAttributes
    ] = None
    activityTaskTimedOutEventAttributes: Optional[
        ActivityTaskTimedOutEventAttributes
    ] = None
    activityTaskCanceledEventAttributes: Optional[
        ActivityTaskCanceledEventAttributes
    ] = None
    activityTaskCancelRequestedEventAttributes: Optional[
        ActivityTaskCancelRequestedEventAttributes
    ] = None
    workflowExecutionSignaledEventAttributes: Optional[
        WorkflowExecutionSignaledEventAttributes
    ] = None
    markerRecordedEventAttributes: Optional[MarkerRecordedEventAttributes] = None
    recordMarkerFailedEventAttributes: Optional[
        RecordMarkerFailedEventAttributes
    ] = None
    timerStartedEventAttributes: Optional[TimerStartedEventAttributes] = None
    timerFiredEventAttributes: Optional[TimerFiredEventAttributes] = None
    timerCanceledEventAttributes: Optional[TimerCanceledEventAttributes] = None
    startChildWorkflowExecutionInitiatedEventAttributes: Optional[
        StartChildWorkflowExecutionInitiatedEventAttributes
    ] = None
    childWorkflowExecutionStartedEventAttributes: Optional[
        ChildWorkflowExecutionStartedEventAttributes
    ] = None
    childWorkflowExecutionCompletedEventAttributes: Optional[
        ChildWorkflowExecutionCompletedEventAttributes
    ] = None
    childWorkflowExecutionFailedEventAttributes: Optional[
        ChildWorkflowExecutionFailedEventAttributes
    ] = None
    childWorkflowExecutionTimedOutEventAttributes: Optional[
        ChildWorkflowExecutionTimedOutEventAttributes
    ] = None
    childWorkflowExecutionCanceledEventAttributes: Optional[
        ChildWorkflowExecutionCanceledEventAttributes
    ] = None
    childWorkflowExecutionTerminatedEventAttributes: Optional[
        ChildWorkflowExecutionTerminatedEventAttributes
    ] = None
    signalExternalWorkflowExecutionInitiatedEventAttributes: Optional[
        SignalExternalWorkflowExecutionInitiatedEventAttributes
    ] = None
    externalWorkflowExecutionSignaledEventAttributes: Optional[
        ExternalWorkflowExecutionSignaledEventAttributes
    ] = None
    signalExternalWorkflowExecutionFailedEventAttributes: Optional[
        SignalExternalWorkflowExecutionFailedEventAttributes
    ] = None
    externalWorkflowExecutionCancelRequestedEventAttributes: Optional[
        ExternalWorkflowExecutionCancelRequestedEventAttributes
    ] = None
    requestCancelExternalWorkflowExecutionInitiatedEventAttributes: Optional[
        RequestCancelExternalWorkflowExecutionInitiatedEventAttributes
    ] = None
    requestCancelExternalWorkflowExecutionFailedEventAttributes: Optional[
        RequestCancelExternalWorkflowExecutionFailedEventAttributes
    ] = None
    scheduleActivityTaskFailedEventAttributes: Optional[
        ScheduleActivityTaskFailedEventAttributes
    ] = None
    requestCancelActivityTaskFailedEventAttributes: Optional[
        RequestCancelActivityTaskFailedEventAttributes
    ] = None
    startTimerFailedEventAttributes: Optional[StartTimerFailedEventAttributes] = None
    cancelTimerFailedEventAttributes: Optional[CancelTimerFailedEventAttributes] = None
    startChildWorkflowExecutionFailedEventAttributes: Optional[
        StartChildWorkflowExecutionFailedEventAttributes
    ] = None
    lambdaFunctionScheduledEventAttributes: Optional[
        LambdaFunctionScheduledEventAttributes
    ] = None
    lambdaFunctionStartedEventAttributes: Optional[
        LambdaFunctionStartedEventAttributes
    ] = None
    lambdaFunctionCompletedEventAttributes: Optional[
        LambdaFunctionCompletedEventAttributes
    ] = None
    lambdaFunctionFailedEventAttributes: Optional[
        LambdaFunctionFailedEventAttributes
    ] = None
    lambdaFunctionTimedOutEventAttributes: Optional[
        LambdaFunctionTimedOutEventAttributes
    ] = None
    scheduleLambdaFunctionFailedEventAttributes: Optional[
        ScheduleLambdaFunctionFailedEventAttributes
    ] = None
    startLambdaFunctionFailedEventAttributes: Optional[
        StartLambdaFunctionFailedEventAttributes
    ] = None


class ResourceTagList(BaseModel):
    __root__: List[ResourceTag]


class WorkflowExecutionConfiguration(BaseModel):
    """
    The configuration settings for a workflow execution including timeout values, tasklist etc. These configuration settings are determined from the defaults specified when registering the workflow type and those specified when starting the workflow execution.
    """

    taskStartToCloseTimeout: DurationInSeconds
    executionStartToCloseTimeout: DurationInSeconds
    taskList: TaskList
    taskPriority: Optional[TaskPriority] = None
    childPolicy: ChildPolicy
    lambdaRole: Optional[Arn] = None


class WorkflowExecutionInfo(BaseModel):
    """
    Contains information about a workflow execution.
    """

    execution: WorkflowExecution
    workflowType: WorkflowType
    startTimestamp: Timestamp
    closeTimestamp: Optional[Timestamp] = None
    executionStatus: ExecutionStatus
    closeStatus: Optional[CloseStatus] = None
    parent: Optional[WorkflowExecution] = None
    tagList: Optional[TagList] = None
    cancelRequested: Optional[Canceled] = None


class WorkflowExecutionInfoList(BaseModel):
    __root__: List[WorkflowExecutionInfo]


class WorkflowTypeConfiguration(BaseModel):
    """
    The configuration settings of a workflow type.
    """

    defaultTaskStartToCloseTimeout: Optional[DurationInSecondsOptional] = None
    defaultExecutionStartToCloseTimeout: Optional[DurationInSecondsOptional] = None
    defaultTaskList: Optional[TaskList] = None
    defaultTaskPriority: Optional[TaskPriority] = None
    defaultChildPolicy: Optional[ChildPolicy] = None
    defaultLambdaRole: Optional[Arn] = None


class CountClosedWorkflowExecutionsInput(BaseModel):
    domain: DomainName
    startTimeFilter: Optional[ExecutionTimeFilter] = None
    closeTimeFilter: Optional[ExecutionTimeFilter] = None
    executionFilter: Optional[WorkflowExecutionFilter] = None
    typeFilter: Optional[WorkflowTypeFilter] = None
    tagFilter: Optional[TagFilter] = None
    closeStatusFilter: Optional[CloseStatusFilter] = None


class CountOpenWorkflowExecutionsInput(BaseModel):
    domain: DomainName
    startTimeFilter: ExecutionTimeFilter
    typeFilter: Optional[WorkflowTypeFilter] = None
    tagFilter: Optional[TagFilter] = None
    executionFilter: Optional[WorkflowExecutionFilter] = None


class CountPendingActivityTasksInput(BaseModel):
    domain: DomainName
    taskList: TaskList


class CountPendingDecisionTasksInput(BaseModel):
    domain: DomainName
    taskList: TaskList


class DeprecateActivityTypeInput(BaseModel):
    domain: DomainName
    activityType: ActivityType


class ActivityTypeDetail(BaseModel):
    """
    Detailed information about an activity type.
    """

    typeInfo: ActivityTypeInfo
    configuration: ActivityTypeConfiguration


class DescribeActivityTypeInput(BaseModel):
    domain: DomainName
    activityType: ActivityType


class WorkflowExecutionDetail(BaseModel):
    """
    Contains details about a workflow execution.
    """

    executionInfo: WorkflowExecutionInfo
    executionConfiguration: WorkflowExecutionConfiguration
    openCounts: WorkflowExecutionOpenCounts
    latestActivityTaskTimestamp: Optional[Timestamp] = None
    latestExecutionContext: Optional[Data] = None


class DescribeWorkflowExecutionInput(BaseModel):
    domain: DomainName
    execution: WorkflowExecution


class WorkflowTypeDetail(BaseModel):
    """
    Contains details about a workflow type.
    """

    typeInfo: WorkflowTypeInfo
    configuration: WorkflowTypeConfiguration


class GetWorkflowExecutionHistoryInput(BaseModel):
    domain: DomainName
    execution: WorkflowExecution
    nextPageToken: Optional[PageToken] = None
    maximumPageSize: Optional[PageSize] = None
    reverseOrder: Optional[ReverseOrder] = None


class ActivityTypeInfos(BaseModel):
    """
    Contains a paginated list of activity type information structures.
    """

    typeInfos: ActivityTypeInfoList
    nextPageToken: Optional[PageToken] = None


class WorkflowExecutionInfos(BaseModel):
    """
    Contains a paginated list of information about workflow executions.
    """

    executionInfos: WorkflowExecutionInfoList
    nextPageToken: Optional[PageToken] = None


class ListClosedWorkflowExecutionsInput(BaseModel):
    domain: DomainName
    startTimeFilter: Optional[ExecutionTimeFilter] = None
    closeTimeFilter: Optional[ExecutionTimeFilter] = None
    executionFilter: Optional[WorkflowExecutionFilter] = None
    closeStatusFilter: Optional[CloseStatusFilter] = None
    typeFilter: Optional[WorkflowTypeFilter] = None
    tagFilter: Optional[TagFilter] = None
    nextPageToken: Optional[PageToken] = None
    maximumPageSize: Optional[PageSize] = None
    reverseOrder: Optional[ReverseOrder] = None


class ListOpenWorkflowExecutionsInput(BaseModel):
    domain: DomainName
    startTimeFilter: ExecutionTimeFilter
    typeFilter: Optional[WorkflowTypeFilter] = None
    tagFilter: Optional[TagFilter] = None
    nextPageToken: Optional[PageToken] = None
    maximumPageSize: Optional[PageSize] = None
    reverseOrder: Optional[ReverseOrder] = None
    executionFilter: Optional[WorkflowExecutionFilter] = None


class ListTagsForResourceOutput(BaseModel):
    tags: Optional[ResourceTagList] = None


class ActivityTask(BaseModel):
    """
    Unit of work sent to an activity worker.
    """

    taskToken: TaskToken
    activityId: ActivityId
    startedEventId: EventId
    workflowExecution: WorkflowExecution
    activityType: ActivityType
    input: Optional[Data] = None


class PollForActivityTaskInput(BaseModel):
    domain: DomainName
    taskList: TaskList
    identity: Optional[Identity] = None


class PollForDecisionTaskInput(BaseModel):
    domain: DomainName
    taskList: TaskList
    identity: Optional[Identity] = None
    nextPageToken: Optional[PageToken] = None
    maximumPageSize: Optional[PageSize] = None
    reverseOrder: Optional[ReverseOrder] = None


class RegisterActivityTypeInput(BaseModel):
    domain: DomainName
    name: Name
    version: Version
    description: Optional[Description] = None
    defaultTaskStartToCloseTimeout: Optional[DurationInSecondsOptional] = None
    defaultTaskHeartbeatTimeout: Optional[DurationInSecondsOptional] = None
    defaultTaskList: Optional[TaskList] = None
    defaultTaskPriority: Optional[TaskPriority] = None
    defaultTaskScheduleToStartTimeout: Optional[DurationInSecondsOptional] = None
    defaultTaskScheduleToCloseTimeout: Optional[DurationInSecondsOptional] = None


class RegisterDomainInput(BaseModel):
    name: DomainName
    description: Optional[Description] = None
    workflowExecutionRetentionPeriodInDays: DurationInDays
    tags: Optional[ResourceTagList] = None


class RegisterWorkflowTypeInput(BaseModel):
    domain: DomainName
    name: Name
    version: Version
    description: Optional[Description] = None
    defaultTaskStartToCloseTimeout: Optional[DurationInSecondsOptional] = None
    defaultExecutionStartToCloseTimeout: Optional[DurationInSecondsOptional] = None
    defaultTaskList: Optional[TaskList] = None
    defaultTaskPriority: Optional[TaskPriority] = None
    defaultChildPolicy: Optional[ChildPolicy] = None
    defaultLambdaRole: Optional[Arn] = None


class RespondDecisionTaskCompletedInput(BaseModel):
    """
    Input data for a TaskCompleted response to a decision task.
    """

    taskToken: TaskToken
    decisions: Optional[DecisionList] = None
    executionContext: Optional[Data] = None


class StartWorkflowExecutionInput(BaseModel):
    domain: DomainName
    workflowId: WorkflowId
    workflowType: WorkflowType
    taskList: Optional[TaskList] = None
    taskPriority: Optional[TaskPriority] = None
    input: Optional[Data] = None
    executionStartToCloseTimeout: Optional[DurationInSecondsOptional] = None
    tagList: Optional[TagList] = None
    taskStartToCloseTimeout: Optional[DurationInSecondsOptional] = None
    childPolicy: Optional[ChildPolicy] = None
    lambdaRole: Optional[Arn] = None


class TagResourceInput(BaseModel):
    resourceArn: Arn
    tags: ResourceTagList


class UndeprecateActivityTypeInput(BaseModel):
    domain: DomainName
    activityType: ActivityType


class HistoryEventList(BaseModel):
    __root__: List[HistoryEvent]


class History(BaseModel):
    """
    Paginated representation of a workflow history for a workflow execution. This is the up to date, complete and authoritative record of the events related to all tasks and events in the life of the workflow execution.
    """

    events: HistoryEventList
    nextPageToken: Optional[PageToken] = None


class DecisionTask(BaseModel):
    """
    A structure that represents a decision task. Decision tasks are sent to deciders in order for them to make decisions.
    """

    taskToken: TaskToken
    startedEventId: EventId
    workflowExecution: WorkflowExecution
    workflowType: WorkflowType
    events: HistoryEventList
    nextPageToken: Optional[PageToken] = None
    previousStartedEventId: Optional[EventId] = None
