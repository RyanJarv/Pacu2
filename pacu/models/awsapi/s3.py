# generated by datamodel-codegen:
#   filename:  openapi.yaml
#   timestamp: 2021-12-31T02:57:24+00:00

from __future__ import annotations

from datetime import datetime
from enum import Enum
from typing import Annotated, Any, List, Optional

from pydantic import BaseModel, Extra, Field, SecretStr


class AbortMultipartUploadOutput(BaseModel):
    pass


class NoSuchUpload(BaseModel):
    __root__: Any


class MetadataValue(BaseModel):
    __root__: str


class ObjectNotInActiveTierError(NoSuchUpload):
    pass


class CreateBucketOutput(AbortMultipartUploadOutput):
    pass


class BucketLocationConstraint(Enum):
    af_south_1 = 'af-south-1'
    ap_east_1 = 'ap-east-1'
    ap_northeast_1 = 'ap-northeast-1'
    ap_northeast_2 = 'ap-northeast-2'
    ap_northeast_3 = 'ap-northeast-3'
    ap_south_1 = 'ap-south-1'
    ap_southeast_1 = 'ap-southeast-1'
    ap_southeast_2 = 'ap-southeast-2'
    ca_central_1 = 'ca-central-1'
    cn_north_1 = 'cn-north-1'
    cn_northwest_1 = 'cn-northwest-1'
    EU = 'EU'
    eu_central_1 = 'eu-central-1'
    eu_north_1 = 'eu-north-1'
    eu_south_1 = 'eu-south-1'
    eu_west_1 = 'eu-west-1'
    eu_west_2 = 'eu-west-2'
    eu_west_3 = 'eu-west-3'
    me_south_1 = 'me-south-1'
    sa_east_1 = 'sa-east-1'
    us_east_2 = 'us-east-2'
    us_gov_east_1 = 'us-gov-east-1'
    us_gov_west_1 = 'us-gov-west-1'
    us_west_1 = 'us-west-1'
    us_west_2 = 'us-west-2'


class BucketAlreadyExists(NoSuchUpload):
    pass


class BucketAlreadyOwnedByYou(NoSuchUpload):
    pass


class DeleteObjectOutput(AbortMultipartUploadOutput):
    pass


class DeleteObjectTaggingOutput(AbortMultipartUploadOutput):
    pass


class Quiet(BaseModel):
    __root__: bool


class GetBucketLocationOutput(BaseModel):
    LocationConstraint: Optional[BucketLocationConstraint] = None


class NoSuchKey(NoSuchUpload):
    pass


class InvalidObjectState(NoSuchUpload):
    pass


class NoSuchBucket(NoSuchUpload):
    pass


class BucketAccelerateStatus(Enum):
    Enabled = 'Enabled'
    Suspended = 'Suspended'


class AnalyticsId(MetadataValue):
    pass


class IntelligentTieringId(MetadataValue):
    pass


class IntelligentTieringStatus(Enum):
    Enabled = 'Enabled'
    Disabled = 'Disabled'


class IsEnabled(Quiet):
    pass


class InventoryId(MetadataValue):
    pass


class InventoryIncludedObjectVersions(Enum):
    All = 'All'
    Current = 'Current'


class MetricsId(MetadataValue):
    pass


class Role(MetadataValue):
    pass


class Payer(Enum):
    Requester = 'Requester'
    BucketOwner = 'BucketOwner'


class PutObjectOutput(AbortMultipartUploadOutput):
    pass


class PutObjectAclOutput(AbortMultipartUploadOutput):
    pass


class PutObjectLegalHoldOutput(AbortMultipartUploadOutput):
    pass


class ObjectLockLegalHoldStatus(Enum):
    ON = 'ON'
    OFF = 'OFF'


class PutObjectLockConfigurationOutput(AbortMultipartUploadOutput):
    pass


class ObjectLockEnabled(Enum):
    Enabled = 'Enabled'


class PutObjectRetentionOutput(AbortMultipartUploadOutput):
    pass


class ObjectLockRetentionMode(Enum):
    GOVERNANCE = 'GOVERNANCE'
    COMPLIANCE = 'COMPLIANCE'


class Date(BaseModel):
    __root__: datetime


class PutObjectTaggingOutput(AbortMultipartUploadOutput):
    pass


class Setting(Quiet):
    pass


class RestoreObjectOutput(AbortMultipartUploadOutput):
    pass


class Days(BaseModel):
    __root__: int


class RestoreRequestType(Enum):
    SELECT = 'SELECT'


class Tier(Enum):
    Standard = 'Standard'
    Bulk = 'Bulk'
    Expedited = 'Expedited'


class Description(MetadataValue):
    pass


class ObjectAlreadyInActiveTierError(NoSuchUpload):
    pass


class EnableRequestProgress(Quiet):
    pass


class CompressionType(Enum):
    NONE = 'NONE'
    GZIP = 'GZIP'
    BZIP2 = 'BZIP2'


class ParquetInput(AbortMultipartUploadOutput):
    """
    Container for Parquet.
    """

    pass


class Start(Days):
    pass


class End(Days):
    pass


class UploadPartOutput(AbortMultipartUploadOutput):
    pass


class AbortDate(Date):
    pass


class DaysAfterInitiation(Days):
    pass


class AbortIncompleteMultipartUpload(BaseModel):
    """
    Specifies the days since the initiation of an incomplete multipart upload that Amazon S3 will wait before permanently removing all parts of the upload. For more information, see <a href="https://docs.aws.amazon.com/AmazonS3/latest/dev/mpuoverview.html#mpu-abort-incomplete-mpu-lifecycle-config"> Aborting Incomplete Multipart Uploads Using a Bucket Lifecycle Policy</a> in the <i>Amazon S3 User Guide</i>.
    """

    DaysAfterInitiation: Optional[DaysAfterInitiation] = None


class RequestCharged(Enum):
    """
    If present, indicates that the requester was successfully charged for the request.
    """

    requester = 'requester'


class BucketName(MetadataValue):
    pass


class ObjectKey(BaseModel):
    __root__: Annotated[str, Field(min_length=1)]


class MultipartUploadId(MetadataValue):
    pass


class AccountId(MetadataValue):
    pass


class AbortMultipartUploadRequest(BaseModel):
    pass


class AbortRuleId(MetadataValue):
    pass


class AccelerateConfiguration(BaseModel):
    """
    Configures the transfer acceleration state for an Amazon S3 bucket. For more information, see <a href="https://docs.aws.amazon.com/AmazonS3/latest/dev/transfer-acceleration.html">Amazon S3 Transfer Acceleration</a> in the <i>Amazon S3 User Guide</i>.
    """

    Status: Optional[BucketAccelerateStatus] = None


class AcceptRanges(MetadataValue):
    pass


class OwnerOverride(Enum):
    Destination = 'Destination'


class AccessControlTranslation(BaseModel):
    """
    A container for information about access control for replicas.
    """

    Owner: OwnerOverride


class AccessPointArn(MetadataValue):
    pass


class AllowQuotedRecordDelimiter(Quiet):
    pass


class AllowedHeader(MetadataValue):
    pass


class AllowedHeaders(BaseModel):
    __root__: List[AllowedHeader]


class AllowedMethod(MetadataValue):
    pass


class AllowedMethods(BaseModel):
    __root__: List[AllowedMethod]


class AllowedOrigin(MetadataValue):
    pass


class AllowedOrigins(BaseModel):
    __root__: List[AllowedOrigin]


class Prefix(MetadataValue):
    pass


class AnalyticsS3ExportFileFormat(Enum):
    CSV = 'CSV'


class ArchiveStatus(Enum):
    ARCHIVE_ACCESS = 'ARCHIVE_ACCESS'
    DEEP_ARCHIVE_ACCESS = 'DEEP_ARCHIVE_ACCESS'


class Body(MetadataValue):
    pass


class CreationDate(Date):
    pass


class Bucket5(BaseModel):
    """
    In terms of implementation, a Bucket is a resource. An Amazon S3 bucket name is globally unique, and the namespace is shared by all Amazon Web Services accounts.
    """

    Name: Optional[BucketName] = None
    CreationDate: Optional[CreationDate] = None


class BucketCannedACL(Enum):
    private = 'private'
    public_read = 'public-read'
    public_read_write = 'public-read-write'
    authenticated_read = 'authenticated-read'


class BucketKeyEnabled(Quiet):
    pass


class BucketLogsPermission(Enum):
    FULL_CONTROL = 'FULL_CONTROL'
    READ = 'READ'
    WRITE = 'WRITE'


class Buckets(BaseModel):
    __root__: List[Bucket5]


class BypassGovernanceRetention(Quiet):
    pass


class BytesProcessed(Days):
    pass


class BytesReturned(Days):
    pass


class BytesScanned(Days):
    pass


class ID(MetadataValue):
    pass


class MaxAgeSeconds(Days):
    pass


class FileHeaderInfo(Enum):
    USE = 'USE'
    IGNORE = 'IGNORE'
    NONE = 'NONE'


class Comments(MetadataValue):
    pass


class QuoteEscapeCharacter(MetadataValue):
    pass


class RecordDelimiter(MetadataValue):
    pass


class FieldDelimiter(MetadataValue):
    pass


class QuoteCharacter(MetadataValue):
    pass


class QuoteFields(Enum):
    ALWAYS = 'ALWAYS'
    ASNEEDED = 'ASNEEDED'


class CacheControl(MetadataValue):
    pass


class CloudFunction(MetadataValue):
    pass


class NotificationId(BaseModel):
    __root__: Annotated[
        str,
        Field(
            description="An optional unique identifier for configurations in a notification configuration. If you don't provide one, Amazon S3 will assign an ID."
        ),
    ]


class Event(Enum):
    """
    The bucket event for which to send notifications.
    """

    s3_ReducedRedundancyLostObject = 's3:ReducedRedundancyLostObject'
    s3_ObjectCreated__ = 's3:ObjectCreated:*'
    s3_ObjectCreated_Put = 's3:ObjectCreated:Put'
    s3_ObjectCreated_Post = 's3:ObjectCreated:Post'
    s3_ObjectCreated_Copy = 's3:ObjectCreated:Copy'
    s3_ObjectCreated_CompleteMultipartUpload = (
        's3:ObjectCreated:CompleteMultipartUpload'
    )
    s3_ObjectRemoved__ = 's3:ObjectRemoved:*'
    s3_ObjectRemoved_Delete = 's3:ObjectRemoved:Delete'
    s3_ObjectRemoved_DeleteMarkerCreated = 's3:ObjectRemoved:DeleteMarkerCreated'
    s3_ObjectRestore__ = 's3:ObjectRestore:*'
    s3_ObjectRestore_Post = 's3:ObjectRestore:Post'
    s3_ObjectRestore_Completed = 's3:ObjectRestore:Completed'
    s3_Replication__ = 's3:Replication:*'
    s3_Replication_OperationFailedReplication = (
        's3:Replication:OperationFailedReplication'
    )
    s3_Replication_OperationNotTracked = 's3:Replication:OperationNotTracked'
    s3_Replication_OperationMissedThreshold = 's3:Replication:OperationMissedThreshold'
    s3_Replication_OperationReplicatedAfterThreshold = (
        's3:Replication:OperationReplicatedAfterThreshold'
    )


class EventList(BaseModel):
    __root__: List[Event]


class CloudFunctionInvocationRole(MetadataValue):
    pass


class Code(MetadataValue):
    pass


class CommonPrefix(BaseModel):
    """
    Container for all (if there are any) keys between Prefix and the next occurrence of the string specified by a delimiter. CommonPrefixes lists keys that act like subdirectories in the directory specified by Prefix. For example, if the prefix is notes/ and the delimiter is a slash (/) as in notes/summer/july, the common prefix is notes/summer/.
    """

    Prefix: Optional[Prefix] = None


class CommonPrefixList(BaseModel):
    __root__: List[CommonPrefix]


class Location(MetadataValue):
    pass


class Expiration(MetadataValue):
    pass


class ETag(MetadataValue):
    pass


class ServerSideEncryption(Enum):
    AES256 = 'AES256'
    aws_kms = 'aws:kms'


class ObjectVersionId(MetadataValue):
    pass


class SSEKMSKeyId(BaseModel):
    __root__: SecretStr


class PartNumber(Days):
    pass


class CompletedPart(BaseModel):
    """
    Details of the parts that were uploaded.
    """

    ETag: Optional[ETag] = None
    PartNumber: Optional[PartNumber] = None


class HttpErrorCodeReturnedEquals(MetadataValue):
    pass


class KeyPrefixEquals(MetadataValue):
    pass


class Condition(BaseModel):
    """
    A container for describing a condition that must be met for the specified redirect to apply. For example, 1. If request is for pages in the <code>/docs</code> folder, redirect to the <code>/documents</code> folder. 2. If request results in HTTP error 4xx, redirect request to another host where you might process the error.
    """

    HttpErrorCodeReturnedEquals: Optional[HttpErrorCodeReturnedEquals] = None
    KeyPrefixEquals: Optional[KeyPrefixEquals] = None


class ConfirmRemoveSelfBucketAccess(Quiet):
    pass


class ContentDisposition(MetadataValue):
    pass


class ContentEncoding(MetadataValue):
    pass


class ContentLanguage(MetadataValue):
    pass


class ContentLength(Days):
    pass


class ContentMD5(MetadataValue):
    pass


class ContentRange(MetadataValue):
    pass


class ContentType(MetadataValue):
    pass


class ContinuationEvent(AbortMultipartUploadOutput):
    """
    <p/>
    """

    pass


class CopySourceVersionId(MetadataValue):
    pass


class SSECustomerAlgorithm(MetadataValue):
    pass


class SSECustomerKeyMD5(MetadataValue):
    pass


class SSEKMSEncryptionContext(SSEKMSKeyId):
    pass


class ObjectCannedACL(Enum):
    private = 'private'
    public_read = 'public-read'
    public_read_write = 'public-read-write'
    authenticated_read = 'authenticated-read'
    aws_exec_read = 'aws-exec-read'
    bucket_owner_read = 'bucket-owner-read'
    bucket_owner_full_control = 'bucket-owner-full-control'


class CopySource(BaseModel):
    __root__: Annotated[str, Field(regex='\\/.+\\/.+')]


class CopySourceIfMatch(MetadataValue):
    pass


class CopySourceIfModifiedSince(Date):
    pass


class CopySourceIfNoneMatch(MetadataValue):
    pass


class CopySourceIfUnmodifiedSince(Date):
    pass


class Expires(Date):
    pass


class GrantFullControl(MetadataValue):
    pass


class GrantRead(MetadataValue):
    pass


class GrantReadACP(MetadataValue):
    pass


class GrantWriteACP(MetadataValue):
    pass


class Metadata(BaseModel):
    pass

    class Config:
        extra = Extra.allow


class MetadataDirective(Enum):
    COPY = 'COPY'
    REPLACE = 'REPLACE'


class StorageClass(Enum):
    STANDARD = 'STANDARD'
    REDUCED_REDUNDANCY = 'REDUCED_REDUNDANCY'
    STANDARD_IA = 'STANDARD_IA'
    ONEZONE_IA = 'ONEZONE_IA'
    INTELLIGENT_TIERING = 'INTELLIGENT_TIERING'
    GLACIER = 'GLACIER'
    DEEP_ARCHIVE = 'DEEP_ARCHIVE'
    OUTPOSTS = 'OUTPOSTS'


class WebsiteRedirectLocation(MetadataValue):
    pass


class SSECustomerKey(SSEKMSKeyId):
    pass


class CopySourceSSECustomerAlgorithm(MetadataValue):
    pass


class CopySourceSSECustomerKey(SSEKMSKeyId):
    pass


class CopySourceSSECustomerKeyMD5(MetadataValue):
    pass


class TaggingHeader(MetadataValue):
    pass


class ObjectLockRetainUntilDate(Date):
    pass


class CopyObjectRequest(BaseModel):
    Metadata: Optional[Metadata] = None


class LastModified(Date):
    pass


class CopyPartResult(BaseModel):
    """
    Container for all response elements.
    """

    ETag: Optional[ETag] = None
    LastModified: Optional[LastModified] = None


class CopySourceRange(MetadataValue):
    pass


class CreateBucketConfiguration(GetBucketLocationOutput):
    """
    The configuration information for the bucket.
    """

    pass


class GrantWrite(MetadataValue):
    pass


class ObjectLockEnabledForBucket(Quiet):
    pass


class CreateBucketRequest(BaseModel):
    CreateBucketConfiguration: Optional[CreateBucketConfiguration] = None


class CreateMultipartUploadRequest(BaseModel):
    Metadata: Optional[Metadata] = None


class Years(Days):
    pass


class DefaultRetention(BaseModel):
    """
    <p>The container element for specifying the default Object Lock retention settings for new objects placed in the specified bucket.</p> <note> <ul> <li> <p>The <code>DefaultRetention</code> settings require both a mode and a period.</p> </li> <li> <p>The <code>DefaultRetention</code> period can be either <code>Days</code> or <code>Years</code> but you must select one. You cannot specify <code>Days</code> and <code>Years</code> at the same time.</p> </li> </ul> </note>
    """

    Mode: Optional[ObjectLockRetentionMode] = None
    Days: Optional[Days] = None
    Years: Optional[Years] = None


class DeleteBucketAnalyticsConfigurationRequest(BaseModel):
    pass


class DeleteBucketCorsRequest(BaseModel):
    pass


class DeleteBucketEncryptionRequest(BaseModel):
    pass


class DeleteBucketIntelligentTieringConfigurationRequest(BaseModel):
    pass


class DeleteBucketInventoryConfigurationRequest(BaseModel):
    pass


class DeleteBucketLifecycleRequest(BaseModel):
    pass


class DeleteBucketMetricsConfigurationRequest(BaseModel):
    pass


class DeleteBucketOwnershipControlsRequest(BaseModel):
    pass


class DeleteBucketPolicyRequest(BaseModel):
    pass


class DeleteBucketReplicationRequest(BaseModel):
    pass


class DeleteBucketRequest(BaseModel):
    pass


class DeleteBucketTaggingRequest(BaseModel):
    pass


class DeleteBucketWebsiteRequest(BaseModel):
    pass


class DeleteMarker(Quiet):
    pass


class IsLatest(Quiet):
    pass


class DeleteMarkerReplication(BaseModel):
    """
    <p>Specifies whether Amazon S3 replicates delete markers. If you specify a <code>Filter</code> in your replication configuration, you must also include a <code>DeleteMarkerReplication</code> element. If your <code>Filter</code> includes a <code>Tag</code> element, the <code>DeleteMarkerReplication</code> <code>Status</code> must be set to Disabled, because Amazon S3 does not support replicating delete markers for tag-based rules. For an example configuration, see <a href="https://docs.aws.amazon.com/AmazonS3/latest/dev/replication-add-config.html#replication-config-min-rule-config">Basic Rule Configuration</a>. </p> <p>For more information about delete marker replication, see <a href="https://docs.aws.amazon.com/AmazonS3/latest/dev/delete-marker-replication.html">Basic Rule Configuration</a>. </p> <note> <p>If you are using an earlier version of the replication configuration, Amazon S3 handles replication of delete markers differently. For more information, see <a href="https://docs.aws.amazon.com/AmazonS3/latest/dev/replication-add-config.html#replication-backward-compat-considerations">Backward Compatibility</a>.</p> </note>
    """

    Status: Optional[IntelligentTieringStatus] = None


class DeleteMarkerVersionId(MetadataValue):
    pass


class MFA(MetadataValue):
    pass


class DeleteObjectRequest(BaseModel):
    pass


class DeleteObjectTaggingRequest(BaseModel):
    pass


class DeletePublicAccessBlockRequest(BaseModel):
    pass


class DeletedObject(BaseModel):
    """
    Information about the deleted object.
    """

    Key: Optional[ObjectKey] = None
    VersionId: Optional[ObjectVersionId] = None
    DeleteMarker: Optional[DeleteMarker] = None
    DeleteMarkerVersionId: Optional[DeleteMarkerVersionId] = None


class Delimiter(MetadataValue):
    pass


class DisplayName(MetadataValue):
    pass


class EmailAddress(MetadataValue):
    pass


class EncodingType(Enum):
    """
    Requests Amazon S3 to encode the object keys in the response and specifies the encoding method to use. An object key may contain any Unicode character; however, XML 1.0 parser cannot parse some characters, such as characters with an ASCII value from 0 to 10. For characters that are not supported in XML 1.0, you can add this parameter to request that Amazon S3 encode the keys in the response.
    """

    url = 'url'


class KMSContext(MetadataValue):
    pass


class Encryption(BaseModel):
    """
    Contains the type of server-side encryption used.
    """

    EncryptionType: ServerSideEncryption
    KMSKeyId: Optional[SSEKMSKeyId] = None
    KMSContext: Optional[KMSContext] = None


class ReplicaKmsKeyID(MetadataValue):
    pass


class EndEvent(AbortMultipartUploadOutput):
    """
    A message that indicates the request is complete and no more messages will be sent. You should not assume that the request is complete until the client receives an <code>EndEvent</code>.
    """

    pass


class Message(MetadataValue):
    pass


class Error(BaseModel):
    """
    Container for all error elements.
    """

    Key: Optional[ObjectKey] = None
    VersionId: Optional[ObjectVersionId] = None
    Code: Optional[Code] = None
    Message: Optional[Message] = None


class ErrorCode(MetadataValue):
    pass


class ErrorMessage(MetadataValue):
    pass


class ExistingObjectReplication(BaseModel):
    """
    Optional configuration to replicate existing source bucket objects. For more information, see <a href="https://docs.aws.amazon.com/AmazonS3/latest/dev/replication-what-is-isnot-replicated.html#existing-object-replication">Replicating Existing Objects</a> in the <i>Amazon S3 User Guide</i>.
    """

    Status: IntelligentTieringStatus


class ExpiredObjectDeleteMarker(Quiet):
    pass


class ExposeHeader(MetadataValue):
    pass


class Expression(MetadataValue):
    pass


class ExpressionType(Enum):
    SQL = 'SQL'


class FetchOwner(Quiet):
    pass


class FilterRuleName(Enum):
    prefix = 'prefix'
    suffix = 'suffix'


class FilterRuleValue(MetadataValue):
    pass


class FilterRule(BaseModel):
    """
    Specifies the Amazon S3 object key name to filter on and whether to filter on the suffix or prefix of the key name.
    """

    Name: Optional[FilterRuleName] = None
    Value: Optional[FilterRuleValue] = None


class FilterRuleList(BaseModel):
    """
    A list of containers for the key-value pair that defines the criteria for the filter rule.
    """

    __root__: Annotated[
        List[FilterRule],
        Field(
            description='A list of containers for the key-value pair that defines the criteria for the filter rule.'
        ),
    ]


class GetBucketAccelerateConfigurationRequest(BaseModel):
    pass


class GetBucketAclRequest(BaseModel):
    pass


class GetBucketAnalyticsConfigurationRequest(BaseModel):
    pass


class GetBucketCorsRequest(BaseModel):
    pass


class GetBucketEncryptionRequest(BaseModel):
    pass


class GetBucketIntelligentTieringConfigurationRequest(BaseModel):
    pass


class GetBucketInventoryConfigurationRequest(BaseModel):
    pass


class GetBucketLifecycleConfigurationRequest(BaseModel):
    pass


class GetBucketLifecycleRequest(BaseModel):
    pass


class GetBucketLocationRequest(BaseModel):
    pass


class GetBucketLoggingRequest(BaseModel):
    pass


class GetBucketMetricsConfigurationRequest(BaseModel):
    pass


class GetBucketNotificationConfigurationRequest(BaseModel):
    pass


class GetBucketOwnershipControlsRequest(BaseModel):
    pass


class Policy(MetadataValue):
    pass


class GetBucketPolicyRequest(BaseModel):
    pass


class GetBucketPolicyStatusRequest(BaseModel):
    pass


class GetBucketReplicationRequest(BaseModel):
    pass


class GetBucketRequestPaymentRequest(BaseModel):
    pass


class GetBucketTaggingRequest(BaseModel):
    pass


class GetBucketVersioningRequest(BaseModel):
    pass


class GetBucketWebsiteRequest(BaseModel):
    pass


class GetObjectAclRequest(BaseModel):
    pass


class ObjectLockLegalHold(BaseModel):
    """
    A Legal Hold configuration for an object.
    """

    Status: Optional[ObjectLockLegalHoldStatus] = None


class GetObjectLegalHoldRequest(BaseModel):
    pass


class GetObjectLockConfigurationRequest(BaseModel):
    pass


class Restore(MetadataValue):
    pass


class MissingMeta(Days):
    pass


class ReplicationStatus(Enum):
    COMPLETE = 'COMPLETE'
    PENDING = 'PENDING'
    FAILED = 'FAILED'
    REPLICA = 'REPLICA'


class PartsCount(Days):
    pass


class TagCount(Days):
    pass


class IfMatch(MetadataValue):
    pass


class IfModifiedSince(Date):
    pass


class IfNoneMatch(MetadataValue):
    pass


class IfUnmodifiedSince(Date):
    pass


class Range(MetadataValue):
    pass


class ResponseCacheControl(MetadataValue):
    pass


class ResponseContentDisposition(MetadataValue):
    pass


class ResponseContentEncoding(MetadataValue):
    pass


class ResponseContentLanguage(MetadataValue):
    pass


class ResponseContentType(MetadataValue):
    pass


class ResponseExpires(Date):
    pass


class GetObjectRequest(BaseModel):
    pass


class GetObjectResponseStatusCode(Days):
    pass


class ObjectLockRetention(BaseModel):
    """
    A Retention configuration for an object.
    """

    Mode: Optional[ObjectLockRetentionMode] = None
    RetainUntilDate: Optional[Date] = None


class GetObjectRetentionRequest(BaseModel):
    pass


class GetObjectTaggingRequest(BaseModel):
    pass


class GetObjectTorrentRequest(BaseModel):
    pass


class PublicAccessBlockConfiguration(BaseModel):
    """
    The PublicAccessBlock configuration that you want to apply to this Amazon S3 bucket. You can enable the configuration options in any combination. For more information about when Amazon S3 considers a bucket or object public, see <a href="https://docs.aws.amazon.com/AmazonS3/latest/dev/access-control-block-public-access.html#access-control-block-public-access-policy-status">The Meaning of "Public"</a> in the <i>Amazon S3 User Guide</i>.
    """

    BlockPublicAcls: Optional[Setting] = None
    IgnorePublicAcls: Optional[Setting] = None
    BlockPublicPolicy: Optional[Setting] = None
    RestrictPublicBuckets: Optional[Setting] = None


class GetPublicAccessBlockRequest(BaseModel):
    pass


class Permission(Enum):
    FULL_CONTROL = 'FULL_CONTROL'
    WRITE = 'WRITE'
    WRITE_ACP = 'WRITE_ACP'
    READ = 'READ'
    READ_ACP = 'READ_ACP'


class Type(Enum):
    CanonicalUser = 'CanonicalUser'
    AmazonCustomerByEmail = 'AmazonCustomerByEmail'
    Group = 'Group'


class URI(MetadataValue):
    pass


class HeadBucketRequest(BaseModel):
    pass


class HeadObjectRequest(BaseModel):
    pass


class HostName(MetadataValue):
    pass


class HttpRedirectCode(MetadataValue):
    pass


class Suffix(MetadataValue):
    pass


class Initiated(Date):
    pass


class Initiator(BaseModel):
    """
    Container element that identifies who initiated the multipart upload.
    """

    ID: Optional[ID] = None
    DisplayName: Optional[DisplayName] = None


class IntelligentTieringDays(Days):
    pass


class SSES3(AbortMultipartUploadOutput):
    """
    Specifies the use of SSE-S3 to encrypt delivered inventory reports.
    """

    pass


class SSEKMS(BaseModel):
    """
    Specifies the use of SSE-KMS to encrypt delivered inventory reports.
    """

    KeyId: SSEKMSKeyId


class InventoryEncryption(BaseModel):
    """
    Contains the type of server-side encryption used to encrypt the inventory results.
    """

    SSES3: Optional[SSES3] = None
    SSEKMS: Optional[SSEKMS] = None


class InventoryFormat(Enum):
    CSV = 'CSV'
    ORC = 'ORC'
    Parquet = 'Parquet'


class InventoryFrequency(Enum):
    Daily = 'Daily'
    Weekly = 'Weekly'


class InventoryOptionalField(Enum):
    Size = 'Size'
    LastModifiedDate = 'LastModifiedDate'
    StorageClass = 'StorageClass'
    ETag = 'ETag'
    IsMultipartUploaded = 'IsMultipartUploaded'
    ReplicationStatus = 'ReplicationStatus'
    EncryptionStatus = 'EncryptionStatus'
    ObjectLockRetainUntilDate = 'ObjectLockRetainUntilDate'
    ObjectLockMode = 'ObjectLockMode'
    ObjectLockLegalHoldStatus = 'ObjectLockLegalHoldStatus'
    IntelligentTieringAccessTier = 'IntelligentTieringAccessTier'
    BucketKeyStatus = 'BucketKeyStatus'


class IsPublic(Quiet):
    pass


class IsTruncated(Quiet):
    pass


class JSONType(Enum):
    DOCUMENT = 'DOCUMENT'
    LINES = 'LINES'


class KeyCount(Days):
    pass


class KeyMarker(MetadataValue):
    pass


class LambdaFunctionArn(MetadataValue):
    pass


class LifecycleExpiration(BaseModel):
    """
    Container for the expiration for the lifecycle of the object.
    """

    Date: Optional[Date] = None
    Days: Optional[Days] = None
    ExpiredObjectDeleteMarker: Optional[ExpiredObjectDeleteMarker] = None


class NoncurrentVersionExpiration(BaseModel):
    """
    Specifies when noncurrent object versions expire. Upon expiration, Amazon S3 permanently deletes the noncurrent object versions. You set this lifecycle configuration action on a bucket that has versioning enabled (or suspended) to request that Amazon S3 delete noncurrent object versions at a specific period in the object's lifetime.
    """

    NoncurrentDays: Optional[Days] = None


class Token(MetadataValue):
    pass


class NextToken(MetadataValue):
    pass


class ListBucketAnalyticsConfigurationsRequest(BaseModel):
    pass


class ListBucketIntelligentTieringConfigurationsRequest(BaseModel):
    pass


class ListBucketInventoryConfigurationsRequest(BaseModel):
    pass


class ListBucketMetricsConfigurationsRequest(BaseModel):
    pass


class UploadIdMarker(MetadataValue):
    pass


class NextKeyMarker(MetadataValue):
    pass


class NextUploadIdMarker(MetadataValue):
    pass


class MaxUploads(Days):
    pass


class ListMultipartUploadsRequest(BaseModel):
    pass


class VersionIdMarker(MetadataValue):
    pass


class NextVersionIdMarker(MetadataValue):
    pass


class MaxKeys(Days):
    pass


class ListObjectVersionsRequest(BaseModel):
    pass


class Marker(MetadataValue):
    pass


class NextMarker(MetadataValue):
    pass


class ListObjectsRequest(BaseModel):
    pass


class StartAfter(MetadataValue):
    pass


class ListObjectsV2Request(BaseModel):
    pass


class PartNumberMarker(Days):
    pass


class NextPartNumberMarker(Days):
    pass


class MaxParts(Days):
    pass


class ListPartsRequest(BaseModel):
    pass


class LocationPrefix(MetadataValue):
    pass


class TargetBucket(MetadataValue):
    pass


class TargetPrefix(MetadataValue):
    pass


class MetadataKey(MetadataValue):
    pass


class MetadataEntry(BaseModel):
    """
    A metadata key-value pair to store with an object.
    """

    Name: Optional[MetadataKey] = None
    Value: Optional[MetadataValue] = None


class Minutes(Days):
    pass


class TransitionStorageClass(Enum):
    GLACIER = 'GLACIER'
    STANDARD_IA = 'STANDARD_IA'
    ONEZONE_IA = 'ONEZONE_IA'
    INTELLIGENT_TIERING = 'INTELLIGENT_TIERING'
    DEEP_ARCHIVE = 'DEEP_ARCHIVE'


class NoncurrentVersionTransition(BaseModel):
    """
    Container for the transition rule that describes when noncurrent objects transition to the <code>STANDARD_IA</code>, <code>ONEZONE_IA</code>, <code>INTELLIGENT_TIERING</code>, <code>GLACIER</code>, or <code>DEEP_ARCHIVE</code> storage class. If your bucket is versioning-enabled (or versioning is suspended), you can set this action to request that Amazon S3 transition noncurrent object versions to the <code>STANDARD_IA</code>, <code>ONEZONE_IA</code>, <code>INTELLIGENT_TIERING</code>, <code>GLACIER</code>, or <code>DEEP_ARCHIVE</code> storage class at a specific period in the object's lifetime.
    """

    NoncurrentDays: Optional[Days] = None
    StorageClass: Optional[TransitionStorageClass] = None


class S3KeyFilter(BaseModel):
    """
    A container for object key name prefix and suffix filtering rules.
    """

    FilterRules: Optional[FilterRuleList] = None


class Size(Days):
    pass


class ObjectStorageClass(Enum):
    STANDARD = 'STANDARD'
    REDUCED_REDUNDANCY = 'REDUCED_REDUNDANCY'
    GLACIER = 'GLACIER'
    STANDARD_IA = 'STANDARD_IA'
    ONEZONE_IA = 'ONEZONE_IA'
    INTELLIGENT_TIERING = 'INTELLIGENT_TIERING'
    DEEP_ARCHIVE = 'DEEP_ARCHIVE'
    OUTPOSTS = 'OUTPOSTS'


class ObjectIdentifier(BaseModel):
    """
    Object Identifier is unique value to identify objects.
    """

    Key: ObjectKey
    VersionId: Optional[ObjectVersionId] = None


class ObjectLockToken(MetadataValue):
    pass


class ObjectOwnership(Enum):
    """
    <p>The container element for object ownership for a bucket's ownership controls.</p> <p>BucketOwnerPreferred - Objects uploaded to the bucket change ownership to the bucket owner if the objects are uploaded with the <code>bucket-owner-full-control</code> canned ACL.</p> <p>ObjectWriter - The uploading account will own the object if the object is uploaded with the <code>bucket-owner-full-control</code> canned ACL.</p>
    """

    BucketOwnerPreferred = 'BucketOwnerPreferred'
    ObjectWriter = 'ObjectWriter'


class ObjectVersionStorageClass(Enum):
    STANDARD = 'STANDARD'


class OwnershipControlsRule(BaseModel):
    """
    The container element for an ownership control rule.
    """

    ObjectOwnership: ObjectOwnership


class Part(BaseModel):
    """
    Container for elements related to a part.
    """

    PartNumber: Optional[PartNumber] = None
    LastModified: Optional[LastModified] = None
    ETag: Optional[ETag] = None
    Size: Optional[Size] = None


class Priority(Days):
    pass


class Progress(BaseModel):
    """
    This data type contains information about progress of an operation.
    """

    BytesScanned: Optional[BytesScanned] = None
    BytesProcessed: Optional[BytesProcessed] = None
    BytesReturned: Optional[BytesReturned] = None


class ProgressEvent(BaseModel):
    """
    This data type contains information about the progress event of an operation.
    """

    Details: Optional[Progress] = None


class Protocol(Enum):
    http = 'http'
    https = 'https'


class PutBucketAccelerateConfigurationRequest(BaseModel):
    AccelerateConfiguration: AccelerateConfiguration


class PutBucketPolicyRequest(BaseModel):
    Policy: Policy


class RequestPaymentConfiguration(BaseModel):
    """
    Container for Payer.
    """

    Payer: Payer


class PutBucketRequestPaymentRequest(BaseModel):
    RequestPaymentConfiguration: RequestPaymentConfiguration


class VersioningConfiguration(BaseModel):
    """
    Describes the versioning state of an Amazon S3 bucket. For more information, see <a href="https://docs.aws.amazon.com/AmazonS3/latest/API/RESTBucketPUTVersioningStatus.html">PUT Bucket versioning</a> in the <i>Amazon S3 API Reference</i>.
    """

    MFADelete: Optional[IntelligentTieringStatus] = None
    Status: Optional[BucketAccelerateStatus] = None


class PutBucketVersioningRequest(BaseModel):
    VersioningConfiguration: VersioningConfiguration


class PutObjectLegalHoldRequest(BaseModel):
    LegalHold: Optional[ObjectLockLegalHold] = None


class PutObjectRequest(BaseModel):
    Body: Optional[Body] = None
    Metadata: Optional[Metadata] = None


class PutObjectRetentionRequest(BaseModel):
    Retention: Optional[ObjectLockRetention] = None


class PutPublicAccessBlockRequest(BaseModel):
    PublicAccessBlockConfiguration: PublicAccessBlockConfiguration


class QueueArn(MetadataValue):
    pass


class RecordsEvent(BaseModel):
    """
    The container for the records event.
    """

    Payload: Optional[Body] = None


class ReplaceKeyPrefixWith(MetadataValue):
    pass


class ReplaceKeyWith(MetadataValue):
    pass


class Redirect(BaseModel):
    """
    Specifies how requests are redirected. In the event of an error, you can specify a different error code to return.
    """

    HostName: Optional[HostName] = None
    HttpRedirectCode: Optional[HttpRedirectCode] = None
    Protocol: Optional[Protocol] = None
    ReplaceKeyPrefixWith: Optional[ReplaceKeyPrefixWith] = None
    ReplaceKeyWith: Optional[ReplaceKeyWith] = None


class ReplicaModifications(ExistingObjectReplication):
    """
    <p>A filter that you can specify for selection for modifications on replicas. Amazon S3 doesn't replicate replica modifications by default. In the latest version of replication configuration (when <code>Filter</code> is specified), you can specify this element and set the status to <code>Enabled</code> to replicate modifications on replicas. </p> <note> <p> If you don't specify the <code>Filter</code> element, Amazon S3 assumes that the replication configuration is the earlier version, V1. In the earlier version, this element is not allowed.</p> </note>
    """

    pass


class RequestProgress(BaseModel):
    """
    Container for specifying if periodic <code>QueryProgress</code> messages should be sent.
    """

    Enabled: Optional[EnableRequestProgress] = None


class RequestRoute(MetadataValue):
    pass


class RequestToken(MetadataValue):
    pass


class RestoreOutputPath(MetadataValue):
    pass


class RoutingRule(BaseModel):
    """
    Specifies the redirect behavior and when a redirect is applied. For more information about routing rules, see <a href="https://docs.aws.amazon.com/AmazonS3/latest/dev/how-to-page-redirect.html#advanced-conditional-redirects">Configuring advanced conditional redirects</a> in the <i>Amazon S3 User Guide</i>.
    """

    Condition: Optional[Condition] = None
    Redirect: Redirect


class Transition(BaseModel):
    """
    Specifies when an object transitions to a specified storage class. For more information about Amazon S3 lifecycle configuration rules, see <a href="https://docs.aws.amazon.com/AmazonS3/latest/dev/lifecycle-transition-general-considerations.html">Transitioning Objects Using Amazon S3 Lifecycle</a> in the <i>Amazon S3 User Guide</i>.
    """

    Date: Optional[Date] = None
    Days: Optional[Days] = None
    StorageClass: Optional[TransitionStorageClass] = None


class Rule(BaseModel):
    """
    Specifies lifecycle rules for an Amazon S3 bucket. For more information, see <a href="https://docs.aws.amazon.com/AmazonS3/latest/API/RESTBucketPUTlifecycle.html">Put Bucket Lifecycle Configuration</a> in the <i>Amazon S3 API Reference</i>. For examples, see <a href="https://docs.aws.amazon.com/AmazonS3/latest/API/API_PutBucketLifecycleConfiguration.html#API_PutBucketLifecycleConfiguration_Examples">Put Bucket Lifecycle Configuration Examples</a>.
    """

    Expiration: Optional[LifecycleExpiration] = None
    ID: Optional[ID] = None
    Prefix: Prefix
    Status: IntelligentTieringStatus
    Transition: Optional[Transition] = None
    NoncurrentVersionTransition: Optional[NoncurrentVersionTransition] = None
    NoncurrentVersionExpiration: Optional[NoncurrentVersionExpiration] = None
    AbortIncompleteMultipartUpload: Optional[AbortIncompleteMultipartUpload] = None


class UserMetadata(BaseModel):
    __root__: List[MetadataEntry]


class ScanRange(BaseModel):
    """
    Specifies the byte range of the object to get the records from. A record is processed when its first byte is contained by the range. This parameter is optional, but when specified, it must not be empty. See RFC 2616, Section 14.35.1 about how to specify the start and end of the range.
    """

    Start: Optional[Start] = None
    End: Optional[End] = None


class ServerSideEncryptionByDefault(BaseModel):
    """
    Describes the default server-side encryption to apply to new objects in the bucket. If a PUT Object request doesn't specify any server-side encryption, this default encryption will be applied. For more information, see <a href="https://docs.aws.amazon.com/AmazonS3/latest/API/RESTBucketPUTencryption.html">PUT Bucket encryption</a> in the <i>Amazon S3 API Reference</i>.
    """

    SSEAlgorithm: ServerSideEncryption
    KMSMasterKeyID: Optional[SSEKMSKeyId] = None


class ServerSideEncryptionRule(BaseModel):
    """
    Specifies the default server-side encryption configuration.
    """

    ApplyServerSideEncryptionByDefault: Optional[ServerSideEncryptionByDefault] = None
    BucketKeyEnabled: Optional[BucketKeyEnabled] = None


class Stats(Progress):
    """
    Container for the stats details.
    """

    pass


class StorageClassAnalysisSchemaVersion(Enum):
    V_1 = 'V_1'


class Value(MetadataValue):
    pass


class Tiering(BaseModel):
    """
    The S3 Intelligent-Tiering storage class is designed to optimize storage costs by automatically moving data to the most cost-effective storage access tier, without additional operational overhead.
    """

    Days: IntelligentTieringDays
    AccessTier: ArchiveStatus


class TopicArn(MetadataValue):
    pass


class UploadPartCopyRequest(BaseModel):
    pass


class UploadPartRequest(BaseModel):
    Body: Optional[Body] = None


class WriteGetObjectResponseRequest(BaseModel):
    Body: Optional[Body] = None
    Metadata: Optional[Metadata] = None


class CompleteMultipartUploadOutput(BaseModel):
    Location: Optional[Location] = None
    Bucket: Optional[BucketName] = None
    Key: Optional[ObjectKey] = None
    ETag: Optional[ETag] = None


class CompletedPartList(BaseModel):
    __root__: List[CompletedPart]


class CreateMultipartUploadOutput(BaseModel):
    Bucket: Optional[BucketName] = None
    Key: Optional[ObjectKey] = None
    UploadId: Optional[MultipartUploadId] = None


class ObjectIdentifierList(BaseModel):
    __root__: List[ObjectIdentifier]


class GetBucketAccelerateConfigurationOutput(AccelerateConfiguration):
    pass


class GetBucketPolicyOutput(BaseModel):
    Policy: Optional[Policy] = None


class GetBucketRequestPaymentOutput(BaseModel):
    Payer: Optional[Payer] = None


class GetBucketVersioningOutput(BaseModel):
    Status: Optional[BucketAccelerateStatus] = None
    MFADelete: Optional[IntelligentTieringStatus] = None


class GetObjectOutput(BaseModel):
    Body: Optional[Body] = None
    Metadata: Optional[Metadata] = None


class GetObjectLegalHoldOutput(BaseModel):
    LegalHold: Optional[ObjectLockLegalHold] = None


class GetObjectRetentionOutput(BaseModel):
    Retention: Optional[ObjectLockRetention] = None


class GetObjectTorrentOutput(BaseModel):
    Body: Optional[Body] = None


class GetPublicAccessBlockOutput(BaseModel):
    PublicAccessBlockConfiguration: Optional[PublicAccessBlockConfiguration] = None


class HeadObjectOutput(BaseModel):
    Metadata: Optional[Metadata] = None


class Owner(BaseModel):
    """
    Container for the owner's display name and ID.
    """

    DisplayName: Optional[DisplayName] = None
    ID: Optional[ID] = None


class ServerSideEncryptionRules(BaseModel):
    __root__: List[ServerSideEncryptionRule]


class TieringList(BaseModel):
    __root__: List[Tiering]


class InventoryFilter(BaseModel):
    """
    Specifies an inventory filter. The inventory only includes objects that meet the filter's criteria.
    """

    Prefix: Prefix


class InventoryOptionalFields(BaseModel):
    __root__: List[InventoryOptionalField]


class InventorySchedule(BaseModel):
    """
    Specifies the schedule for generating inventory results.
    """

    Frequency: InventoryFrequency


class Rules(BaseModel):
    __root__: List[Rule]


class TopicConfigurationDeprecated(BaseModel):
    """
    A container for specifying the configuration for publication of messages to an Amazon Simple Notification Service (Amazon SNS) topic when Amazon S3 detects specified events. This data type is deprecated. Use <a href="https://docs.aws.amazon.com/AmazonS3/latest/API/API_TopicConfiguration.html">TopicConfiguration</a> instead.
    """

    Id: Optional[NotificationId] = None
    Events: Optional[EventList] = None
    Event: Optional[Event] = None
    Topic: Optional[TopicArn] = None


class QueueConfigurationDeprecated(BaseModel):
    """
    This data type is deprecated. Use <a href="https://docs.aws.amazon.com/AmazonS3/latest/API/API_QueueConfiguration.html">QueueConfiguration</a> for the same purposes. This data type specifies the configuration for publishing messages to an Amazon Simple Queue Service (Amazon SQS) queue when Amazon S3 detects specified events.
    """

    Id: Optional[NotificationId] = None
    Event: Optional[Event] = None
    Events: Optional[EventList] = None
    Queue: Optional[QueueArn] = None


class CloudFunctionConfiguration(BaseModel):
    """
    Container for specifying the Lambda notification configuration.
    """

    Id: Optional[NotificationId] = None
    Event: Optional[Event] = None
    Events: Optional[EventList] = None
    CloudFunction: Optional[CloudFunction] = None
    InvocationRole: Optional[CloudFunctionInvocationRole] = None


class OwnershipControlsRules(BaseModel):
    __root__: List[OwnershipControlsRule]


class ErrorDocument(BaseModel):
    """
    The error information.
    """

    Key: ObjectKey


class IndexDocument(BaseModel):
    """
    Container for the <code>Suffix</code> element.
    """

    Suffix: Suffix


class RedirectAllRequestsTo(BaseModel):
    """
    Specifies the redirect behavior of all requests to a website endpoint of an Amazon S3 bucket.
    """

    HostName: HostName
    Protocol: Optional[Protocol] = None


class RoutingRules(BaseModel):
    __root__: List[RoutingRule]


class ObjectLockRule(BaseModel):
    """
    The container element for an Object Lock rule.
    """

    DefaultRetention: Optional[DefaultRetention] = None


class GlacierJobParameters(BaseModel):
    """
    Container for S3 Glacier job parameters.
    """

    Tier: Tier


class CSVInput(BaseModel):
    """
    Describes how an uncompressed comma-separated values (CSV)-formatted input object is formatted.
    """

    FileHeaderInfo: Optional[FileHeaderInfo] = None
    Comments: Optional[Comments] = None
    QuoteEscapeCharacter: Optional[QuoteEscapeCharacter] = None
    RecordDelimiter: Optional[RecordDelimiter] = None
    FieldDelimiter: Optional[FieldDelimiter] = None
    QuoteCharacter: Optional[QuoteCharacter] = None
    AllowQuotedRecordDelimiter: Optional[AllowQuotedRecordDelimiter] = None


class JSONInput(BaseModel):
    """
    Specifies JSON as object's input serialization format.
    """

    Type: Optional[JSONType] = None


class CSVOutput(BaseModel):
    """
    Describes how uncompressed comma-separated values (CSV)-formatted results are formatted.
    """

    QuoteFields: Optional[QuoteFields] = None
    QuoteEscapeCharacter: Optional[QuoteEscapeCharacter] = None
    RecordDelimiter: Optional[RecordDelimiter] = None
    FieldDelimiter: Optional[FieldDelimiter] = None
    QuoteCharacter: Optional[QuoteCharacter] = None


class JSONOutput(BaseModel):
    """
    Specifies JSON as request's output serialization format.
    """

    RecordDelimiter: Optional[RecordDelimiter] = None


class UploadPartCopyOutput(BaseModel):
    CopyPartResult: Optional[CopyPartResult] = None


class AnalyticsS3BucketDestination(BaseModel):
    """
    Contains information about where to publish the analytics results.
    """

    Format: AnalyticsS3ExportFileFormat
    BucketAccountId: Optional[AccountId] = None
    Bucket: BucketName
    Prefix: Optional[Prefix] = None


class AnalyticsExportDestination(BaseModel):
    """
    Where to publish the analytics results.
    """

    S3BucketDestination: AnalyticsS3BucketDestination


class Tag(BaseModel):
    """
    A container of a key value name pair.
    """

    Key: ObjectKey
    Value: Value


class ExposeHeaders(BaseModel):
    __root__: List[ExposeHeader]


class CORSRule(BaseModel):
    """
    Specifies a cross-origin access rule for an Amazon S3 bucket.
    """

    ID: Optional[ID] = None
    AllowedHeaders: Optional[AllowedHeaders] = None
    AllowedMethods: AllowedMethods
    AllowedOrigins: AllowedOrigins
    ExposeHeaders: Optional[ExposeHeaders] = None
    MaxAgeSeconds: Optional[MaxAgeSeconds] = None


class CompletedMultipartUpload(BaseModel):
    """
    The container for the completed multipart upload details.
    """

    Parts: Optional[CompletedPartList] = None


class CompleteMultipartUploadRequest(BaseModel):
    MultipartUpload: Optional[CompletedMultipartUpload] = None


class CopyObjectResult(CopyPartResult):
    """
    Container for all response elements.
    """

    pass


class Delete(BaseModel):
    """
    Container for the objects to delete.
    """

    Objects: ObjectIdentifierList
    Quiet: Optional[Quiet] = None


class DeleteMarkerEntry(BaseModel):
    """
    Information about the delete marker.
    """

    Owner: Optional[Owner] = None
    Key: Optional[ObjectKey] = None
    VersionId: Optional[ObjectVersionId] = None
    IsLatest: Optional[IsLatest] = None
    LastModified: Optional[LastModified] = None


class DeleteMarkers(BaseModel):
    __root__: List[DeleteMarkerEntry]


class DeletedObjects(BaseModel):
    __root__: List[DeletedObject]


class Errors(BaseModel):
    __root__: List[Error]


class DeleteObjectsRequest(BaseModel):
    Delete: Delete


class EncryptionConfiguration(BaseModel):
    """
    Specifies encryption-related information for an Amazon S3 bucket that is a destination for replicated objects.
    """

    ReplicaKmsKeyID: Optional[ReplicaKmsKeyID] = None


class ServerSideEncryptionConfiguration(BaseModel):
    """
    Specifies the default server-side-encryption configuration.
    """

    Rules: ServerSideEncryptionRules


class OwnershipControls(BaseModel):
    """
    The container element for a bucket's ownership controls.
    """

    Rules: OwnershipControlsRules


class PolicyStatus(BaseModel):
    """
    The container element for a bucket's policy status.
    """

    IsPublic: Optional[IsPublic] = None


class ObjectLockConfiguration(BaseModel):
    """
    The container element for Object Lock configuration parameters.
    """

    ObjectLockEnabled: Optional[ObjectLockEnabled] = None
    Rule: Optional[ObjectLockRule] = None


class Grantee(BaseModel):
    """
    Container for the person being granted permissions.
    """

    DisplayName: Optional[DisplayName] = None
    EmailAddress: Optional[EmailAddress] = None
    ID: Optional[ID] = None
    Type: Type
    URI: Optional[URI] = None


class Grant(BaseModel):
    """
    Container for grant information.
    """

    Grantee: Optional[Grantee] = None
    Permission: Optional[Permission] = None


class InputSerialization(BaseModel):
    """
    Describes the serialization format of the object.
    """

    CSV: Optional[CSVInput] = None
    CompressionType: Optional[CompressionType] = None
    JSON: Optional[JSONInput] = None
    Parquet: Optional[ParquetInput] = None


class InventoryS3BucketDestination(BaseModel):
    """
    Contains the bucket name, file format, bucket owner (optional), and prefix (optional) where inventory results are published.
    """

    AccountId: Optional[AccountId] = None
    Bucket: BucketName
    Format: InventoryFormat
    Prefix: Optional[Prefix] = None
    Encryption: Optional[InventoryEncryption] = None


class NotificationConfigurationFilter(BaseModel):
    """
    Specifies object key name filtering rules. For information about key name filtering, see <a href="https://docs.aws.amazon.com/AmazonS3/latest/dev/NotificationHowTo.html">Configuring Event Notifications</a> in the <i>Amazon S3 User Guide</i>.
    """

    Key: Optional[S3KeyFilter] = None


class LambdaFunctionConfiguration(BaseModel):
    """
    A container for specifying the configuration for Lambda notifications.
    """

    Id: Optional[NotificationId] = None
    LambdaFunctionArn: LambdaFunctionArn
    Events: EventList
    Filter: Optional[NotificationConfigurationFilter] = None


class LifecycleConfiguration(BaseModel):
    """
    Container for lifecycle rules. You can add as many as 1000 rules.
    """

    Rules: Rules


class TransitionList(BaseModel):
    __root__: List[Transition]


class NoncurrentVersionTransitionList(BaseModel):
    __root__: List[NoncurrentVersionTransition]


class Parts(BaseModel):
    __root__: List[Part]


class ReplicationTimeValue(BaseModel):
    """
    A container specifying the time value for S3 Replication Time Control (S3 RTC) and replication metrics <code>EventThreshold</code>.
    """

    Minutes: Optional[Minutes] = None


class MultipartUpload(BaseModel):
    """
    Container for the <code>MultipartUpload</code> for the Amazon S3 object.
    """

    UploadId: Optional[MultipartUploadId] = None
    Key: Optional[ObjectKey] = None
    Initiated: Optional[Initiated] = None
    StorageClass: Optional[StorageClass] = None
    Owner: Optional[Owner] = None
    Initiator: Optional[Initiator] = None


class Object(BaseModel):
    """
    An object consists of data and its descriptive metadata.
    """

    Key: Optional[ObjectKey] = None
    LastModified: Optional[LastModified] = None
    ETag: Optional[ETag] = None
    Size: Optional[Size] = None
    StorageClass: Optional[ObjectStorageClass] = None
    Owner: Optional[Owner] = None


class ObjectVersion(BaseModel):
    """
    The version of an object.
    """

    ETag: Optional[ETag] = None
    Size: Optional[Size] = None
    StorageClass: Optional[ObjectVersionStorageClass] = None
    Key: Optional[ObjectKey] = None
    VersionId: Optional[ObjectVersionId] = None
    IsLatest: Optional[IsLatest] = None
    LastModified: Optional[LastModified] = None
    Owner: Optional[Owner] = None


class OutputSerialization(BaseModel):
    """
    Describes how results of the Select job are serialized.
    """

    CSV: Optional[CSVOutput] = None
    JSON: Optional[JSONOutput] = None


class PutBucketEncryptionRequest(BaseModel):
    ServerSideEncryptionConfiguration: ServerSideEncryptionConfiguration


class PutBucketLifecycleRequest(BaseModel):
    LifecycleConfiguration: Optional[LifecycleConfiguration] = None


class PutBucketOwnershipControlsRequest(BaseModel):
    OwnershipControls: OwnershipControls


class WebsiteConfiguration(BaseModel):
    """
    Specifies website configuration parameters for an Amazon S3 bucket.
    """

    ErrorDocument: Optional[ErrorDocument] = None
    IndexDocument: Optional[IndexDocument] = None
    RedirectAllRequestsTo: Optional[RedirectAllRequestsTo] = None
    RoutingRules: Optional[RoutingRules] = None


class PutBucketWebsiteRequest(BaseModel):
    WebsiteConfiguration: WebsiteConfiguration


class PutObjectLockConfigurationRequest(BaseModel):
    ObjectLockConfiguration: Optional[ObjectLockConfiguration] = None


class QueueConfiguration(BaseModel):
    """
    Specifies the configuration for publishing messages to an Amazon Simple Queue Service (Amazon SQS) queue when Amazon S3 detects specified events.
    """

    Id: Optional[NotificationId] = None
    QueueArn: QueueArn
    Events: EventList
    Filter: Optional[NotificationConfigurationFilter] = None


class StatsEvent(BaseModel):
    """
    Container for the Stats Event.
    """

    Details: Optional[Stats] = None


class SelectObjectContentEventStream(BaseModel):
    """
    The container for selecting objects from a content event stream.
    """

    Records: Optional[RecordsEvent] = None
    Stats: Optional[StatsEvent] = None
    Progress: Optional[ProgressEvent] = None
    Cont: Optional[ContinuationEvent] = None
    End: Optional[EndEvent] = None


class SelectObjectContentRequest(BaseModel):
    """
    Request to filter the contents of an Amazon S3 object based on a simple Structured Query Language (SQL) statement. In the request, along with the SQL expression, you must specify a data serialization format (JSON or CSV) of the object. Amazon S3 uses this to parse object data into records. It returns only records that match the specified SQL expression. You must also specify the data serialization format for the response. For more information, see <a href="https://docs.aws.amazon.com/AmazonS3/latest/API/RESTObjectSELECTContent.html">S3Select API Documentation</a>.
    """

    Expression: Expression
    ExpressionType: ExpressionType
    RequestProgress: Optional[RequestProgress] = None
    InputSerialization: InputSerialization
    OutputSerialization: OutputSerialization
    ScanRange: Optional[ScanRange] = None


class SseKmsEncryptedObjects(ExistingObjectReplication):
    """
    A container for filter information for the selection of S3 objects encrypted with Amazon Web Services KMS.
    """

    pass


class StorageClassAnalysisDataExport(BaseModel):
    """
    Container for data related to the storage class analysis for an Amazon S3 bucket for export.
    """

    OutputSchemaVersion: StorageClassAnalysisSchemaVersion
    Destination: AnalyticsExportDestination


class TargetGrant(BaseModel):
    """
    Container for granting information.
    """

    Grantee: Optional[Grantee] = None
    Permission: Optional[BucketLogsPermission] = None


class TopicConfiguration(BaseModel):
    """
    A container for specifying the configuration for publication of messages to an Amazon Simple Notification Service (Amazon SNS) topic when Amazon S3 detects specified events.
    """

    Id: Optional[NotificationId] = None
    TopicArn: TopicArn
    Events: EventList
    Filter: Optional[NotificationConfigurationFilter] = None


class CopyObjectOutput(BaseModel):
    CopyObjectResult: Optional[CopyObjectResult] = None


class DeleteObjectsOutput(BaseModel):
    Deleted: Optional[DeletedObjects] = None
    Errors: Optional[Errors] = None


class GetBucketEncryptionOutput(BaseModel):
    ServerSideEncryptionConfiguration: Optional[
        ServerSideEncryptionConfiguration
    ] = None


class GetBucketLifecycleOutput(BaseModel):
    Rules: Optional[Rules] = None


class NotificationConfigurationDeprecated(BaseModel):
    TopicConfiguration: Optional[TopicConfigurationDeprecated] = None
    QueueConfiguration: Optional[QueueConfigurationDeprecated] = None
    CloudFunctionConfiguration: Optional[CloudFunctionConfiguration] = None


class GetBucketOwnershipControlsOutput(BaseModel):
    OwnershipControls: Optional[OwnershipControls] = None


class GetBucketPolicyStatusOutput(BaseModel):
    PolicyStatus: Optional[PolicyStatus] = None


class GetBucketWebsiteOutput(BaseModel):
    RedirectAllRequestsTo: Optional[RedirectAllRequestsTo] = None
    IndexDocument: Optional[IndexDocument] = None
    ErrorDocument: Optional[ErrorDocument] = None
    RoutingRules: Optional[RoutingRules] = None


class GetObjectLockConfigurationOutput(BaseModel):
    ObjectLockConfiguration: Optional[ObjectLockConfiguration] = None


class ListBucketsOutput(BaseModel):
    Buckets: Optional[Buckets] = None
    Owner: Optional[Owner] = None


class ListPartsOutput(BaseModel):
    Bucket: Optional[BucketName] = None
    Key: Optional[ObjectKey] = None
    UploadId: Optional[MultipartUploadId] = None
    PartNumberMarker: Optional[PartNumberMarker] = None
    NextPartNumberMarker: Optional[NextPartNumberMarker] = None
    MaxParts: Optional[MaxParts] = None
    IsTruncated: Optional[IsTruncated] = None
    Parts: Optional[Parts] = None
    Initiator: Optional[Initiator] = None
    Owner: Optional[Owner] = None
    StorageClass: Optional[StorageClass] = None


class Grants(BaseModel):
    __root__: List[Grant]


class StorageClassAnalysis(BaseModel):
    """
    Specifies data related to access patterns to be collected and made available to analyze the tradeoffs between different storage classes for an Amazon S3 bucket.
    """

    DataExport: Optional[StorageClassAnalysisDataExport] = None


class CORSRules(BaseModel):
    __root__: List[CORSRule]


class InventoryDestination(BaseModel):
    """
    Specifies the inventory configuration for an Amazon S3 bucket.
    """

    S3BucketDestination: InventoryS3BucketDestination


class TopicConfigurationList(BaseModel):
    __root__: List[TopicConfiguration]


class QueueConfigurationList(BaseModel):
    __root__: List[QueueConfiguration]


class LambdaFunctionConfigurationList(BaseModel):
    __root__: List[LambdaFunctionConfiguration]


class TagSet(BaseModel):
    __root__: List[Tag]


class SelectParameters(BaseModel):
    """
    Describes the parameters for Select job types.
    """

    InputSerialization: InputSerialization
    ExpressionType: ExpressionType
    Expression: Expression
    OutputSerialization: OutputSerialization


class SelectObjectContentOutput(BaseModel):
    Payload: Optional[SelectObjectContentEventStream] = None


class AccessControlPolicy(BaseModel):
    """
    Contains the elements that set the ACL permissions for an object per grantee.
    """

    Grants: Optional[Grants] = None
    Owner: Optional[Owner] = None


class AnalyticsAndOperator(BaseModel):
    """
    A conjunction (logical AND) of predicates, which is used in evaluating a metrics filter. The operator must have at least two predicates in any combination, and an object must match all of the predicates for the filter to apply.
    """

    Prefix: Optional[Prefix] = None
    Tags: Optional[TagSet] = None


class CORSConfiguration(BaseModel):
    """
    Describes the cross-origin access configuration for objects in an Amazon S3 bucket. For more information, see <a href="https://docs.aws.amazon.com/AmazonS3/latest/dev/cors.html">Enabling Cross-Origin Resource Sharing</a> in the <i>Amazon S3 User Guide</i>.
    """

    CORSRules: CORSRules


class ReplicationTime(BaseModel):
    """
    A container specifying S3 Replication Time Control (S3 RTC) related information, including whether S3 RTC is enabled and the time when all objects and operations on objects must be replicated. Must be specified together with a <code>Metrics</code> block.
    """

    Status: IntelligentTieringStatus
    Time: ReplicationTimeValue


class Metrics(BaseModel):
    """
    A container specifying replication metrics-related settings enabling replication metrics and events.
    """

    Status: IntelligentTieringStatus
    EventThreshold: Optional[ReplicationTimeValue] = None


class Destination(BaseModel):
    """
    Specifies information about where to publish analysis or configuration results for an Amazon S3 bucket and S3 Replication Time Control (S3 RTC).
    """

    Bucket: BucketName
    Account: Optional[AccountId] = None
    StorageClass: Optional[StorageClass] = None
    AccessControlTranslation: Optional[AccessControlTranslation] = None
    EncryptionConfiguration: Optional[EncryptionConfiguration] = None
    ReplicationTime: Optional[ReplicationTime] = None
    Metrics: Optional[Metrics] = None


class InventoryConfiguration(BaseModel):
    """
    Specifies the inventory configuration for an Amazon S3 bucket. For more information, see <a href="https://docs.aws.amazon.com/AmazonS3/latest/API/RESTBucketGETInventoryConfig.html">GET Bucket inventory</a> in the <i>Amazon S3 API Reference</i>.
    """

    Destination: InventoryDestination
    IsEnabled: IsEnabled
    Filter: Optional[InventoryFilter] = None
    Id: InventoryId
    IncludedObjectVersions: InventoryIncludedObjectVersions
    OptionalFields: Optional[InventoryOptionalFields] = None
    Schedule: InventorySchedule


class IntelligentTieringAndOperator(AnalyticsAndOperator):
    """
    A container for specifying S3 Intelligent-Tiering filters. The filters determine the subset of objects to which the rule applies.
    """

    pass


class InventoryConfigurationList(BaseModel):
    __root__: List[InventoryConfiguration]


class LifecycleRuleAndOperator(AnalyticsAndOperator):
    """
    This is used in a Lifecycle Rule Filter to apply a logical AND to two or more predicates. The Lifecycle Rule will apply to any object matching all of the predicates configured inside the And operator.
    """

    pass


class MultipartUploadList(BaseModel):
    __root__: List[MultipartUpload]


class ObjectVersionList(BaseModel):
    __root__: List[ObjectVersion]


class ObjectList(BaseModel):
    __root__: List[Object]


class TargetGrants(BaseModel):
    __root__: List[TargetGrant]


class MetricsAndOperator(BaseModel):
    """
    A conjunction (logical AND) of predicates, which is used in evaluating a metrics filter. The operator must have at least two predicates, and an object must match all of the predicates in order for the filter to apply.
    """

    Prefix: Optional[Prefix] = None
    Tags: Optional[TagSet] = None
    AccessPointArn: Optional[AccessPointArn] = None


class PutBucketAclRequest(BaseModel):
    AccessControlPolicy: Optional[AccessControlPolicy] = None


class PutBucketCorsRequest(BaseModel):
    CORSConfiguration: CORSConfiguration


class PutBucketInventoryConfigurationRequest(BaseModel):
    InventoryConfiguration: InventoryConfiguration


class PutBucketNotificationRequest(BaseModel):
    NotificationConfiguration: NotificationConfigurationDeprecated


class Tagging(BaseModel):
    """
    Container for <code>TagSet</code> elements.
    """

    TagSet: TagSet


class PutBucketTaggingRequest(BaseModel):
    Tagging: Tagging


class PutObjectAclRequest(BaseModel):
    AccessControlPolicy: Optional[AccessControlPolicy] = None


class PutObjectTaggingRequest(BaseModel):
    Tagging: Tagging


class SourceSelectionCriteria(BaseModel):
    """
    A container that describes additional filters for identifying the source objects that you want to replicate. You can choose to enable or disable the replication of these objects. Currently, Amazon S3 supports only the filter that you can specify for objects created with server-side encryption using a customer managed key stored in Amazon Web Services Key Management Service (SSE-KMS).
    """

    SseKmsEncryptedObjects: Optional[SseKmsEncryptedObjects] = None
    ReplicaModifications: Optional[ReplicaModifications] = None


class ReplicationRuleAndOperator(AnalyticsAndOperator):
    """
    <p>A container for specifying rule filters. The filters determine the subset of objects to which the rule applies. This element is required only if you specify more than one filter. </p> <p>For example:</p> <ul> <li> <p>If you specify both a <code>Prefix</code> and a <code>Tag</code> filter, wrap these filters in an <code>And</code> tag. </p> </li> <li> <p>If you specify a filter based on multiple tags, wrap the <code>Tag</code> elements in an <code>And</code> tag.</p> </li> </ul>
    """

    pass


class GetBucketAclOutput(BaseModel):
    Owner: Optional[Owner] = None
    Grants: Optional[Grants] = None


class GetBucketCorsOutput(BaseModel):
    CORSRules: Optional[CORSRules] = None


class GetBucketInventoryConfigurationOutput(BaseModel):
    InventoryConfiguration: Optional[InventoryConfiguration] = None


class NotificationConfiguration(BaseModel):
    """
    A container for specifying the notification configuration of the bucket. If this element is empty, notifications are turned off for the bucket.
    """

    TopicConfigurations: Optional[TopicConfigurationList] = None
    QueueConfigurations: Optional[QueueConfigurationList] = None
    LambdaFunctionConfigurations: Optional[LambdaFunctionConfigurationList] = None


class GetBucketTaggingOutput(Tagging):
    pass


class GetObjectAclOutput(GetBucketAclOutput):
    pass


class GetObjectTaggingOutput(Tagging):
    pass


class ListBucketInventoryConfigurationsOutput(BaseModel):
    ContinuationToken: Optional[Token] = None
    InventoryConfigurationList: Optional[InventoryConfigurationList] = None
    IsTruncated: Optional[IsTruncated] = None
    NextContinuationToken: Optional[NextToken] = None


class ListMultipartUploadsOutput(BaseModel):
    Bucket: Optional[BucketName] = None
    KeyMarker: Optional[KeyMarker] = None
    UploadIdMarker: Optional[UploadIdMarker] = None
    NextKeyMarker: Optional[NextKeyMarker] = None
    Prefix: Optional[Prefix] = None
    Delimiter: Optional[Delimiter] = None
    NextUploadIdMarker: Optional[NextUploadIdMarker] = None
    MaxUploads: Optional[MaxUploads] = None
    IsTruncated: Optional[IsTruncated] = None
    Uploads: Optional[MultipartUploadList] = None
    CommonPrefixes: Optional[CommonPrefixList] = None
    EncodingType: Optional[EncodingType] = None


class ListObjectVersionsOutput(BaseModel):
    IsTruncated: Optional[IsTruncated] = None
    KeyMarker: Optional[KeyMarker] = None
    VersionIdMarker: Optional[VersionIdMarker] = None
    NextKeyMarker: Optional[NextKeyMarker] = None
    NextVersionIdMarker: Optional[NextVersionIdMarker] = None
    Versions: Optional[ObjectVersionList] = None
    DeleteMarkers: Optional[DeleteMarkers] = None
    Name: Optional[BucketName] = None
    Prefix: Optional[Prefix] = None
    Delimiter: Optional[Delimiter] = None
    MaxKeys: Optional[MaxKeys] = None
    CommonPrefixes: Optional[CommonPrefixList] = None
    EncodingType: Optional[EncodingType] = None


class ListObjectsOutput(BaseModel):
    IsTruncated: Optional[IsTruncated] = None
    Marker: Optional[Marker] = None
    NextMarker: Optional[NextMarker] = None
    Contents: Optional[ObjectList] = None
    Name: Optional[BucketName] = None
    Prefix: Optional[Prefix] = None
    Delimiter: Optional[Delimiter] = None
    MaxKeys: Optional[MaxKeys] = None
    CommonPrefixes: Optional[CommonPrefixList] = None
    EncodingType: Optional[EncodingType] = None


class ListObjectsV2Output(BaseModel):
    IsTruncated: Optional[IsTruncated] = None
    Contents: Optional[ObjectList] = None
    Name: Optional[BucketName] = None
    Prefix: Optional[Prefix] = None
    Delimiter: Optional[Delimiter] = None
    MaxKeys: Optional[MaxKeys] = None
    CommonPrefixes: Optional[CommonPrefixList] = None
    EncodingType: Optional[EncodingType] = None
    KeyCount: Optional[KeyCount] = None
    ContinuationToken: Optional[Token] = None
    NextContinuationToken: Optional[NextToken] = None
    StartAfter: Optional[StartAfter] = None


class AnalyticsFilter(BaseModel):
    """
    The filter used to describe a set of objects for analyses. A filter must have exactly one prefix, one tag, or one conjunction (AnalyticsAndOperator). If no filter is provided, all objects will be considered in any analysis.
    """

    Prefix: Optional[Prefix] = None
    Tag: Optional[Tag] = None
    And: Optional[AnalyticsAndOperator] = None


class IntelligentTieringFilter(BaseModel):
    """
    The <code>Filter</code> is used to identify objects that the S3 Intelligent-Tiering configuration applies to.
    """

    Prefix: Optional[Prefix] = None
    Tag: Optional[Tag] = None
    And: Optional[IntelligentTieringAndOperator] = None


class LoggingEnabled(BaseModel):
    """
    Describes where logs are stored and the prefix that Amazon S3 assigns to all log object keys for a bucket. For more information, see <a href="https://docs.aws.amazon.com/AmazonS3/latest/API/RESTBucketPUTlogging.html">PUT Bucket logging</a> in the <i>Amazon S3 API Reference</i>.
    """

    TargetBucket: TargetBucket
    TargetGrants: Optional[TargetGrants] = None
    TargetPrefix: TargetPrefix


class MetricsFilter(BaseModel):
    """
    Specifies a metrics configuration filter. The metrics configuration only includes objects that meet the filter's criteria. A filter must be a prefix, an object tag, an access point ARN, or a conjunction (MetricsAndOperator). For more information, see <a href="https://docs.aws.amazon.com/AmazonS3/latest/API/API_PutBucketMetricsConfiguration.html">PutBucketMetricsConfiguration</a>.
    """

    Prefix: Optional[Prefix] = None
    Tag: Optional[Tag] = None
    AccessPointArn: Optional[AccessPointArn] = None
    And: Optional[MetricsAndOperator] = None


class AnalyticsConfiguration(BaseModel):
    """
    Specifies the configuration and any analyses for the analytics filter of an Amazon S3 bucket.
    """

    Id: AnalyticsId
    Filter: Optional[AnalyticsFilter] = None
    StorageClassAnalysis: StorageClassAnalysis


class AnalyticsConfigurationList(BaseModel):
    __root__: List[AnalyticsConfiguration]


class BucketLoggingStatus(BaseModel):
    """
    Container for logging status information.
    """

    LoggingEnabled: Optional[LoggingEnabled] = None


class IntelligentTieringConfiguration(BaseModel):
    """
    <p>Specifies the S3 Intelligent-Tiering configuration for an Amazon S3 bucket.</p> <p>For information about the S3 Intelligent-Tiering storage class, see <a href="https://docs.aws.amazon.com/AmazonS3/latest/dev/storage-class-intro.html#sc-dynamic-data-access">Storage class for automatically optimizing frequently and infrequently accessed objects</a>.</p>
    """

    Id: IntelligentTieringId
    Filter: Optional[IntelligentTieringFilter] = None
    Status: IntelligentTieringStatus
    Tierings: TieringList


class MetricsConfiguration(BaseModel):
    """
    Specifies a metrics configuration for the CloudWatch request metrics (specified by the metrics configuration ID) from an Amazon S3 bucket. If you're updating an existing metrics configuration, note that this is a full replacement of the existing metrics configuration. If you don't include the elements you want to keep, they are erased. For more information, see <a href="https://docs.aws.amazon.com/AmazonS3/latest/API/RESTBucketPUTMetricConfiguration.html">PutBucketMetricsConfiguration</a>.
    """

    Id: MetricsId
    Filter: Optional[MetricsFilter] = None


class IntelligentTieringConfigurationList(BaseModel):
    __root__: List[IntelligentTieringConfiguration]


class LifecycleRuleFilter(BaseModel):
    """
    The <code>Filter</code> is used to identify objects that a Lifecycle Rule applies to. A <code>Filter</code> must have exactly one of <code>Prefix</code>, <code>Tag</code>, or <code>And</code> specified.
    """

    Prefix: Optional[Prefix] = None
    Tag: Optional[Tag] = None
    And: Optional[LifecycleRuleAndOperator] = None


class LifecycleRule(BaseModel):
    """
    A lifecycle rule for individual objects in an Amazon S3 bucket.
    """

    Expiration: Optional[LifecycleExpiration] = None
    ID: Optional[ID] = None
    Prefix: Optional[Prefix] = None
    Filter: Optional[LifecycleRuleFilter] = None
    Status: IntelligentTieringStatus
    Transitions: Optional[TransitionList] = None
    NoncurrentVersionTransitions: Optional[NoncurrentVersionTransitionList] = None
    NoncurrentVersionExpiration: Optional[NoncurrentVersionExpiration] = None
    AbortIncompleteMultipartUpload: Optional[AbortIncompleteMultipartUpload] = None


class MetricsConfigurationList(BaseModel):
    __root__: List[MetricsConfiguration]


class S3Location(BaseModel):
    """
    Describes an Amazon S3 location that will receive the results of the restore request.
    """

    BucketName: BucketName
    Prefix: LocationPrefix
    Encryption: Optional[Encryption] = None
    CannedACL: Optional[ObjectCannedACL] = None
    AccessControlList: Optional[Grants] = None
    Tagging: Optional[Tagging] = None
    UserMetadata: Optional[UserMetadata] = None
    StorageClass: Optional[StorageClass] = None


class PutBucketAnalyticsConfigurationRequest(BaseModel):
    AnalyticsConfiguration: AnalyticsConfiguration


class PutBucketIntelligentTieringConfigurationRequest(BaseModel):
    IntelligentTieringConfiguration: IntelligentTieringConfiguration


class PutBucketLoggingRequest(BaseModel):
    BucketLoggingStatus: BucketLoggingStatus


class PutBucketMetricsConfigurationRequest(BaseModel):
    MetricsConfiguration: MetricsConfiguration


class PutBucketNotificationConfigurationRequest(BaseModel):
    NotificationConfiguration: NotificationConfiguration


class ReplicationRuleFilter(BaseModel):
    """
    A filter that identifies the subset of objects to which the replication rule applies. A <code>Filter</code> must specify exactly one <code>Prefix</code>, <code>Tag</code>, or an <code>And</code> child element.
    """

    Prefix: Optional[Prefix] = None
    Tag: Optional[Tag] = None
    And: Optional[ReplicationRuleAndOperator] = None


class ReplicationRule(BaseModel):
    """
    Specifies which Amazon S3 objects to replicate and where to store the replicas.
    """

    ID: Optional[ID] = None
    Priority: Optional[Priority] = None
    Prefix: Optional[Prefix] = None
    Filter: Optional[ReplicationRuleFilter] = None
    Status: IntelligentTieringStatus
    SourceSelectionCriteria: Optional[SourceSelectionCriteria] = None
    ExistingObjectReplication: Optional[ExistingObjectReplication] = None
    Destination: Destination
    DeleteMarkerReplication: Optional[DeleteMarkerReplication] = None


class GetBucketAnalyticsConfigurationOutput(BaseModel):
    AnalyticsConfiguration: Optional[AnalyticsConfiguration] = None


class GetBucketIntelligentTieringConfigurationOutput(BaseModel):
    IntelligentTieringConfiguration: Optional[IntelligentTieringConfiguration] = None


class GetBucketLoggingOutput(BucketLoggingStatus):
    pass


class GetBucketMetricsConfigurationOutput(BaseModel):
    MetricsConfiguration: Optional[MetricsConfiguration] = None


class ListBucketAnalyticsConfigurationsOutput(BaseModel):
    IsTruncated: Optional[IsTruncated] = None
    ContinuationToken: Optional[Token] = None
    NextContinuationToken: Optional[NextToken] = None
    AnalyticsConfigurationList: Optional[AnalyticsConfigurationList] = None


class ListBucketIntelligentTieringConfigurationsOutput(BaseModel):
    IsTruncated: Optional[IsTruncated] = None
    ContinuationToken: Optional[Token] = None
    NextContinuationToken: Optional[NextToken] = None
    IntelligentTieringConfigurationList: Optional[
        IntelligentTieringConfigurationList
    ] = None


class ListBucketMetricsConfigurationsOutput(BaseModel):
    IsTruncated: Optional[IsTruncated] = None
    ContinuationToken: Optional[Token] = None
    NextContinuationToken: Optional[NextToken] = None
    MetricsConfigurationList: Optional[MetricsConfigurationList] = None


class LifecycleRules(BaseModel):
    __root__: List[LifecycleRule]


class ReplicationRules(BaseModel):
    __root__: List[ReplicationRule]


class OutputLocation(BaseModel):
    """
    Describes the location where the restore job's output is stored.
    """

    S3: Optional[S3Location] = None


class BucketLifecycleConfiguration(BaseModel):
    """
    Specifies the lifecycle configuration for objects in an Amazon S3 bucket. For more information, see <a href="https://docs.aws.amazon.com/AmazonS3/latest/dev/object-lifecycle-mgmt.html">Object Lifecycle Management</a> in the <i>Amazon S3 User Guide</i>.
    """

    Rules: LifecycleRules


class ReplicationConfiguration(BaseModel):
    """
    A container for replication rules. You can add up to 1,000 rules. The maximum size of a replication configuration is 2 MB.
    """

    Role: Role
    Rules: ReplicationRules


class PutBucketLifecycleConfigurationRequest(BaseModel):
    LifecycleConfiguration: Optional[BucketLifecycleConfiguration] = None


class PutBucketReplicationRequest(BaseModel):
    ReplicationConfiguration: ReplicationConfiguration


class RestoreRequest(BaseModel):
    """
    Container for restore job parameters.
    """

    Days: Optional[Days] = None
    GlacierJobParameters: Optional[GlacierJobParameters] = None
    Type: Optional[RestoreRequestType] = None
    Tier: Optional[Tier] = None
    Description: Optional[Description] = None
    SelectParameters: Optional[SelectParameters] = None
    OutputLocation: Optional[OutputLocation] = None


class RestoreObjectRequest(BaseModel):
    RestoreRequest: Optional[RestoreRequest] = None


class GetBucketLifecycleConfigurationOutput(BaseModel):
    Rules: Optional[LifecycleRules] = None


class GetBucketReplicationOutput(BaseModel):
    ReplicationConfiguration: Optional[ReplicationConfiguration] = None
