# generated by datamodel-codegen:
#   filename:  openapi.yaml
#   timestamp: 2021-12-31T02:57:28+00:00

from __future__ import annotations

from datetime import datetime
from enum import Enum
from typing import Annotated, Any, List, Optional

from pydantic import BaseModel, Field


class InternalServerException(BaseModel):
    __root__: Any


class ValidationException(InternalServerException):
    pass


class AccessDeniedException(InternalServerException):
    pass


class ResourceNotFoundException(InternalServerException):
    pass


class ConflictException(InternalServerException):
    pass


class CidrBlock(BaseModel):
    __root__: str


class OutpostId(BaseModel):
    __root__: Annotated[str, Field(regex='^(op-[a-f0-9]{17}|\\d{12}|ec2)$')]


class SubnetId(BaseModel):
    __root__: Annotated[str, Field(regex='^subnet-([0-9a-f]{8}|[0-9a-f]{17})$')]


class SecurityGroupId(BaseModel):
    __root__: Annotated[str, Field(regex='^sg-([0-9a-f]{8}|[0-9a-f]{17})$')]


class EndpointAccessType(Enum):
    Private = 'Private'
    CustomerOwnedIp = 'CustomerOwnedIp'


class CustomerOwnedIpv4Pool(BaseModel):
    __root__: Annotated[str, Field(regex='^ipv4pool-coip-([0-9a-f]{17})$')]


class CreateEndpointRequest(BaseModel):
    OutpostId: OutpostId
    SubnetId: SubnetId
    SecurityGroupId: SecurityGroupId
    AccessType: Optional[EndpointAccessType] = None
    CustomerOwnedIpv4Pool: Optional[CustomerOwnedIpv4Pool] = None


class EndpointArn(BaseModel):
    __root__: Annotated[
        str,
        Field(
            regex='^arn:(aws|aws-cn|aws-us-gov|aws-iso|aws-iso-b):s3-outposts:[a-z\\-0-9]*:[0-9]{12}:outpost/(op-[a-f0-9]{17}|ec2)/endpoint/[a-zA-Z0-9]{19}$'
        ),
    ]


class CreationTime(BaseModel):
    __root__: datetime


class EndpointId(BaseModel):
    __root__: Annotated[str, Field(regex='^[a-zA-Z0-9]{19}$')]


class DeleteEndpointRequest(BaseModel):
    pass


class EndpointStatus(Enum):
    Pending = 'Pending'
    Available = 'Available'
    Deleting = 'Deleting'


class VpcId(CidrBlock):
    pass


class NextToken(BaseModel):
    __root__: Annotated[
        str,
        Field(
            max_length=1024, min_length=1, regex='^[A-Za-z0-9\\+\\:\\/\\=\\?\\#-_]+$'
        ),
    ]


class MaxResults(BaseModel):
    __root__: Annotated[int, Field(ge=0.0, le=100.0)]


class ListEndpointsRequest(BaseModel):
    pass


class NetworkInterfaceId(CidrBlock):
    pass


class NetworkInterface(BaseModel):
    """
    The container for the network interface.
    """

    NetworkInterfaceId: Optional[NetworkInterfaceId] = None


class CreateEndpointResult(BaseModel):
    EndpointArn: Optional[EndpointArn] = None


class NetworkInterfaces(BaseModel):
    __root__: List[NetworkInterface]


class Endpoint(BaseModel):
    """
    Amazon S3 on Outposts Access Points simplify managing data access at scale for shared datasets in S3 on Outposts. S3 on Outposts uses endpoints to connect to Outposts buckets so that you can perform actions within your virtual private cloud (VPC). For more information, see <a href="https://docs.aws.amazon.com/AmazonS3/latest/userguide/AccessingS3Outposts.html"> Accessing S3 on Outposts using VPC only access points</a>.
    """

    EndpointArn: Optional[EndpointArn] = None
    OutpostsId: Optional[OutpostId] = None
    CidrBlock: Optional[CidrBlock] = None
    Status: Optional[EndpointStatus] = None
    CreationTime: Optional[CreationTime] = None
    NetworkInterfaces: Optional[NetworkInterfaces] = None
    VpcId: Optional[VpcId] = None
    SubnetId: Optional[SubnetId] = None
    SecurityGroupId: Optional[SecurityGroupId] = None
    AccessType: Optional[EndpointAccessType] = None
    CustomerOwnedIpv4Pool: Optional[CustomerOwnedIpv4Pool] = None


class Endpoints(BaseModel):
    __root__: List[Endpoint]


class ListEndpointsResult(BaseModel):
    Endpoints: Optional[Endpoints] = None
    NextToken: Optional[NextToken] = None
