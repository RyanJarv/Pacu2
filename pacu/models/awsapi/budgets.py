# generated by datamodel-codegen:
#   filename:  openapi.yaml
#   timestamp: 2021-12-31T02:45:38+00:00

from __future__ import annotations

from datetime import datetime
from enum import Enum
from typing import Annotated, Any, List, Optional

from pydantic import BaseModel, Extra, Field, SecretStr


class CreateBudgetResponse(BaseModel):
    """
    Response of CreateBudget
    """

    pass


class InvalidParameterException(BaseModel):
    __root__: Any


class InternalErrorException(InvalidParameterException):
    pass


class CreationLimitExceededException(InvalidParameterException):
    pass


class DuplicateRecordException(InvalidParameterException):
    pass


class AccessDeniedException(InvalidParameterException):
    pass


class NotFoundException(InvalidParameterException):
    pass


class CreateNotificationResponse(CreateBudgetResponse):
    """
    Response of CreateNotification
    """

    pass


class CreateSubscriberResponse(CreateBudgetResponse):
    """
    Response of CreateSubscriber
    """

    pass


class DeleteBudgetResponse(CreateBudgetResponse):
    """
    Response of DeleteBudget
    """

    pass


class ResourceLockedException(InvalidParameterException):
    pass


class DeleteNotificationResponse(CreateBudgetResponse):
    """
    Response of DeleteNotification
    """

    pass


class DeleteSubscriberResponse(CreateBudgetResponse):
    """
    Response of DeleteSubscriber
    """

    pass


class InvalidNextTokenException(InvalidParameterException):
    pass


class ExpiredNextTokenException(InvalidParameterException):
    pass


class UpdateBudgetResponse(CreateBudgetResponse):
    """
    Response of UpdateBudget
    """

    pass


class UpdateNotificationResponse(CreateBudgetResponse):
    """
    Response of UpdateNotification
    """

    pass


class UpdateSubscriberResponse(CreateBudgetResponse):
    """
    Response of UpdateSubscriber
    """

    pass


class AccountId(BaseModel):
    __root__: Annotated[
        str,
        Field(
            description='The account ID of the user. It should be a 12-digit number.',
            max_length=12,
            min_length=12,
            regex='\\d{12}',
        ),
    ]


class ActionId(BaseModel):
    __root__: Annotated[
        str,
        Field(
            max_length=36,
            min_length=36,
            regex='^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$',
        ),
    ]


class BudgetName(BaseModel):
    __root__: Annotated[
        str,
        Field(
            description=' A string that represents the budget name. The ":" and "\\" characters aren\'t allowed.',
            max_length=100,
            min_length=1,
            regex='[^:\\\\]+',
        ),
    ]


class NotificationType(Enum):
    """
    The type of a notification. It must be ACTUAL or FORECASTED.
    """

    ACTUAL = 'ACTUAL'
    FORECASTED = 'FORECASTED'


class ActionType(Enum):
    APPLY_IAM_POLICY = 'APPLY_IAM_POLICY'
    APPLY_SCP_POLICY = 'APPLY_SCP_POLICY'
    RUN_SSM_DOCUMENTS = 'RUN_SSM_DOCUMENTS'


class RoleArn(BaseModel):
    __root__: Annotated[
        str,
        Field(
            max_length=618,
            min_length=32,
            regex='^arn:(aws|aws-cn|aws-us-gov|us-iso-east-1|us-isob-east-1):iam::\\d{12}:role(\\u002F[\\u0021-\\u007F]+\\u002F|\\u002F)[\\w+=,.@-]+$',
        ),
    ]


class ApprovalModel(Enum):
    AUTOMATIC = 'AUTOMATIC'
    MANUAL = 'MANUAL'


class ActionStatus(Enum):
    STANDBY = 'STANDBY'
    PENDING = 'PENDING'
    EXECUTION_IN_PROGRESS = 'EXECUTION_IN_PROGRESS'
    EXECUTION_SUCCESS = 'EXECUTION_SUCCESS'
    EXECUTION_FAILURE = 'EXECUTION_FAILURE'
    REVERSE_IN_PROGRESS = 'REVERSE_IN_PROGRESS'
    REVERSE_SUCCESS = 'REVERSE_SUCCESS'
    REVERSE_FAILURE = 'REVERSE_FAILURE'
    RESET_IN_PROGRESS = 'RESET_IN_PROGRESS'
    RESET_FAILURE = 'RESET_FAILURE'


class GenericTimestamp(BaseModel):
    __root__: Annotated[
        datetime,
        Field(
            description=' A generic time stamp. In Java, it is transformed to a <code>Date</code> object.'
        ),
    ]


class EventType(Enum):
    SYSTEM = 'SYSTEM'
    CREATE_ACTION = 'CREATE_ACTION'
    DELETE_ACTION = 'DELETE_ACTION'
    UPDATE_ACTION = 'UPDATE_ACTION'
    EXECUTE_ACTION = 'EXECUTE_ACTION'


class GenericString(BaseModel):
    __root__: Annotated[
        str,
        Field(
            description=' A generic string.',
            max_length=2147483647,
            min_length=0,
            regex='.*',
        ),
    ]


class ActionSubType(Enum):
    STOP_EC2_INSTANCES = 'STOP_EC2_INSTANCES'
    STOP_RDS_INSTANCES = 'STOP_RDS_INSTANCES'


class NotificationThreshold(BaseModel):
    __root__: Annotated[
        float,
        Field(
            description=' The threshold of a notification.', ge=0.0, le=40000000000.0
        ),
    ]


class ThresholdType(Enum):
    """
    The type of threshold for a notification.
    """

    PERCENTAGE = 'PERCENTAGE'
    ABSOLUTE_VALUE = 'ABSOLUTE_VALUE'


class PlannedBudgetLimits(BaseModel):
    pass

    class Config:
        extra = Extra.allow


class CostFilters(BaseModel):
    """
    A map that represents the cost filters that are applied to the budget.
    """

    pass

    class Config:
        extra = Extra.allow


class TimeUnit(Enum):
    """
    The time unit of the budget, such as MONTHLY or QUARTERLY.
    """

    DAILY = 'DAILY'
    MONTHLY = 'MONTHLY'
    QUARTERLY = 'QUARTERLY'
    ANNUALLY = 'ANNUALLY'


class TimePeriod(BaseModel):
    """
    The period of time that is covered by a budget. The period has a start date and an end date. The start date must come before the end date. There are no restrictions on the end date.
    """

    Start: Optional[GenericTimestamp] = None
    End: Optional[GenericTimestamp] = None


class BudgetType(Enum):
    """
    <p> The type of a budget. It must be one of the following types: </p> <p> <code>COST</code>, <code>USAGE</code>, <code>RI_UTILIZATION</code>, <code>RI_COVERAGE</code>, <code>SAVINGS_PLANS_UTILIZATION</code>, or <code>SAVINGS_PLANS_COVERAGE</code>.</p>
    """

    USAGE = 'USAGE'
    COST = 'COST'
    RI_UTILIZATION = 'RI_UTILIZATION'
    RI_COVERAGE = 'RI_COVERAGE'
    SAVINGS_PLANS_UTILIZATION = 'SAVINGS_PLANS_UTILIZATION'
    SAVINGS_PLANS_COVERAGE = 'SAVINGS_PLANS_COVERAGE'


class ComparisonOperator(Enum):
    """
    <p> The comparison operator of a notification. Currently the service supports the following operators:</p> <p> <code>GREATER_THAN</code>, <code>LESS_THAN</code>, <code>EQUAL_TO</code> </p>
    """

    GREATER_THAN = 'GREATER_THAN'
    LESS_THAN = 'LESS_THAN'
    EQUAL_TO = 'EQUAL_TO'


class DimensionValues(BaseModel):
    __root__: List[GenericString]


class NullableBoolean(BaseModel):
    __root__: bool


class MaxResults(BaseModel):
    __root__: Annotated[
        int,
        Field(
            description=' An integer that represents how many entries a paginated response contains. The maximum is 100.',
            ge=1.0,
            le=100.0,
        ),
    ]


class ExecutionType(Enum):
    APPROVE_BUDGET_ACTION = 'APPROVE_BUDGET_ACTION'
    RETRY_BUDGET_ACTION = 'RETRY_BUDGET_ACTION'
    REVERSE_BUDGET_ACTION = 'REVERSE_BUDGET_ACTION'
    RESET_BUDGET_ACTION = 'RESET_BUDGET_ACTION'


class Group(BaseModel):
    __root__: Annotated[
        str,
        Field(
            max_length=640,
            min_length=1,
            regex='^([\\u0021-\\u007F]+\\u002F)?[\\w+=,.@-]+$',
        ),
    ]


class Groups(BaseModel):
    __root__: Annotated[List[Group], Field(max_items=100, min_items=1)]


class PolicyArn(BaseModel):
    __root__: Annotated[
        str,
        Field(
            max_length=684,
            min_length=25,
            regex='^arn:(aws|aws-cn|aws-us-gov|us-iso-east-1|us-isob-east-1):iam::(\\d{12}|aws):policy(\\u002F[\\u0021-\\u007F]+\\u002F|\\u002F)[\\w+=,.@-]+$',
        ),
    ]


class InstanceId(BaseModel):
    __root__: Annotated[
        str,
        Field(
            max_length=63,
            min_length=1,
            regex='^i-(\\w{8}|\\w{17})$|^[a-zA-Z]([\\w-]{0,61}\\w)?$',
        ),
    ]


class InstanceIds(BaseModel):
    __root__: Annotated[List[InstanceId], Field(max_items=100, min_items=1)]


class NotificationState(Enum):
    OK = 'OK'
    ALARM = 'ALARM'


class NumericValue(BaseModel):
    __root__: Annotated[
        str,
        Field(
            description=' A string that represents a numeric value.',
            max_length=2147483647,
            min_length=1,
            regex='([0-9]*\\.)?[0-9]+',
        ),
    ]


class PolicyId(BaseModel):
    __root__: Annotated[
        str, Field(max_length=130, min_length=10, regex='^p-[0-9a-zA-Z_]{8,128}$')
    ]


class Region(BaseModel):
    __root__: Annotated[
        str, Field(max_length=20, min_length=9, regex='^\\w{2}-\\w+(-\\w+)?-\\d$')
    ]


class Role(BaseModel):
    __root__: Annotated[
        str,
        Field(
            max_length=576,
            min_length=1,
            regex='^([\\u0021-\\u007F]+\\u002F)?[\\w+=,.@-]+$',
        ),
    ]


class UnitValue(BaseModel):
    __root__: Annotated[
        str,
        Field(
            description=" A string that represents the spend unit of a budget. It can't be null or empty.",
            max_length=2147483647,
            min_length=1,
            regex='.*',
        ),
    ]


class SubscriptionType(Enum):
    """
    The subscription type of the subscriber. It can be SMS or EMAIL.
    """

    SNS = 'SNS'
    EMAIL = 'EMAIL'


class SubscriberAddress(BaseModel):
    __root__: Annotated[
        SecretStr,
        Field(
            description=" A string that contains an email address or SNS topic for the subscriber's address.",
            max_length=2147483647,
            min_length=1,
            regex='(.*[\\n\\r\\t\\f\\ ]?)*',
        ),
    ]


class TargetId(BaseModel):
    __root__: Annotated[
        str,
        Field(
            max_length=68,
            min_length=12,
            regex='^(ou-[0-9a-z]{4,32}-[a-z0-9]{8,32}$)|(\\d{12})',
        ),
    ]


class User(Role):
    pass


class CreateBudgetActionResponse(BaseModel):
    AccountId: AccountId
    BudgetName: BudgetName
    ActionId: ActionId


class DeleteBudgetRequest(BaseModel):
    """
    Request of DeleteBudget
    """

    AccountId: AccountId
    BudgetName: BudgetName


class DeleteBudgetActionRequest(BaseModel):
    AccountId: AccountId
    BudgetName: BudgetName
    ActionId: ActionId


class DescribeBudgetRequest(BaseModel):
    """
    Request of DescribeBudget
    """

    AccountId: AccountId
    BudgetName: BudgetName


class DescribeBudgetActionRequest(BaseModel):
    AccountId: AccountId
    BudgetName: BudgetName
    ActionId: ActionId


class DescribeBudgetActionHistoriesRequest(BaseModel):
    AccountId: AccountId
    BudgetName: BudgetName
    ActionId: ActionId
    TimePeriod: Optional[TimePeriod] = None
    MaxResults: Optional[MaxResults] = None
    NextToken: Optional[GenericString] = None


class DescribeBudgetActionsForAccountRequest(BaseModel):
    AccountId: AccountId
    MaxResults: Optional[MaxResults] = None
    NextToken: Optional[GenericString] = None


class DescribeBudgetActionsForBudgetRequest(BaseModel):
    AccountId: AccountId
    BudgetName: BudgetName
    MaxResults: Optional[MaxResults] = None
    NextToken: Optional[GenericString] = None


class DescribeBudgetPerformanceHistoryRequest(BaseModel):
    AccountId: AccountId
    BudgetName: BudgetName
    TimePeriod: Optional[TimePeriod] = None
    MaxResults: Optional[MaxResults] = None
    NextToken: Optional[GenericString] = None


class DescribeBudgetsRequest(BaseModel):
    """
    Request of DescribeBudgets
    """

    AccountId: AccountId
    MaxResults: Optional[MaxResults] = None
    NextToken: Optional[GenericString] = None


class DescribeNotificationsForBudgetRequest(BaseModel):
    """
    Request of DescribeNotificationsForBudget
    """

    AccountId: AccountId
    BudgetName: BudgetName
    MaxResults: Optional[MaxResults] = None
    NextToken: Optional[GenericString] = None


class ExecuteBudgetActionResponse(BaseModel):
    AccountId: AccountId
    BudgetName: BudgetName
    ActionId: ActionId
    ExecutionType: ExecutionType


class ExecuteBudgetActionRequest(BaseModel):
    AccountId: AccountId
    BudgetName: BudgetName
    ActionId: ActionId
    ExecutionType: ExecutionType


class ActionThreshold(BaseModel):
    """
    The trigger threshold of the action.
    """

    ActionThresholdValue: NotificationThreshold
    ActionThresholdType: ThresholdType


class Spend(BaseModel):
    """
    <p>The amount of cost or usage that is measured for a budget.</p> <p>For example, a <code>Spend</code> for <code>3 GB</code> of S3 usage would have the following parameters:</p> <ul> <li> <p>An <code>Amount</code> of <code>3</code> </p> </li> <li> <p>A <code>unit</code> of <code>GB</code> </p> </li> </ul>
    """

    Amount: NumericValue
    Unit: UnitValue


class CostTypes(BaseModel):
    """
    <p>The types of cost that are included in a <code>COST</code> budget, such as tax and subscriptions.</p> <p> <code>USAGE</code>, <code>RI_UTILIZATION</code>, <code>RI_COVERAGE</code>, <code>SAVINGS_PLANS_UTILIZATION</code>, and <code>SAVINGS_PLANS_COVERAGE</code> budgets do not have <code>CostTypes</code>.</p>
    """

    IncludeTax: Optional[NullableBoolean] = None
    IncludeSubscription: Optional[NullableBoolean] = None
    UseBlended: Optional[NullableBoolean] = None
    IncludeRefund: Optional[NullableBoolean] = None
    IncludeCredit: Optional[NullableBoolean] = None
    IncludeUpfront: Optional[NullableBoolean] = None
    IncludeRecurring: Optional[NullableBoolean] = None
    IncludeOtherSubscription: Optional[NullableBoolean] = None
    IncludeSupport: Optional[NullableBoolean] = None
    IncludeDiscount: Optional[NullableBoolean] = None
    UseAmortized: Optional[NullableBoolean] = None


class CalculatedSpend(BaseModel):
    """
    <p>The spend objects that are associated with this budget. The <code>actualSpend</code> tracks how much you've used, cost, usage, RI units, or Savings Plans units and the <code>forecastedSpend</code> tracks how much you are predicted to spend based on your historical usage profile.</p> <p>For example, if it is the 20th of the month and you have spent <code>50</code> dollars on Amazon EC2, your <code>actualSpend</code> is <code>50 USD</code>, and your <code>forecastedSpend</code> is <code>75 USD</code>.</p>
    """

    ActualSpend: Spend
    ForecastedSpend: Optional[Spend] = None


class Budget(BaseModel):
    """
    <p>Represents the output of the <code>CreateBudget</code> operation. The content consists of the detailed metadata and data file information, and the current status of the <code>budget</code> object.</p> <p>This is the ARN pattern for a budget: </p> <p> <code>arn:aws:budgets::AccountId:budget/budgetName</code> </p>
    """

    BudgetName: BudgetName
    BudgetLimit: Optional[Spend] = None
    PlannedBudgetLimits: Optional[PlannedBudgetLimits] = None
    CostFilters: Optional[CostFilters] = None
    CostTypes: Optional[CostTypes] = None
    TimeUnit: TimeUnit
    TimePeriod: Optional[TimePeriod] = None
    CalculatedSpend: Optional[CalculatedSpend] = None
    BudgetType: BudgetType
    LastUpdatedTime: Optional[GenericTimestamp] = None


class BudgetedAndActualAmounts(BaseModel):
    """
    The amount of cost or usage that you created the budget for, compared to your actual costs or usage.
    """

    BudgetedAmount: Optional[Spend] = None
    ActualAmount: Optional[Spend] = None
    TimePeriod: Optional[TimePeriod] = None


class Budgets(BaseModel):
    """
    A list of budgets.
    """

    __root__: Annotated[List[Budget], Field(description=' A list of budgets.')]


class Notification(BaseModel):
    """
    <p>A notification that is associated with a budget. A budget can have up to ten notifications. </p> <p>Each notification must have at least one subscriber. A notification can have one SNS subscriber and up to 10 email subscribers, for a total of 11 subscribers.</p> <p>For example, if you have a budget for 200 dollars and you want to be notified when you go over 160 dollars, create a notification with the following parameters:</p> <ul> <li> <p>A notificationType of <code>ACTUAL</code> </p> </li> <li> <p>A <code>thresholdType</code> of <code>PERCENTAGE</code> </p> </li> <li> <p>A <code>comparisonOperator</code> of <code>GREATER_THAN</code> </p> </li> <li> <p>A notification <code>threshold</code> of <code>80</code> </p> </li> </ul>
    """

    NotificationType: NotificationType
    ComparisonOperator: ComparisonOperator
    Threshold: NotificationThreshold
    ThresholdType: Optional[ThresholdType] = None
    NotificationState: Optional[NotificationState] = None


class Subscriber(BaseModel):
    """
    <p>The subscriber to a budget notification. The subscriber consists of a subscription type and either an Amazon SNS topic or an email address.</p> <p>For example, an email subscriber would have the following parameters:</p> <ul> <li> <p>A <code>subscriptionType</code> of <code>EMAIL</code> </p> </li> <li> <p>An <code>address</code> of <code>example@example.com</code> </p> </li> </ul>
    """

    SubscriptionType: SubscriptionType
    Address: SubscriberAddress


class SsmActionDefinition(BaseModel):
    """
    The AWS Systems Manager (SSM) action definition details.
    """

    ActionSubType: ActionSubType
    Region: Region
    InstanceIds: InstanceIds


class Notifications(BaseModel):
    """
    A list of notifications.
    """

    __root__: Annotated[
        List[Notification], Field(description=' A list of notifications.')
    ]


class Roles(BaseModel):
    __root__: Annotated[List[Role], Field(max_items=100, min_items=1)]


class Users(BaseModel):
    __root__: Annotated[List[User], Field(max_items=100, min_items=1)]


class TargetIds(BaseModel):
    __root__: Annotated[List[TargetId], Field(max_items=100, min_items=1)]


class CreateSubscriberRequest(BaseModel):
    """
    Request of CreateSubscriber
    """

    AccountId: AccountId
    BudgetName: BudgetName
    Notification: Notification
    Subscriber: Subscriber


class DeleteNotificationRequest(BaseModel):
    """
    Request of DeleteNotification
    """

    AccountId: AccountId
    BudgetName: BudgetName
    Notification: Notification


class DeleteSubscriberRequest(BaseModel):
    """
    Request of DeleteSubscriber
    """

    AccountId: AccountId
    BudgetName: BudgetName
    Notification: Notification
    Subscriber: Subscriber


class DescribeBudgetResponse(BaseModel):
    """
    Response of DescribeBudget
    """

    Budget: Optional[Budget] = None


class DescribeBudgetsResponse(BaseModel):
    """
    Response of DescribeBudgets
    """

    Budgets: Optional[Budgets] = None
    NextToken: Optional[GenericString] = None


class DescribeNotificationsForBudgetResponse(BaseModel):
    """
    Response of GetNotificationsForBudget
    """

    Notifications: Optional[Notifications] = None
    NextToken: Optional[GenericString] = None


class DescribeSubscribersForNotificationRequest(BaseModel):
    """
    Request of DescribeSubscribersForNotification
    """

    AccountId: AccountId
    BudgetName: BudgetName
    Notification: Notification
    MaxResults: Optional[MaxResults] = None
    NextToken: Optional[GenericString] = None


class UpdateBudgetRequest(BaseModel):
    """
    Request of UpdateBudget
    """

    AccountId: AccountId
    NewBudget: Budget


class UpdateNotificationRequest(BaseModel):
    """
    Request of UpdateNotification
    """

    AccountId: AccountId
    BudgetName: BudgetName
    OldNotification: Notification
    NewNotification: Notification


class UpdateSubscriberRequest(BaseModel):
    """
    Request of UpdateSubscriber
    """

    AccountId: AccountId
    BudgetName: BudgetName
    Notification: Notification
    OldSubscriber: Subscriber
    NewSubscriber: Subscriber


class Subscribers(BaseModel):
    """
    A list of subscribers.
    """

    __root__: Annotated[
        List[Subscriber],
        Field(description=' A list of subscribers.', max_items=11, min_items=1),
    ]


class BudgetedAndActualAmountsList(BaseModel):
    __root__: List[BudgetedAndActualAmounts]


class BudgetPerformanceHistory(BaseModel):
    """
    A history of the state of a budget at the end of the budget's specified time period.
    """

    BudgetName: Optional[BudgetName] = None
    BudgetType: Optional[BudgetType] = None
    CostFilters: Optional[CostFilters] = None
    CostTypes: Optional[CostTypes] = None
    TimeUnit: Optional[TimeUnit] = None
    BudgetedAndActualAmountsList: Optional[BudgetedAndActualAmountsList] = None


class IamActionDefinition(BaseModel):
    """
    The AWS Identity and Access Management (IAM) action definition details.
    """

    PolicyArn: PolicyArn
    Roles: Optional[Roles] = None
    Groups: Optional[Groups] = None
    Users: Optional[Users] = None


class ScpActionDefinition(BaseModel):
    """
    The service control policies (SCP) action definition details.
    """

    PolicyId: PolicyId
    TargetIds: TargetIds


class NotificationWithSubscribers(BaseModel):
    """
    A notification with subscribers. A notification can have one SNS subscriber and up to 10 email subscribers, for a total of 11 subscribers.
    """

    Notification: Notification
    Subscribers: Subscribers


class CreateNotificationRequest(BaseModel):
    """
    Request of CreateNotification
    """

    AccountId: AccountId
    BudgetName: BudgetName
    Notification: Notification
    Subscribers: Subscribers


class DescribeBudgetPerformanceHistoryResponse(BaseModel):
    BudgetPerformanceHistory: Optional[BudgetPerformanceHistory] = None
    NextToken: Optional[GenericString] = None


class DescribeSubscribersForNotificationResponse(BaseModel):
    """
    Response of DescribeSubscribersForNotification
    """

    Subscribers: Optional[Subscribers] = None
    NextToken: Optional[GenericString] = None


class Definition(BaseModel):
    """
    Specifies all of the type-specific parameters.
    """

    IamActionDefinition: Optional[IamActionDefinition] = None
    ScpActionDefinition: Optional[ScpActionDefinition] = None
    SsmActionDefinition: Optional[SsmActionDefinition] = None


class Action(BaseModel):
    """
    A budget action resource.
    """

    ActionId: ActionId
    BudgetName: BudgetName
    NotificationType: NotificationType
    ActionType: ActionType
    ActionThreshold: ActionThreshold
    Definition: Definition
    ExecutionRoleArn: RoleArn
    ApprovalModel: ApprovalModel
    Status: ActionStatus
    Subscribers: Subscribers


class ActionHistoryDetails(BaseModel):
    """
    The description of details of the event.
    """

    Message: GenericString
    Action: Action


class Actions(BaseModel):
    __root__: Annotated[List[Action], Field(max_items=100, min_items=0)]


class NotificationWithSubscribersList(BaseModel):
    """
    A list of notifications, each with a list of subscribers.
    """

    __root__: Annotated[
        List[NotificationWithSubscribers],
        Field(
            description=' A list of notifications, each with a list of subscribers.',
            max_items=10,
        ),
    ]


class CreateBudgetRequest(BaseModel):
    """
    Request of CreateBudget
    """

    AccountId: AccountId
    Budget: Budget
    NotificationsWithSubscribers: Optional[NotificationWithSubscribersList] = None


class CreateBudgetActionRequest(BaseModel):
    AccountId: AccountId
    BudgetName: BudgetName
    NotificationType: NotificationType
    ActionType: ActionType
    ActionThreshold: ActionThreshold
    Definition: Definition
    ExecutionRoleArn: RoleArn
    ApprovalModel: ApprovalModel
    Subscribers: Subscribers


class DeleteBudgetActionResponse(BaseModel):
    AccountId: AccountId
    BudgetName: BudgetName
    Action: Action


class DescribeBudgetActionResponse(DeleteBudgetActionResponse):
    pass


class DescribeBudgetActionsForAccountResponse(BaseModel):
    Actions: Actions
    NextToken: Optional[GenericString] = None


class DescribeBudgetActionsForBudgetResponse(DescribeBudgetActionsForAccountResponse):
    pass


class UpdateBudgetActionResponse(BaseModel):
    AccountId: AccountId
    BudgetName: BudgetName
    OldAction: Action
    NewAction: Action


class UpdateBudgetActionRequest(BaseModel):
    AccountId: AccountId
    BudgetName: BudgetName
    ActionId: ActionId
    NotificationType: Optional[NotificationType] = None
    ActionThreshold: Optional[ActionThreshold] = None
    Definition: Optional[Definition] = None
    ExecutionRoleArn: Optional[RoleArn] = None
    ApprovalModel: Optional[ApprovalModel] = None
    Subscribers: Optional[Subscribers] = None


class ActionHistory(BaseModel):
    """
    The historical records for a budget action.
    """

    Timestamp: GenericTimestamp
    Status: ActionStatus
    EventType: EventType
    ActionHistoryDetails: ActionHistoryDetails


class ActionHistories(BaseModel):
    __root__: Annotated[List[ActionHistory], Field(max_items=100, min_items=0)]


class DescribeBudgetActionHistoriesResponse(BaseModel):
    ActionHistories: ActionHistories
    NextToken: Optional[GenericString] = None
