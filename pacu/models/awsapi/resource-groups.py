# generated by datamodel-codegen:
#   filename:  openapi.yaml
#   timestamp: 2021-12-31T02:54:47+00:00

from __future__ import annotations

from enum import Enum
from typing import Annotated, Any, List, Optional

from pydantic import BaseModel, Extra, Field


class QueryType(Enum):
    TAG_FILTERS_1_0 = 'TAG_FILTERS_1_0'
    CLOUDFORMATION_STACK_1_0 = 'CLOUDFORMATION_STACK_1_0'


class Query(BaseModel):
    __root__: Annotated[str, Field(max_length=4096, regex='[\\s\\S]*')]


class TagValue(BaseModel):
    __root__: Annotated[
        str,
        Field(
            max_length=256, min_length=0, regex='^([\\p{L}\\p{Z}\\p{N}_.:/=+\\-@]*)$'
        ),
    ]


class BadRequestException(BaseModel):
    __root__: Any


class ForbiddenException(BadRequestException):
    pass


class MethodNotAllowedException(BadRequestException):
    pass


class TooManyRequestsException(BadRequestException):
    pass


class InternalServerErrorException(BadRequestException):
    pass


class NotFoundException(BadRequestException):
    pass


class ResourceArn(BaseModel):
    __root__: Annotated[
        str,
        Field(
            regex='arn:aws(-[a-z]+)*:[a-z0-9\\-]*:([a-z]{2}(-[a-z]+)+-\\d{1})?:([0-9]{12})?:.+'
        ),
    ]


class UnauthorizedException(BadRequestException):
    pass


class PutGroupConfigurationOutput(BaseModel):
    pass


class TagKey(BaseModel):
    __root__: Annotated[
        str,
        Field(
            max_length=128, min_length=1, regex='^([\\p{L}\\p{Z}\\p{N}_.:/=+\\-@]*)$'
        ),
    ]


class GroupName(BaseModel):
    __root__: Annotated[
        str, Field(max_length=128, min_length=1, regex='[a-zA-Z0-9_\\.-]+')
    ]


class Description(BaseModel):
    __root__: Annotated[str, Field(max_length=512, regex='[\\sa-zA-Z0-9_\\.-]*')]


class ResourceQuery(BaseModel):
    """
    <p>The query that is used to define a resource group or a search for resources. A query specifies both a query type and a query string as a JSON object. See the examples section for example JSON strings.</p> <p>The examples that follow are shown as standard JSON strings. If you include such a string as a parameter to the AWS CLI or an SDK API, you might need to 'escape' the string into a single line. For example, see the <a href="https://docs.aws.amazon.com/cli/latest/userguide/cli-usage-parameters-quoting-strings.html">Quoting strings</a> in the <i>AWS CLI User Guide</i>.</p> <p> <b>Example 1</b> </p> <p>The following generic example shows a resource query JSON string that includes only resources that meet the following criteria:</p> <ul> <li> <p>The resource type must be either <code>resource_type1</code> or <code>resource_type2</code>.</p> </li> <li> <p>The resource must have a tag <code>Key1</code> with a value of either <code>ValueA</code> or <code>ValueB</code>.</p> </li> <li> <p>The resource must have a tag <code>Key2</code> with a value of either <code>ValueC</code> or <code>ValueD</code>.</p> </li> </ul> <p> <code>{ "Type": "TAG_FILTERS_1_0", "Query": { "ResourceTypeFilters": [ "resource_type1", "resource_type2"], "TagFilters": [ { "Key": "Key1", "Values": ["ValueA","ValueB"] }, { "Key":"Key2", "Values":["ValueC","ValueD"] } ] } }</code> </p> <p>This has the equivalent "shortcut" syntax of the following:</p> <p> <code>{ "Type": "TAG_FILTERS_1_0", "Query": { "ResourceTypeFilters": [ "resource_type1", "resource_type2"], "TagFilters": [ { "Key1": ["ValueA","ValueB"] }, { "Key2": ["ValueC","ValueD"] } ] } }</code> </p> <p> <b>Example 2</b> </p> <p>The following example shows a resource query JSON string that includes only Amazon EC2 instances that are tagged <code>Stage</code> with a value of <code>Test</code>.</p> <p> <code>{ "Type": "TAG_FILTERS_1_0", "Query": "{ "ResourceTypeFilters": "AWS::EC2::Instance", "TagFilters": { "Stage": "Test" } } }</code> </p> <p> <b>Example 3</b> </p> <p>The following example shows a resource query JSON string that includes resource of any supported type as long as it is tagged <code>Stage</code> with a value of <code>Prod</code>.</p> <p> <code>{ "Type": "TAG_FILTERS_1_0", "Query": { "ResourceTypeFilters": "AWS::AllSupported", "TagFilters": { "Stage": "Prod" } } }</code> </p> <p> <b>Example 4</b> </p> <p>The following example shows a resource query JSON string that includes only Amazon EC2 instances and Amazon S3 buckets that are part of the specified AWS CloudFormation stack.</p> <p> <code>{ "Type": "CLOUDFORMATION_STACK_1_0", "Query": { "ResourceTypeFilters": [ "AWS::EC2::Instance", "AWS::S3::Bucket" ], "StackIdentifier": "arn:aws:cloudformation:us-west-2:123456789012:stack/AWStestuseraccount/fb0d5000-aba8-00e8-aa9e-50d5cEXAMPLE" } }</code> </p>
    """

    Type: QueryType
    Query: Query


class Tags(BaseModel):
    pass

    class Config:
        extra = Extra.allow


class GroupString(BaseModel):
    __root__: Annotated[
        str,
        Field(
            max_length=1600,
            min_length=1,
            regex='(arn:aws(-[a-z]+)*:resource-groups:[a-z]{2}(-[a-z]+)+-\\d{1}:[0-9]{12}:group/)?[a-zA-Z0-9_\\.-]{1,128}',
        ),
    ]


class DeleteGroupInput(BaseModel):
    GroupName: Optional[GroupName] = None
    Group: Optional[GroupString] = None


class ErrorCode(BaseModel):
    __root__: Annotated[str, Field(max_length=128, min_length=1)]


class ErrorMessage(BaseModel):
    __root__: Annotated[str, Field(max_length=1024, min_length=1)]


class FailedResource(BaseModel):
    """
    A resource that failed to be added to or removed from a group.
    """

    ResourceArn: Optional[ResourceArn] = None
    ErrorMessage: Optional[ErrorMessage] = None
    ErrorCode: Optional[ErrorCode] = None


class FailedResourceList(BaseModel):
    __root__: List[FailedResource]


class GetGroupConfigurationInput(BaseModel):
    Group: Optional[GroupString] = None


class GetGroupInput(BaseModel):
    GroupName: Optional[GroupName] = None
    Group: Optional[GroupString] = None


class GetGroupQueryInput(BaseModel):
    GroupName: Optional[GroupName] = None
    Group: Optional[GroupString] = None


class GroupQuery(BaseModel):
    """
    A mapping of a query attached to a resource group that determines the AWS resources that are members of the group.
    """

    GroupName: GroupName
    ResourceQuery: ResourceQuery


class GroupArn(BaseModel):
    __root__: Annotated[
        str,
        Field(
            max_length=1600,
            min_length=12,
            regex='arn:aws(-[a-z]+)*:resource-groups:[a-z]{2}(-[a-z]+)+-\\d{1}:[0-9]{12}:group/[a-zA-Z0-9_\\.-]{1,128}',
        ),
    ]


class GetTagsInput(BaseModel):
    pass


class GroupConfigurationStatus(Enum):
    UPDATING = 'UPDATING'
    UPDATE_COMPLETE = 'UPDATE_COMPLETE'
    UPDATE_FAILED = 'UPDATE_FAILED'


class GroupConfigurationFailureReason(BaseModel):
    __root__: str


class GroupConfigurationType(BaseModel):
    __root__: Annotated[
        str, Field(max_length=40, regex='AWS::[a-zA-Z0-9]+::[a-zA-Z0-9]+')
    ]


class GroupConfigurationParameterName(BaseModel):
    __root__: Annotated[str, Field(max_length=80, min_length=1, regex='[a-z-]+')]


class GroupConfigurationParameterValue(BaseModel):
    __root__: Annotated[
        str, Field(max_length=256, min_length=1, regex='[a-zA-Z0-9:_-]+')
    ]


class GroupFilterName(Enum):
    resource_type = 'resource-type'
    configuration_type = 'configuration-type'


class GroupFilterValue(BaseModel):
    __root__: Annotated[
        str,
        Field(
            max_length=128,
            min_length=1,
            regex='AWS::(AllSupported|[a-zA-Z0-9]+::[a-zA-Z0-9]+)',
        ),
    ]


class GroupIdentifier(BaseModel):
    """
    The unique identifiers for a resource group.
    """

    GroupName: Optional[GroupName] = None
    GroupArn: Optional[GroupArn] = None


class GroupIdentifierList(BaseModel):
    __root__: List[GroupIdentifier]


class ResourceArnList(BaseModel):
    __root__: Annotated[List[ResourceArn], Field(max_items=10, min_items=1)]


class GroupResourcesInput(BaseModel):
    Group: GroupString
    ResourceArns: ResourceArnList


class MaxResults(BaseModel):
    __root__: Annotated[int, Field(ge=1.0, le=50.0)]


class NextToken(BaseModel):
    __root__: Annotated[
        str, Field(max_length=8192, min_length=0, regex='^[a-zA-Z0-9+/]*={0,2}$')
    ]


class PendingResource(BaseModel):
    """
    A structure that identifies a resource that is currently pending addition to the group as a member. Adding a resource to a resource group happens asynchronously as a background task and this one isn't completed yet.
    """

    ResourceArn: Optional[ResourceArn] = None


class QueryErrorCode(Enum):
    CLOUDFORMATION_STACK_INACTIVE = 'CLOUDFORMATION_STACK_INACTIVE'
    CLOUDFORMATION_STACK_NOT_EXISTING = 'CLOUDFORMATION_STACK_NOT_EXISTING'


class QueryErrorMessage(GroupConfigurationFailureReason):
    pass


class QueryError(BaseModel):
    """
    A two-part error structure that can occur in <code>ListGroupResources</code> or <code>SearchResources</code> operations on CloudFormation stack-based queries. The error occurs if the CloudFormation stack on which the query is based either does not exist, or has a status that renders the stack inactive. A <code>QueryError</code> occurrence does not necessarily mean that AWS Resource Groups could not complete the operation, but the resulting group might have no member resources.
    """

    ErrorCode: Optional[QueryErrorCode] = None
    Message: Optional[QueryErrorMessage] = None


class ResourceFilterName(Enum):
    resource_type = 'resource-type'


class ResourceFilterValue(BaseModel):
    __root__: Annotated[
        str,
        Field(max_length=128, min_length=1, regex='AWS::[a-zA-Z0-9]+::[a-zA-Z0-9]+'),
    ]


class ResourceType(BaseModel):
    __root__: Annotated[str, Field(regex='AWS::[a-zA-Z0-9]+::\\w+')]


class ResourceStatusValue(Enum):
    PENDING = 'PENDING'


class SearchResourcesInput(BaseModel):
    ResourceQuery: ResourceQuery
    MaxResults: Optional[MaxResults] = None
    NextToken: Optional[NextToken] = None


class TagInput(BaseModel):
    Tags: Tags


class TagKeyList(BaseModel):
    __root__: List[TagKey]


class UngroupResourcesInput(BaseModel):
    Group: GroupString
    ResourceArns: ResourceArnList


class UntagInput(BaseModel):
    Keys: TagKeyList


class UpdateGroupInput(BaseModel):
    GroupName: Optional[GroupName] = None
    Group: Optional[GroupString] = None
    Description: Optional[Description] = None


class UpdateGroupQueryInput(BaseModel):
    GroupName: Optional[GroupName] = None
    Group: Optional[GroupString] = None
    ResourceQuery: ResourceQuery


class GetGroupQueryOutput(BaseModel):
    GroupQuery: Optional[GroupQuery] = None


class GetTagsOutput(BaseModel):
    Arn: Optional[GroupArn] = None
    Tags: Optional[Tags] = None


class TagOutput(GetTagsOutput):
    pass


class UntagOutput(BaseModel):
    Arn: Optional[GroupArn] = None
    Keys: Optional[TagKeyList] = None


class UpdateGroupQueryOutput(GetGroupQueryOutput):
    pass


class Group(BaseModel):
    """
    <p>A resource group that contains AWS resources. You can assign resources to the group by associating either of the following elements with the group:</p> <ul> <li> <p> <a>ResourceQuery</a> - Use a resource query to specify a set of tag keys and values. All resources in the same AWS Region and AWS account that have those keys with the same values are included in the group. You can add a resource query when you create the group, or later by using the <a>PutGroupConfiguration</a> operation.</p> </li> <li> <p> <a>GroupConfiguration</a> - Use a service configuration to associate the group with an AWS service. The configuration specifies which resource types can be included in the group.</p> </li> </ul>
    """

    GroupArn: GroupArn
    Name: GroupName
    Description: Optional[Description] = None


class GroupConfigurationParameterValueList(BaseModel):
    __root__: List[GroupConfigurationParameterValue]


class GroupConfigurationParameter(BaseModel):
    """
    A parameter for a group configuration item. For details about group service configuration syntax, see <a href="https://docs.aws.amazon.com/ARG/latest/APIReference/about-slg.html">Service configurations for resource groups</a>.
    """

    Name: GroupConfigurationParameterName
    Values: Optional[GroupConfigurationParameterValueList] = None


class GroupFilterValues(BaseModel):
    __root__: Annotated[List[GroupFilterValue], Field(max_items=5, min_items=1)]


class GroupList(BaseModel):
    __root__: List[Group]


class PendingResourceList(BaseModel):
    __root__: List[PendingResource]


class ResourceIdentifier(BaseModel):
    """
    A structure that contains the ARN of a resource and its resource type.
    """

    ResourceArn: Optional[ResourceArn] = None
    ResourceType: Optional[ResourceType] = None


class ResourceStatus(BaseModel):
    """
    A structure that identifies the current group membership status for a resource. Adding a resource to a resource group is performed asynchronously as a background task. A <code>PENDING</code> status indicates, for this resource, that the process isn't completed yet.
    """

    Name: Optional[ResourceStatusValue] = None


class ListGroupResourcesItem(BaseModel):
    """
    A structure returned by the <a>ListGroupResources</a> operation that contains identity and group membership status information for one of the resources in the group.
    """

    Identifier: Optional[ResourceIdentifier] = None
    Status: Optional[ResourceStatus] = None


class ListGroupResourcesItemList(BaseModel):
    __root__: List[ListGroupResourcesItem]


class ResourceIdentifierList(BaseModel):
    __root__: List[ResourceIdentifier]


class QueryErrorList(BaseModel):
    __root__: List[QueryError]


class ResourceFilterValues(BaseModel):
    __root__: Annotated[List[ResourceFilterValue], Field(max_items=5, min_items=1)]


class DeleteGroupOutput(BaseModel):
    Group: Optional[Group] = None


class GetGroupOutput(DeleteGroupOutput):
    pass


class GroupResourcesOutput(BaseModel):
    Succeeded: Optional[ResourceArnList] = None
    Failed: Optional[FailedResourceList] = None
    Pending: Optional[PendingResourceList] = None


class ListGroupResourcesOutput(BaseModel):
    Resources: Optional[ListGroupResourcesItemList] = None
    ResourceIdentifiers: Optional[ResourceIdentifierList] = None
    NextToken: Optional[NextToken] = None
    QueryErrors: Optional[QueryErrorList] = None


class ResourceFilter(BaseModel):
    """
    A filter name and value pair that is used to obtain more specific results from a list of resources.
    """

    Name: ResourceFilterName
    Values: ResourceFilterValues


class ListGroupsOutput(BaseModel):
    GroupIdentifiers: Optional[GroupIdentifierList] = None
    Groups: Optional[GroupList] = None
    NextToken: Optional[NextToken] = None


class GroupFilter(BaseModel):
    """
    A filter collection that you can use to restrict the results from a <code>List</code> operation to only those you want to include.
    """

    Name: GroupFilterName
    Values: GroupFilterValues


class SearchResourcesOutput(BaseModel):
    ResourceIdentifiers: Optional[ResourceIdentifierList] = None
    NextToken: Optional[NextToken] = None
    QueryErrors: Optional[QueryErrorList] = None


class UngroupResourcesOutput(GroupResourcesOutput):
    pass


class UpdateGroupOutput(DeleteGroupOutput):
    pass


class GroupParameterList(BaseModel):
    __root__: List[GroupConfigurationParameter]


class GroupFilterList(BaseModel):
    __root__: List[GroupFilter]


class ResourceFilterList(BaseModel):
    __root__: List[ResourceFilter]


class ListGroupResourcesInput(BaseModel):
    GroupName: Optional[GroupName] = None
    Group: Optional[GroupString] = None
    Filters: Optional[ResourceFilterList] = None
    MaxResults: Optional[MaxResults] = None
    NextToken: Optional[NextToken] = None


class ListGroupsInput(BaseModel):
    Filters: Optional[GroupFilterList] = None


class GroupConfigurationItem(BaseModel):
    """
    An item in a group configuration. A group service configuration can have one or more items. For details about group service configuration syntax, see <a href="https://docs.aws.amazon.com/ARG/latest/APIReference/about-slg.html">Service configurations for resource groups</a>.
    """

    Type: GroupConfigurationType
    Parameters: Optional[GroupParameterList] = None


class GroupConfigurationList(BaseModel):
    __root__: Annotated[List[GroupConfigurationItem], Field(max_items=2)]


class CreateGroupInput(BaseModel):
    Name: GroupName
    Description: Optional[Description] = None
    ResourceQuery: Optional[ResourceQuery] = None
    Tags: Optional[Tags] = None
    Configuration: Optional[GroupConfigurationList] = None


class GroupConfiguration(BaseModel):
    """
    A service configuration associated with a resource group. The configuration options are determined by the AWS service that defines the <code>Type</code>, and specifies which resources can be included in the group. You can add a service configuration when you create the group by using <a>CreateGroup</a>, or later by using the <a>PutGroupConfiguration</a> operation. For details about group service configuration syntax, see <a href="https://docs.aws.amazon.com/ARG/latest/APIReference/about-slg.html">Service configurations for resource groups</a>.
    """

    Configuration: Optional[GroupConfigurationList] = None
    ProposedConfiguration: Optional[GroupConfigurationList] = None
    Status: Optional[GroupConfigurationStatus] = None
    FailureReason: Optional[GroupConfigurationFailureReason] = None


class PutGroupConfigurationInput(BaseModel):
    Group: Optional[GroupString] = None
    Configuration: Optional[GroupConfigurationList] = None


class CreateGroupOutput(BaseModel):
    Group: Optional[Group] = None
    ResourceQuery: Optional[ResourceQuery] = None
    Tags: Optional[Tags] = None
    GroupConfiguration: Optional[GroupConfiguration] = None


class GetGroupConfigurationOutput(BaseModel):
    GroupConfiguration: Optional[GroupConfiguration] = None
