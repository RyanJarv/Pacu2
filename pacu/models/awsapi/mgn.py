# generated by datamodel-codegen:
#   filename:  openapi.yaml
#   timestamp: 2021-12-31T02:53:03+00:00

from __future__ import annotations

from enum import Enum
from typing import Annotated, Any, List, Optional

from pydantic import BaseModel, Extra, Field


class ChangeServerLifeCycleStateSourceServerLifecycleState(Enum):
    READY_FOR_TEST = 'READY_FOR_TEST'
    READY_FOR_CUTOVER = 'READY_FOR_CUTOVER'
    CUTOVER = 'CUTOVER'


class UninitializedAccountException(BaseModel):
    __root__: Any


class ResourceNotFoundException(UninitializedAccountException):
    pass


class ValidationException(UninitializedAccountException):
    pass


class ConflictException(UninitializedAccountException):
    pass


class SecurityGroupID(BaseModel):
    __root__: Annotated[
        str, Field(max_length=255, min_length=0, regex='^sg-[0-9a-fA-F]{8,}$')
    ]


class TagValue(BaseModel):
    __root__: Annotated[str, Field(max_length=256, min_length=0)]


class AccessDeniedException(UninitializedAccountException):
    pass


class DeleteJobResponse(BaseModel):
    pass


class DeleteReplicationConfigurationTemplateResponse(DeleteJobResponse):
    pass


class DeleteSourceServerResponse(DeleteJobResponse):
    pass


class ISO8601DatetimeString(BaseModel):
    __root__: Annotated[
        str,
        Field(
            max_length=32,
            min_length=19,
            regex='^[1-9][0-9]*-(0[1-9]|1[0-2])-(0[1-9]|[12][0-9]|3[01])T([0-1][0-9]|2[0-3]):[0-5][0-9]:[0-5][0-9](\\.[0-9]+)?Z$',
        ),
    ]


class ReplicationConfigurationTemplateID(BaseModel):
    __root__: Annotated[
        str, Field(max_length=21, min_length=21, regex='^rct-[0-9a-zA-Z]{17}$')
    ]


class Boolean(BaseModel):
    __root__: bool


class InitializeServiceResponse(DeleteJobResponse):
    pass


class ThrottlingException(UninitializedAccountException):
    pass


class InternalServerException(UninitializedAccountException):
    pass


class SourceServerID(BaseModel):
    __root__: Annotated[
        str, Field(max_length=19, min_length=19, regex='^s-[0-9a-zA-Z]{17}$')
    ]


class TagKey(TagValue):
    pass


class ARN(BaseModel):
    __root__: Annotated[str, Field(max_length=2048, min_length=20)]


class BoundedString(TagValue):
    pass


class PositiveInteger(BaseModel):
    __root__: Annotated[int, Field(ge=0.0)]


class CPU(BaseModel):
    """
    Source server CPU information.
    """

    cores: Optional[PositiveInteger] = None
    modelName: Optional[BoundedString] = None


class ChangeServerLifeCycleStateSourceServerLifecycle(BaseModel):
    """
    The request to change the source server migration lifecycle state.
    """

    state: ChangeServerLifeCycleStateSourceServerLifecycleState


class ChangeServerLifeCycleStateRequest(BaseModel):
    lifeCycle: ChangeServerLifeCycleStateSourceServerLifecycle
    sourceServerID: SourceServerID


class Cpus(BaseModel):
    __root__: Annotated[List[CPU], Field(max_items=256, min_items=0)]


class ReplicationConfigurationDataPlaneRouting(Enum):
    PRIVATE_IP = 'PRIVATE_IP'
    PUBLIC_IP = 'PUBLIC_IP'


class ReplicationConfigurationDefaultLargeStagingDiskType(Enum):
    GP2 = 'GP2'
    ST1 = 'ST1'


class ReplicationConfigurationEbsEncryption(Enum):
    DEFAULT = 'DEFAULT'
    CUSTOM = 'CUSTOM'


class EC2InstanceType(BaseModel):
    __root__: Annotated[str, Field(max_length=255, min_length=0)]


class ReplicationServersSecurityGroupsIDs(BaseModel):
    __root__: Annotated[List[SecurityGroupID], Field(max_items=32, min_items=0)]


class SubnetID(BaseModel):
    __root__: Annotated[
        str, Field(max_length=255, min_length=0, regex='^subnet-[0-9a-fA-F]{8,}$')
    ]


class TagsMap(BaseModel):
    pass

    class Config:
        extra = Extra.allow


class CreateReplicationConfigurationTemplateRequest(BaseModel):
    associateDefaultSecurityGroup: Boolean
    bandwidthThrottling: PositiveInteger
    createPublicIP: Boolean
    dataPlaneRouting: ReplicationConfigurationDataPlaneRouting
    defaultLargeStagingDiskType: ReplicationConfigurationDefaultLargeStagingDiskType
    ebsEncryption: ReplicationConfigurationEbsEncryption
    ebsEncryptionKeyArn: Optional[ARN] = None
    replicationServerInstanceType: EC2InstanceType
    replicationServersSecurityGroupsIDs: ReplicationServersSecurityGroupsIDs
    stagingAreaSubnetId: SubnetID
    stagingAreaTags: TagsMap
    tags: Optional[TagsMap] = None
    useDedicatedReplicationServer: Boolean


class DataReplicationErrorString(Enum):
    AGENT_NOT_SEEN = 'AGENT_NOT_SEEN'
    SNAPSHOTS_FAILURE = 'SNAPSHOTS_FAILURE'
    NOT_CONVERGING = 'NOT_CONVERGING'
    UNSTABLE_NETWORK = 'UNSTABLE_NETWORK'
    FAILED_TO_CREATE_SECURITY_GROUP = 'FAILED_TO_CREATE_SECURITY_GROUP'
    FAILED_TO_LAUNCH_REPLICATION_SERVER = 'FAILED_TO_LAUNCH_REPLICATION_SERVER'
    FAILED_TO_BOOT_REPLICATION_SERVER = 'FAILED_TO_BOOT_REPLICATION_SERVER'
    FAILED_TO_AUTHENTICATE_WITH_SERVICE = 'FAILED_TO_AUTHENTICATE_WITH_SERVICE'
    FAILED_TO_DOWNLOAD_REPLICATION_SOFTWARE = 'FAILED_TO_DOWNLOAD_REPLICATION_SOFTWARE'
    FAILED_TO_CREATE_STAGING_DISKS = 'FAILED_TO_CREATE_STAGING_DISKS'
    FAILED_TO_ATTACH_STAGING_DISKS = 'FAILED_TO_ATTACH_STAGING_DISKS'
    FAILED_TO_PAIR_REPLICATION_SERVER_WITH_AGENT = (
        'FAILED_TO_PAIR_REPLICATION_SERVER_WITH_AGENT'
    )
    FAILED_TO_CONNECT_AGENT_TO_REPLICATION_SERVER = (
        'FAILED_TO_CONNECT_AGENT_TO_REPLICATION_SERVER'
    )
    FAILED_TO_START_DATA_TRANSFER = 'FAILED_TO_START_DATA_TRANSFER'


class LargeBoundedString(BaseModel):
    __root__: Annotated[str, Field(max_length=65536, min_length=0)]


class DataReplicationError(BaseModel):
    """
    Error in data replication.
    """

    error: Optional[DataReplicationErrorString] = None
    rawError: Optional[LargeBoundedString] = None


class DataReplicationState(Enum):
    STOPPED = 'STOPPED'
    INITIATING = 'INITIATING'
    INITIAL_SYNC = 'INITIAL_SYNC'
    BACKLOG = 'BACKLOG'
    CREATING_SNAPSHOT = 'CREATING_SNAPSHOT'
    CONTINUOUS = 'CONTINUOUS'
    PAUSED = 'PAUSED'
    RESCAN = 'RESCAN'
    STALLED = 'STALLED'
    DISCONNECTED = 'DISCONNECTED'


class DataReplicationInfoReplicatedDisk(BaseModel):
    """
    Request to query disks replicated.
    """

    backloggedStorageBytes: Optional[PositiveInteger] = None
    deviceName: Optional[BoundedString] = None
    replicatedStorageBytes: Optional[PositiveInteger] = None
    rescannedStorageBytes: Optional[PositiveInteger] = None
    totalStorageBytes: Optional[PositiveInteger] = None


class DataReplicationInitiationStepName(Enum):
    WAIT = 'WAIT'
    CREATE_SECURITY_GROUP = 'CREATE_SECURITY_GROUP'
    LAUNCH_REPLICATION_SERVER = 'LAUNCH_REPLICATION_SERVER'
    BOOT_REPLICATION_SERVER = 'BOOT_REPLICATION_SERVER'
    AUTHENTICATE_WITH_SERVICE = 'AUTHENTICATE_WITH_SERVICE'
    DOWNLOAD_REPLICATION_SOFTWARE = 'DOWNLOAD_REPLICATION_SOFTWARE'
    CREATE_STAGING_DISKS = 'CREATE_STAGING_DISKS'
    ATTACH_STAGING_DISKS = 'ATTACH_STAGING_DISKS'
    PAIR_REPLICATION_SERVER_WITH_AGENT = 'PAIR_REPLICATION_SERVER_WITH_AGENT'
    CONNECT_AGENT_TO_REPLICATION_SERVER = 'CONNECT_AGENT_TO_REPLICATION_SERVER'
    START_DATA_TRANSFER = 'START_DATA_TRANSFER'


class DataReplicationInitiationStepStatus(Enum):
    NOT_STARTED = 'NOT_STARTED'
    IN_PROGRESS = 'IN_PROGRESS'
    SUCCEEDED = 'SUCCEEDED'
    FAILED = 'FAILED'
    SKIPPED = 'SKIPPED'


class DataReplicationInitiationStep(BaseModel):
    """
    Data replication intiation step.
    """

    name: Optional[DataReplicationInitiationStepName] = None
    status: Optional[DataReplicationInitiationStepStatus] = None


class JobID(BaseModel):
    __root__: Annotated[
        str, Field(max_length=24, min_length=24, regex='^mgnjob-[0-9a-zA-Z]{17}$')
    ]


class DeleteJobRequest(BaseModel):
    jobID: JobID


class DeleteReplicationConfigurationTemplateRequest(BaseModel):
    replicationConfigurationTemplateID: ReplicationConfigurationTemplateID


class DeleteSourceServerRequest(BaseModel):
    sourceServerID: SourceServerID


class StrictlyPositiveInteger(BaseModel):
    __root__: Annotated[int, Field(ge=1.0)]


class PaginationToken(BaseModel):
    __root__: Annotated[str, Field(max_length=2048, min_length=0)]


class DescribeJobLogItemsRequest(BaseModel):
    jobID: JobID
    maxResults: Optional[StrictlyPositiveInteger] = None
    nextToken: Optional[PaginationToken] = None


class ReplicationConfigurationTemplateIDs(BaseModel):
    __root__: Annotated[
        List[ReplicationConfigurationTemplateID], Field(max_items=200, min_items=0)
    ]


class DescribeReplicationConfigurationTemplatesRequest(BaseModel):
    maxResults: Optional[StrictlyPositiveInteger] = None
    nextToken: Optional[PaginationToken] = None
    replicationConfigurationTemplateIDs: ReplicationConfigurationTemplateIDs


class DisconnectFromServiceRequest(BaseModel):
    sourceServerID: SourceServerID


class Disk(BaseModel):
    """
    The disk identifier.
    """

    bytes: Optional[PositiveInteger] = None
    deviceName: Optional[BoundedString] = None


class Disks(BaseModel):
    __root__: Annotated[List[Disk], Field(max_items=1000, min_items=0)]


class EC2InstanceID(BaseModel):
    __root__: Annotated[
        str, Field(max_length=255, min_length=0, regex='^i-[0-9a-fA-F]{8,}$')
    ]


class FinalizeCutoverRequest(BaseModel):
    sourceServerID: SourceServerID


class FirstBoot(Enum):
    WAITING = 'WAITING'
    SUCCEEDED = 'SUCCEEDED'
    UNKNOWN = 'UNKNOWN'
    STOPPED = 'STOPPED'


class GetLaunchConfigurationRequest(BaseModel):
    sourceServerID: SourceServerID


class GetReplicationConfigurationRequest(BaseModel):
    sourceServerID: SourceServerID


class IPsList(BaseModel):
    __root__: List[BoundedString]


class IdentificationHints(BaseModel):
    """
    Identification hints.
    """

    awsInstanceID: Optional[EC2InstanceID] = None
    fqdn: Optional[BoundedString] = None
    hostname: Optional[BoundedString] = None
    vmWareUuid: Optional[BoundedString] = None


class InitializeServiceRequest(BaseModel):
    pass


class InitiatedBy(Enum):
    START_TEST = 'START_TEST'
    START_CUTOVER = 'START_CUTOVER'
    DIAGNOSTIC = 'DIAGNOSTIC'
    TERMINATE = 'TERMINATE'


class JobStatus(Enum):
    PENDING = 'PENDING'
    STARTED = 'STARTED'
    COMPLETED = 'COMPLETED'


class JobType(Enum):
    LAUNCH = 'LAUNCH'
    TERMINATE = 'TERMINATE'


class JobLogEvent(Enum):
    JOB_START = 'JOB_START'
    SERVER_SKIPPED = 'SERVER_SKIPPED'
    CLEANUP_START = 'CLEANUP_START'
    CLEANUP_END = 'CLEANUP_END'
    CLEANUP_FAIL = 'CLEANUP_FAIL'
    SNAPSHOT_START = 'SNAPSHOT_START'
    SNAPSHOT_END = 'SNAPSHOT_END'
    SNAPSHOT_FAIL = 'SNAPSHOT_FAIL'
    USING_PREVIOUS_SNAPSHOT = 'USING_PREVIOUS_SNAPSHOT'
    CONVERSION_START = 'CONVERSION_START'
    CONVERSION_END = 'CONVERSION_END'
    CONVERSION_FAIL = 'CONVERSION_FAIL'
    LAUNCH_START = 'LAUNCH_START'
    LAUNCH_FAILED = 'LAUNCH_FAILED'
    JOB_CANCEL = 'JOB_CANCEL'
    JOB_END = 'JOB_END'


class JobLogEventData(BaseModel):
    """
    Job log data
    """

    conversionServerID: Optional[EC2InstanceID] = None
    rawError: Optional[LargeBoundedString] = None
    sourceServerID: Optional[SourceServerID] = None
    targetInstanceID: Optional[EC2InstanceID] = None


class JobLog(BaseModel):
    """
    Job log.
    """

    event: Optional[JobLogEvent] = None
    eventData: Optional[JobLogEventData] = None
    logDateTime: Optional[ISO8601DatetimeString] = None


class LaunchDisposition(Enum):
    STOPPED = 'STOPPED'
    STARTED = 'STARTED'


class Licensing(BaseModel):
    """
    Configure Licensing.
    """

    osByol: Optional[Boolean] = None


class SmallBoundedString(BaseModel):
    __root__: Annotated[str, Field(max_length=128, min_length=0)]


class TargetInstanceTypeRightSizingMethod(Enum):
    NONE = 'NONE'
    BASIC = 'BASIC'


class LaunchStatus(Enum):
    PENDING = 'PENDING'
    IN_PROGRESS = 'IN_PROGRESS'
    LAUNCHED = 'LAUNCHED'
    FAILED = 'FAILED'
    TERMINATED = 'TERMINATED'


class LaunchedInstance(BaseModel):
    """
    Configure launced instance.
    """

    ec2InstanceID: Optional[EC2InstanceID] = None
    firstBoot: Optional[FirstBoot] = None
    jobID: Optional[JobID] = None


class LifeCycleState(Enum):
    STOPPED = 'STOPPED'
    NOT_READY = 'NOT_READY'
    READY_FOR_TEST = 'READY_FOR_TEST'
    TESTING = 'TESTING'
    READY_FOR_CUTOVER = 'READY_FOR_CUTOVER'
    CUTTING_OVER = 'CUTTING_OVER'
    CUTOVER = 'CUTOVER'
    DISCONNECTED = 'DISCONNECTED'


class LifeCycleLastCutoverFinalized(BaseModel):
    """
    Lifecycle Cutover finalized
    """

    apiCallDateTime: Optional[ISO8601DatetimeString] = None


class LifeCycleLastCutoverInitiated(BaseModel):
    """
    Lifecycle last Cutover initiated.
    """

    apiCallDateTime: Optional[ISO8601DatetimeString] = None
    jobID: Optional[JobID] = None


class LifeCycleLastCutoverReverted(LifeCycleLastCutoverFinalized):
    """
    Lifecycle last Cutover reverted.
    """

    pass


class LifeCycleLastTestFinalized(LifeCycleLastCutoverFinalized):
    """
    Lifecycle last Test finlized.
    """

    pass


class LifeCycleLastTestInitiated(LifeCycleLastCutoverInitiated):
    """
    Lifecycle last Test initiated.
    """

    pass


class LifeCycleLastTestReverted(LifeCycleLastCutoverFinalized):
    """
    Lifecycle last Test reverted.
    """

    pass


class ListTagsForResourceRequest(BaseModel):
    pass


class MarkAsArchivedRequest(BaseModel):
    sourceServerID: SourceServerID


class NetworkInterface(BaseModel):
    """
    Network interface.
    """

    ips: Optional[IPsList] = None
    isPrimary: Optional[Boolean] = None
    macAddress: Optional[BoundedString] = None


class NetworkInterfaces(BaseModel):
    __root__: Annotated[List[NetworkInterface], Field(max_items=32, min_items=0)]


class OS(BaseModel):
    """
    Operating System.
    """

    fullString: Optional[BoundedString] = None


class ParticipatingServer(BaseModel):
    """
    Server participating in Job.
    """

    launchStatus: Optional[LaunchStatus] = None
    sourceServerID: Optional[SourceServerID] = None


class ReplicationConfigurationReplicatedDiskStagingDiskType(Enum):
    AUTO = 'AUTO'
    GP2 = 'GP2'
    IO1 = 'IO1'
    SC1 = 'SC1'
    ST1 = 'ST1'
    STANDARD = 'STANDARD'


class RetryDataReplicationRequest(BaseModel):
    sourceServerID: SourceServerID


class SourceProperties(BaseModel):
    """
    Source server properties.
    """

    cpus: Optional[Cpus] = None
    disks: Optional[Disks] = None
    identificationHints: Optional[IdentificationHints] = None
    lastUpdatedDateTime: Optional[ISO8601DatetimeString] = None
    networkInterfaces: Optional[NetworkInterfaces] = None
    os: Optional[OS] = None
    ramBytes: Optional[PositiveInteger] = None
    recommendedInstanceType: Optional[EC2InstanceType] = None


class StartCutoverRequestSourceServerIDs(BaseModel):
    __root__: Annotated[List[SourceServerID], Field(max_items=200, min_items=1)]


class StartCutoverRequest(BaseModel):
    sourceServerIDs: StartCutoverRequestSourceServerIDs
    tags: Optional[TagsMap] = None


class StartTestRequestSourceServerIDs(StartCutoverRequestSourceServerIDs):
    pass


class StartTestRequest(BaseModel):
    sourceServerIDs: StartTestRequestSourceServerIDs
    tags: Optional[TagsMap] = None


class TagKeys(BaseModel):
    __root__: List[TagKey]


class TagResourceRequest(BaseModel):
    tags: TagsMap


class TerminateTargetInstancesRequestSourceServerIDs(
    StartCutoverRequestSourceServerIDs
):
    pass


class TerminateTargetInstancesRequest(BaseModel):
    sourceServerIDs: TerminateTargetInstancesRequestSourceServerIDs
    tags: Optional[TagsMap] = None


class UntagResourceRequest(BaseModel):
    pass


class UpdateLaunchConfigurationRequest(BaseModel):
    copyPrivateIp: Optional[Boolean] = None
    copyTags: Optional[Boolean] = None
    launchDisposition: Optional[LaunchDisposition] = None
    licensing: Optional[Licensing] = None
    name: Optional[SmallBoundedString] = None
    sourceServerID: SourceServerID
    targetInstanceTypeRightSizingMethod: Optional[
        TargetInstanceTypeRightSizingMethod
    ] = None


class UpdateReplicationConfigurationTemplateRequest(BaseModel):
    arn: Optional[ARN] = None
    associateDefaultSecurityGroup: Optional[Boolean] = None
    bandwidthThrottling: Optional[PositiveInteger] = None
    createPublicIP: Optional[Boolean] = None
    dataPlaneRouting: Optional[ReplicationConfigurationDataPlaneRouting] = None
    defaultLargeStagingDiskType: Optional[
        ReplicationConfigurationDefaultLargeStagingDiskType
    ] = None
    ebsEncryption: Optional[ReplicationConfigurationEbsEncryption] = None
    ebsEncryptionKeyArn: Optional[ARN] = None
    replicationConfigurationTemplateID: ReplicationConfigurationTemplateID
    replicationServerInstanceType: Optional[EC2InstanceType] = None
    replicationServersSecurityGroupsIDs: Optional[
        ReplicationServersSecurityGroupsIDs
    ] = None
    stagingAreaSubnetId: Optional[SubnetID] = None
    stagingAreaTags: Optional[TagsMap] = None
    useDedicatedReplicationServer: Optional[Boolean] = None


class ReplicationConfigurationTemplate(BaseModel):
    arn: Optional[ARN] = None
    associateDefaultSecurityGroup: Optional[Boolean] = None
    bandwidthThrottling: Optional[PositiveInteger] = None
    createPublicIP: Optional[Boolean] = None
    dataPlaneRouting: Optional[ReplicationConfigurationDataPlaneRouting] = None
    defaultLargeStagingDiskType: Optional[
        ReplicationConfigurationDefaultLargeStagingDiskType
    ] = None
    ebsEncryption: Optional[ReplicationConfigurationEbsEncryption] = None
    ebsEncryptionKeyArn: Optional[ARN] = None
    replicationConfigurationTemplateID: ReplicationConfigurationTemplateID
    replicationServerInstanceType: Optional[EC2InstanceType] = None
    replicationServersSecurityGroupsIDs: Optional[
        ReplicationServersSecurityGroupsIDs
    ] = None
    stagingAreaSubnetId: Optional[SubnetID] = None
    stagingAreaTags: Optional[TagsMap] = None
    tags: Optional[TagsMap] = None
    useDedicatedReplicationServer: Optional[Boolean] = None


class DescribeJobsRequestFiltersJobIDs(BaseModel):
    __root__: Annotated[List[JobID], Field(max_items=1000, min_items=0)]


class DescribeSourceServersRequestFiltersIDs(BaseModel):
    __root__: Annotated[List[SourceServerID], Field(max_items=200, min_items=0)]


class LaunchConfiguration(BaseModel):
    copyPrivateIp: Optional[Boolean] = None
    copyTags: Optional[Boolean] = None
    ec2LaunchTemplateID: Optional[BoundedString] = None
    launchDisposition: Optional[LaunchDisposition] = None
    licensing: Optional[Licensing] = None
    name: Optional[SmallBoundedString] = None
    sourceServerID: Optional[SourceServerID] = None
    targetInstanceTypeRightSizingMethod: Optional[
        TargetInstanceTypeRightSizingMethod
    ] = None


class ListTagsForResourceResponse(BaseModel):
    tags: Optional[TagsMap] = None


class ReplicationConfigurationReplicatedDisk(BaseModel):
    """
    Replication Configuration replicated disk.
    """

    deviceName: Optional[BoundedString] = None
    iops: Optional[PositiveInteger] = None
    isBootDisk: Optional[Boolean] = None
    stagingDiskType: Optional[
        ReplicationConfigurationReplicatedDiskStagingDiskType
    ] = None


class DataReplicationInfoReplicatedDisks(BaseModel):
    __root__: Annotated[
        List[DataReplicationInfoReplicatedDisk], Field(max_items=60, min_items=0)
    ]


class DataReplicationInitiationSteps(BaseModel):
    __root__: List[DataReplicationInitiationStep]


class JobLogs(BaseModel):
    __root__: List[JobLog]


class DescribeJobsRequestFilters(BaseModel):
    """
    Request to describe Job log filters.
    """

    fromDate: Optional[ISO8601DatetimeString] = None
    jobIDs: Optional[DescribeJobsRequestFiltersJobIDs] = None
    toDate: Optional[ISO8601DatetimeString] = None


class DescribeJobsRequest(BaseModel):
    filters: DescribeJobsRequestFilters
    maxResults: Optional[StrictlyPositiveInteger] = None
    nextToken: Optional[PaginationToken] = None


class ReplicationConfigurationTemplates(BaseModel):
    __root__: List[ReplicationConfigurationTemplate]


class DescribeSourceServersRequestFilters(BaseModel):
    """
    Request to filter Source Servers list.
    """

    isArchived: Optional[Boolean] = None
    sourceServerIDs: Optional[DescribeSourceServersRequestFiltersIDs] = None


class DescribeSourceServersRequest(BaseModel):
    filters: DescribeSourceServersRequestFilters
    maxResults: Optional[StrictlyPositiveInteger] = None
    nextToken: Optional[PaginationToken] = None


class ParticipatingServers(BaseModel):
    __root__: List[ParticipatingServer]


class Job(BaseModel):
    """
    Job.
    """

    arn: Optional[ARN] = None
    creationDateTime: Optional[ISO8601DatetimeString] = None
    endDateTime: Optional[ISO8601DatetimeString] = None
    initiatedBy: Optional[InitiatedBy] = None
    jobID: JobID
    participatingServers: Optional[ParticipatingServers] = None
    status: Optional[JobStatus] = None
    tags: Optional[TagsMap] = None
    type: Optional[JobType] = None


class LifeCycleLastCutover(BaseModel):
    """
    Lifecycle last Cutover .
    """

    finalized: Optional[LifeCycleLastCutoverFinalized] = None
    initiated: Optional[LifeCycleLastCutoverInitiated] = None
    reverted: Optional[LifeCycleLastCutoverReverted] = None


class LifeCycleLastTest(BaseModel):
    """
    Lifecycle last Test.
    """

    finalized: Optional[LifeCycleLastTestFinalized] = None
    initiated: Optional[LifeCycleLastTestInitiated] = None
    reverted: Optional[LifeCycleLastTestReverted] = None


class LifeCycle(BaseModel):
    """
    Lifecycle.
    """

    addedToServiceDateTime: Optional[ISO8601DatetimeString] = None
    elapsedReplicationDuration: Optional[ISO8601DatetimeString] = None
    firstByteDateTime: Optional[ISO8601DatetimeString] = None
    lastCutover: Optional[LifeCycleLastCutover] = None
    lastSeenByServiceDateTime: Optional[ISO8601DatetimeString] = None
    lastTest: Optional[LifeCycleLastTest] = None
    state: Optional[LifeCycleState] = None


class ReplicationConfigurationReplicatedDisks(BaseModel):
    __root__: Annotated[
        List[ReplicationConfigurationReplicatedDisk], Field(max_items=60, min_items=0)
    ]


class UpdateReplicationConfigurationRequest(BaseModel):
    associateDefaultSecurityGroup: Optional[Boolean] = None
    bandwidthThrottling: Optional[PositiveInteger] = None
    createPublicIP: Optional[Boolean] = None
    dataPlaneRouting: Optional[ReplicationConfigurationDataPlaneRouting] = None
    defaultLargeStagingDiskType: Optional[
        ReplicationConfigurationDefaultLargeStagingDiskType
    ] = None
    ebsEncryption: Optional[ReplicationConfigurationEbsEncryption] = None
    ebsEncryptionKeyArn: Optional[ARN] = None
    name: Optional[SmallBoundedString] = None
    replicatedDisks: Optional[ReplicationConfigurationReplicatedDisks] = None
    replicationServerInstanceType: Optional[EC2InstanceType] = None
    replicationServersSecurityGroupsIDs: Optional[
        ReplicationServersSecurityGroupsIDs
    ] = None
    sourceServerID: SourceServerID
    stagingAreaSubnetId: Optional[SubnetID] = None
    stagingAreaTags: Optional[TagsMap] = None
    useDedicatedReplicationServer: Optional[Boolean] = None


class DescribeJobLogItemsResponse(BaseModel):
    items: Optional[JobLogs] = None
    nextToken: Optional[PaginationToken] = None


class DescribeReplicationConfigurationTemplatesResponse(BaseModel):
    items: Optional[ReplicationConfigurationTemplates] = None
    nextToken: Optional[PaginationToken] = None


class ReplicationConfiguration(BaseModel):
    associateDefaultSecurityGroup: Optional[Boolean] = None
    bandwidthThrottling: Optional[PositiveInteger] = None
    createPublicIP: Optional[Boolean] = None
    dataPlaneRouting: Optional[ReplicationConfigurationDataPlaneRouting] = None
    defaultLargeStagingDiskType: Optional[
        ReplicationConfigurationDefaultLargeStagingDiskType
    ] = None
    ebsEncryption: Optional[ReplicationConfigurationEbsEncryption] = None
    ebsEncryptionKeyArn: Optional[ARN] = None
    name: Optional[SmallBoundedString] = None
    replicatedDisks: Optional[ReplicationConfigurationReplicatedDisks] = None
    replicationServerInstanceType: Optional[EC2InstanceType] = None
    replicationServersSecurityGroupsIDs: Optional[
        ReplicationServersSecurityGroupsIDs
    ] = None
    sourceServerID: Optional[SourceServerID] = None
    stagingAreaSubnetId: Optional[SubnetID] = None
    stagingAreaTags: Optional[TagsMap] = None
    useDedicatedReplicationServer: Optional[Boolean] = None


class StartCutoverResponse(BaseModel):
    job: Optional[Job] = None


class StartTestResponse(StartCutoverResponse):
    pass


class TerminateTargetInstancesResponse(StartCutoverResponse):
    pass


class DataReplicationInitiation(BaseModel):
    """
    Data replication initiation.
    """

    nextAttemptDateTime: Optional[ISO8601DatetimeString] = None
    startDateTime: Optional[ISO8601DatetimeString] = None
    steps: Optional[DataReplicationInitiationSteps] = None


class DataReplicationInfo(BaseModel):
    """
    Request data replication info.
    """

    dataReplicationError: Optional[DataReplicationError] = None
    dataReplicationInitiation: Optional[DataReplicationInitiation] = None
    dataReplicationState: Optional[DataReplicationState] = None
    etaDateTime: Optional[ISO8601DatetimeString] = None
    lagDuration: Optional[ISO8601DatetimeString] = None
    replicatedDisks: Optional[DataReplicationInfoReplicatedDisks] = None


class JobsList(BaseModel):
    __root__: List[Job]


class SourceServer(BaseModel):
    arn: Optional[ARN] = None
    dataReplicationInfo: Optional[DataReplicationInfo] = None
    isArchived: Optional[Boolean] = None
    launchedInstance: Optional[LaunchedInstance] = None
    lifeCycle: Optional[LifeCycle] = None
    sourceProperties: Optional[SourceProperties] = None
    sourceServerID: Optional[SourceServerID] = None
    tags: Optional[TagsMap] = None


class DescribeJobsResponse(BaseModel):
    items: Optional[JobsList] = None
    nextToken: Optional[PaginationToken] = None


class SourceServersList(BaseModel):
    __root__: List[SourceServer]


class DescribeSourceServersResponse(BaseModel):
    items: Optional[SourceServersList] = None
    nextToken: Optional[PaginationToken] = None
