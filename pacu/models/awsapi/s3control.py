# generated by datamodel-codegen:
#   filename:  openapi.yaml
#   timestamp: 2021-12-31T02:57:26+00:00

from __future__ import annotations

from datetime import datetime
from enum import Enum
from typing import Annotated, Any, List, Optional

from pydantic import BaseModel, Extra, Field


class VpcId(BaseModel):
    __root__: Annotated[str, Field(max_length=1024, min_length=1)]


class Setting(BaseModel):
    __root__: bool


class ObjectLambdaSupportingAccessPointArn(BaseModel):
    __root__: Annotated[
        str,
        Field(
            max_length=2048,
            min_length=1,
            regex='arn:[^:]+:s3:[^:]*:\\d{12}:accesspoint/.*',
        ),
    ]


class Boolean(Setting):
    pass


class BucketLocationConstraint(Enum):
    EU = 'EU'
    eu_west_1 = 'eu-west-1'
    us_west_1 = 'us-west-1'
    us_west_2 = 'us-west-2'
    ap_south_1 = 'ap-south-1'
    ap_southeast_1 = 'ap-southeast-1'
    ap_southeast_2 = 'ap-southeast-2'
    ap_northeast_1 = 'ap-northeast-1'
    sa_east_1 = 'sa-east-1'
    cn_north_1 = 'cn-north-1'
    eu_central_1 = 'eu-central-1'


class BucketAlreadyExists(BaseModel):
    __root__: Any


class BucketAlreadyOwnedByYou(BucketAlreadyExists):
    pass


class S3DeleteObjectTaggingOperation(BaseModel):
    """
    Contains no configuration parameters because the DELETE Object tagging API only accepts the bucket name and key name as parameters, which are defined in the job's manifest.
    """

    pass


class S3BucketArnString(BaseModel):
    __root__: Annotated[
        str, Field(max_length=128, min_length=1, regex='arn:[^:]+:s3:.*')
    ]


class JobReportFormat(Enum):
    Report_CSV_20180820 = 'Report_CSV_20180820'


class ReportPrefixString(BaseModel):
    __root__: Annotated[str, Field(max_length=512, min_length=1)]


class JobReportScope(Enum):
    AllTasks = 'AllTasks'
    FailedTasksOnly = 'FailedTasksOnly'


class TooManyRequestsException(BucketAlreadyExists):
    pass


class BadRequestException(BucketAlreadyExists):
    pass


class IdempotencyException(BucketAlreadyExists):
    pass


class InternalServiceException(BucketAlreadyExists):
    pass


class MultiRegionAccessPointName(BaseModel):
    __root__: Annotated[
        str, Field(max_length=50, regex='^[a-z0-9][-a-z0-9]{1,48}[a-z0-9]$')
    ]


class PublicAccessBlockConfiguration(BaseModel):
    """
    <p>The <code>PublicAccessBlock</code> configuration that you want to apply to this Amazon S3 account. You can enable the configuration options in any combination. For more information about when Amazon S3 considers a bucket or object public, see <a href="https://docs.aws.amazon.com/AmazonS3/latest/dev/access-control-block-public-access.html#access-control-block-public-access-policy-status">The Meaning of "Public"</a> in the <i>Amazon S3 User Guide</i>.</p> <p>This is not supported for Amazon S3 on Outposts.</p>
    """

    BlockPublicAcls: Optional[Setting] = None
    IgnorePublicAcls: Optional[Setting] = None
    BlockPublicPolicy: Optional[Setting] = None
    RestrictPublicBuckets: Optional[Setting] = None


class DeleteJobTaggingResult(S3DeleteObjectTaggingOperation):
    pass


class NotFoundException(BucketAlreadyExists):
    pass


class DeleteStorageLensConfigurationTaggingResult(S3DeleteObjectTaggingOperation):
    pass


class GetPublicAccessBlockOutput(BaseModel):
    PublicAccessBlockConfiguration: Optional[PublicAccessBlockConfiguration] = None


class NoSuchPublicAccessBlockConfiguration(BucketAlreadyExists):
    pass


class JobStatus(Enum):
    Active = 'Active'
    Cancelled = 'Cancelled'
    Cancelling = 'Cancelling'
    Complete = 'Complete'
    Completing = 'Completing'
    Failed = 'Failed'
    Failing = 'Failing'
    New = 'New'
    Paused = 'Paused'
    Pausing = 'Pausing'
    Preparing = 'Preparing'
    Ready = 'Ready'
    Suspended = 'Suspended'


class InvalidRequestException(BucketAlreadyExists):
    pass


class InvalidNextTokenException(BucketAlreadyExists):
    pass


class PutJobTaggingResult(S3DeleteObjectTaggingOperation):
    pass


class TooManyTagsException(BucketAlreadyExists):
    pass


class Policy(BaseModel):
    __root__: str


class ConfigId(BaseModel):
    __root__: Annotated[
        str, Field(max_length=64, min_length=1, regex='[a-zA-Z0-9\\-\\_\\.]+')
    ]


class IsEnabled(Setting):
    pass


class StorageLensArn(BaseModel):
    __root__: Annotated[
        str,
        Field(
            max_length=1024,
            min_length=1,
            regex='arn:[a-z\\-]+:s3:[a-z0-9\\-]+:\\d{12}:storage\\-lens\\/.*',
        ),
    ]


class PutStorageLensConfigurationTaggingResult(S3DeleteObjectTaggingOperation):
    pass


class JobStatusException(BucketAlreadyExists):
    pass


class DaysAfterInitiation(BaseModel):
    __root__: int


class AbortIncompleteMultipartUpload(BaseModel):
    """
    The container for abort incomplete multipart upload
    """

    DaysAfterInitiation: Optional[DaysAfterInitiation] = None


class AccessPointName(BaseModel):
    __root__: Annotated[str, Field(max_length=63, min_length=3)]


class NetworkOrigin(Enum):
    Internet = 'Internet'
    VPC = 'VPC'


class VpcConfiguration(BaseModel):
    """
    The virtual private cloud (VPC) configuration for an access point.
    """

    VpcId: VpcId


class BucketName(BaseModel):
    __root__: Annotated[str, Field(max_length=255, min_length=3)]


class S3AccessPointArn(BaseModel):
    __root__: Annotated[str, Field(max_length=128, min_length=4)]


class Alias(BaseModel):
    __root__: Annotated[str, Field(max_length=63, regex='^[0-9a-z\\\\-]{63}')]


class AccessPoint1(BaseModel):
    """
    An access point used to access a bucket.
    """

    Name: AccessPointName
    NetworkOrigin: NetworkOrigin
    VpcConfiguration: Optional[VpcConfiguration] = None
    Bucket: BucketName
    AccessPointArn: Optional[S3AccessPointArn] = None
    Alias: Optional[Alias] = None


class AccessPointList(BaseModel):
    __root__: List[AccessPoint1]


class AccountId(BaseModel):
    __root__: Annotated[str, Field(max_length=64, regex='^\\d{12}$')]


class ActivityMetrics(BaseModel):
    """
    A container for the activity metrics.
    """

    IsEnabled: Optional[IsEnabled] = None


class AsyncCreationTimestamp(BaseModel):
    __root__: datetime


class MaxLength1024String(BaseModel):
    __root__: Annotated[str, Field(max_length=1024)]


class AsyncErrorDetails(BaseModel):
    """
    Error details for the failed asynchronous operation.
    """

    Code: Optional[MaxLength1024String] = None
    Message: Optional[MaxLength1024String] = None
    Resource: Optional[MaxLength1024String] = None
    RequestId: Optional[MaxLength1024String] = None


class AsyncOperationName(Enum):
    CreateMultiRegionAccessPoint = 'CreateMultiRegionAccessPoint'
    DeleteMultiRegionAccessPoint = 'DeleteMultiRegionAccessPoint'
    PutMultiRegionAccessPointPolicy = 'PutMultiRegionAccessPointPolicy'


class AsyncRequestTokenARN(BaseModel):
    __root__: Annotated[str, Field(max_length=1024, min_length=1, regex='arn:.+')]


class AsyncRequestStatus(Policy):
    pass


class DeleteMultiRegionAccessPointInput(BaseModel):
    """
    A container for the information associated with a <a href="https://docs.aws.amazon.com/AmazonS3/latest/API/API_control_DeleteMultiRegionAccessPoint.html">DeleteMultiRegionAccessPoint</a> request.
    """

    Name: MultiRegionAccessPointName


class PutMultiRegionAccessPointPolicyInput(BaseModel):
    """
    A container for the information associated with a <a href="https://docs.aws.amazon.com/AmazonS3/latest/API/API_control_PutMultiRegionAccessPoint.html">PutMultiRegionAccessPoint</a> request.
    """

    Name: MultiRegionAccessPointName
    Policy: Policy


class FunctionArnString(BaseModel):
    __root__: Annotated[
        str,
        Field(
            max_length=1024,
            min_length=1,
            regex='(arn:(aws[a-zA-Z-]*)?:lambda:)?([a-z]{2}((-gov)|(-iso(b?)))?-[a-z]+-\\d{1}:)?(\\d{12}:)?(function:)?([a-zA-Z0-9-_]+)(:(\\$LATEST|[a-zA-Z0-9-_]+))?',
        ),
    ]


class AwsLambdaTransformationPayload(Policy):
    pass


class AwsLambdaTransformation(BaseModel):
    """
    Lambda function used to transform objects through an Object Lambda Access Point.
    """

    FunctionArn: FunctionArnString
    FunctionPayload: Optional[AwsLambdaTransformationPayload] = None


class AwsOrgArn(BaseModel):
    __root__: Annotated[
        str,
        Field(
            max_length=1024,
            min_length=1,
            regex='arn:[a-z\\-]+:organizations::\\d{12}:organization\\/o-[a-z0-9]{10,32}',
        ),
    ]


class BucketCannedACL(Enum):
    private = 'private'
    public_read = 'public-read'
    public_read_write = 'public-read-write'
    authenticated_read = 'authenticated-read'


class Buckets(BaseModel):
    __root__: List[S3BucketArnString]


class ConfirmRemoveSelfBucketAccess(Setting):
    pass


class ConfirmationRequired(Setting):
    pass


class ContinuationToken(Policy):
    pass


class ObjectLambdaAccessPointName(BaseModel):
    __root__: Annotated[
        str,
        Field(max_length=45, min_length=3, regex='^[a-z0-9]([a-z0-9\\-]*[a-z0-9])?$'),
    ]


class ObjectLambdaAccessPointArn(BaseModel):
    __root__: Annotated[
        str,
        Field(
            max_length=2048,
            min_length=1,
            regex='arn:[^:]+:s3-object-lambda:[^:]*:\\d{12}:accesspoint/.*',
        ),
    ]


class CreateAccessPointRequest(BaseModel):
    Bucket: BucketName
    VpcConfiguration: Optional[VpcConfiguration] = None
    PublicAccessBlockConfiguration: Optional[PublicAccessBlockConfiguration] = None


class CreateBucketConfiguration(BaseModel):
    """
    <p>The container for the bucket configuration.</p> <note> <p>This is not supported by Amazon S3 on Outposts buckets.</p> </note>
    """

    LocationConstraint: Optional[BucketLocationConstraint] = None


class GrantFullControl(Policy):
    pass


class GrantRead(Policy):
    pass


class GrantReadACP(Policy):
    pass


class GrantWrite(Policy):
    pass


class GrantWriteACP(Policy):
    pass


class ObjectLockEnabledForBucket(Setting):
    pass


class NonEmptyMaxLength64String(BaseModel):
    __root__: Annotated[str, Field(max_length=64, min_length=1)]


class CreateBucketRequest(BaseModel):
    CreateBucketConfiguration: Optional[CreateBucketConfiguration] = None


class Location(Policy):
    pass


class S3RegionalBucketArn(S3AccessPointArn):
    pass


class JobReport(BaseModel):
    """
    Contains the configuration parameters for a job-completion report.
    """

    Bucket: Optional[S3BucketArnString] = None
    Format: Optional[JobReportFormat] = None
    Enabled: Boolean
    Prefix: Optional[ReportPrefixString] = None
    ReportScope: Optional[JobReportScope] = None


class NonEmptyMaxLength256String(BaseModel):
    __root__: Annotated[str, Field(max_length=256, min_length=1)]


class JobPriority(BaseModel):
    __root__: Annotated[int, Field(ge=0.0, le=2147483647.0)]


class IAMRoleArn(BaseModel):
    __root__: Annotated[
        str,
        Field(max_length=2048, min_length=1, regex='arn:[^:]+:iam::\\d{12}:role/.*'),
    ]


class JobId(BaseModel):
    __root__: Annotated[
        str, Field(max_length=36, min_length=5, regex='[a-zA-Z0-9\\-\\_]+')
    ]


class MultiRegionAccessPointClientToken(BaseModel):
    __root__: Annotated[str, Field(max_length=64, regex='\\S+')]


class CreationDate(AsyncCreationTimestamp):
    pass


class CreationTimestamp(AsyncCreationTimestamp):
    pass


class Date(AsyncCreationTimestamp):
    pass


class Days(DaysAfterInitiation):
    pass


class DeleteAccessPointForObjectLambdaRequest(BaseModel):
    pass


class DeleteAccessPointPolicyForObjectLambdaRequest(BaseModel):
    pass


class DeleteAccessPointPolicyRequest(BaseModel):
    pass


class DeleteAccessPointRequest(BaseModel):
    pass


class DeleteBucketLifecycleConfigurationRequest(BaseModel):
    pass


class DeleteBucketPolicyRequest(BaseModel):
    pass


class DeleteBucketRequest(BaseModel):
    pass


class DeleteBucketTaggingRequest(BaseModel):
    pass


class DeleteJobTaggingRequest(BaseModel):
    pass


class DeleteMultiRegionAccessPointRequest1(BaseModel):
    ClientToken: MultiRegionAccessPointClientToken
    Details: DeleteMultiRegionAccessPointInput


class DeletePublicAccessBlockRequest(BaseModel):
    pass


class DeleteStorageLensConfigurationRequest(BaseModel):
    pass


class DeleteStorageLensConfigurationTaggingRequest(BaseModel):
    pass


class DescribeJobRequest(BaseModel):
    pass


class DescribeMultiRegionAccessPointOperationRequest(BaseModel):
    pass


class NonEmptyMaxLength1024String(VpcId):
    pass


class Endpoints(BaseModel):
    pass

    class Config:
        extra = Extra.allow


class EstablishedMultiRegionAccessPointPolicy(BaseModel):
    """
    <p>The last established access control policy for a Multi-Region Access Point.</p> <p>When you update the policy, the update is first listed as the proposed policy. After the update is finished and all Regions have been updated, the proposed policy is listed as the established policy. If both policies have the same version number, the proposed policy is the established policy.</p>
    """

    Policy: Optional[Policy] = None


class ExpirationStatus(Enum):
    Enabled = 'Enabled'
    Disabled = 'Disabled'


class ExpiredObjectDeleteMarker(Setting):
    pass


class Format2(Enum):
    CSV = 'CSV'
    Parquet = 'Parquet'


class GetAccessPointConfigurationForObjectLambdaRequest(BaseModel):
    pass


class GetAccessPointForObjectLambdaRequest(BaseModel):
    pass


class GetAccessPointPolicyForObjectLambdaRequest(BaseModel):
    pass


class ObjectLambdaPolicy(Policy):
    pass


class GetAccessPointPolicyRequest(BaseModel):
    pass


class GetAccessPointPolicyStatusForObjectLambdaRequest(BaseModel):
    pass


class GetAccessPointPolicyStatusRequest(BaseModel):
    pass


class GetAccessPointRequest(BaseModel):
    pass


class GetBucketLifecycleConfigurationRequest(BaseModel):
    pass


class GetBucketPolicyRequest(BaseModel):
    pass


class GetBucketRequest(BaseModel):
    pass


class PublicAccessBlockEnabled(Setting):
    pass


class GetBucketTaggingRequest(BaseModel):
    pass


class GetJobTaggingRequest(BaseModel):
    pass


class GetMultiRegionAccessPointPolicyRequest(BaseModel):
    pass


class GetMultiRegionAccessPointPolicyStatusRequest(BaseModel):
    pass


class GetMultiRegionAccessPointRequest(BaseModel):
    pass


class GetPublicAccessBlockRequest(BaseModel):
    pass


class GetStorageLensConfigurationRequest(BaseModel):
    pass


class GetStorageLensConfigurationTaggingRequest(BaseModel):
    pass


class ID(Policy):
    pass


class IsPublic(Setting):
    pass


class JobArn(BaseModel):
    __root__: Annotated[
        str,
        Field(
            max_length=1024,
            min_length=1,
            regex='arn:[^:]+:s3:[a-zA-Z0-9\\-]+:\\d{12}:job\\/.*',
        ),
    ]


class JobCreationTime(AsyncCreationTimestamp):
    pass


class JobStatusUpdateReason(NonEmptyMaxLength256String):
    pass


class JobTerminationDate(AsyncCreationTimestamp):
    pass


class SuspendedDate(AsyncCreationTimestamp):
    pass


class SuspendedCause(VpcId):
    pass


class JobFailureCode(NonEmptyMaxLength64String):
    pass


class JobFailureReason(NonEmptyMaxLength256String):
    pass


class JobFailure(BaseModel):
    """
    If this job failed, this element indicates why the job failed.
    """

    FailureCode: Optional[JobFailureCode] = None
    FailureReason: Optional[JobFailureReason] = None


class OperationName(Enum):
    LambdaInvoke = 'LambdaInvoke'
    S3PutObjectCopy = 'S3PutObjectCopy'
    S3PutObjectAcl = 'S3PutObjectAcl'
    S3PutObjectTagging = 'S3PutObjectTagging'
    S3DeleteObjectTagging = 'S3DeleteObjectTagging'
    S3InitiateRestoreObject = 'S3InitiateRestoreObject'
    S3PutObjectLegalHold = 'S3PutObjectLegalHold'
    S3PutObjectRetention = 'S3PutObjectRetention'


class JobManifestFieldName(Enum):
    Ignore = 'Ignore'
    Bucket = 'Bucket'
    Key = 'Key'
    VersionId = 'VersionId'


class JobManifestFieldList(BaseModel):
    __root__: List[JobManifestFieldName]


class JobManifestFormat(Enum):
    S3BatchOperations_CSV_20180820 = 'S3BatchOperations_CSV_20180820'
    S3InventoryReport_CSV_20161130 = 'S3InventoryReport_CSV_20161130'


class S3KeyArnString(BaseModel):
    __root__: Annotated[
        str, Field(max_length=2000, min_length=1, regex='arn:[^:]+:s3:.*')
    ]


class S3ObjectVersionId(BaseModel):
    __root__: Annotated[str, Field(max_length=2000, min_length=1)]


class JobNumberOfTasksFailed(BaseModel):
    __root__: Annotated[int, Field(ge=0.0)]


class JobNumberOfTasksSucceeded(JobNumberOfTasksFailed):
    pass


class JobTotalNumberOfTasks(JobNumberOfTasksFailed):
    pass


class JobStatusList(BaseModel):
    __root__: List[JobStatus]


class KmsKeyArnString(S3ObjectVersionId):
    pass


class LifecycleExpiration(BaseModel):
    """
    The container of the Outposts bucket lifecycle expiration.
    """

    Date: Optional[Date] = None
    Days: Optional[Days] = None
    ExpiredObjectDeleteMarker: Optional[ExpiredObjectDeleteMarker] = None


class NoncurrentVersionExpiration(BaseModel):
    """
    The container of the noncurrent version expiration.
    """

    NoncurrentDays: Optional[Days] = None


class Prefix(Policy):
    pass


class MaxResults(BaseModel):
    __root__: Annotated[int, Field(ge=0.0, le=1000.0)]


class ListAccessPointsForObjectLambdaRequest(BaseModel):
    pass


class ListAccessPointsRequest(BaseModel):
    pass


class StringForNextToken(BaseModel):
    __root__: Annotated[
        str,
        Field(
            max_length=1024, min_length=1, regex='^[A-Za-z0-9\\+\\:\\/\\=\\?\\#-_]+$'
        ),
    ]


class ListJobsRequest(BaseModel):
    pass


class ListMultiRegionAccessPointsRequest(BaseModel):
    pass


class ListRegionalBucketsRequest(BaseModel):
    pass


class S3AWSRegion(BaseModel):
    __root__: Annotated[str, Field(max_length=30, min_length=5, regex='[a-z0-9\\-]+')]


class ListStorageLensConfigurationEntry(BaseModel):
    """
    Part of <code>ListStorageLensConfigurationResult</code>. Each entry includes the description of the S3 Storage Lens configuration, its home Region, whether it is enabled, its Amazon Resource Name (ARN), and config ID.
    """

    Id: ConfigId
    StorageLensArn: StorageLensArn
    HomeRegion: S3AWSRegion
    IsEnabled: Optional[IsEnabled] = None


class ListStorageLensConfigurationsRequest(BaseModel):
    pass


class StorageLensConfigurationList(BaseModel):
    __root__: List[ListStorageLensConfigurationEntry]


class MinStorageBytesPercentage(BaseModel):
    __root__: Annotated[float, Field(ge=0.1, le=100.0)]


class MultiRegionAccessPointAlias(BaseModel):
    __root__: Annotated[str, Field(max_length=63, regex='^[a-z][a-z0-9]*[.]mrap$')]


class ProposedMultiRegionAccessPointPolicy(EstablishedMultiRegionAccessPointPolicy):
    """
    <p>The proposed access control policy for the Multi-Region Access Point.</p> <p>When you update the policy, the update is first listed as the proposed policy. After the update is finished and all Regions have been updated, the proposed policy is listed as the established policy. If both policies have the same version number, the proposed policy is the established policy.</p>
    """

    pass


class RegionName(NonEmptyMaxLength64String):
    pass


class MultiRegionAccessPointRegionalResponse(BaseModel):
    """
    Status information for a single Multi-Region Access Point Region.
    """

    Name: Optional[RegionName] = None
    RequestStatus: Optional[AsyncRequestStatus] = None


class MultiRegionAccessPointRegionalResponseList(BaseModel):
    __root__: List[MultiRegionAccessPointRegionalResponse]


class MultiRegionAccessPointStatus(Enum):
    READY = 'READY'
    INCONSISTENT_ACROSS_REGIONS = 'INCONSISTENT_ACROSS_REGIONS'
    CREATING = 'CREATING'
    PARTIALLY_CREATED = 'PARTIALLY_CREATED'
    PARTIALLY_DELETED = 'PARTIALLY_DELETED'
    DELETING = 'DELETING'


class NonEmptyMaxLength2048String(BaseModel):
    __root__: Annotated[str, Field(max_length=2048, min_length=1)]


class TransitionStorageClass(Enum):
    GLACIER = 'GLACIER'
    STANDARD_IA = 'STANDARD_IA'
    ONEZONE_IA = 'ONEZONE_IA'
    INTELLIGENT_TIERING = 'INTELLIGENT_TIERING'
    DEEP_ARCHIVE = 'DEEP_ARCHIVE'


class NoncurrentVersionTransition(BaseModel):
    """
    The container for the noncurrent version transition.
    """

    NoncurrentDays: Optional[Days] = None
    StorageClass: Optional[TransitionStorageClass] = None


class ObjectLambdaAccessPoint(BaseModel):
    """
    An access point with an attached Lambda function used to access transformed data from an Amazon S3 bucket.
    """

    Name: ObjectLambdaAccessPointName
    ObjectLambdaAccessPointArn: Optional[ObjectLambdaAccessPointArn] = None


class ObjectLambdaAllowedFeature(Enum):
    GetObject_Range = 'GetObject-Range'
    GetObject_PartNumber = 'GetObject-PartNumber'


class ObjectLambdaContentTransformation(BaseModel):
    """
    A container for AwsLambdaTransformation.
    """

    AwsLambda: Optional[AwsLambdaTransformation] = None


class ObjectLambdaTransformationConfigurationAction(Enum):
    GetObject = 'GetObject'


class OutputSchemaVersion(Enum):
    V_1 = 'V_1'


class PutAccessPointPolicyForObjectLambdaRequest(BaseModel):
    Policy: ObjectLambdaPolicy


class PutAccessPointPolicyRequest(BaseModel):
    Policy: Policy


class PutBucketPolicyRequest(BaseModel):
    Policy: Policy


class PutMultiRegionAccessPointPolicyRequest1(BaseModel):
    ClientToken: MultiRegionAccessPointClientToken
    Details: PutMultiRegionAccessPointPolicyInput


class PutPublicAccessBlockRequest(BaseModel):
    PublicAccessBlockConfiguration: PublicAccessBlockConfiguration


class Region(BaseModel):
    """
    A Region that supports a Multi-Region Access Point as well as the associated bucket for the Region.
    """

    Bucket: BucketName


class RegionReport(BaseModel):
    """
    A combination of a bucket and Region that's part of a Multi-Region Access Point.
    """

    Bucket: Optional[BucketName] = None
    Region: Optional[RegionName] = None


class RegionalBucket(BaseModel):
    """
    The container for the regional bucket.
    """

    Bucket: BucketName
    BucketArn: Optional[S3RegionalBucketArn] = None
    PublicAccessBlockEnabled: PublicAccessBlockEnabled
    CreationDate: CreationDate
    OutpostId: Optional[NonEmptyMaxLength64String] = None


class RequestedJobStatus(Enum):
    Cancelled = 'Cancelled'
    Ready = 'Ready'


class S3ObjectOwner(BaseModel):
    """
    <p/>
    """

    ID: Optional[NonEmptyMaxLength1024String] = None
    DisplayName: Optional[NonEmptyMaxLength1024String] = None


class S3CannedAccessControlList(Enum):
    private = 'private'
    public_read = 'public-read'
    public_read_write = 'public-read-write'
    aws_exec_read = 'aws-exec-read'
    authenticated_read = 'authenticated-read'
    bucket_owner_read = 'bucket-owner-read'
    bucket_owner_full_control = 'bucket-owner-full-control'


class S3ContentLength(JobNumberOfTasksFailed):
    pass


class S3MetadataDirective(Enum):
    COPY = 'COPY'
    REPLACE = 'REPLACE'


class TimeStamp(AsyncCreationTimestamp):
    pass


class S3StorageClass(Enum):
    STANDARD = 'STANDARD'
    STANDARD_IA = 'STANDARD_IA'
    ONEZONE_IA = 'ONEZONE_IA'
    GLACIER = 'GLACIER'
    INTELLIGENT_TIERING = 'INTELLIGENT_TIERING'
    DEEP_ARCHIVE = 'DEEP_ARCHIVE'


class S3ObjectLockLegalHoldStatus(Enum):
    OFF = 'OFF'
    ON = 'ON'


class S3ObjectLockMode(Enum):
    COMPLIANCE = 'COMPLIANCE'
    GOVERNANCE = 'GOVERNANCE'


class S3ExpirationInDays(JobNumberOfTasksFailed):
    pass


class S3GlacierJobTier(Enum):
    BULK = 'BULK'
    STANDARD = 'STANDARD'


class S3Permission(Enum):
    FULL_CONTROL = 'FULL_CONTROL'
    READ = 'READ'
    WRITE = 'WRITE'
    READ_ACP = 'READ_ACP'
    WRITE_ACP = 'WRITE_ACP'


class S3GranteeTypeIdentifier(Enum):
    id = 'id'
    emailAddress = 'emailAddress'
    uri = 'uri'


class S3ObjectLockLegalHold(BaseModel):
    """
    Whether S3 Object Lock legal hold will be applied to objects in an S3 Batch Operations job.
    """

    Status: S3ObjectLockLegalHoldStatus


class S3UserMetadata(BaseModel):
    pass

    class Config:
        extra = Extra.allow


class S3SSEAlgorithm(Enum):
    AES256 = 'AES256'
    KMS = 'KMS'


class S3Retention(BaseModel):
    """
    Contains the S3 Object Lock retention mode to be applied to all objects in the S3 Batch Operations job. If you don't provide <code>Mode</code> and <code>RetainUntilDate</code> data types in your operation, you will remove the retention from your objects. For more information, see <a href="https://docs.aws.amazon.com/AmazonS3/latest/dev/batch-ops-retention-date.html">Using S3 Object Lock retention with S3 Batch Operations</a> in the <i>Amazon S3 User Guide</i>.
    """

    RetainUntilDate: Optional[TimeStamp] = None
    Mode: Optional[S3ObjectLockMode] = None


class TagKeyString(BaseModel):
    __root__: Annotated[
        str,
        Field(
            max_length=1024, min_length=1, regex='^([\\p{L}\\p{Z}\\p{N}_.:/=+\\-@]*)$'
        ),
    ]


class TagValueString(BaseModel):
    __root__: Annotated[
        str, Field(max_length=1024, regex='^([\\p{L}\\p{Z}\\p{N}_.:/=+\\-@]*)$')
    ]


class SSEKMSKeyId(Policy):
    pass


class SSEKMS(BaseModel):
    """
    <p/>
    """

    KeyId: SSEKMSKeyId


class SSES3(S3DeleteObjectTaggingOperation):
    """
    <p/>
    """

    pass


class StorageLensPrefixLevelDelimiter(BaseModel):
    __root__: Annotated[str, Field(max_length=1)]


class StorageLensPrefixLevelMaxDepth(BaseModel):
    __root__: Annotated[int, Field(ge=1.0, le=10.0)]


class Transition(BaseModel):
    """
    Specifies when an object transitions to a specified storage class. For more information about Amazon S3 Lifecycle configuration rules, see <a href="https://docs.aws.amazon.com/AmazonS3/latest/dev/lifecycle-transition-general-considerations.html"> Transitioning objects using Amazon S3 Lifecycle</a> in the <i>Amazon S3 User Guide</i>.
    """

    Date: Optional[Date] = None
    Days: Optional[Days] = None
    StorageClass: Optional[TransitionStorageClass] = None


class UpdateJobPriorityRequest(BaseModel):
    pass


class UpdateJobStatusRequest(BaseModel):
    pass


class CreateAccessPointResult(BaseModel):
    AccessPointArn: Optional[S3AccessPointArn] = None
    Alias: Optional[Alias] = None


class CreateAccessPointForObjectLambdaResult(BaseModel):
    ObjectLambdaAccessPointArn: Optional[ObjectLambdaAccessPointArn] = None


class ObjectLambdaAllowedFeaturesList(BaseModel):
    __root__: List[ObjectLambdaAllowedFeature]


class CreateBucketResult(BaseModel):
    BucketArn: Optional[S3RegionalBucketArn] = None


class CreateJobResult(BaseModel):
    JobId: Optional[JobId] = None


class LambdaInvokeOperation(BaseModel):
    """
    Contains the configuration parameters for a <code>Lambda Invoke</code> operation.
    """

    FunctionArn: Optional[FunctionArnString] = None


class S3InitiateRestoreObjectOperation(BaseModel):
    """
    Contains the configuration parameters for an S3 Initiate Restore Object job. S3 Batch Operations passes every object to the underlying POST Object restore API. For more information about the parameters for this operation, see <a href="https://docs.aws.amazon.com/AmazonS3/latest/API/RESTObjectPOSTrestore.html#RESTObjectPOSTrestore-restore-request">RestoreObject</a>.
    """

    ExpirationInDays: Optional[S3ExpirationInDays] = None
    GlacierJobTier: Optional[S3GlacierJobTier] = None


class S3SetObjectLegalHoldOperation(BaseModel):
    """
    Contains the configuration for an S3 Object Lock legal hold operation that an S3 Batch Operations job passes every object to the underlying <code>PutObjectLegalHold</code> API. For more information, see <a href="https://docs.aws.amazon.com/AmazonS3/latest/dev/batch-ops-legal-hold.html">Using S3 Object Lock legal hold with S3 Batch Operations</a> in the <i>Amazon S3 User Guide</i>.
    """

    LegalHold: S3ObjectLockLegalHold


class S3SetObjectRetentionOperation(BaseModel):
    """
    Contains the configuration parameters for the Object Lock retention action for an S3 Batch Operations job. Batch Operations passes every object to the underlying <code>PutObjectRetention</code> API. For more information, see <a href="https://docs.aws.amazon.com/AmazonS3/latest/dev/batch-ops-retention-date.html">Using S3 Object Lock retention with S3 Batch Operations</a> in the <i>Amazon S3 User Guide</i>.
    """

    BypassGovernanceRetention: Optional[Boolean] = None
    Retention: S3Retention


class JobManifestSpec(BaseModel):
    """
    Describes the format of a manifest. If the manifest is in CSV format, also describes the columns contained within the manifest.
    """

    Format: JobManifestFormat
    Fields: Optional[JobManifestFieldList] = None


class JobManifestLocation(BaseModel):
    """
    Contains the information required to locate a manifest object.
    """

    ObjectArn: S3KeyArnString
    ObjectVersionId: Optional[S3ObjectVersionId] = None
    ETag: NonEmptyMaxLength1024String


class S3Tag(BaseModel):
    """
    <p/>
    """

    Key: TagKeyString
    Value: TagValueString


class CreateMultiRegionAccessPointResult(BaseModel):
    RequestTokenARN: Optional[AsyncRequestTokenARN] = None


class RegionCreationList(BaseModel):
    __root__: List[Region]


class DeleteMultiRegionAccessPointResult(CreateMultiRegionAccessPointResult):
    pass


class GetAccessPointResult(BaseModel):
    Name: Optional[AccessPointName] = None
    Bucket: Optional[BucketName] = None
    NetworkOrigin: Optional[NetworkOrigin] = None
    VpcConfiguration: Optional[VpcConfiguration] = None
    PublicAccessBlockConfiguration: Optional[PublicAccessBlockConfiguration] = None
    CreationDate: Optional[CreationDate] = None
    Alias: Optional[Alias] = None
    AccessPointArn: Optional[S3AccessPointArn] = None
    Endpoints: Optional[Endpoints] = None


class GetAccessPointForObjectLambdaResult(BaseModel):
    Name: Optional[ObjectLambdaAccessPointName] = None
    PublicAccessBlockConfiguration: Optional[PublicAccessBlockConfiguration] = None
    CreationDate: Optional[CreationDate] = None


class GetAccessPointPolicyResult(EstablishedMultiRegionAccessPointPolicy):
    pass


class GetAccessPointPolicyForObjectLambdaResult(BaseModel):
    Policy: Optional[ObjectLambdaPolicy] = None


class GetBucketResult(BaseModel):
    Bucket: Optional[BucketName] = None
    PublicAccessBlockEnabled: Optional[PublicAccessBlockEnabled] = None
    CreationDate: Optional[CreationDate] = None


class GetBucketPolicyResult(EstablishedMultiRegionAccessPointPolicy):
    pass


class ListAccessPointsResult(BaseModel):
    AccessPointList: Optional[AccessPointList] = None
    NextToken: Optional[NonEmptyMaxLength1024String] = None


class ListStorageLensConfigurationsResult(BaseModel):
    NextToken: Optional[ContinuationToken] = None
    StorageLensConfigurationList: Optional[StorageLensConfigurationList] = None


class S3TagSet(BaseModel):
    __root__: List[S3Tag]


class PutMultiRegionAccessPointPolicyResult(CreateMultiRegionAccessPointResult):
    pass


class StorageLensAwsOrg(BaseModel):
    """
    The Amazon Web Services organization for your S3 Storage Lens.
    """

    Arn: AwsOrgArn


class StorageLensTag(S3Tag):
    """
    <p/>
    """

    pass


class UpdateJobPriorityResult(BaseModel):
    JobId: JobId
    Priority: JobPriority


class UpdateJobStatusResult(BaseModel):
    JobId: Optional[JobId] = None
    Status: Optional[JobStatus] = None
    StatusUpdateReason: Optional[JobStatusUpdateReason] = None


class CreateMultiRegionAccessPointInput(BaseModel):
    """
    A container for the information associated with a <a href="https://docs.aws.amazon.com/AmazonS3/latest/API/API_control_CreateMultiRegionAccessPoint.html">CreateMultiRegionAccessPoint</a> request.
    """

    Name: MultiRegionAccessPointName
    PublicAccessBlock: Optional[PublicAccessBlockConfiguration] = None
    Regions: RegionCreationList


class MultiRegionAccessPointsAsyncResponse(BaseModel):
    """
    The Multi-Region Access Point details that are returned when querying about an asynchronous request.
    """

    Regions: Optional[MultiRegionAccessPointRegionalResponseList] = None


class JobManifest(BaseModel):
    """
    Contains the configuration information for a job's manifest.
    """

    Spec: JobManifestSpec
    Location: JobManifestLocation


class CreateMultiRegionAccessPointRequest1(BaseModel):
    ClientToken: MultiRegionAccessPointClientToken
    Details: CreateMultiRegionAccessPointInput


class Regions(BaseModel):
    __root__: List[S3AWSRegion]


class PolicyStatus(BaseModel):
    """
    Indicates whether this access point policy is public. For more information about how Amazon S3 evaluates policies to determine whether they are public, see <a href="https://docs.aws.amazon.com/AmazonS3/latest/dev/access-control-block-public-access.html#access-control-block-public-access-policy-status">The Meaning of "Public"</a> in the <i>Amazon S3 User Guide</i>.
    """

    IsPublic: Optional[IsPublic] = None


class MultiRegionAccessPointPolicyDocument(BaseModel):
    """
    <p>The Multi-Region Access Point access control policy.</p> <p>When you update the policy, the update is first listed as the proposed policy. After the update is finished and all Regions have been updated, the proposed policy is listed as the established policy. If both policies have the same version number, the proposed policy is the established policy.</p>
    """

    Established: Optional[EstablishedMultiRegionAccessPointPolicy] = None
    Proposed: Optional[ProposedMultiRegionAccessPointPolicy] = None


class StorageLensTags(BaseModel):
    __root__: List[StorageLensTag]


class JobProgressSummary(BaseModel):
    """
    Describes the total number of tasks that the specified job has started, the number of tasks that succeeded, and the number of tasks that failed.
    """

    TotalNumberOfTasks: Optional[JobTotalNumberOfTasks] = None
    NumberOfTasksSucceeded: Optional[JobNumberOfTasksSucceeded] = None
    NumberOfTasksFailed: Optional[JobNumberOfTasksFailed] = None


class JobFailureList(BaseModel):
    __root__: List[JobFailure]


class JobListDescriptor(BaseModel):
    """
    Contains the configuration and status information for a single job retrieved as part of a job list.
    """

    JobId: Optional[JobId] = None
    Description: Optional[NonEmptyMaxLength256String] = None
    Operation: Optional[OperationName] = None
    Priority: Optional[JobPriority] = None
    Status: Optional[JobStatus] = None
    CreationTime: Optional[JobCreationTime] = None
    TerminationDate: Optional[JobTerminationDate] = None
    ProgressSummary: Optional[JobProgressSummary] = None


class JobListDescriptorList(BaseModel):
    __root__: List[JobListDescriptor]


class TransitionList(BaseModel):
    __root__: List[Transition]


class NoncurrentVersionTransitionList(BaseModel):
    __root__: List[NoncurrentVersionTransition]


class LifecycleRuleAndOperator(BaseModel):
    """
    The container for the Outposts bucket lifecycle rule and operator.
    """

    Prefix: Optional[Prefix] = None
    Tags: Optional[S3TagSet] = None


class ObjectLambdaAccessPointList(BaseModel):
    __root__: List[ObjectLambdaAccessPoint]


class RegionalBucketList(BaseModel):
    __root__: List[RegionalBucket]


class RegionReportList(BaseModel):
    __root__: List[RegionReport]


class ObjectLambdaTransformationConfigurationActionsList(BaseModel):
    __root__: List[ObjectLambdaTransformationConfigurationAction]


class ObjectLambdaTransformationConfiguration(BaseModel):
    """
    A configuration used when creating an Object Lambda Access Point transformation.
    """

    Actions: ObjectLambdaTransformationConfigurationActionsList
    ContentTransformation: ObjectLambdaContentTransformation


class SelectionCriteria(BaseModel):
    """
    <p/>
    """

    Delimiter: Optional[StorageLensPrefixLevelDelimiter] = None
    MaxDepth: Optional[StorageLensPrefixLevelMaxDepth] = None
    MinStorageBytesPercentage: Optional[MinStorageBytesPercentage] = None


class Tagging(BaseModel):
    """
    <p/>
    """

    TagSet: S3TagSet


class PutBucketTaggingRequest(BaseModel):
    Tagging: Tagging


class PutJobTaggingRequest(BaseModel):
    Tags: S3TagSet


class PutStorageLensConfigurationTaggingRequest(BaseModel):
    Tags: StorageLensTags


class StorageLensDataExportEncryption(BaseModel):
    """
    A container for the encryption of the S3 Storage Lens metrics exports.
    """

    SSES3: Optional[SSES3] = None
    SSEKMS: Optional[SSEKMS] = None


class S3BucketDestination(BaseModel):
    """
    A container for the bucket where the Amazon S3 Storage Lens metrics export files are located.
    """

    Format: Format2
    OutputSchemaVersion: OutputSchemaVersion
    AccountId: AccountId
    Arn: S3BucketArnString
    Prefix: Optional[Prefix] = None
    Encryption: Optional[StorageLensDataExportEncryption] = None


class S3ObjectMetadata(BaseModel):
    """
    <p/>
    """

    CacheControl: Optional[NonEmptyMaxLength1024String] = None
    ContentDisposition: Optional[NonEmptyMaxLength1024String] = None
    ContentEncoding: Optional[NonEmptyMaxLength1024String] = None
    ContentLanguage: Optional[NonEmptyMaxLength1024String] = None
    UserMetadata: Optional[S3UserMetadata] = None
    ContentLength: Optional[S3ContentLength] = None
    ContentMD5: Optional[NonEmptyMaxLength1024String] = None
    ContentType: Optional[NonEmptyMaxLength1024String] = None
    HttpExpiresDate: Optional[TimeStamp] = None
    RequesterCharged: Optional[Boolean] = None
    SSEAlgorithm: Optional[S3SSEAlgorithm] = None


class S3Grantee(BaseModel):
    """
    <p/>
    """

    TypeIdentifier: Optional[S3GranteeTypeIdentifier] = None
    Identifier: Optional[NonEmptyMaxLength1024String] = None
    DisplayName: Optional[NonEmptyMaxLength1024String] = None


class S3Grant(BaseModel):
    """
    <p/>
    """

    Grantee: Optional[S3Grantee] = None
    Permission: Optional[S3Permission] = None


class ObjectLambdaTransformationConfigurationsList(BaseModel):
    __root__: List[ObjectLambdaTransformationConfiguration]


class S3SetObjectTaggingOperation(BaseModel):
    """
    Contains the configuration parameters for a Set Object Tagging operation. S3 Batch Operations passes every object to the underlying PUT Object tagging API. For more information about the parameters for this operation, see <a href="https://docs.aws.amazon.com/AmazonS3/latest/API/RESTObjectPUTtagging.html">PUT Object tagging</a>.
    """

    TagSet: Optional[S3TagSet] = None


class GetAccessPointPolicyStatusResult(BaseModel):
    PolicyStatus: Optional[PolicyStatus] = None


class GetAccessPointPolicyStatusForObjectLambdaResult(GetAccessPointPolicyStatusResult):
    pass


class GetBucketTaggingResult(Tagging):
    pass


class GetJobTaggingResult(BaseModel):
    Tags: Optional[S3TagSet] = None


class GetMultiRegionAccessPointPolicyResult(BaseModel):
    Policy: Optional[MultiRegionAccessPointPolicyDocument] = None


class GetMultiRegionAccessPointPolicyStatusResult(BaseModel):
    Established: Optional[PolicyStatus] = None


class GetStorageLensConfigurationTaggingResult(BaseModel):
    Tags: Optional[StorageLensTags] = None


class ListAccessPointsForObjectLambdaResult(BaseModel):
    ObjectLambdaAccessPointList: Optional[ObjectLambdaAccessPointList] = None
    NextToken: Optional[NonEmptyMaxLength1024String] = None


class ListJobsResult(BaseModel):
    NextToken: Optional[StringForNextToken] = None
    Jobs: Optional[JobListDescriptorList] = None


class ListRegionalBucketsResult(BaseModel):
    RegionalBucketList: Optional[RegionalBucketList] = None
    NextToken: Optional[NonEmptyMaxLength1024String] = None


class Include(BaseModel):
    """
    A container for what Amazon S3 Storage Lens configuration includes.
    """

    Buckets: Optional[Buckets] = None
    Regions: Optional[Regions] = None


class Exclude(Include):
    """
    A container for what Amazon S3 Storage Lens will exclude.
    """

    pass


class StorageLensDataExport(BaseModel):
    """
    A container to specify the properties of your S3 Storage Lens metrics export, including the destination, schema, and format.
    """

    S3BucketDestination: S3BucketDestination


class AsyncRequestParameters(BaseModel):
    """
    A container for the request parameters associated with an asynchronous request.
    """

    CreateMultiRegionAccessPointRequest: Optional[
        CreateMultiRegionAccessPointInput
    ] = None
    DeleteMultiRegionAccessPointRequest: Optional[
        DeleteMultiRegionAccessPointInput
    ] = None
    PutMultiRegionAccessPointPolicyRequest: Optional[
        PutMultiRegionAccessPointPolicyInput
    ] = None


class AsyncResponseDetails(BaseModel):
    """
    A container for the response details that are returned when querying about an asynchronous request.
    """

    MultiRegionAccessPointDetails: Optional[MultiRegionAccessPointsAsyncResponse] = None
    ErrorDetails: Optional[AsyncErrorDetails] = None


class AsyncOperation(BaseModel):
    """
    A container for the information about an asynchronous operation.
    """

    CreationTime: Optional[AsyncCreationTimestamp] = None
    Operation: Optional[AsyncOperationName] = None
    RequestTokenARN: Optional[AsyncRequestTokenARN] = None
    RequestParameters: Optional[AsyncRequestParameters] = None
    RequestStatus: Optional[AsyncRequestStatus] = None
    ResponseDetails: Optional[AsyncResponseDetails] = None


class ObjectLambdaConfiguration(BaseModel):
    """
    A configuration used when creating an Object Lambda Access Point.
    """

    SupportingAccessPoint: ObjectLambdaSupportingAccessPointArn
    CloudWatchMetricsEnabled: Optional[Boolean] = None
    AllowedFeatures: Optional[ObjectLambdaAllowedFeaturesList] = None
    TransformationConfigurations: ObjectLambdaTransformationConfigurationsList


class CreateAccessPointForObjectLambdaRequest(BaseModel):
    Configuration: ObjectLambdaConfiguration


class MultiRegionAccessPointReport(BaseModel):
    """
    A collection of statuses for a Multi-Region Access Point in the various Regions it supports.
    """

    Name: Optional[MultiRegionAccessPointName] = None
    Alias: Optional[MultiRegionAccessPointAlias] = None
    CreatedAt: Optional[CreationTimestamp] = None
    PublicAccessBlock: Optional[PublicAccessBlockConfiguration] = None
    Status: Optional[MultiRegionAccessPointStatus] = None
    Regions: Optional[RegionReportList] = None


class LifecycleRuleFilter(BaseModel):
    """
    The container for the filter of the lifecycle rule.
    """

    Prefix: Optional[Prefix] = None
    Tag: Optional[S3Tag] = None
    And: Optional[LifecycleRuleAndOperator] = None


class LifecycleRule(BaseModel):
    """
    The container for the Outposts bucket lifecycle rule.
    """

    Expiration: Optional[LifecycleExpiration] = None
    ID: Optional[ID] = None
    Filter: Optional[LifecycleRuleFilter] = None
    Status: ExpirationStatus
    Transitions: Optional[TransitionList] = None
    NoncurrentVersionTransitions: Optional[NoncurrentVersionTransitionList] = None
    NoncurrentVersionExpiration: Optional[NoncurrentVersionExpiration] = None
    AbortIncompleteMultipartUpload: Optional[AbortIncompleteMultipartUpload] = None


class MultiRegionAccessPointReportList(BaseModel):
    __root__: List[MultiRegionAccessPointReport]


class PrefixLevelStorageMetrics(BaseModel):
    """
    A container for the prefix-level storage metrics for S3 Storage Lens.
    """

    IsEnabled: Optional[IsEnabled] = None
    SelectionCriteria: Optional[SelectionCriteria] = None


class PutAccessPointConfigurationForObjectLambdaRequest(BaseModel):
    Configuration: ObjectLambdaConfiguration


class S3GrantList(BaseModel):
    __root__: List[S3Grant]


class S3AccessControlList(BaseModel):
    """
    <p/>
    """

    Owner: S3ObjectOwner
    Grants: Optional[S3GrantList] = None


class S3AccessControlPolicy(BaseModel):
    """
    <p/>
    """

    AccessControlList: Optional[S3AccessControlList] = None
    CannedAccessControlList: Optional[S3CannedAccessControlList] = None


class S3CopyObjectOperation(BaseModel):
    """
    Contains the configuration parameters for a PUT Copy object operation. S3 Batch Operations passes every object to the underlying PUT Copy object API. For more information about the parameters for this operation, see <a href="https://docs.aws.amazon.com/AmazonS3/latest/API/RESTObjectCOPY.html">PUT Object - Copy</a>.
    """

    TargetResource: Optional[S3BucketArnString] = None
    CannedAccessControlList: Optional[S3CannedAccessControlList] = None
    AccessControlGrants: Optional[S3GrantList] = None
    MetadataDirective: Optional[S3MetadataDirective] = None
    ModifiedSinceConstraint: Optional[TimeStamp] = None
    NewObjectMetadata: Optional[S3ObjectMetadata] = None
    NewObjectTagging: Optional[S3TagSet] = None
    RedirectLocation: Optional[NonEmptyMaxLength2048String] = None
    RequesterPays: Optional[Boolean] = None
    StorageClass: Optional[S3StorageClass] = None
    UnModifiedSinceConstraint: Optional[TimeStamp] = None
    SSEAwsKmsKeyId: Optional[KmsKeyArnString] = None
    TargetKeyPrefix: Optional[NonEmptyMaxLength1024String] = None
    ObjectLockLegalHoldStatus: Optional[S3ObjectLockLegalHoldStatus] = None
    ObjectLockMode: Optional[S3ObjectLockMode] = None
    ObjectLockRetainUntilDate: Optional[TimeStamp] = None
    BucketKeyEnabled: Optional[Boolean] = None


class S3SetObjectAclOperation(BaseModel):
    """
    Contains the configuration parameters for a Set Object ACL operation. S3 Batch Operations passes every object to the underlying PUT Object acl API. For more information about the parameters for this operation, see <a href="https://docs.aws.amazon.com/AmazonS3/latest/API/RESTObjectPUTacl.html">PUT Object acl</a>.
    """

    AccessControlPolicy: Optional[S3AccessControlPolicy] = None


class DescribeMultiRegionAccessPointOperationResult(BaseModel):
    AsyncOperation: Optional[AsyncOperation] = None


class GetAccessPointConfigurationForObjectLambdaResult(BaseModel):
    Configuration: Optional[ObjectLambdaConfiguration] = None


class GetMultiRegionAccessPointResult(BaseModel):
    AccessPoint: Optional[MultiRegionAccessPointReport] = None


class ListMultiRegionAccessPointsResult(BaseModel):
    AccessPoints: Optional[MultiRegionAccessPointReportList] = None
    NextToken: Optional[NonEmptyMaxLength1024String] = None


class LifecycleRules(BaseModel):
    __root__: List[LifecycleRule]


class PrefixLevel(BaseModel):
    """
    A container for the prefix-level configuration.
    """

    StorageMetrics: PrefixLevelStorageMetrics


class JobOperation(BaseModel):
    """
    The operation that you want this job to perform on every object listed in the manifest. For more information about the available operations, see <a href="https://docs.aws.amazon.com/AmazonS3/latest/dev/batch-ops-operations.html">Operations</a> in the <i>Amazon S3 User Guide</i>.
    """

    LambdaInvoke: Optional[LambdaInvokeOperation] = None
    S3PutObjectCopy: Optional[S3CopyObjectOperation] = None
    S3PutObjectAcl: Optional[S3SetObjectAclOperation] = None
    S3PutObjectTagging: Optional[S3SetObjectTaggingOperation] = None
    S3DeleteObjectTagging: Optional[S3DeleteObjectTaggingOperation] = None
    S3InitiateRestoreObject: Optional[S3InitiateRestoreObjectOperation] = None
    S3PutObjectLegalHold: Optional[S3SetObjectLegalHoldOperation] = None
    S3PutObjectRetention: Optional[S3SetObjectRetentionOperation] = None


class CreateJobRequest(BaseModel):
    ConfirmationRequired: Optional[ConfirmationRequired] = None
    Operation: JobOperation
    Report: JobReport
    ClientRequestToken: NonEmptyMaxLength64String
    Manifest: JobManifest
    Description: Optional[NonEmptyMaxLength256String] = None
    Priority: JobPriority
    RoleArn: IAMRoleArn
    Tags: Optional[S3TagSet] = None


class JobDescriptor(BaseModel):
    """
    A container element for the job configuration and status information returned by a <code>Describe Job</code> request.
    """

    JobId: Optional[JobId] = None
    ConfirmationRequired: Optional[ConfirmationRequired] = None
    Description: Optional[NonEmptyMaxLength256String] = None
    JobArn: Optional[JobArn] = None
    Status: Optional[JobStatus] = None
    Manifest: Optional[JobManifest] = None
    Operation: Optional[JobOperation] = None
    Priority: Optional[JobPriority] = None
    ProgressSummary: Optional[JobProgressSummary] = None
    StatusUpdateReason: Optional[JobStatusUpdateReason] = None
    FailureReasons: Optional[JobFailureList] = None
    Report: Optional[JobReport] = None
    CreationTime: Optional[JobCreationTime] = None
    TerminationDate: Optional[JobTerminationDate] = None
    RoleArn: Optional[IAMRoleArn] = None
    SuspendedDate: Optional[SuspendedDate] = None
    SuspendedCause: Optional[SuspendedCause] = None


class LifecycleConfiguration(BaseModel):
    """
    The container for the Outposts bucket lifecycle configuration.
    """

    Rules: Optional[LifecycleRules] = None


class PutBucketLifecycleConfigurationRequest(BaseModel):
    LifecycleConfiguration: Optional[LifecycleConfiguration] = None


class DescribeJobResult(BaseModel):
    Job: Optional[JobDescriptor] = None


class GetBucketLifecycleConfigurationResult(LifecycleConfiguration):
    pass


class BucketLevel(BaseModel):
    """
    A container for the bucket-level configuration.
    """

    ActivityMetrics: Optional[ActivityMetrics] = None
    PrefixLevel: Optional[PrefixLevel] = None


class AccountLevel(BaseModel):
    """
    A container for the account level Amazon S3 Storage Lens configuration.
    """

    ActivityMetrics: Optional[ActivityMetrics] = None
    BucketLevel: BucketLevel


class StorageLensConfiguration(BaseModel):
    """
    A container for the Amazon S3 Storage Lens configuration.
    """

    Id: ConfigId
    AccountLevel: AccountLevel
    Include: Optional[Include] = None
    Exclude: Optional[Exclude] = None
    DataExport: Optional[StorageLensDataExport] = None
    IsEnabled: IsEnabled
    AwsOrg: Optional[StorageLensAwsOrg] = None
    StorageLensArn: Optional[StorageLensArn] = None


class PutStorageLensConfigurationRequest(BaseModel):
    StorageLensConfiguration: StorageLensConfiguration
    Tags: Optional[StorageLensTags] = None


class GetStorageLensConfigurationResult(BaseModel):
    StorageLensConfiguration: Optional[StorageLensConfiguration] = None
