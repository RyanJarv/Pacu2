# generated by datamodel-codegen:
#   filename:  openapi.yaml
#   timestamp: 2021-12-31T02:58:30+00:00

from __future__ import annotations

from datetime import datetime
from enum import Enum
from typing import Annotated, Any, List, Optional

from pydantic import BaseModel, Extra, Field


class ThrottlingException(BaseModel):
    __root__: Any


class InternalServerException(ThrottlingException):
    pass


class ResourceNotFoundException(ThrottlingException):
    pass


class ValidationException(ThrottlingException):
    pass


class AccessDeniedException(ThrottlingException):
    pass


class Reboot(BaseModel):
    """
    A structure used to reboot the device.
    """

    pass


class Unlock(Reboot):
    """
    A structure used to unlock a device.
    """

    pass


class String(BaseModel):
    __root__: str


class ServiceQuotaExceededException(ThrottlingException):
    pass


class AttachmentStatus(Enum):
    ATTACHING = 'ATTACHING'
    ATTACHED = 'ATTACHED'
    DETACHING = 'DETACHING'
    DETACHED = 'DETACHED'


class Boolean(BaseModel):
    __root__: bool


class TaskId(BaseModel):
    __root__: Annotated[str, Field(max_length=64, min_length=1)]


class CancelTaskInput(BaseModel):
    pass


class Long(BaseModel):
    __root__: int


class CapacityNameString(BaseModel):
    __root__: Annotated[str, Field(max_length=100, min_length=0)]


class CapacityUnitString(BaseModel):
    __root__: Annotated[str, Field(max_length=20, min_length=0)]


class Capacity(BaseModel):
    """
    The physical capacity of the Amazon Web Services Snow Family device.
    """

    available: Optional[Long] = None
    name: Optional[CapacityNameString] = None
    total: Optional[Long] = None
    unit: Optional[CapacityUnitString] = None
    used: Optional[Long] = None


class CapacityList(BaseModel):
    __root__: Annotated[List[Capacity], Field(max_items=100, min_items=0)]


class Command(BaseModel):
    """
    The command given to the device to execute.
    """

    reboot: Optional[Reboot] = None
    unlock: Optional[Unlock] = None


class Integer(Long):
    pass


class CpuOptions(BaseModel):
    """
    The options for how a device's CPU is configured.
    """

    coreCount: Optional[Integer] = None
    threadsPerCore: Optional[Integer] = None


class IdempotencyToken(BaseModel):
    __root__: Annotated[str, Field(max_length=64, min_length=1, regex='[!-~]+')]


class TaskDescriptionString(BaseModel):
    __root__: Annotated[
        str, Field(max_length=128, min_length=1, regex='[A-Za-z0-9 _.,!#]*')
    ]


class TagMap(BaseModel):
    pass

    class Config:
        extra = Extra.allow


class TargetList(BaseModel):
    __root__: Annotated[List[String], Field(max_items=10, min_items=1)]


class CreateTaskInput(BaseModel):
    clientToken: Optional[IdempotencyToken] = None
    command: Command
    description: Optional[TaskDescriptionString] = None
    tags: Optional[TagMap] = None
    targets: TargetList


class InstanceIdsList(BaseModel):
    __root__: List[String]


class ManagedDeviceId(TaskId):
    pass


class DescribeDeviceEc2Input(BaseModel):
    instanceIds: InstanceIdsList


class DescribeDeviceInput(BaseModel):
    pass


class UnlockState(Enum):
    UNLOCKED = 'UNLOCKED'
    LOCKED = 'LOCKED'
    UNLOCKING = 'UNLOCKING'


class Timestamp(BaseModel):
    __root__: datetime


class SoftwareInformation(BaseModel):
    """
    Information about the software on the device.
    """

    installState: Optional[String] = None
    installedVersion: Optional[String] = None
    installingVersion: Optional[String] = None


class DescribeExecutionInput(BaseModel):
    pass


class ExecutionId(TaskId):
    pass


class ExecutionState(Enum):
    QUEUED = 'QUEUED'
    IN_PROGRESS = 'IN_PROGRESS'
    CANCELED = 'CANCELED'
    FAILED = 'FAILED'
    SUCCEEDED = 'SUCCEEDED'
    REJECTED = 'REJECTED'
    TIMED_OUT = 'TIMED_OUT'


class DescribeTaskInput(BaseModel):
    pass


class TaskState(Enum):
    IN_PROGRESS = 'IN_PROGRESS'
    CANCELED = 'CANCELED'
    COMPLETED = 'COMPLETED'


class DeviceSummary(BaseModel):
    """
    Identifying information about the device.
    """

    associatedWithJob: Optional[String] = None
    managedDeviceArn: Optional[String] = None
    managedDeviceId: Optional[ManagedDeviceId] = None
    tags: Optional[TagMap] = None


class DeviceSummaryList(BaseModel):
    __root__: List[DeviceSummary]


class EbsInstanceBlockDevice(BaseModel):
    """
    Describes a parameter used to set up an Amazon Elastic Block Store (Amazon EBS) volume in a block device mapping.
    """

    attachTime: Optional[Timestamp] = None
    deleteOnTermination: Optional[Boolean] = None
    status: Optional[AttachmentStatus] = None
    volumeId: Optional[String] = None


class ExecutionSummary(BaseModel):
    """
    The summary of a task execution on a specified device.
    """

    executionId: Optional[ExecutionId] = None
    managedDeviceId: Optional[ManagedDeviceId] = None
    state: Optional[ExecutionState] = None
    taskId: Optional[TaskId] = None


class ExecutionSummaryList(BaseModel):
    __root__: List[ExecutionSummary]


class InstanceBlockDeviceMapping(BaseModel):
    """
    The description of a block device mapping.
    """

    deviceName: Optional[String] = None
    ebs: Optional[EbsInstanceBlockDevice] = None


class InstanceStateName(Enum):
    PENDING = 'PENDING'
    RUNNING = 'RUNNING'
    SHUTTING_DOWN = 'SHUTTING_DOWN'
    TERMINATED = 'TERMINATED'
    STOPPING = 'STOPPING'
    STOPPED = 'STOPPED'


class IpAddressAssignment(Enum):
    DHCP = 'DHCP'
    STATIC = 'STATIC'


class JobId(TaskId):
    pass


class MaxResults(BaseModel):
    __root__: Annotated[int, Field(ge=1.0, le=100.0)]


class NextToken(BaseModel):
    __root__: Annotated[
        str, Field(max_length=1024, min_length=1, regex='[a-zA-Z0-9+/=]*')
    ]


class ListDeviceResourcesInputTypeString(BaseModel):
    __root__: Annotated[str, Field(max_length=50, min_length=1)]


class ListDeviceResourcesInput(BaseModel):
    pass


class ListDevicesInput(BaseModel):
    pass


class ListExecutionsInput(BaseModel):
    pass


class ListTagsForResourceInput(BaseModel):
    pass


class ListTasksInput(BaseModel):
    pass


class PhysicalConnectorType(Enum):
    RJ45 = 'RJ45'
    SFP_PLUS = 'SFP_PLUS'
    QSFP = 'QSFP'
    RJ45_2 = 'RJ45_2'
    WIFI = 'WIFI'


class PhysicalNetworkInterface(BaseModel):
    """
    The details about the physical network interface for the device.
    """

    defaultGateway: Optional[String] = None
    ipAddress: Optional[String] = None
    ipAddressAssignment: Optional[IpAddressAssignment] = None
    macAddress: Optional[String] = None
    netmask: Optional[String] = None
    physicalConnectorType: Optional[PhysicalConnectorType] = None
    physicalNetworkInterfaceId: Optional[String] = None


class ResourceSummary(BaseModel):
    """
    A summary of a resource available on the device.
    """

    arn: Optional[String] = None
    id: Optional[String] = None
    resourceType: String


class SecurityGroupIdentifier(BaseModel):
    """
    Information about the device's security group.
    """

    groupId: Optional[String] = None
    groupName: Optional[String] = None


class TagKeys(InstanceIdsList):
    pass


class TagResourceInput(BaseModel):
    tags: TagMap


class TaskSummary(BaseModel):
    """
    Information about the task assigned to one or many devices.
    """

    state: Optional[TaskState] = None
    tags: Optional[TagMap] = None
    taskArn: Optional[String] = None
    taskId: TaskId


class UntagResourceInput(BaseModel):
    pass


class CancelTaskOutput(BaseModel):
    taskId: Optional[String] = None


class CreateTaskOutput(BaseModel):
    taskArn: Optional[String] = None
    taskId: Optional[String] = None


class DescribeExecutionOutput(BaseModel):
    executionId: Optional[ExecutionId] = None
    lastUpdatedAt: Optional[Timestamp] = None
    managedDeviceId: Optional[ManagedDeviceId] = None
    startedAt: Optional[Timestamp] = None
    state: Optional[ExecutionState] = None
    taskId: Optional[TaskId] = None


class DescribeTaskOutput(BaseModel):
    completedAt: Optional[Timestamp] = None
    createdAt: Optional[Timestamp] = None
    description: Optional[TaskDescriptionString] = None
    lastUpdatedAt: Optional[Timestamp] = None
    state: Optional[TaskState] = None
    tags: Optional[TagMap] = None
    targets: Optional[TargetList] = None
    taskArn: Optional[String] = None
    taskId: Optional[String] = None


class ListDevicesOutput(BaseModel):
    devices: Optional[DeviceSummaryList] = None
    nextToken: Optional[NextToken] = None


class ListExecutionsOutput(BaseModel):
    executions: Optional[ExecutionSummaryList] = None
    nextToken: Optional[NextToken] = None


class ListTagsForResourceOutput(BaseModel):
    tags: Optional[TagMap] = None


class PhysicalNetworkInterfaceList(BaseModel):
    __root__: List[PhysicalNetworkInterface]


class InstanceBlockDeviceMappingList(BaseModel):
    __root__: List[InstanceBlockDeviceMapping]


class SecurityGroupIdentifierList(BaseModel):
    __root__: List[SecurityGroupIdentifier]


class InstanceState(BaseModel):
    """
    The description of the current state of an instance.
    """

    code: Optional[Integer] = None
    name: Optional[InstanceStateName] = None


class Instance(BaseModel):
    """
    The description of an instance. Currently, Amazon EC2 instances are the only supported instance type.
    """

    amiLaunchIndex: Optional[Integer] = None
    blockDeviceMappings: Optional[InstanceBlockDeviceMappingList] = None
    cpuOptions: Optional[CpuOptions] = None
    createdAt: Optional[Timestamp] = None
    imageId: Optional[String] = None
    instanceId: Optional[String] = None
    instanceType: Optional[String] = None
    privateIpAddress: Optional[String] = None
    publicIpAddress: Optional[String] = None
    rootDeviceName: Optional[String] = None
    securityGroups: Optional[SecurityGroupIdentifierList] = None
    state: Optional[InstanceState] = None
    updatedAt: Optional[Timestamp] = None


class InstanceSummary(BaseModel):
    """
    The details about the instance.
    """

    instance: Optional[Instance] = None
    lastUpdatedAt: Optional[Timestamp] = None


class ResourceSummaryList(BaseModel):
    __root__: List[ResourceSummary]


class TaskSummaryList(BaseModel):
    __root__: List[TaskSummary]


class DescribeDeviceOutput(BaseModel):
    associatedWithJob: Optional[String] = None
    deviceCapacities: Optional[CapacityList] = None
    deviceState: Optional[UnlockState] = None
    deviceType: Optional[String] = None
    lastReachedOutAt: Optional[Timestamp] = None
    lastUpdatedAt: Optional[Timestamp] = None
    managedDeviceArn: Optional[String] = None
    managedDeviceId: Optional[ManagedDeviceId] = None
    physicalNetworkInterfaces: Optional[PhysicalNetworkInterfaceList] = None
    software: Optional[SoftwareInformation] = None
    tags: Optional[TagMap] = None


class ListDeviceResourcesOutput(BaseModel):
    nextToken: Optional[NextToken] = None
    resources: Optional[ResourceSummaryList] = None


class ListTasksOutput(BaseModel):
    nextToken: Optional[NextToken] = None
    tasks: Optional[TaskSummaryList] = None


class InstanceSummaryList(BaseModel):
    __root__: List[InstanceSummary]


class DescribeDeviceEc2Output(BaseModel):
    instances: Optional[InstanceSummaryList] = None
