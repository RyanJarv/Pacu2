# generated by datamodel-codegen:
#   filename:  openapi.yaml
#   timestamp: 2021-12-31T02:53:42+00:00

from __future__ import annotations

from datetime import datetime
from enum import Enum
from typing import Annotated, Any, List, Optional

from pydantic import BaseModel, Field, SecretStr


class AccessDeniedException(BaseModel):
    __root__: Any


class AWSOrganizationsNotInUseException(AccessDeniedException):
    pass


class HandshakeConstraintViolationException(AccessDeniedException):
    pass


class HandshakeNotFoundException(AccessDeniedException):
    pass


class InvalidHandshakeTransitionException(AccessDeniedException):
    pass


class HandshakeAlreadyInStateException(AccessDeniedException):
    pass


class InvalidInputException(AccessDeniedException):
    pass


class ConcurrentModificationException(AccessDeniedException):
    pass


class ServiceException(AccessDeniedException):
    pass


class TooManyRequestsException(AccessDeniedException):
    pass


class AccessDeniedForDependencyException(AccessDeniedException):
    pass


class ConstraintViolationException(AccessDeniedException):
    pass


class DuplicatePolicyAttachmentException(AccessDeniedException):
    pass


class PolicyNotFoundException(AccessDeniedException):
    pass


class PolicyTypeNotEnabledException(AccessDeniedException):
    pass


class TargetNotFoundException(AccessDeniedException):
    pass


class UnsupportedAPIEndpointException(AccessDeniedException):
    pass


class PolicyChangesInProgressException(AccessDeniedException):
    pass


class FinalizingOrganizationException(AccessDeniedException):
    pass


class AlreadyInOrganizationException(AccessDeniedException):
    pass


class DuplicateOrganizationalUnitException(AccessDeniedException):
    pass


class ParentNotFoundException(AccessDeniedException):
    pass


class DuplicatePolicyException(AccessDeniedException):
    pass


class MalformedPolicyDocumentException(AccessDeniedException):
    pass


class PolicyTypeNotAvailableForOrganizationException(AccessDeniedException):
    pass


class OrganizationNotEmptyException(AccessDeniedException):
    pass


class OrganizationalUnitNotEmptyException(AccessDeniedException):
    pass


class OrganizationalUnitNotFoundException(AccessDeniedException):
    pass


class PolicyInUseException(AccessDeniedException):
    pass


class AccountNotFoundException(AccessDeniedException):
    pass


class AccountNotRegisteredException(AccessDeniedException):
    pass


class CreateAccountStatusNotFoundException(AccessDeniedException):
    pass


class EffectivePolicyNotFoundException(AccessDeniedException):
    pass


class PolicyNotAttachedException(AccessDeniedException):
    pass


class RootNotFoundException(AccessDeniedException):
    pass


class EnableAllFeaturesRequest(BaseModel):
    pass


class PolicyTypeAlreadyEnabledException(AccessDeniedException):
    pass


class AccountOwnerNotVerifiedException(AccessDeniedException):
    pass


class DuplicateHandshakeException(AccessDeniedException):
    pass


class MasterCannotLeaveOrganizationException(AccessDeniedException):
    pass


class ChildNotFoundException(AccessDeniedException):
    pass


class SourceParentNotFoundException(AccessDeniedException):
    pass


class DestinationParentNotFoundException(AccessDeniedException):
    pass


class DuplicateAccountException(AccessDeniedException):
    pass


class AccountAlreadyRegisteredException(AccessDeniedException):
    pass


class HandshakeId(BaseModel):
    __root__: Annotated[str, Field(max_length=34, regex='^h-[0-9a-z]{8,32}$')]


class AccountId(BaseModel):
    __root__: Annotated[str, Field(max_length=12, regex='^\\d{12}$')]


class AccountArn(BaseModel):
    __root__: Annotated[
        str,
        Field(
            regex='^arn:aws:organizations::\\d{12}:account\\/o-[a-z0-9]{10,32}\\/\\d{12}'
        ),
    ]


class Email(BaseModel):
    __root__: Annotated[
        SecretStr,
        Field(max_length=64, min_length=6, regex='[^\\s@]+@[^\\s@]+\\.[^\\s@]+'),
    ]


class AccountName(BaseModel):
    __root__: Annotated[
        SecretStr, Field(max_length=50, min_length=1, regex='[\\u0020-\\u007E]+')
    ]


class AccountStatus(Enum):
    ACTIVE = 'ACTIVE'
    SUSPENDED = 'SUSPENDED'


class AccountJoinedMethod(Enum):
    INVITED = 'INVITED'
    CREATED = 'CREATED'


class Timestamp(BaseModel):
    __root__: datetime


class Account(BaseModel):
    """
    Contains information about an AWS account that is a member of an organization.
    """

    Id: Optional[AccountId] = None
    Arn: Optional[AccountArn] = None
    Email: Optional[Email] = None
    Name: Optional[AccountName] = None
    Status: Optional[AccountStatus] = None
    JoinedMethod: Optional[AccountJoinedMethod] = None
    JoinedTimestamp: Optional[Timestamp] = None


class Accounts(BaseModel):
    __root__: List[Account]


class ActionType(Enum):
    INVITE = 'INVITE'
    ENABLE_ALL_FEATURES = 'ENABLE_ALL_FEATURES'
    APPROVE_ALL_FEATURES = 'APPROVE_ALL_FEATURES'
    ADD_ORGANIZATIONS_SERVICE_LINKED_ROLE = 'ADD_ORGANIZATIONS_SERVICE_LINKED_ROLE'


class PolicyId(BaseModel):
    __root__: Annotated[str, Field(max_length=130, regex='^p-[0-9a-zA-Z_]{8,128}$')]


class PolicyTargetId(BaseModel):
    __root__: Annotated[
        str,
        Field(
            max_length=100,
            regex='^(r-[0-9a-z]{4,32})|(\\d{12})|(ou-[0-9a-z]{4,32}-[a-z0-9]{8,32})$',
        ),
    ]


class AwsManagedPolicy(BaseModel):
    __root__: bool


class ChildId(BaseModel):
    __root__: Annotated[
        str,
        Field(max_length=100, regex='^(\\d{12})|(ou-[0-9a-z]{4,32}-[a-z0-9]{8,32})$'),
    ]


class ChildType(Enum):
    ACCOUNT = 'ACCOUNT'
    ORGANIZATIONAL_UNIT = 'ORGANIZATIONAL_UNIT'


class Child(BaseModel):
    """
    Contains a list of child entities, either OUs or accounts.
    """

    Id: Optional[ChildId] = None
    Type: Optional[ChildType] = None


class Children(BaseModel):
    __root__: List[Child]


class CreateAccountFailureReason(Enum):
    ACCOUNT_LIMIT_EXCEEDED = 'ACCOUNT_LIMIT_EXCEEDED'
    EMAIL_ALREADY_EXISTS = 'EMAIL_ALREADY_EXISTS'
    INVALID_ADDRESS = 'INVALID_ADDRESS'
    INVALID_EMAIL = 'INVALID_EMAIL'
    CONCURRENT_ACCOUNT_MODIFICATION = 'CONCURRENT_ACCOUNT_MODIFICATION'
    INTERNAL_FAILURE = 'INTERNAL_FAILURE'
    GOVCLOUD_ACCOUNT_ALREADY_EXISTS = 'GOVCLOUD_ACCOUNT_ALREADY_EXISTS'
    MISSING_BUSINESS_VALIDATION = 'MISSING_BUSINESS_VALIDATION'
    FAILED_BUSINESS_VALIDATION = 'FAILED_BUSINESS_VALIDATION'
    PENDING_BUSINESS_VALIDATION = 'PENDING_BUSINESS_VALIDATION'
    INVALID_IDENTITY_FOR_BUSINESS_VALIDATION = (
        'INVALID_IDENTITY_FOR_BUSINESS_VALIDATION'
    )
    UNKNOWN_BUSINESS_VALIDATION = 'UNKNOWN_BUSINESS_VALIDATION'
    MISSING_PAYMENT_INSTRUMENT = 'MISSING_PAYMENT_INSTRUMENT'


class RoleName(BaseModel):
    __root__: Annotated[str, Field(max_length=64, regex='[\\w+=,.@-]{1,64}')]


class IAMUserAccessToBilling(Enum):
    ALLOW = 'ALLOW'
    DENY = 'DENY'


class CreateAccountRequestId(BaseModel):
    __root__: Annotated[str, Field(max_length=36, regex='^car-[a-z0-9]{8,32}$')]


class CreateAccountState(Enum):
    IN_PROGRESS = 'IN_PROGRESS'
    SUCCEEDED = 'SUCCEEDED'
    FAILED = 'FAILED'


class CreateAccountStates(BaseModel):
    __root__: List[CreateAccountState]


class OrganizationFeatureSet(Enum):
    ALL = 'ALL'
    CONSOLIDATED_BILLING = 'CONSOLIDATED_BILLING'


class ParentId(BaseModel):
    __root__: Annotated[
        str,
        Field(
            max_length=100,
            regex='^(r-[0-9a-z]{4,32})|(ou-[0-9a-z]{4,32}-[a-z0-9]{8,32})$',
        ),
    ]


class OrganizationalUnitName(BaseModel):
    __root__: Annotated[str, Field(max_length=128, min_length=1, regex='[\\s\\S]*')]


class PolicyContent(BaseModel):
    __root__: Annotated[str, Field(max_length=1000000, min_length=1, regex='[\\s\\S]*')]


class PolicyDescription(BaseModel):
    __root__: Annotated[str, Field(max_length=512, regex='[\\s\\S]*')]


class PolicyName(OrganizationalUnitName):
    pass


class PolicyType(Enum):
    SERVICE_CONTROL_POLICY = 'SERVICE_CONTROL_POLICY'
    TAG_POLICY = 'TAG_POLICY'
    BACKUP_POLICY = 'BACKUP_POLICY'
    AISERVICES_OPT_OUT_POLICY = 'AISERVICES_OPT_OUT_POLICY'


class DelegatedAdministrator(BaseModel):
    """
    Contains information about the delegated administrator.
    """

    Id: Optional[AccountId] = None
    Arn: Optional[AccountArn] = None
    Email: Optional[Email] = None
    Name: Optional[AccountName] = None
    Status: Optional[AccountStatus] = None
    JoinedMethod: Optional[AccountJoinedMethod] = None
    JoinedTimestamp: Optional[Timestamp] = None
    DelegationEnabledDate: Optional[Timestamp] = None


class DelegatedAdministrators(BaseModel):
    __root__: List[DelegatedAdministrator]


class ServicePrincipal(BaseModel):
    __root__: Annotated[str, Field(max_length=128, min_length=1, regex='[\\w+=,.@-]*')]


class DelegatedService(BaseModel):
    """
    Contains information about the AWS service for which the account is a delegated administrator.
    """

    ServicePrincipal: Optional[ServicePrincipal] = None
    DelegationEnabledDate: Optional[Timestamp] = None


class DelegatedServices(BaseModel):
    __root__: List[DelegatedService]


class OrganizationalUnitId(BaseModel):
    __root__: Annotated[
        str, Field(max_length=68, regex='^ou-[0-9a-z]{4,32}-[a-z0-9]{8,32}$')
    ]


class EffectivePolicyType(Enum):
    TAG_POLICY = 'TAG_POLICY'
    BACKUP_POLICY = 'BACKUP_POLICY'
    AISERVICES_OPT_OUT_POLICY = 'AISERVICES_OPT_OUT_POLICY'


class EffectivePolicy(BaseModel):
    """
    Contains rules to be applied to the affected accounts. The effective policy is the aggregation of any policies the account inherits, plus any policy directly attached to the account.
    """

    PolicyContent: Optional[PolicyContent] = None
    LastUpdatedTimestamp: Optional[Timestamp] = None
    TargetId: Optional[PolicyTargetId] = None
    PolicyType: Optional[EffectivePolicyType] = None


class RootId(BaseModel):
    __root__: Annotated[str, Field(max_length=34, regex='^r-[0-9a-z]{4,32}$')]


class EnabledServicePrincipal(BaseModel):
    """
    A structure that contains details of a service principal that represents an AWS service that is enabled to integrate with AWS Organizations.
    """

    ServicePrincipal: Optional[ServicePrincipal] = None
    DateEnabled: Optional[Timestamp] = None


class EnabledServicePrincipals(BaseModel):
    __root__: List[EnabledServicePrincipal]


class GenericArn(BaseModel):
    __root__: Annotated[str, Field(regex='^arn:aws:organizations::.+:.+')]


class HandshakeArn(BaseModel):
    __root__: Annotated[
        str,
        Field(
            regex='^arn:aws:organizations::\\d{12}:handshake\\/o-[a-z0-9]{10,32}\\/[a-z_]{1,32}\\/h-[0-9a-z]{8,32}'
        ),
    ]


class HandshakeState(Enum):
    REQUESTED = 'REQUESTED'
    OPEN = 'OPEN'
    CANCELED = 'CANCELED'
    ACCEPTED = 'ACCEPTED'
    DECLINED = 'DECLINED'
    EXPIRED = 'EXPIRED'


class HandshakeFilter(BaseModel):
    """
    Specifies the criteria that are used to select the handshakes for the operation.
    """

    ActionType: Optional[ActionType] = None
    ParentHandshakeId: Optional[HandshakeId] = None


class HandshakeNotes(BaseModel):
    __root__: Annotated[SecretStr, Field(max_length=1024, regex='[\\s\\S]*')]


class HandshakePartyId(BaseModel):
    __root__: Annotated[
        SecretStr, Field(max_length=64, min_length=1, regex='[\\s\\S]*')
    ]


class HandshakePartyType(Enum):
    ACCOUNT = 'ACCOUNT'
    ORGANIZATION = 'ORGANIZATION'
    EMAIL = 'EMAIL'


class HandshakeResourceValue(BaseModel):
    __root__: SecretStr


class HandshakeResourceType(Enum):
    ACCOUNT = 'ACCOUNT'
    ORGANIZATION = 'ORGANIZATION'
    ORGANIZATION_FEATURE_SET = 'ORGANIZATION_FEATURE_SET'
    EMAIL = 'EMAIL'
    MASTER_EMAIL = 'MASTER_EMAIL'
    MASTER_NAME = 'MASTER_NAME'
    NOTES = 'NOTES'
    PARENT_HANDSHAKE = 'PARENT_HANDSHAKE'


class NextToken(BaseModel):
    __root__: Annotated[str, Field(max_length=100000, regex='[\\s\\S]*')]


class MaxResults(BaseModel):
    __root__: Annotated[int, Field(ge=1.0, le=20.0)]


class TaggableResourceId(BaseModel):
    __root__: Annotated[
        str,
        Field(
            max_length=130,
            regex='^(r-[0-9a-z]{4,32})|(\\d{12})|(ou-[0-9a-z]{4,32}-[a-z0-9]{8,32})|(^p-[0-9a-zA-Z_]{8,128})$',
        ),
    ]


class OrganizationId(BaseModel):
    __root__: Annotated[str, Field(regex='^o-[a-z0-9]{10,32}$')]


class OrganizationArn(BaseModel):
    __root__: Annotated[
        str,
        Field(regex='^arn:aws:organizations::\\d{12}:organization\\/o-[a-z0-9]{10,32}'),
    ]


class OrganizationalUnitArn(BaseModel):
    __root__: Annotated[
        str,
        Field(
            regex='^arn:aws:organizations::\\d{12}:ou\\/o-[a-z0-9]{10,32}\\/ou-[0-9a-z]{4,32}-[0-9a-z]{8,32}'
        ),
    ]


class ParentType(Enum):
    ROOT = 'ROOT'
    ORGANIZATIONAL_UNIT = 'ORGANIZATIONAL_UNIT'


class Parent(BaseModel):
    """
    Contains information about either a root or an organizational unit (OU) that can contain OUs or accounts in an organization.
    """

    Id: Optional[ParentId] = None
    Type: Optional[ParentType] = None


class PolicyArn(BaseModel):
    __root__: Annotated[
        str,
        Field(
            regex='^(arn:aws:organizations::\\d{12}:policy\\/o-[a-z0-9]{10,32}\\/[0-9a-z_]+\\/p-[0-9a-z]{10,32})|(arn:aws:organizations::aws:policy\\/[0-9a-z_]+\\/p-[0-9a-zA-Z_]{10,128})'
        ),
    ]


class TargetName(BaseModel):
    __root__: Annotated[str, Field(max_length=128, min_length=1)]


class TargetType(Enum):
    ACCOUNT = 'ACCOUNT'
    ORGANIZATIONAL_UNIT = 'ORGANIZATIONAL_UNIT'
    ROOT = 'ROOT'


class PolicyTargetSummary(BaseModel):
    """
    Contains information about a root, OU, or account that a policy is attached to.
    """

    TargetId: Optional[PolicyTargetId] = None
    Arn: Optional[GenericArn] = None
    Name: Optional[TargetName] = None
    Type: Optional[TargetType] = None


class PolicyTypeStatus(Enum):
    ENABLED = 'ENABLED'
    PENDING_ENABLE = 'PENDING_ENABLE'
    PENDING_DISABLE = 'PENDING_DISABLE'


class PolicyTypeSummary(BaseModel):
    """
    Contains information about a policy type and its status in the associated root.
    """

    Type: Optional[PolicyType] = None
    Status: Optional[PolicyTypeStatus] = None


class RootArn(BaseModel):
    __root__: Annotated[
        str,
        Field(
            regex='^arn:aws:organizations::\\d{12}:root\\/o-[a-z0-9]{10,32}\\/r-[0-9a-z]{4,32}'
        ),
    ]


class RootName(TargetName):
    pass


class TagKey(BaseModel):
    __root__: Annotated[
        str,
        Field(
            max_length=128, min_length=1, regex='^([\\p{L}\\p{Z}\\p{N}_.:/=+\\-@]*)$'
        ),
    ]


class TagValue(BaseModel):
    __root__: Annotated[
        str,
        Field(
            max_length=256, min_length=0, regex='^([\\p{L}\\p{Z}\\p{N}_.:/=+\\-@]*)$'
        ),
    ]


class Tag(BaseModel):
    """
    <p>A custom key-value pair associated with a resource within your organization.</p> <p>You can attach tags to any of the following organization resources.</p> <ul> <li> <p>AWS account</p> </li> <li> <p>Organizational unit (OU)</p> </li> <li> <p>Organization root</p> </li> <li> <p>Policy</p> </li> </ul>
    """

    Key: TagKey
    Value: TagValue


class TagKeys(BaseModel):
    __root__: List[TagKey]


class AcceptHandshakeRequest(BaseModel):
    HandshakeId: HandshakeId


class AttachPolicyRequest(BaseModel):
    PolicyId: PolicyId
    TargetId: PolicyTargetId


class CancelHandshakeRequest(BaseModel):
    HandshakeId: HandshakeId


class CreateOrganizationRequest(BaseModel):
    FeatureSet: Optional[OrganizationFeatureSet] = None


class DeclineHandshakeRequest(BaseModel):
    HandshakeId: HandshakeId


class DeleteOrganizationalUnitRequest(BaseModel):
    OrganizationalUnitId: OrganizationalUnitId


class DeletePolicyRequest(BaseModel):
    PolicyId: PolicyId


class DeregisterDelegatedAdministratorRequest(BaseModel):
    AccountId: AccountId
    ServicePrincipal: ServicePrincipal


class DescribeAccountResponse(BaseModel):
    Account: Optional[Account] = None


class DescribeAccountRequest(BaseModel):
    AccountId: AccountId


class DescribeCreateAccountStatusRequest(BaseModel):
    CreateAccountRequestId: CreateAccountRequestId


class DescribeEffectivePolicyResponse(BaseModel):
    EffectivePolicy: Optional[EffectivePolicy] = None


class DescribeEffectivePolicyRequest(BaseModel):
    PolicyType: EffectivePolicyType
    TargetId: Optional[PolicyTargetId] = None


class DescribeHandshakeRequest(BaseModel):
    HandshakeId: HandshakeId


class DescribeOrganizationalUnitRequest(BaseModel):
    OrganizationalUnitId: OrganizationalUnitId


class DescribePolicyRequest(BaseModel):
    PolicyId: PolicyId


class DetachPolicyRequest(BaseModel):
    PolicyId: PolicyId
    TargetId: PolicyTargetId


class DisableAWSServiceAccessRequest(BaseModel):
    ServicePrincipal: ServicePrincipal


class DisablePolicyTypeRequest(BaseModel):
    RootId: RootId
    PolicyType: PolicyType


class EnableAWSServiceAccessRequest(BaseModel):
    ServicePrincipal: ServicePrincipal


class EnablePolicyTypeRequest(BaseModel):
    RootId: RootId
    PolicyType: PolicyType


class ListAWSServiceAccessForOrganizationResponse(BaseModel):
    EnabledServicePrincipals: Optional[EnabledServicePrincipals] = None
    NextToken: Optional[NextToken] = None


class ListAWSServiceAccessForOrganizationRequest(BaseModel):
    NextToken: Optional[NextToken] = None
    MaxResults: Optional[MaxResults] = None


class ListAccountsResponse(BaseModel):
    Accounts: Optional[Accounts] = None
    NextToken: Optional[NextToken] = None


class ListAccountsRequest(BaseModel):
    NextToken: Optional[NextToken] = None
    MaxResults: Optional[MaxResults] = None


class ListAccountsForParentResponse(ListAccountsResponse):
    pass


class ListAccountsForParentRequest(BaseModel):
    ParentId: ParentId
    NextToken: Optional[NextToken] = None
    MaxResults: Optional[MaxResults] = None


class ListChildrenResponse(BaseModel):
    Children: Optional[Children] = None
    NextToken: Optional[NextToken] = None


class ListChildrenRequest(BaseModel):
    ParentId: ParentId
    ChildType: ChildType
    NextToken: Optional[NextToken] = None
    MaxResults: Optional[MaxResults] = None


class ListCreateAccountStatusRequest(BaseModel):
    States: Optional[CreateAccountStates] = None
    NextToken: Optional[NextToken] = None
    MaxResults: Optional[MaxResults] = None


class ListDelegatedAdministratorsResponse(BaseModel):
    DelegatedAdministrators: Optional[DelegatedAdministrators] = None
    NextToken: Optional[NextToken] = None


class ListDelegatedAdministratorsRequest(BaseModel):
    ServicePrincipal: Optional[ServicePrincipal] = None
    NextToken: Optional[NextToken] = None
    MaxResults: Optional[MaxResults] = None


class ListDelegatedServicesForAccountResponse(BaseModel):
    DelegatedServices: Optional[DelegatedServices] = None
    NextToken: Optional[NextToken] = None


class ListDelegatedServicesForAccountRequest(BaseModel):
    AccountId: AccountId
    NextToken: Optional[NextToken] = None
    MaxResults: Optional[MaxResults] = None


class ListHandshakesForAccountRequest(BaseModel):
    Filter: Optional[HandshakeFilter] = None
    NextToken: Optional[NextToken] = None
    MaxResults: Optional[MaxResults] = None


class ListHandshakesForOrganizationRequest(BaseModel):
    Filter: Optional[HandshakeFilter] = None
    NextToken: Optional[NextToken] = None
    MaxResults: Optional[MaxResults] = None


class ListOrganizationalUnitsForParentRequest(BaseModel):
    ParentId: ParentId
    NextToken: Optional[NextToken] = None
    MaxResults: Optional[MaxResults] = None


class ListParentsRequest(BaseModel):
    ChildId: ChildId
    NextToken: Optional[NextToken] = None
    MaxResults: Optional[MaxResults] = None


class ListPoliciesRequest(BaseModel):
    Filter: PolicyType
    NextToken: Optional[NextToken] = None
    MaxResults: Optional[MaxResults] = None


class ListPoliciesForTargetRequest(BaseModel):
    TargetId: PolicyTargetId
    Filter: PolicyType
    NextToken: Optional[NextToken] = None
    MaxResults: Optional[MaxResults] = None


class ListRootsRequest(BaseModel):
    NextToken: Optional[NextToken] = None
    MaxResults: Optional[MaxResults] = None


class ListTagsForResourceRequest(BaseModel):
    ResourceId: TaggableResourceId
    NextToken: Optional[NextToken] = None


class ListTargetsForPolicyRequest(BaseModel):
    PolicyId: PolicyId
    NextToken: Optional[NextToken] = None
    MaxResults: Optional[MaxResults] = None


class MoveAccountRequest(BaseModel):
    AccountId: AccountId
    SourceParentId: ParentId
    DestinationParentId: ParentId


class RegisterDelegatedAdministratorRequest(BaseModel):
    AccountId: AccountId
    ServicePrincipal: ServicePrincipal


class RemoveAccountFromOrganizationRequest(BaseModel):
    AccountId: AccountId


class UntagResourceRequest(BaseModel):
    ResourceId: TaggableResourceId
    TagKeys: TagKeys


class UpdateOrganizationalUnitRequest(BaseModel):
    OrganizationalUnitId: OrganizationalUnitId
    Name: Optional[OrganizationalUnitName] = None


class UpdatePolicyRequest(BaseModel):
    PolicyId: PolicyId
    Name: Optional[PolicyName] = None
    Description: Optional[PolicyDescription] = None
    Content: Optional[PolicyContent] = None


class Tags(BaseModel):
    __root__: List[Tag]


class CreateAccountStatus(BaseModel):
    """
    Contains the status about a <a>CreateAccount</a> or <a>CreateGovCloudAccount</a> request to create an AWS account or an AWS GovCloud (US) account in an organization.
    """

    Id: Optional[CreateAccountRequestId] = None
    AccountName: Optional[AccountName] = None
    State: Optional[CreateAccountState] = None
    RequestedTimestamp: Optional[Timestamp] = None
    CompletedTimestamp: Optional[Timestamp] = None
    AccountId: Optional[AccountId] = None
    GovCloudAccountId: Optional[AccountId] = None
    FailureReason: Optional[CreateAccountFailureReason] = None


class CreateAccountStatuses(BaseModel):
    __root__: List[CreateAccountStatus]


class OrganizationalUnit(BaseModel):
    """
    Contains details about an organizational unit (OU). An OU is a container of AWS accounts within a root of an organization. Policies that are attached to an OU apply to all accounts contained in that OU and in any child OUs.
    """

    Id: Optional[OrganizationalUnitId] = None
    Arn: Optional[OrganizationalUnitArn] = None
    Name: Optional[OrganizationalUnitName] = None


class HandshakeParty(BaseModel):
    """
    Identifies a participant in a handshake.
    """

    Id: HandshakePartyId
    Type: HandshakePartyType


class OrganizationalUnits(BaseModel):
    __root__: List[OrganizationalUnit]


class Parents(BaseModel):
    __root__: List[Parent]


class PolicyTargets(BaseModel):
    __root__: List[PolicyTargetSummary]


class PolicyTypes(BaseModel):
    __root__: List[PolicyTypeSummary]


class PolicySummary(BaseModel):
    """
    Contains information about a policy, but does not include the content. To see the content of a policy, see <a>DescribePolicy</a>.
    """

    Id: Optional[PolicyId] = None
    Arn: Optional[PolicyArn] = None
    Name: Optional[PolicyName] = None
    Description: Optional[PolicyDescription] = None
    Type: Optional[PolicyType] = None
    AwsManaged: Optional[AwsManagedPolicy] = None


class CreateAccountResponse(BaseModel):
    CreateAccountStatus: Optional[CreateAccountStatus] = None


class CreateAccountRequest(BaseModel):
    Email: Email
    AccountName: AccountName
    RoleName: Optional[RoleName] = None
    IamUserAccessToBilling: Optional[IAMUserAccessToBilling] = None
    Tags: Optional[Tags] = None


class CreateGovCloudAccountResponse(CreateAccountResponse):
    pass


class CreateGovCloudAccountRequest(BaseModel):
    Email: Email
    AccountName: AccountName
    RoleName: Optional[RoleName] = None
    IamUserAccessToBilling: Optional[IAMUserAccessToBilling] = None
    Tags: Optional[Tags] = None


class CreateOrganizationalUnitResponse(BaseModel):
    OrganizationalUnit: Optional[OrganizationalUnit] = None


class CreateOrganizationalUnitRequest(BaseModel):
    ParentId: ParentId
    Name: OrganizationalUnitName
    Tags: Optional[Tags] = None


class CreatePolicyRequest(BaseModel):
    Content: PolicyContent
    Description: PolicyDescription
    Name: PolicyName
    Type: PolicyType
    Tags: Optional[Tags] = None


class DescribeCreateAccountStatusResponse(CreateAccountResponse):
    pass


class DescribeOrganizationalUnitResponse(CreateOrganizationalUnitResponse):
    pass


class InviteAccountToOrganizationRequest(BaseModel):
    Target: HandshakeParty
    Notes: Optional[HandshakeNotes] = None
    Tags: Optional[Tags] = None


class ListCreateAccountStatusResponse(BaseModel):
    CreateAccountStatuses: Optional[CreateAccountStatuses] = None
    NextToken: Optional[NextToken] = None


class ListOrganizationalUnitsForParentResponse(BaseModel):
    OrganizationalUnits: Optional[OrganizationalUnits] = None
    NextToken: Optional[NextToken] = None


class ListParentsResponse(BaseModel):
    Parents: Optional[Parents] = None
    NextToken: Optional[NextToken] = None


class ListTagsForResourceResponse(BaseModel):
    Tags: Optional[Tags] = None
    NextToken: Optional[NextToken] = None


class ListTargetsForPolicyResponse(BaseModel):
    Targets: Optional[PolicyTargets] = None
    NextToken: Optional[NextToken] = None


class TagResourceRequest(BaseModel):
    ResourceId: TaggableResourceId
    Tags: Tags


class UpdateOrganizationalUnitResponse(CreateOrganizationalUnitResponse):
    pass


class Organization(BaseModel):
    """
    Contains details about an organization. An organization is a collection of accounts that are centrally managed together using consolidated billing, organized hierarchically with organizational units (OUs), and controlled with policies .
    """

    Id: Optional[OrganizationId] = None
    Arn: Optional[OrganizationArn] = None
    FeatureSet: Optional[OrganizationFeatureSet] = None
    MasterAccountArn: Optional[AccountArn] = None
    MasterAccountId: Optional[AccountId] = None
    MasterAccountEmail: Optional[Email] = None
    AvailablePolicyTypes: Optional[PolicyTypes] = None


class Policy(BaseModel):
    """
    Contains rules to be applied to the affected accounts. Policies can be attached directly to accounts, or to roots and OUs to affect all accounts in those hierarchies.
    """

    PolicySummary: Optional[PolicySummary] = None
    Content: Optional[PolicyContent] = None


class Root(BaseModel):
    """
    Contains details about a root. A root is a top-level parent node in the hierarchy of an organization that can contain organizational units (OUs) and accounts. The root contains every AWS account in the organization.
    """

    Id: Optional[RootId] = None
    Arn: Optional[RootArn] = None
    Name: Optional[RootName] = None
    PolicyTypes: Optional[PolicyTypes] = None


class HandshakeParties(BaseModel):
    __root__: List[HandshakeParty]


class Policies(BaseModel):
    __root__: List[PolicySummary]


class Roots(BaseModel):
    __root__: List[Root]


class CreateOrganizationResponse(BaseModel):
    Organization: Optional[Organization] = None


class CreatePolicyResponse(BaseModel):
    Policy: Optional[Policy] = None


class DescribeOrganizationResponse(CreateOrganizationResponse):
    pass


class DescribePolicyResponse(CreatePolicyResponse):
    pass


class DisablePolicyTypeResponse(BaseModel):
    Root: Optional[Root] = None


class EnablePolicyTypeResponse(DisablePolicyTypeResponse):
    pass


class ListPoliciesResponse(BaseModel):
    Policies: Optional[Policies] = None
    NextToken: Optional[NextToken] = None


class ListPoliciesForTargetResponse(ListPoliciesResponse):
    pass


class ListRootsResponse(BaseModel):
    Roots: Optional[Roots] = None
    NextToken: Optional[NextToken] = None


class UpdatePolicyResponse(CreatePolicyResponse):
    pass


class AcceptHandshakeResponse(BaseModel):
    Handshake: Optional[Handshake] = None


class CancelHandshakeResponse(AcceptHandshakeResponse):
    pass


class DeclineHandshakeResponse(AcceptHandshakeResponse):
    pass


class DescribeHandshakeResponse(AcceptHandshakeResponse):
    pass


class EnableAllFeaturesResponse(AcceptHandshakeResponse):
    pass


class InviteAccountToOrganizationResponse(AcceptHandshakeResponse):
    pass


class ListHandshakesForAccountResponse(BaseModel):
    Handshakes: Optional[Handshakes] = None
    NextToken: Optional[NextToken] = None


class ListHandshakesForOrganizationResponse(ListHandshakesForAccountResponse):
    pass


class Handshake(BaseModel):
    """
    <p>Contains information that must be exchanged to securely establish a relationship between two accounts (an <i>originator</i> and a <i>recipient</i>). For example, when a management account (the originator) invites another account (the recipient) to join its organization, the two accounts exchange information as a series of handshake requests and responses.</p> <p> <b>Note:</b> Handshakes that are <code>CANCELED</code>, <code>ACCEPTED</code>, or <code>DECLINED</code> show up in lists for only 30 days after entering that state After that they are deleted.</p>
    """

    Id: Optional[HandshakeId] = None
    Arn: Optional[HandshakeArn] = None
    Parties: Optional[HandshakeParties] = None
    State: Optional[HandshakeState] = None
    RequestedTimestamp: Optional[Timestamp] = None
    ExpirationTimestamp: Optional[Timestamp] = None
    Action: Optional[ActionType] = None
    Resources: Optional[HandshakeResources] = None


class HandshakeResources(BaseModel):
    __root__: List[HandshakeResource]


class HandshakeResource(BaseModel):
    """
    Contains additional data that is needed to process a handshake.
    """

    Value: Optional[HandshakeResourceValue] = None
    Type: Optional[HandshakeResourceType] = None
    Resources: Optional[HandshakeResources] = None


class Handshakes(BaseModel):
    __root__: List[Handshake]


AcceptHandshakeResponse.update_forward_refs()
CancelHandshakeResponse.update_forward_refs()
DeclineHandshakeResponse.update_forward_refs()
DescribeHandshakeResponse.update_forward_refs()
EnableAllFeaturesResponse.update_forward_refs()
InviteAccountToOrganizationResponse.update_forward_refs()
ListHandshakesForAccountResponse.update_forward_refs()
ListHandshakesForOrganizationResponse.update_forward_refs()
Handshake.update_forward_refs()
HandshakeResources.update_forward_refs()
