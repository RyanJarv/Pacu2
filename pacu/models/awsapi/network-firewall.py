# generated by datamodel-codegen:
#   filename:  openapi.yaml
#   timestamp: 2021-12-31T02:53:27+00:00

from __future__ import annotations

from enum import Enum
from typing import Annotated, Any, List, Optional

from pydantic import BaseModel, Extra, Field


class InvalidRequestException(BaseModel):
    __root__: Any


class InternalServerError(InvalidRequestException):
    pass


class ResourceNotFoundException(InvalidRequestException):
    pass


class ThrottlingException(InvalidRequestException):
    pass


class InvalidTokenException(InvalidRequestException):
    pass


class InvalidOperationException(InvalidRequestException):
    pass


class InsufficientCapacityException(InvalidRequestException):
    pass


class LimitExceededException(InvalidRequestException):
    pass


class UnsupportedOperationException(InvalidRequestException):
    pass


class DeleteResourcePolicyResponse(BaseModel):
    pass


class PutResourcePolicyResponse(DeleteResourcePolicyResponse):
    pass


class InvalidResourcePolicyException(InvalidRequestException):
    pass


class TagResourceResponse(DeleteResourcePolicyResponse):
    pass


class UntagResourceResponse(DeleteResourcePolicyResponse):
    pass


class ResourceOwnerCheckException(InvalidRequestException):
    pass


class LogDestinationPermissionException(InvalidRequestException):
    pass


class ActionName(BaseModel):
    __root__: Annotated[
        str, Field(max_length=128, min_length=1, regex='^[a-zA-Z0-9]+$')
    ]


class AddressDefinition(BaseModel):
    __root__: Annotated[
        str, Field(max_length=255, min_length=1, regex='^([a-fA-F\\d:\\.]+/\\d{1,3})$')
    ]


class Address(BaseModel):
    """
    A single IP address specification. This is used in the <a>MatchAttributes</a> source and destination specifications.
    """

    AddressDefinition: AddressDefinition


class Addresses(BaseModel):
    __root__: List[Address]


class UpdateToken(BaseModel):
    __root__: Annotated[
        str,
        Field(
            max_length=1024,
            min_length=1,
            regex='^([0-9a-f]{8})-([0-9a-f]{4}-){3}([0-9a-f]{12})$',
        ),
    ]


class ResourceArn(BaseModel):
    __root__: Annotated[str, Field(max_length=256, min_length=1, regex='^arn:aws.*')]


class ResourceName(BaseModel):
    __root__: Annotated[
        str, Field(max_length=128, min_length=1, regex='^[a-zA-Z0-9-]+$')
    ]


class AzSubnet(BaseModel):
    __root__: Annotated[
        str, Field(max_length=128, min_length=1, regex='^subnet-[0-9a-f]+$')
    ]


class EndpointId(BaseModel):
    __root__: str


class AttachmentStatus(Enum):
    CREATING = 'CREATING'
    DELETING = 'DELETING'
    SCALING = 'SCALING'
    READY = 'READY'


class Attachment(BaseModel):
    """
    The configuration and status for a single subnet that you've specified for use by the AWS Network Firewall firewall. This is part of the <a>FirewallStatus</a>.
    """

    SubnetId: Optional[AzSubnet] = None
    EndpointId: Optional[EndpointId] = None
    Status: Optional[AttachmentStatus] = None


class AvailabilityZone(EndpointId):
    pass


class AzSubnets(BaseModel):
    __root__: List[AzSubnet]


class Boolean(BaseModel):
    __root__: bool


class CollectionMemberString(EndpointId):
    pass


class ConfigurationSyncState(Enum):
    PENDING = 'PENDING'
    IN_SYNC = 'IN_SYNC'


class Description(BaseModel):
    __root__: Annotated[str, Field(max_length=512, regex='^.*$')]


class VpcId(BaseModel):
    __root__: Annotated[
        str, Field(max_length=128, min_length=1, regex='^vpc-[0-9a-f]+$')
    ]


class RulesString(BaseModel):
    __root__: Annotated[str, Field(max_length=1000000, min_length=0)]


class RuleGroupType(Enum):
    STATELESS = 'STATELESS'
    STATEFUL = 'STATEFUL'


class RuleCapacity(BaseModel):
    __root__: int


class PolicyString(BaseModel):
    __root__: Annotated[str, Field(max_length=395000, min_length=1, regex='.*\\S.*')]


class Destination(BaseModel):
    __root__: Annotated[str, Field(max_length=1024, min_length=1, regex='^.*$')]


class DimensionValue(BaseModel):
    __root__: Annotated[
        str, Field(max_length=128, min_length=1, regex='^[a-zA-Z0-9-_ ]+$')
    ]


class Dimension(BaseModel):
    """
    <p>The value to use in an Amazon CloudWatch custom metric dimension. This is used in the <code>PublishMetrics</code> <a>CustomAction</a>. A CloudWatch custom metric dimension is a name/value pair that's part of the identity of a metric. </p> <p>AWS Network Firewall sets the dimension name to <code>CustomAction</code> and you provide the dimension value. </p> <p>For more information about CloudWatch custom metric dimensions, see <a href="https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/publishingMetrics.html#usingDimensions">Publishing Custom Metrics</a> in the <a href="https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/WhatIsCloudWatch.html">Amazon CloudWatch User Guide</a>.</p>
    """

    Value: DimensionValue


class Dimensions(BaseModel):
    __root__: Annotated[List[Dimension], Field(max_items=1, min_items=1)]


class ResourceId(BaseModel):
    __root__: Annotated[
        str,
        Field(
            max_length=36,
            min_length=36,
            regex='^([0-9a-f]{8})-([0-9a-f]{4}-){3}([0-9a-f]{12})$',
        ),
    ]


class FirewallMetadata(BaseModel):
    """
    High-level information about a firewall, returned by operations like create and describe. You can use the information provided in the metadata to retrieve and manage a firewall.
    """

    FirewallName: Optional[ResourceName] = None
    FirewallArn: Optional[ResourceArn] = None


class FirewallPolicyMetadata(BaseModel):
    """
    High-level information about a firewall policy, returned by operations like create and describe. You can use the information provided in the metadata to retrieve and manage a firewall policy. You can retrieve all objects for a firewall policy by calling <a>DescribeFirewallPolicy</a>.
    """

    Name: Optional[ResourceName] = None
    Arn: Optional[ResourceArn] = None


class FirewallPolicies(BaseModel):
    __root__: List[FirewallPolicyMetadata]


class StatelessActions(BaseModel):
    __root__: List[CollectionMemberString]


class ResourceStatus(Enum):
    ACTIVE = 'ACTIVE'
    DELETING = 'DELETING'


class FirewallStatusValue(Enum):
    PROVISIONING = 'PROVISIONING'
    DELETING = 'DELETING'
    READY = 'READY'


class SyncStates(BaseModel):
    pass

    class Config:
        extra = Extra.allow


class Firewalls(BaseModel):
    __root__: List[FirewallMetadata]


class TCPFlag(Enum):
    FIN = 'FIN'
    SYN = 'SYN'
    RST = 'RST'
    PSH = 'PSH'
    ACK = 'ACK'
    URG = 'URG'
    ECE = 'ECE'
    CWR = 'CWR'


class Flags(BaseModel):
    __root__: List[TCPFlag]


class GeneratedRulesType(Enum):
    ALLOWLIST = 'ALLOWLIST'
    DENYLIST = 'DENYLIST'


class HashMapKey(BaseModel):
    __root__: Annotated[
        str, Field(max_length=50, min_length=3, regex='^[0-9A-Za-z.\\-_@\\/]+$')
    ]


class HashMapValue(BaseModel):
    __root__: Annotated[str, Field(max_length=1024, min_length=1, regex='[\\s\\S]*$')]


class StatefulRuleProtocol(Enum):
    IP = 'IP'
    TCP = 'TCP'
    UDP = 'UDP'
    ICMP = 'ICMP'
    HTTP = 'HTTP'
    FTP = 'FTP'
    TLS = 'TLS'
    SMB = 'SMB'
    DNS = 'DNS'
    DCERPC = 'DCERPC'
    SSH = 'SSH'
    SMTP = 'SMTP'
    IMAP = 'IMAP'
    MSN = 'MSN'
    KRB5 = 'KRB5'
    IKEV2 = 'IKEV2'
    TFTP = 'TFTP'
    NTP = 'NTP'
    DHCP = 'DHCP'


class Source(Destination):
    pass


class Port(Destination):
    pass


class StatefulRuleDirection(Enum):
    FORWARD = 'FORWARD'
    ANY = 'ANY'


class Header(BaseModel):
    """
    The 5-tuple criteria for AWS Network Firewall to use to inspect packet headers in stateful traffic flow inspection. Traffic flows that match the criteria are a match for the corresponding <a>StatefulRule</a>.
    """

    Protocol: StatefulRuleProtocol
    Source: Source
    SourcePort: Port
    Direction: StatefulRuleDirection
    Destination: Destination
    DestinationPort: Port


class IPSets(BaseModel):
    pass

    class Config:
        extra = Extra.allow


class Keyword(BaseModel):
    __root__: Annotated[str, Field(max_length=128, min_length=1, regex='.*')]


class PaginationToken(BaseModel):
    __root__: Annotated[
        str, Field(max_length=2048, min_length=1, regex='[0-9A-Za-z:\\/+=]+$')
    ]


class PaginationMaxResults(BaseModel):
    __root__: Annotated[int, Field(ge=1.0, le=100.0)]


class VpcIds(BaseModel):
    __root__: List[VpcId]


class TagsPaginationMaxResults(BaseModel):
    __root__: Annotated[int, Field(ge=0.0, le=100.0)]


class LogType(Enum):
    ALERT = 'ALERT'
    FLOW = 'FLOW'


class LogDestinationType(Enum):
    S3 = 'S3'
    CloudWatchLogs = 'CloudWatchLogs'
    KinesisDataFirehose = 'KinesisDataFirehose'


class LogDestinationMap(BaseModel):
    pass

    class Config:
        extra = Extra.allow


class LogDestinationConfig(BaseModel):
    """
    <p>Defines where AWS Network Firewall sends logs for the firewall for one log type. This is used in <a>LoggingConfiguration</a>. You can send each type of log to an Amazon S3 bucket, a CloudWatch log group, or a Kinesis Data Firehose delivery stream.</p> <p>Network Firewall generates logs for stateful rule groups. You can save alert and flow log types. The stateful rules engine records flow logs for all network traffic that it receives. It records alert logs for traffic that matches stateful rules that have the rule action set to <code>DROP</code> or <code>ALERT</code>. </p>
    """

    LogType: LogType
    LogDestinationType: LogDestinationType
    LogDestination: LogDestinationMap


class LogDestinationConfigs(BaseModel):
    __root__: List[LogDestinationConfig]


class PerObjectStatus(BaseModel):
    """
    Provides configuration status for a single policy or rule group that is used for a firewall endpoint. Network Firewall provides each endpoint with the rules that are configured in the firewall policy. Each time you add a subnet or modify the associated firewall policy, Network Firewall synchronizes the rules in the endpoint, so it can properly filter network traffic. This is part of a <a>SyncState</a> for a firewall.
    """

    SyncStatus: Optional[ConfigurationSyncState] = None
    UpdateToken: Optional[UpdateToken] = None


class PortRangeBound(BaseModel):
    __root__: Annotated[int, Field(ge=0.0, le=65535.0)]


class PortRange(BaseModel):
    """
    A single port range specification. This is used for source and destination port ranges in the stateless rule <a>MatchAttributes</a>, <code>SourcePorts</code>, and <code>DestinationPorts</code> settings.
    """

    FromPort: PortRangeBound
    ToPort: PortRangeBound


class PortSets(BaseModel):
    pass

    class Config:
        extra = Extra.allow


class Priority(BaseModel):
    __root__: Annotated[int, Field(ge=1.0, le=65535.0)]


class ProtocolNumber(BaseModel):
    __root__: Annotated[int, Field(ge=0.0, le=255.0)]


class RuleVariables(BaseModel):
    """
    Settings that are available for use in the rules in the <a>RuleGroup</a> where this is defined.
    """

    IPSets: Optional[IPSets] = None
    PortSets: Optional[PortSets] = None


class RuleGroupMetadata(FirewallPolicyMetadata):
    """
    High-level information about a rule group, returned by <a>ListRuleGroups</a>. You can use the information provided in the metadata to retrieve and manage a rule group.
    """

    pass


class RuleTargets(StatelessActions):
    pass


class RuleVariableName(BaseModel):
    __root__: Annotated[
        str, Field(max_length=32, min_length=1, regex='^[A-Za-z][A-Za-z0-9_]*$')
    ]


class Setting(BaseModel):
    __root__: Annotated[str, Field(max_length=8192, min_length=1, regex='.*')]


class StatefulAction(Enum):
    PASS = 'PASS'
    DROP = 'DROP'
    ALERT = 'ALERT'


class StatefulRuleGroupReference(BaseModel):
    """
    Identifier for a single stateful rule group, used in a firewall policy to refer to a rule group.
    """

    ResourceArn: ResourceArn


class StatelessRuleGroupReference(BaseModel):
    """
    Identifier for a single stateless rule group, used in a firewall policy to refer to the rule group.
    """

    ResourceArn: ResourceArn
    Priority: Priority


class SubnetMapping(BaseModel):
    """
    The ID for a subnet that you want to associate with the firewall. This is used with <a>CreateFirewall</a> and <a>AssociateSubnets</a>. AWS Network Firewall creates an instance of the associated firewall in each subnet that you specify, to filter traffic in the subnet's Availability Zone.
    """

    SubnetId: CollectionMemberString


class SyncStateConfig(BaseModel):
    pass

    class Config:
        extra = Extra.allow


class SyncState(BaseModel):
    """
    <p>The status of the firewall endpoint and firewall policy configuration for a single VPC subnet. </p> <p>For each VPC subnet that you associate with a firewall, AWS Network Firewall does the following: </p> <ul> <li> <p>Instantiates a firewall endpoint in the subnet, ready to take traffic.</p> </li> <li> <p>Configures the endpoint with the current firewall policy settings, to provide the filtering behavior for the endpoint.</p> </li> </ul> <p>When you update a firewall, for example to add a subnet association or change a rule group in the firewall policy, the affected sync states reflect out-of-sync or not ready status until the changes are complete. </p>
    """

    Attachment: Optional[Attachment] = None
    Config_: Annotated[Optional[SyncStateConfig], Field(alias='Config')] = None


class TCPFlagField(BaseModel):
    """
    TCP flags and masks to inspect packets for, used in stateless rules <a>MatchAttributes</a> settings.
    """

    Flags: Flags
    Masks: Optional[Flags] = None


class TagKey(BaseModel):
    __root__: Annotated[str, Field(max_length=128, min_length=1, regex='^.*$')]


class TagValue(BaseModel):
    __root__: Annotated[str, Field(max_length=256, min_length=0, regex='^.*$')]


class Tag(BaseModel):
    """
    A key:value pair associated with an AWS resource. The key:value pair can be anything you define. Typically, the tag key represents a category (such as "environment") and the tag value represents a specific value within that category (such as "test," "development," or "production"). You can add up to 50 tags to each AWS resource.
    """

    Key: TagKey
    Value: TagValue


class TagKeyList(BaseModel):
    __root__: Annotated[List[TagKey], Field(max_items=200, min_items=1)]


class TargetType(Enum):
    TLS_SNI = 'TLS_SNI'
    HTTP_HOST = 'HTTP_HOST'


class VariableDefinition(BaseModel):
    __root__: Annotated[str, Field(min_length=1, regex='^.*$')]


class AssociateFirewallPolicyResponse(BaseModel):
    FirewallArn: Optional[ResourceArn] = None
    FirewallName: Optional[ResourceName] = None
    FirewallPolicyArn: Optional[ResourceArn] = None
    UpdateToken: Optional[UpdateToken] = None


class AssociateFirewallPolicyRequest(BaseModel):
    UpdateToken: Optional[UpdateToken] = None
    FirewallArn: Optional[ResourceArn] = None
    FirewallName: Optional[ResourceName] = None
    FirewallPolicyArn: ResourceArn


class DeleteFirewallRequest(BaseModel):
    FirewallName: Optional[ResourceName] = None
    FirewallArn: Optional[ResourceArn] = None


class DeleteFirewallPolicyRequest(BaseModel):
    FirewallPolicyName: Optional[ResourceName] = None
    FirewallPolicyArn: Optional[ResourceArn] = None


class DeleteResourcePolicyRequest(BaseModel):
    ResourceArn: ResourceArn


class DeleteRuleGroupRequest(BaseModel):
    RuleGroupName: Optional[ResourceName] = None
    RuleGroupArn: Optional[ResourceArn] = None
    Type: Optional[RuleGroupType] = None


class DescribeFirewallRequest(BaseModel):
    FirewallName: Optional[ResourceName] = None
    FirewallArn: Optional[ResourceArn] = None


class DescribeFirewallPolicyRequest(BaseModel):
    FirewallPolicyName: Optional[ResourceName] = None
    FirewallPolicyArn: Optional[ResourceArn] = None


class DescribeLoggingConfigurationRequest(BaseModel):
    FirewallArn: Optional[ResourceArn] = None
    FirewallName: Optional[ResourceName] = None


class DescribeResourcePolicyResponse(BaseModel):
    Policy: Optional[PolicyString] = None


class DescribeResourcePolicyRequest(BaseModel):
    ResourceArn: ResourceArn


class DescribeRuleGroupRequest(BaseModel):
    RuleGroupName: Optional[ResourceName] = None
    RuleGroupArn: Optional[ResourceArn] = None
    Type: Optional[RuleGroupType] = None


class DisassociateSubnetsRequest(BaseModel):
    UpdateToken: Optional[UpdateToken] = None
    FirewallArn: Optional[ResourceArn] = None
    FirewallName: Optional[ResourceName] = None
    SubnetIds: AzSubnets


class ListFirewallPoliciesResponse(BaseModel):
    NextToken: Optional[PaginationToken] = None
    FirewallPolicies: Optional[FirewallPolicies] = None


class ListFirewallPoliciesRequest(BaseModel):
    NextToken: Optional[PaginationToken] = None
    MaxResults: Optional[PaginationMaxResults] = None


class ListFirewallsResponse(BaseModel):
    NextToken: Optional[PaginationToken] = None
    Firewalls: Optional[Firewalls] = None


class ListFirewallsRequest(BaseModel):
    NextToken: Optional[PaginationToken] = None
    VpcIds: Optional[VpcIds] = None
    MaxResults: Optional[PaginationMaxResults] = None


class ListRuleGroupsRequest(BaseModel):
    NextToken: Optional[PaginationToken] = None
    MaxResults: Optional[PaginationMaxResults] = None


class ListTagsForResourceRequest(BaseModel):
    NextToken: Optional[PaginationToken] = None
    MaxResults: Optional[TagsPaginationMaxResults] = None
    ResourceArn: ResourceArn


class PutResourcePolicyRequest(BaseModel):
    ResourceArn: ResourceArn
    Policy: PolicyString


class UntagResourceRequest(BaseModel):
    ResourceArn: ResourceArn
    TagKeys: TagKeyList


class UpdateFirewallDeleteProtectionResponse(BaseModel):
    FirewallArn: Optional[ResourceArn] = None
    FirewallName: Optional[ResourceName] = None
    DeleteProtection: Optional[Boolean] = None
    UpdateToken: Optional[UpdateToken] = None


class UpdateFirewallDeleteProtectionRequest(BaseModel):
    UpdateToken: Optional[UpdateToken] = None
    FirewallArn: Optional[ResourceArn] = None
    FirewallName: Optional[ResourceName] = None
    DeleteProtection: Boolean


class UpdateFirewallDescriptionResponse(BaseModel):
    FirewallArn: Optional[ResourceArn] = None
    FirewallName: Optional[ResourceName] = None
    Description: Optional[Description] = None
    UpdateToken: Optional[UpdateToken] = None


class UpdateFirewallDescriptionRequest(BaseModel):
    UpdateToken: Optional[UpdateToken] = None
    FirewallArn: Optional[ResourceArn] = None
    FirewallName: Optional[ResourceName] = None
    Description: Optional[Description] = None


class UpdateFirewallPolicyChangeProtectionResponse(BaseModel):
    UpdateToken: Optional[UpdateToken] = None
    FirewallArn: Optional[ResourceArn] = None
    FirewallName: Optional[ResourceName] = None
    FirewallPolicyChangeProtection: Optional[Boolean] = None


class UpdateFirewallPolicyChangeProtectionRequest(BaseModel):
    UpdateToken: Optional[UpdateToken] = None
    FirewallArn: Optional[ResourceArn] = None
    FirewallName: Optional[ResourceName] = None
    FirewallPolicyChangeProtection: Boolean


class UpdateSubnetChangeProtectionResponse(BaseModel):
    UpdateToken: Optional[UpdateToken] = None
    FirewallArn: Optional[ResourceArn] = None
    FirewallName: Optional[ResourceName] = None
    SubnetChangeProtection: Optional[Boolean] = None


class UpdateSubnetChangeProtectionRequest(BaseModel):
    UpdateToken: Optional[UpdateToken] = None
    FirewallArn: Optional[ResourceArn] = None
    FirewallName: Optional[ResourceName] = None
    SubnetChangeProtection: Boolean


class PublishMetricAction(BaseModel):
    """
    Stateless inspection criteria that publishes the specified metrics to Amazon CloudWatch for the matching packet. This setting defines a CloudWatch dimension value to be published.
    """

    Dimensions: Dimensions


class ActionDefinition(BaseModel):
    """
    A custom action to use in stateless rule actions settings. This is used in <a>CustomAction</a>.
    """

    PublishMetricAction: Optional[PublishMetricAction] = None


class SubnetMappings(BaseModel):
    __root__: List[SubnetMapping]


class TagList(BaseModel):
    __root__: Annotated[List[Tag], Field(max_items=200, min_items=1)]


class FirewallPolicyResponse(BaseModel):
    """
    The high-level properties of a firewall policy. This, along with the <a>FirewallPolicy</a>, define the policy. You can retrieve all objects for a firewall policy by calling <a>DescribeFirewallPolicy</a>.
    """

    FirewallPolicyName: ResourceName
    FirewallPolicyArn: ResourceArn
    FirewallPolicyId: ResourceId
    Description: Optional[Description] = None
    FirewallPolicyStatus: Optional[ResourceStatus] = None
    Tags: Optional[TagList] = None


class Firewall(BaseModel):
    """
    <p>The firewall defines the configuration settings for an AWS Network Firewall firewall. These settings include the firewall policy, the subnets in your VPC to use for the firewall endpoints, and any tags that are attached to the firewall AWS resource. </p> <p>The status of the firewall, for example whether it's ready to filter network traffic, is provided in the corresponding <a>FirewallStatus</a>. You can retrieve both objects by calling <a>DescribeFirewall</a>.</p>
    """

    FirewallName: Optional[ResourceName] = None
    FirewallArn: Optional[ResourceArn] = None
    FirewallPolicyArn: ResourceArn
    VpcId: VpcId
    SubnetMappings: SubnetMappings
    DeleteProtection: Optional[Boolean] = None
    SubnetChangeProtection: Optional[Boolean] = None
    FirewallPolicyChangeProtection: Optional[Boolean] = None
    Description: Optional[Description] = None
    FirewallId: ResourceId
    Tags: Optional[TagList] = None


class FirewallStatus(BaseModel):
    """
    Detailed information about the current status of a <a>Firewall</a>. You can retrieve this for a firewall by calling <a>DescribeFirewall</a> and providing the firewall name and ARN.
    """

    Status: FirewallStatusValue
    ConfigurationSyncStateSummary: ConfigurationSyncState
    SyncStates: Optional[SyncStates] = None


class RuleGroupResponse(BaseModel):
    """
    The high-level properties of a rule group. This, along with the <a>RuleGroup</a>, define the rule group. You can retrieve all objects for a rule group by calling <a>DescribeRuleGroup</a>.
    """

    RuleGroupArn: ResourceArn
    RuleGroupName: ResourceName
    RuleGroupId: ResourceId
    Description: Optional[Description] = None
    Type: Optional[RuleGroupType] = None
    Capacity: Optional[RuleCapacity] = None
    RuleGroupStatus: Optional[ResourceStatus] = None
    Tags: Optional[TagList] = None


class CustomAction(BaseModel):
    """
    <p>An optional, non-standard action to use for stateless packet handling. You can define this in addition to the standard action that you must specify. </p> <p>You define and name the custom actions that you want to be able to use, and then you reference them by name in your actions settings. </p> <p>You can use custom actions in the following places: </p> <ul> <li> <p>In a rule group's <a>StatelessRulesAndCustomActions</a> specification. The custom actions are available for use by name inside the <code>StatelessRulesAndCustomActions</code> where you define them. You can use them for your stateless rule actions to specify what to do with a packet that matches the rule's match attributes. </p> </li> <li> <p>In a <a>FirewallPolicy</a> specification, in <code>StatelessCustomActions</code>. The custom actions are available for use inside the policy where you define them. You can use them for the policy's default stateless actions settings to specify what to do with packets that don't match any of the policy's stateless rules. </p> </li> </ul>
    """

    ActionName: ActionName
    ActionDefinition: ActionDefinition


class CustomActions(BaseModel):
    __root__: List[CustomAction]


class LoggingConfiguration(BaseModel):
    """
    Defines how AWS Network Firewall performs logging for a <a>Firewall</a>.
    """

    LogDestinationConfigs: LogDestinationConfigs


class StatelessRuleGroupReferences(BaseModel):
    __root__: List[StatelessRuleGroupReference]


class StatefulRuleGroupReferences(BaseModel):
    __root__: List[StatefulRuleGroupReference]


class VariableDefinitionList(BaseModel):
    __root__: List[VariableDefinition]


class IPSet(BaseModel):
    """
    A list of IP addresses and address ranges, in CIDR notation. This is part of a <a>RuleVariables</a>.
    """

    Definition: VariableDefinitionList


class RuleGroups(BaseModel):
    __root__: List[RuleGroupMetadata]


class PortRanges(BaseModel):
    __root__: List[PortRange]


class ProtocolNumbers(BaseModel):
    __root__: List[ProtocolNumber]


class TCPFlags(BaseModel):
    __root__: List[TCPFlagField]


class MatchAttributes(BaseModel):
    """
    Criteria for Network Firewall to use to inspect an individual packet in stateless rule inspection. Each match attributes set can include one or more items such as IP address, CIDR range, port number, protocol, and TCP flags.
    """

    Sources: Optional[Addresses] = None
    Destinations: Optional[Addresses] = None
    SourcePorts: Optional[PortRanges] = None
    DestinationPorts: Optional[PortRanges] = None
    Protocols: Optional[ProtocolNumbers] = None
    TCPFlags: Optional[TCPFlags] = None


class PortSet(BaseModel):
    """
    A set of port ranges for use in the rules in a rule group.
    """

    Definition: Optional[VariableDefinitionList] = None


class RuleDefinition(BaseModel):
    """
    The inspection criteria and action for a single stateless rule. AWS Network Firewall inspects each packet for the specified matching criteria. When a packet matches the criteria, Network Firewall performs the rule's actions on the packet.
    """

    MatchAttributes: MatchAttributes
    Actions: StatelessActions


class Settings(BaseModel):
    __root__: List[Setting]


class RuleOption(BaseModel):
    """
    Additional settings for a stateful rule. This is part of the <a>StatefulRule</a> configuration.
    """

    Keyword: Keyword
    Settings: Optional[Settings] = None


class RuleOptions(BaseModel):
    __root__: List[RuleOption]


class TargetTypes(BaseModel):
    __root__: List[TargetType]


class StatefulRule(BaseModel):
    """
    A single 5-tuple stateful rule, for use in a stateful rule group.
    """

    Action: StatefulAction
    Header: Header
    RuleOptions: RuleOptions


class StatelessRule(BaseModel):
    """
    A single stateless rule. This is used in <a>StatelessRulesAndCustomActions</a>.
    """

    RuleDefinition: RuleDefinition
    Priority: Priority


class StatelessRules(BaseModel):
    __root__: List[StatelessRule]


class AssociateSubnetsResponse(BaseModel):
    FirewallArn: Optional[ResourceArn] = None
    FirewallName: Optional[ResourceName] = None
    SubnetMappings: Optional[SubnetMappings] = None
    UpdateToken: Optional[UpdateToken] = None


class AssociateSubnetsRequest(BaseModel):
    UpdateToken: Optional[UpdateToken] = None
    FirewallArn: Optional[ResourceArn] = None
    FirewallName: Optional[ResourceName] = None
    SubnetMappings: SubnetMappings


class CreateFirewallResponse(BaseModel):
    Firewall: Optional[Firewall] = None
    FirewallStatus: Optional[FirewallStatus] = None


class CreateFirewallRequest(BaseModel):
    FirewallName: ResourceName
    FirewallPolicyArn: ResourceArn
    VpcId: VpcId
    SubnetMappings: SubnetMappings
    DeleteProtection: Optional[Boolean] = None
    SubnetChangeProtection: Optional[Boolean] = None
    FirewallPolicyChangeProtection: Optional[Boolean] = None
    Description: Optional[Description] = None
    Tags: Optional[TagList] = None


class CreateFirewallPolicyResponse(BaseModel):
    UpdateToken: UpdateToken
    FirewallPolicyResponse: FirewallPolicyResponse


class CreateRuleGroupResponse(BaseModel):
    UpdateToken: UpdateToken
    RuleGroupResponse: RuleGroupResponse


class DeleteFirewallResponse(CreateFirewallResponse):
    pass


class DeleteFirewallPolicyResponse(BaseModel):
    FirewallPolicyResponse: FirewallPolicyResponse


class DeleteRuleGroupResponse(BaseModel):
    RuleGroupResponse: RuleGroupResponse


class DescribeFirewallResponse(BaseModel):
    UpdateToken: Optional[UpdateToken] = None
    Firewall: Optional[Firewall] = None
    FirewallStatus: Optional[FirewallStatus] = None


class DescribeLoggingConfigurationResponse(BaseModel):
    FirewallArn: Optional[ResourceArn] = None
    LoggingConfiguration: Optional[LoggingConfiguration] = None


class DisassociateSubnetsResponse(AssociateSubnetsResponse):
    pass


class ListRuleGroupsResponse(BaseModel):
    NextToken: Optional[PaginationToken] = None
    RuleGroups: Optional[RuleGroups] = None


class ListTagsForResourceResponse(BaseModel):
    NextToken: Optional[PaginationToken] = None
    Tags: Optional[TagList] = None


class TagResourceRequest(BaseModel):
    ResourceArn: ResourceArn
    Tags: TagList


class UpdateFirewallPolicyResponse(CreateFirewallPolicyResponse):
    pass


class UpdateLoggingConfigurationResponse(BaseModel):
    FirewallArn: Optional[ResourceArn] = None
    FirewallName: Optional[ResourceName] = None
    LoggingConfiguration: Optional[LoggingConfiguration] = None


class UpdateLoggingConfigurationRequest(BaseModel):
    FirewallArn: Optional[ResourceArn] = None
    FirewallName: Optional[ResourceName] = None
    LoggingConfiguration: Optional[LoggingConfiguration] = None


class UpdateRuleGroupResponse(CreateRuleGroupResponse):
    pass


class FirewallPolicy(BaseModel):
    """
    <p>The firewall policy defines the behavior of a firewall using a collection of stateless and stateful rule groups and other settings. You can use one firewall policy for multiple firewalls. </p> <p>This, along with <a>FirewallPolicyResponse</a>, define the policy. You can retrieve all objects for a firewall policy by calling <a>DescribeFirewallPolicy</a>.</p>
    """

    StatelessRuleGroupReferences: Optional[StatelessRuleGroupReferences] = None
    StatelessDefaultActions: StatelessActions
    StatelessFragmentDefaultActions: StatelessActions
    StatelessCustomActions: Optional[CustomActions] = None
    StatefulRuleGroupReferences: Optional[StatefulRuleGroupReferences] = None


class RulesSourceList(BaseModel):
    """
    <p>Stateful inspection criteria for a domain list rule group. </p> <p>For HTTPS traffic, domain filtering is SNI-based. It uses the server name indicator extension of the TLS handshake.</p> <p>By default, Network Firewall domain list inspection only includes traffic coming from the VPC where you deploy the firewall. To inspect traffic from IP addresses outside of the deployment VPC, you set the <code>HOME_NET</code> rule variable to include the CIDR range of the deployment VPC plus the other CIDR ranges. For more information, see <a>RuleVariables</a> in this guide and <a href="https://docs.aws.amazon.com/network-firewall/latest/developerguide/stateful-rule-groups-domain-names.html">Stateful domain list rule groups in AWS Network Firewall</a> in the <i>Network Firewall Developer Guide</i> </p>
    """

    Targets: RuleTargets
    TargetTypes: TargetTypes
    GeneratedRulesType: GeneratedRulesType


class StatefulRules(BaseModel):
    __root__: List[StatefulRule]


class StatelessRulesAndCustomActions(BaseModel):
    """
    Stateless inspection criteria. Each stateless rule group uses exactly one of these data types to define its stateless rules.
    """

    StatelessRules: StatelessRules
    CustomActions: Optional[CustomActions] = None


class CreateFirewallPolicyRequest(BaseModel):
    FirewallPolicyName: ResourceName
    FirewallPolicy: FirewallPolicy
    Description: Optional[Description] = None
    Tags: Optional[TagList] = None
    DryRun: Optional[Boolean] = None


class DescribeFirewallPolicyResponse(BaseModel):
    UpdateToken: UpdateToken
    FirewallPolicyResponse: FirewallPolicyResponse
    FirewallPolicy: Optional[FirewallPolicy] = None


class UpdateFirewallPolicyRequest(BaseModel):
    UpdateToken: UpdateToken
    FirewallPolicyArn: Optional[ResourceArn] = None
    FirewallPolicyName: Optional[ResourceName] = None
    FirewallPolicy: FirewallPolicy
    Description: Optional[Description] = None
    DryRun: Optional[Boolean] = None


class RulesSource(BaseModel):
    """
    The stateless or stateful rules definitions for use in a single rule group. Each rule group requires a single <code>RulesSource</code>. You can use an instance of this for either stateless rules or stateful rules.
    """

    RulesString: Optional[RulesString] = None
    RulesSourceList: Optional[RulesSourceList] = None
    StatefulRules: Optional[StatefulRules] = None
    StatelessRulesAndCustomActions: Optional[StatelessRulesAndCustomActions] = None


class RuleGroup(BaseModel):
    """
    <p>The object that defines the rules in a rule group. This, along with <a>RuleGroupResponse</a>, define the rule group. You can retrieve all objects for a rule group by calling <a>DescribeRuleGroup</a>. </p> <p>AWS Network Firewall uses a rule group to inspect and control network traffic. You define stateless rule groups to inspect individual packets and you define stateful rule groups to inspect packets in the context of their traffic flow. </p> <p>To use a rule group, you include it by reference in an Network Firewall firewall policy, then you use the policy in a firewall. You can reference a rule group from more than one firewall policy, and you can use a firewall policy in more than one firewall. </p>
    """

    RuleVariables: Optional[RuleVariables] = None
    RulesSource: RulesSource


class CreateRuleGroupRequest(BaseModel):
    RuleGroupName: ResourceName
    RuleGroup: Optional[RuleGroup] = None
    Rules: Optional[RulesString] = None
    Type: RuleGroupType
    Description: Optional[Description] = None
    Capacity: RuleCapacity
    Tags: Optional[TagList] = None
    DryRun: Optional[Boolean] = None


class DescribeRuleGroupResponse(BaseModel):
    UpdateToken: UpdateToken
    RuleGroup: Optional[RuleGroup] = None
    RuleGroupResponse: RuleGroupResponse


class UpdateRuleGroupRequest(BaseModel):
    UpdateToken: UpdateToken
    RuleGroupArn: Optional[ResourceArn] = None
    RuleGroupName: Optional[ResourceName] = None
    RuleGroup: Optional[RuleGroup] = None
    Rules: Optional[RulesString] = None
    Type: Optional[RuleGroupType] = None
    Description: Optional[Description] = None
    DryRun: Optional[Boolean] = None
