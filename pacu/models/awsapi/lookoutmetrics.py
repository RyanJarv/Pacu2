# generated by datamodel-codegen:
#   filename:  openapi.yaml
#   timestamp: 2021-12-31T02:51:58+00:00

from __future__ import annotations

from datetime import datetime
from enum import Enum
from typing import Annotated, Any, List, Optional

from pydantic import BaseModel, Extra, Field


class ActivateAnomalyDetectorResponse(BaseModel):
    pass


class ValidationException(BaseModel):
    __root__: Any


class ResourceNotFoundException(ValidationException):
    pass


class AccessDeniedException(ValidationException):
    pass


class TooManyRequestsException(ValidationException):
    pass


class InternalServerException(ValidationException):
    pass


class ConflictException(ValidationException):
    pass


class BackTestAnomalyDetectorResponse(ActivateAnomalyDetectorResponse):
    pass


class TagValue(BaseModel):
    __root__: Annotated[str, Field(max_length=256)]


class ServiceQuotaExceededException(ValidationException):
    pass


class Frequency(Enum):
    P1D = 'P1D'
    PT1H = 'PT1H'
    PT10M = 'PT10M'
    PT5M = 'PT5M'


class ColumnName(BaseModel):
    __root__: Annotated[
        str, Field(max_length=63, min_length=1, regex='^[a-zA-Z0-9][a-zA-Z0-9\\-_]*')
    ]


class DateTimeFormat(BaseModel):
    __root__: Annotated[str, Field(max_length=63, regex='.*\\S.*')]


class DeleteAlertResponse(ActivateAnomalyDetectorResponse):
    pass


class DeleteAnomalyDetectorResponse(ActivateAnomalyDetectorResponse):
    pass


class UUID(BaseModel):
    __root__: Annotated[
        str,
        Field(
            max_length=63,
            regex='[a-z0-9]{8}-[a-z0-9]{4}-[a-z0-9]{4}-[a-z0-9]{4}-[a-z0-9]{12}',
        ),
    ]


class TimeSeriesId(BaseModel):
    __root__: Annotated[str, Field(max_length=520, regex='.*\\S.*')]


class Arn(BaseModel):
    __root__: Annotated[
        str, Field(max_length=256, regex='arn:([a-z\\d-]+):.*:.*:.*:.+')
    ]


class PutFeedbackResponse(ActivateAnomalyDetectorResponse):
    pass


class Boolean(BaseModel):
    __root__: bool


class TagResourceResponse(ActivateAnomalyDetectorResponse):
    pass


class UntagResourceResponse(ActivateAnomalyDetectorResponse):
    pass


class TagKey(BaseModel):
    __root__: Annotated[str, Field(max_length=128, min_length=1)]


class UpdateAnomalyDetectorResponse(BaseModel):
    AnomalyDetectorArn: Optional[Arn] = None


class UpdateMetricSetResponse(BaseModel):
    MetricSetArn: Optional[Arn] = None


class ActivateAnomalyDetectorRequest(BaseModel):
    AnomalyDetectorArn: Arn


class AggregationFunction(Enum):
    AVG = 'AVG'
    SUM = 'SUM'


class AlertDescription(BaseModel):
    __root__: Annotated[str, Field(max_length=256, regex='.*\\S.*')]


class AlertName(ColumnName):
    pass


class SensitivityThreshold(BaseModel):
    __root__: Annotated[int, Field(ge=0.0, le=100.0)]


class AlertType(Enum):
    SNS = 'SNS'
    LAMBDA = 'LAMBDA'


class AlertStatus(Enum):
    ACTIVE = 'ACTIVE'
    INACTIVE = 'INACTIVE'


class Timestamp(BaseModel):
    __root__: datetime


class TagMap(BaseModel):
    pass

    class Config:
        extra = Extra.allow


class AlertSummary(BaseModel):
    """
    Provides a summary of an alert's configuration.
    """

    AlertArn: Optional[Arn] = None
    AnomalyDetectorArn: Optional[Arn] = None
    AlertName: Optional[AlertName] = None
    AlertSensitivityThreshold: Optional[SensitivityThreshold] = None
    AlertType: Optional[AlertType] = None
    AlertStatus: Optional[AlertStatus] = None
    LastModificationTime: Optional[Timestamp] = None
    CreationTime: Optional[Timestamp] = None
    Tags: Optional[TagMap] = None


class AlertSummaryList(BaseModel):
    __root__: List[AlertSummary]


class AnomalyDetectionTaskStatus(Enum):
    PENDING = 'PENDING'
    IN_PROGRESS = 'IN_PROGRESS'
    COMPLETED = 'COMPLETED'
    FAILED = 'FAILED'
    FAILED_TO_SCHEDULE = 'FAILED_TO_SCHEDULE'


class AnomalyDetectionTaskStatusMessage(BaseModel):
    __root__: Annotated[str, Field(max_length=256, min_length=1, regex='.*\\S.*')]


class AnomalyDetectorConfig1(BaseModel):
    """
    Contains information about a detector's configuration.
    """

    AnomalyDetectorFrequency: Optional[Frequency] = None


class AnomalyDetectorConfigSummary(AnomalyDetectorConfig1):
    """
    Contains information about a detector's configuration.
    """

    pass


class AnomalyDetectorDescription(AnomalyDetectionTaskStatusMessage):
    pass


class AnomalyDetectorName(ColumnName):
    pass


class AnomalyDetectorStatus(Enum):
    ACTIVE = 'ACTIVE'
    ACTIVATING = 'ACTIVATING'
    DELETING = 'DELETING'
    FAILED = 'FAILED'
    INACTIVE = 'INACTIVE'
    LEARNING = 'LEARNING'
    BACK_TEST_ACTIVATING = 'BACK_TEST_ACTIVATING'
    BACK_TEST_ACTIVE = 'BACK_TEST_ACTIVE'
    BACK_TEST_COMPLETE = 'BACK_TEST_COMPLETE'


class AnomalyDetectorSummary(BaseModel):
    """
    Contains information about an an anomaly detector.
    """

    AnomalyDetectorArn: Optional[Arn] = None
    AnomalyDetectorName: Optional[AnomalyDetectorName] = None
    AnomalyDetectorDescription: Optional[AnomalyDetectorDescription] = None
    CreationTime: Optional[Timestamp] = None
    LastModificationTime: Optional[Timestamp] = None
    Status: Optional[AnomalyDetectorStatus] = None
    Tags: Optional[TagMap] = None


class AnomalyDetectorSummaryList(BaseModel):
    __root__: List[AnomalyDetectorSummary]


class TimestampString(BaseModel):
    __root__: Annotated[
        str,
        Field(
            max_length=60,
            regex='^([12]\\d{3})-(1[0-2]|0[1-9])-(0[1-9]|[12]\\d|3[01])T([01]\\d|2[0-3]):([0-5]\\d):([0-5]\\d)(Z|(\\+|\\-)(0\\d|1[0-2]):([0-5]\\d)(\\[[[:alnum:]\\/\\_]+\\])?)$',
        ),
    ]


class Score(BaseModel):
    __root__: Annotated[float, Field(ge=0.0, le=100.0)]


class MetricName(BaseModel):
    __root__: Annotated[
        str, Field(max_length=256, regex='^[a-zA-Z0-9][a-zA-Z0-9\\-_]*')
    ]


class Integer(BaseModel):
    __root__: int


class AnomalyGroupSummary(BaseModel):
    """
    Details about a group of anomalous metrics.
    """

    StartTime: Optional[TimestampString] = None
    EndTime: Optional[TimestampString] = None
    AnomalyGroupId: Optional[UUID] = None
    AnomalyGroupScore: Optional[Score] = None
    PrimaryMetricName: Optional[MetricName] = None


class AnomalyGroupSummaryList(BaseModel):
    __root__: List[AnomalyGroupSummary]


class AnomalyGroupTimeSeries(BaseModel):
    """
    An anomalous metric in an anomaly group.
    """

    AnomalyGroupId: UUID
    TimeSeriesId: Optional[TimeSeriesId] = None


class AnomalyGroupTimeSeriesFeedback1(BaseModel):
    """
    Feedback for an anomalous metric.
    """

    AnomalyGroupId: UUID
    TimeSeriesId: TimeSeriesId
    IsAnomaly: Boolean


class FlowName(BaseModel):
    __root__: Annotated[str, Field(max_length=256, regex='[a-zA-Z0-9][\\w!@#.-]+')]


class BackTestAnomalyDetectorRequest(BaseModel):
    AnomalyDetectorArn: Arn


class CSVFileCompression(Enum):
    NONE = 'NONE'
    GZIP = 'GZIP'


class Charset(BaseModel):
    __root__: Annotated[str, Field(max_length=63, regex='^[a-zA-Z0-9][a-zA-Z0-9\\-_]*')]


class KmsKeyArn(BaseModel):
    __root__: Annotated[
        str,
        Field(
            max_length=2048,
            min_length=20,
            regex='arn:aws.*:kms:.*:[0-9]{12}:key/[a-z0-9]{8}-[a-z0-9]{4}-[a-z0-9]{4}-[a-z0-9]{4}-[a-z0-9]{12}',
        ),
    ]


class CreateAnomalyDetectorRequest(BaseModel):
    AnomalyDetectorName: AnomalyDetectorName
    AnomalyDetectorDescription: Optional[AnomalyDetectorDescription] = None
    AnomalyDetectorConfig: AnomalyDetectorConfig1
    KmsKeyArn: Optional[KmsKeyArn] = None
    Tags: Optional[TagMap] = None


class MetricSetName(ColumnName):
    pass


class MetricSetDescription(AnomalyDetectionTaskStatusMessage):
    pass


class Offset(BaseModel):
    __root__: Annotated[int, Field(ge=0.0, le=432000.0)]


class TimestampColumn(BaseModel):
    """
    Contains information about the column used to track time in a source data file.
    """

    ColumnName: Optional[ColumnName] = None
    ColumnFormat: Optional[DateTimeFormat] = None


class DimensionList(BaseModel):
    __root__: Annotated[List[ColumnName], Field(min_items=1)]


class Timezone(BaseModel):
    __root__: Annotated[str, Field(max_length=60, regex='.*\\S.*')]


class Delimiter(BaseModel):
    __root__: Annotated[str, Field(max_length=1, regex='[^\\r\\n]')]


class HeaderList(BaseModel):
    __root__: List[ColumnName]


class QuoteSymbol(BaseModel):
    __root__: Annotated[str, Field(max_length=1, regex='[^\\r\\n]|^$')]


class CsvFormatDescriptor(BaseModel):
    """
    Contains information about how a source CSV data file should be analyzed.
    """

    FileCompression: Optional[CSVFileCompression] = None
    Charset: Optional[Charset] = None
    ContainsHeader: Optional[Boolean] = None
    Delimiter: Optional[Delimiter] = None
    HeaderList: Optional[HeaderList] = None
    QuoteSymbol: Optional[QuoteSymbol] = None


class DataItem(BaseModel):
    __root__: str


class DatabaseHost(BaseModel):
    __root__: Annotated[str, Field(max_length=253, min_length=1, regex='.*\\S.*')]


class DatabasePort(BaseModel):
    __root__: Annotated[int, Field(ge=1.0, le=65535.0)]


class DeleteAlertRequest(BaseModel):
    AlertArn: Arn


class DeleteAnomalyDetectorRequest(BaseModel):
    AnomalyDetectorArn: Arn


class DescribeAlertRequest(BaseModel):
    AlertArn: Arn


class MaxResults(BaseModel):
    __root__: Annotated[int, Field(ge=1.0, le=100.0)]


class NextToken(BaseModel):
    __root__: Annotated[str, Field(max_length=3000, min_length=1, regex='.*\\S.*')]


class DescribeAnomalyDetectionExecutionsRequest(BaseModel):
    AnomalyDetectorArn: Arn
    Timestamp: Optional[TimestampString] = None
    MaxResults: Optional[MaxResults] = None
    NextToken: Optional[NextToken] = None


class DescribeAnomalyDetectorRequest(BaseModel):
    AnomalyDetectorArn: Arn


class ErrorMessage(TagValue):
    pass


class DescribeMetricSetRequest(BaseModel):
    MetricSetArn: Arn


class DimensionValue(DataItem):
    pass


class DimensionNameValue(BaseModel):
    """
    A dimension name and value.
    """

    DimensionName: ColumnName
    DimensionValue: DimensionValue


class DimensionNameValueList(BaseModel):
    __root__: List[DimensionNameValue]


class DimensionValueContribution(BaseModel):
    """
    The severity of a value of a dimension that contributed to an anomaly.
    """

    DimensionValue: Optional[DimensionValue] = None
    ContributionScore: Optional[Score] = None


class ExecutionStatus(BaseModel):
    """
    The status of an anomaly detector run.
    """

    Timestamp: Optional[TimestampString] = None
    Status: Optional[AnomalyDetectionTaskStatus] = None
    FailureReason: Optional[AnomalyDetectionTaskStatusMessage] = None


class GetAnomalyGroupRequest(BaseModel):
    AnomalyGroupId: UUID
    AnomalyDetectorArn: Arn


class GetFeedbackRequest(BaseModel):
    AnomalyDetectorArn: Arn
    AnomalyGroupTimeSeriesFeedback: AnomalyGroupTimeSeries
    MaxResults: Optional[MaxResults] = None
    NextToken: Optional[NextToken] = None


class HeaderValue(DataItem):
    pass


class HistoricalDataPath(BaseModel):
    __root__: Annotated[str, Field(max_length=1024, regex='^s3://[a-z0-9].+$')]


class ItemizedMetricStats(BaseModel):
    """
    Aggregated statistics about a measure affected by an anomaly.
    """

    MetricName: Optional[ColumnName] = None
    OccurrenceCount: Optional[Integer] = None


class ListAlertsRequest(BaseModel):
    AnomalyDetectorArn: Optional[Arn] = None
    NextToken: Optional[NextToken] = None
    MaxResults: Optional[MaxResults] = None


class ListAnomalyDetectorsRequest(BaseModel):
    MaxResults: Optional[MaxResults] = None
    NextToken: Optional[NextToken] = None


class ListAnomalyGroupSummariesRequest(BaseModel):
    AnomalyDetectorArn: Arn
    SensitivityThreshold: SensitivityThreshold
    MaxResults: Optional[MaxResults] = None
    NextToken: Optional[NextToken] = None


class ListAnomalyGroupTimeSeriesRequest(BaseModel):
    AnomalyDetectorArn: Arn
    AnomalyGroupId: UUID
    MetricName: MetricName
    MaxResults: Optional[MaxResults] = None
    NextToken: Optional[NextToken] = None


class TimestampList(BaseModel):
    __root__: List[TimestampString]


class ListMetricSetsRequest(BaseModel):
    AnomalyDetectorArn: Optional[Arn] = None
    MaxResults: Optional[MaxResults] = None
    NextToken: Optional[NextToken] = None


class ListTagsForResourceRequest(BaseModel):
    pass


class Namespace(BaseModel):
    __root__: Annotated[str, Field(max_length=255, min_length=1, regex='[^:].*')]


class MetricSetSummary(BaseModel):
    """
    Contains information about a dataset.
    """

    MetricSetArn: Optional[Arn] = None
    AnomalyDetectorArn: Optional[Arn] = None
    MetricSetDescription: Optional[MetricSetDescription] = None
    MetricSetName: Optional[MetricSetName] = None
    CreationTime: Optional[Timestamp] = None
    LastModificationTime: Optional[Timestamp] = None
    Tags: Optional[TagMap] = None


class MetricValue(BaseModel):
    __root__: float


class MetricValueList(BaseModel):
    __root__: List[MetricValue]


class PoirotSecretManagerArn(BaseModel):
    __root__: Annotated[
        str,
        Field(
            max_length=256,
            regex='arn:([a-z\\d-]+):.*:.*:secret:AmazonLookoutMetrics-.+',
        ),
    ]


class PutFeedbackRequest(BaseModel):
    AnomalyDetectorArn: Arn
    AnomalyGroupTimeSeriesFeedback: AnomalyGroupTimeSeriesFeedback1


class RDSDatabaseIdentifier(BaseModel):
    __root__: Annotated[
        str,
        Field(
            max_length=63,
            min_length=1,
            regex='^[a-zA-Z](?!.*--)(?!.*-$)[0-9a-zA-Z\\-]*$',
        ),
    ]


class RDSDatabaseName(BaseModel):
    __root__: Annotated[str, Field(max_length=64, min_length=1, regex='[a-zA-Z0-9_.]+')]


class TableName(BaseModel):
    __root__: Annotated[
        str, Field(max_length=100, min_length=1, regex='^[a-zA-Z][a-zA-Z0-9_.]*$')
    ]


class RedshiftClusterIdentifier(BaseModel):
    __root__: Annotated[
        str,
        Field(max_length=63, min_length=1, regex='^[a-z](?!.*--)(?!.*-$)[0-9a-z\\-]*$'),
    ]


class RedshiftDatabaseName(BaseModel):
    __root__: Annotated[
        str, Field(max_length=100, min_length=1, regex='[a-zA-Z0-9_.]+')
    ]


class SampleRow(BaseModel):
    __root__: List[DataItem]


class SecurityGroupId(BaseModel):
    __root__: Annotated[str, Field(max_length=255, min_length=1, regex='[-0-9a-zA-Z]+')]


class SecurityGroupIdList(BaseModel):
    __root__: List[SecurityGroupId]


class SubnetId(BaseModel):
    __root__: Annotated[str, Field(max_length=255, regex='[\\-0-9a-zA-Z]+')]


class SubnetIdList(BaseModel):
    __root__: List[SubnetId]


class TagKeyList(BaseModel):
    __root__: Annotated[List[TagKey], Field(max_items=50, min_items=1)]


class TagResourceRequest(BaseModel):
    Tags: TagMap


class TemplatedPath(BaseModel):
    __root__: Annotated[
        str, Field(max_length=1024, regex='^s3://[a-zA-Z0-9_\\-\\/ {}=]+$')
    ]


class TimeSeries(BaseModel):
    """
    Details about a metric. A metric is an aggregation of the values of a measure for a dimension value, such as <i>availability</i> in the <i>us-east-1</i> Region.
    """

    TimeSeriesId: TimeSeriesId
    DimensionList: DimensionNameValueList
    MetricValueList: MetricValueList


class TimeSeriesFeedback(BaseModel):
    """
    Details about feedback submitted for an anomalous metric.
    """

    TimeSeriesId: Optional[TimeSeriesId] = None
    IsAnomaly: Optional[Boolean] = None


class UntagResourceRequest(BaseModel):
    pass


class UpdateAnomalyDetectorRequest(BaseModel):
    AnomalyDetectorArn: Arn
    KmsKeyArn: Optional[KmsKeyArn] = None
    AnomalyDetectorDescription: Optional[AnomalyDetectorDescription] = None
    AnomalyDetectorConfig: Optional[AnomalyDetectorConfig1] = None


class CreateAlertResponse(BaseModel):
    AlertArn: Optional[Arn] = None


class SNSConfiguration(BaseModel):
    """
    Contains information about the SNS topic to which you want to send your alerts and the IAM role that has access to that topic.
    """

    RoleArn: Arn
    SnsTopicArn: Arn


class LambdaConfiguration(BaseModel):
    """
    Contains information about a Lambda configuration.
    """

    RoleArn: Arn
    LambdaArn: Arn


class CreateAnomalyDetectorResponse(UpdateAnomalyDetectorResponse):
    pass


class CreateMetricSetResponse(UpdateMetricSetResponse):
    pass


class Metric(BaseModel):
    """
    A calculation made by contrasting a measure and a dimension from your source data.
    """

    MetricName: ColumnName
    AggregationFunction: AggregationFunction
    Namespace: Optional[Namespace] = None


class AppFlowConfig(BaseModel):
    """
    Details about an Amazon AppFlow flow datasource.
    """

    RoleArn: Arn
    FlowName: FlowName


class CloudWatchConfig(BaseModel):
    """
    Details about an Amazon CloudWatch datasource.
    """

    RoleArn: Arn


class DescribeAnomalyDetectorResponse(BaseModel):
    AnomalyDetectorArn: Optional[Arn] = None
    AnomalyDetectorName: Optional[AnomalyDetectorName] = None
    AnomalyDetectorDescription: Optional[AnomalyDetectorDescription] = None
    AnomalyDetectorConfig: Optional[AnomalyDetectorConfigSummary] = None
    CreationTime: Optional[Timestamp] = None
    LastModificationTime: Optional[Timestamp] = None
    Status: Optional[AnomalyDetectorStatus] = None
    FailureReason: Optional[ErrorMessage] = None
    KmsKeyArn: Optional[KmsKeyArn] = None


class TemplatedPathList(BaseModel):
    __root__: Annotated[List[TemplatedPath], Field(max_items=1, min_items=1)]


class HistoricalDataPathList(BaseModel):
    __root__: Annotated[List[HistoricalDataPath], Field(max_items=1, min_items=1)]


class ListAlertsResponse(BaseModel):
    AlertSummaryList: Optional[AlertSummaryList] = None
    NextToken: Optional[NextToken] = None


class ListAnomalyDetectorsResponse(BaseModel):
    AnomalyDetectorSummaryList: Optional[AnomalyDetectorSummaryList] = None
    NextToken: Optional[NextToken] = None


class ListTagsForResourceResponse(BaseModel):
    Tags: Optional[TagMap] = None


class Action(BaseModel):
    """
    A configuration that specifies the action to perform when anomalies are detected.
    """

    SNSConfiguration: Optional[SNSConfiguration] = None
    LambdaConfiguration: Optional[LambdaConfiguration] = None


class Alert(BaseModel):
    """
    A configuration for Amazon SNS-integrated notifications.
    """

    Action: Optional[Action] = None
    AlertDescription: Optional[AlertDescription] = None
    AlertArn: Optional[Arn] = None
    AnomalyDetectorArn: Optional[Arn] = None
    AlertName: Optional[AlertName] = None
    AlertSensitivityThreshold: Optional[SensitivityThreshold] = None
    AlertType: Optional[AlertType] = None
    AlertStatus: Optional[AlertStatus] = None
    LastModificationTime: Optional[Timestamp] = None
    CreationTime: Optional[Timestamp] = None


class ItemizedMetricStatsList(BaseModel):
    __root__: List[ItemizedMetricStats]


class AnomalyGroupStatistics(BaseModel):
    """
    Aggregated statistics for a group of anomalous metrics.
    """

    EvaluationStartDate: Optional[TimestampString] = None
    TotalCount: Optional[Integer] = None
    ItemizedMetricStatsList: Optional[ItemizedMetricStatsList] = None


class CreateAlertRequest(BaseModel):
    AlertName: AlertName
    AlertSensitivityThreshold: SensitivityThreshold
    AlertDescription: Optional[AlertDescription] = None
    AnomalyDetectorArn: Arn
    Action: Action
    Tags: Optional[TagMap] = None


class MetricList(BaseModel):
    __root__: Annotated[List[Metric], Field(min_items=1)]


class ExecutionList(BaseModel):
    __root__: List[ExecutionStatus]


class DimensionValueContributionList(BaseModel):
    __root__: List[DimensionValueContribution]


class DimensionContribution(BaseModel):
    """
    Details about a dimension that contributed to an anomaly.
    """

    DimensionName: Optional[ColumnName] = None
    DimensionValueContributionList: Optional[DimensionValueContributionList] = None


class JsonFormatDescriptor(BaseModel):
    """
    Contains information about how a source JSON data file should be analyzed.
    """

    FileCompression: Optional[CSVFileCompression] = None
    Charset: Optional[Charset] = None


class TimeSeriesFeedbackList(BaseModel):
    __root__: List[TimeSeriesFeedback]


class HeaderValueList(BaseModel):
    __root__: List[HeaderValue]


class SampleRows(BaseModel):
    __root__: List[SampleRow]


class TimeSeriesList(BaseModel):
    __root__: List[TimeSeries]


class MetricSetSummaryList(BaseModel):
    __root__: List[MetricSetSummary]


class VpcConfiguration(BaseModel):
    """
    Contains configuration information about the Amazon Virtual Private Cloud (VPC).
    """

    SubnetIdList: SubnetIdList
    SecurityGroupIdList: SecurityGroupIdList


class RDSSourceConfig(BaseModel):
    """
    Contains information about the Amazon Relational Database Service (RDS) configuration.
    """

    DBInstanceIdentifier: RDSDatabaseIdentifier
    DatabaseHost: DatabaseHost
    DatabasePort: DatabasePort
    SecretManagerArn: PoirotSecretManagerArn
    DatabaseName: RDSDatabaseName
    TableName: TableName
    RoleArn: Arn
    VpcConfiguration: VpcConfiguration


class RedshiftSourceConfig(BaseModel):
    """
    Provides information about the Amazon Redshift database configuration.
    """

    ClusterIdentifier: RedshiftClusterIdentifier
    DatabaseHost: DatabaseHost
    DatabasePort: DatabasePort
    SecretManagerArn: PoirotSecretManagerArn
    DatabaseName: RedshiftDatabaseName
    TableName: TableName
    RoleArn: Arn
    VpcConfiguration: VpcConfiguration


class DescribeAlertResponse(BaseModel):
    Alert: Optional[Alert] = None


class DescribeAnomalyDetectionExecutionsResponse(BaseModel):
    ExecutionList: Optional[ExecutionList] = None
    NextToken: Optional[NextToken] = None


class GetFeedbackResponse(BaseModel):
    AnomalyGroupTimeSeriesFeedback: Optional[TimeSeriesFeedbackList] = None
    NextToken: Optional[NextToken] = None


class GetSampleDataResponse(BaseModel):
    HeaderValues: Optional[HeaderValueList] = None
    SampleRows: Optional[SampleRows] = None


class FileFormatDescriptor(BaseModel):
    """
    Contains information about a source file's formatting.
    """

    CsvFormatDescriptor: Optional[CsvFormatDescriptor] = None
    JsonFormatDescriptor: Optional[JsonFormatDescriptor] = None


class ListAnomalyGroupSummariesResponse(BaseModel):
    AnomalyGroupSummaryList: Optional[AnomalyGroupSummaryList] = None
    AnomalyGroupStatistics: Optional[AnomalyGroupStatistics] = None
    NextToken: Optional[NextToken] = None


class ListAnomalyGroupTimeSeriesResponse(BaseModel):
    AnomalyGroupId: Optional[UUID] = None
    MetricName: Optional[MetricName] = None
    TimestampList: Optional[TimestampList] = None
    NextToken: Optional[NextToken] = None
    TimeSeriesList: Optional[TimeSeriesList] = None


class ListMetricSetsResponse(BaseModel):
    MetricSetSummaryList: Optional[MetricSetSummaryList] = None
    NextToken: Optional[NextToken] = None


class DimensionContributionList(BaseModel):
    __root__: List[DimensionContribution]


class ContributionMatrix(BaseModel):
    """
    Details about dimensions that contributed to an anomaly.
    """

    DimensionContributionList: Optional[DimensionContributionList] = None


class SampleDataS3SourceConfig(BaseModel):
    """
    Contains information about the source configuration in Amazon S3.
    """

    RoleArn: Arn
    TemplatedPathList: Optional[TemplatedPathList] = None
    HistoricalDataPathList: Optional[HistoricalDataPathList] = None
    FileFormatDescriptor: FileFormatDescriptor


class GetSampleDataRequest(BaseModel):
    S3SourceConfig: Optional[SampleDataS3SourceConfig] = None


class MetricLevelImpact(BaseModel):
    """
    Details about a measure affected by an anomaly.
    """

    MetricName: Optional[MetricName] = None
    NumTimeSeries: Optional[Integer] = None
    ContributionMatrix: Optional[ContributionMatrix] = None


class S3SourceConfig(BaseModel):
    """
    Contains information about the configuration of the S3 bucket that contains source files.
    """

    RoleArn: Arn
    TemplatedPathList: Optional[TemplatedPathList] = None
    HistoricalDataPathList: Optional[HistoricalDataPathList] = None
    FileFormatDescriptor: Optional[FileFormatDescriptor] = None


class MetricLevelImpactList(BaseModel):
    __root__: List[MetricLevelImpact]


class AnomalyGroup(BaseModel):
    """
    A group of anomalous metrics
    """

    StartTime: Optional[TimestampString] = None
    EndTime: Optional[TimestampString] = None
    AnomalyGroupId: Optional[UUID] = None
    AnomalyGroupScore: Optional[Score] = None
    PrimaryMetricName: Optional[MetricName] = None
    MetricLevelImpactList: Optional[MetricLevelImpactList] = None


class MetricSource(BaseModel):
    """
    Contains information about source data used to generate a metric.
    """

    S3SourceConfig: Optional[S3SourceConfig] = None
    AppFlowConfig: Optional[AppFlowConfig] = None
    CloudWatchConfig: Optional[CloudWatchConfig] = None
    RDSSourceConfig: Optional[RDSSourceConfig] = None
    RedshiftSourceConfig: Optional[RedshiftSourceConfig] = None


class CreateMetricSetRequest(BaseModel):
    AnomalyDetectorArn: Arn
    MetricSetName: MetricSetName
    MetricSetDescription: Optional[MetricSetDescription] = None
    MetricList: MetricList
    Offset: Optional[Offset] = None
    TimestampColumn: Optional[TimestampColumn] = None
    DimensionList: Optional[DimensionList] = None
    MetricSetFrequency: Optional[Frequency] = None
    MetricSource: MetricSource
    Timezone: Optional[Timezone] = None
    Tags: Optional[TagMap] = None


class UpdateMetricSetRequest(BaseModel):
    MetricSetArn: Arn
    MetricSetDescription: Optional[MetricSetDescription] = None
    MetricList: Optional[MetricList] = None
    Offset: Optional[Offset] = None
    TimestampColumn: Optional[TimestampColumn] = None
    DimensionList: Optional[DimensionList] = None
    MetricSetFrequency: Optional[Frequency] = None
    MetricSource: Optional[MetricSource] = None


class DescribeMetricSetResponse(BaseModel):
    MetricSetArn: Optional[Arn] = None
    AnomalyDetectorArn: Optional[Arn] = None
    MetricSetName: Optional[MetricSetName] = None
    MetricSetDescription: Optional[MetricSetDescription] = None
    CreationTime: Optional[Timestamp] = None
    LastModificationTime: Optional[Timestamp] = None
    Offset: Optional[Offset] = None
    MetricList: Optional[MetricList] = None
    TimestampColumn: Optional[TimestampColumn] = None
    DimensionList: Optional[DimensionList] = None
    MetricSetFrequency: Optional[Frequency] = None
    Timezone: Optional[Timezone] = None
    MetricSource: Optional[MetricSource] = None


class GetAnomalyGroupResponse(BaseModel):
    AnomalyGroup: Optional[AnomalyGroup] = None
