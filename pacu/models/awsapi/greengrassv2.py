# generated by datamodel-codegen:
#   filename:  openapi.yaml
#   timestamp: 2021-12-31T02:50:09+00:00

from __future__ import annotations

from datetime import datetime
from enum import Enum
from typing import Annotated, Any, List, Optional

from pydantic import BaseModel, Extra, Field


class ValidationException(BaseModel):
    __root__: Any


class ResourceNotFoundException(ValidationException):
    pass


class AccessDeniedException(ValidationException):
    pass


class InternalServerException(ValidationException):
    pass


class ThrottlingException(ValidationException):
    pass


class ConflictException(ValidationException):
    pass


class LambdaFunctionARNWithVersionNumber(BaseModel):
    __root__: Annotated[
        str,
        Field(
            regex='arn:aws(-cn|-us-gov)?:lambda:[^:]+:[0-9]+:function:[a-zA-Z0-9-_]+:[0-9]+'
        ),
    ]


class ComponentNameString(BaseModel):
    __root__: Annotated[
        str, Field(max_length=128, min_length=1, regex='[a-zA-Z0-9-_.]+')
    ]


class ComponentVersionString(BaseModel):
    __root__: Annotated[
        str, Field(max_length=64, min_length=1, regex='[0-9a-zA-Z-.+]+')
    ]


class ComponentDependencyMap(BaseModel):
    pass

    class Config:
        extra = Extra.allow


class TagValue(BaseModel):
    __root__: Annotated[str, Field(max_length=256)]


class ServiceQuotaExceededException(ValidationException):
    pass


class RequestAlreadyInProgressException(ValidationException):
    pass


class DeploymentFailureHandlingPolicy(Enum):
    ROLLBACK = 'ROLLBACK'
    DO_NOTHING = 'DO_NOTHING'


class NonEmptyString(BaseModel):
    __root__: Annotated[str, Field(min_length=1)]


class PlatformAttributesMap(BaseModel):
    pass

    class Config:
        extra = Extra.allow


class TagResourceResponse(BaseModel):
    pass


class UntagResourceResponse(TagResourceResponse):
    pass


class TagKey(BaseModel):
    __root__: Annotated[
        str, Field(max_length=128, min_length=1, regex='^(?!aws:)[a-zA-Z+-=._:/]+$')
    ]


class IoTThingName(BaseModel):
    __root__: Annotated[str, Field(max_length=128, min_length=1)]


class AssociateClientDeviceWithCoreDeviceErrorEntry(BaseModel):
    """
    Contains an error that occurs from a request to associate a client device with a core device. The <a href="https://docs.aws.amazon.com/greengrass/v2/APIReference/API_BatchAssociateClientDeviceWithCoreDevice.html">BatchAssociateClientDeviceWithCoreDevice</a> operation returns a list of these errors.
    """

    thingName: Optional[IoTThingName] = None
    code: Optional[NonEmptyString] = None
    message: Optional[NonEmptyString] = None


class AssociateClientDeviceWithCoreDeviceErrorList(BaseModel):
    __root__: Annotated[
        List[AssociateClientDeviceWithCoreDeviceErrorEntry],
        Field(max_items=100, min_items=1),
    ]


class Timestamp(BaseModel):
    __root__: datetime


class AssociatedClientDevice(BaseModel):
    """
    Contains information about a client device that is associated to a core device for cloud discovery.
    """

    thingName: Optional[IoTThingName] = None
    associationTimestamp: Optional[Timestamp] = None


class AssociatedClientDeviceList(BaseModel):
    __root__: Annotated[List[AssociatedClientDevice], Field(max_items=100, min_items=1)]


class CPU(BaseModel):
    __root__: Annotated[float, Field(ge=0.0)]


class CancelDeploymentRequest(BaseModel):
    pass


class ClientTokenString(BaseModel):
    __root__: Annotated[
        str, Field(max_length=64, min_length=1, regex='^[a-zA-Z0-9-]+$')
    ]


class CloudComponentState(Enum):
    REQUESTED = 'REQUESTED'
    INITIATED = 'INITIATED'
    DEPLOYABLE = 'DEPLOYABLE'
    FAILED = 'FAILED'
    DEPRECATED = 'DEPRECATED'


class StringMap(PlatformAttributesMap):
    pass


class CloudComponentStatus(BaseModel):
    """
    Contains the status of a component in the IoT Greengrass service.
    """

    componentState: Optional[CloudComponentState] = None
    message: Optional[NonEmptyString] = None
    errors: Optional[StringMap] = None


class ComponentARN(BaseModel):
    __root__: Annotated[
        str,
        Field(
            regex='arn:aws(-cn|-us-gov)?:greengrass:[^:]+:(aws|[0-9]+):components:[^:]+'
        ),
    ]


class ComponentVersionRequirementMap(PlatformAttributesMap):
    pass


class ComponentConfigurationPath(BaseModel):
    __root__: Annotated[str, Field(max_length=256, min_length=0)]


class ComponentConfigurationPathList(BaseModel):
    __root__: List[ComponentConfigurationPath]


class ComponentConfigurationString(BaseModel):
    __root__: Annotated[str, Field(max_length=65536, min_length=1)]


class ComponentConfigurationUpdate(BaseModel):
    """
    Contains information about a deployment's update to a component's configuration on Greengrass core devices. For more information, see <a href="https://docs.aws.amazon.com/greengrass/v2/developerguide/update-component-configurations.html">Update component configurations</a> in the <i>IoT Greengrass V2 Developer Guide</i>.
    """

    merge: Optional[ComponentConfigurationString] = None
    reset: Optional[ComponentConfigurationPathList] = None


class ComponentDependencyType(Enum):
    HARD = 'HARD'
    SOFT = 'SOFT'


class ComponentDeploymentSpecifications(BaseModel):
    pass

    class Config:
        extra = Extra.allow


class ComponentVersionARN(BaseModel):
    __root__: Annotated[
        str,
        Field(
            regex='arn:aws(-cn|-us-gov)?:greengrass:[^:]+:(aws|[0-9]+):components:[^:]+:versions:[^:]+'
        ),
    ]


class ComponentPlatform(BaseModel):
    """
    Contains information about a platform that a component supports.
    """

    name: Optional[NonEmptyString] = None
    attributes: Optional[PlatformAttributesMap] = None


class ComponentVersionListItem(BaseModel):
    """
    Contains information about a component version in a list.
    """

    componentName: Optional[ComponentNameString] = None
    componentVersion: Optional[ComponentVersionString] = None
    arn: Optional[NonEmptyString] = None


class ComponentVersionList(BaseModel):
    __root__: List[ComponentVersionListItem]


class ComponentVisibilityScope(Enum):
    PRIVATE = 'PRIVATE'
    PUBLIC = 'PUBLIC'


class CoreDeviceThingName(IoTThingName):
    pass


class CoreDeviceStatus(Enum):
    HEALTHY = 'HEALTHY'
    UNHEALTHY = 'UNHEALTHY'


class CoreDevice(BaseModel):
    """
    Contains information about a Greengrass core device, which is an IoT thing that runs the IoT Greengrass Core software.
    """

    coreDeviceThingName: Optional[CoreDeviceThingName] = None
    status: Optional[CoreDeviceStatus] = None
    lastStatusUpdateTimestamp: Optional[Timestamp] = None


class CoreDeviceArchitectureString(BaseModel):
    __root__: Annotated[str, Field(max_length=255, min_length=1)]


class CoreDevicePlatformString(CoreDeviceArchitectureString):
    pass


class CoreDevicesList(BaseModel):
    __root__: List[CoreDevice]


class RecipeBlob(BaseModel):
    __root__: str


class TagMap(BaseModel):
    pass

    class Config:
        extra = Extra.allow


class TargetARN(BaseModel):
    __root__: Annotated[
        str, Field(regex='arn:aws(-cn|-us-gov)?:iot:[^:]+:[0-9]+:(thing|thinggroup)/.+')
    ]


class IoTJobARN(BaseModel):
    __root__: Annotated[
        str, Field(regex='arn:aws(-cn|-us-gov)?:iot:[^:]+:[0-9]+:job/.+')
    ]


class DefaultMaxResults(BaseModel):
    __root__: Annotated[int, Field(ge=1.0, le=100.0)]


class DeleteComponentRequest(BaseModel):
    pass


class DeleteCoreDeviceRequest(BaseModel):
    pass


class DeploymentStatus(Enum):
    ACTIVE = 'ACTIVE'
    COMPLETED = 'COMPLETED'
    CANCELED = 'CANCELED'
    FAILED = 'FAILED'
    INACTIVE = 'INACTIVE'


class IsLatestForTarget(BaseModel):
    __root__: bool


class Deployment(BaseModel):
    """
    Contains information about a deployment.
    """

    targetArn: Optional[TargetARN] = None
    revisionId: Optional[NonEmptyString] = None
    deploymentId: Optional[NonEmptyString] = None
    deploymentName: Optional[NonEmptyString] = None
    creationTimestamp: Optional[Timestamp] = None
    deploymentStatus: Optional[DeploymentStatus] = None
    isLatestForTarget: Optional[IsLatestForTarget] = None


class OptionalInteger(BaseModel):
    __root__: int


class DeploymentComponentUpdatePolicyAction(Enum):
    NOTIFY_COMPONENTS = 'NOTIFY_COMPONENTS'
    SKIP_NOTIFY_COMPONENTS = 'SKIP_NOTIFY_COMPONENTS'


class DeploymentHistoryFilter(Enum):
    ALL = 'ALL'
    LATEST_ONLY = 'LATEST_ONLY'


class DeploymentID(RecipeBlob):
    pass


class DeploymentList(BaseModel):
    __root__: List[Deployment]


class DeploymentName3(RecipeBlob):
    pass


class DescribeComponentRequest(BaseModel):
    pass


class PublisherString(RecipeBlob):
    pass


class DescriptionString(RecipeBlob):
    pass


class Description2(BaseModel):
    __root__: Annotated[str, Field(max_length=500, min_length=1)]


class DisassociateClientDeviceFromCoreDeviceErrorEntry(
    AssociateClientDeviceWithCoreDeviceErrorEntry
):
    """
    Contains an error that occurs from a request to disassociate a client device from a core device. The <a href="https://docs.aws.amazon.com/greengrass/v2/APIReference/API_BatchDisassociateClientDeviceWithCoreDevice.html">BatchDisassociateClientDeviceWithCoreDevice</a> operation returns a list of these errors.
    """

    pass


class IoTJobId(CoreDeviceArchitectureString):
    pass


class EffectiveDeploymentExecutionStatus(Enum):
    IN_PROGRESS = 'IN_PROGRESS'
    QUEUED = 'QUEUED'
    FAILED = 'FAILED'
    COMPLETED = 'COMPLETED'
    TIMED_OUT = 'TIMED_OUT'
    CANCELED = 'CANCELED'
    REJECTED = 'REJECTED'


class Reason(RecipeBlob):
    pass


class EffectiveDeployment(BaseModel):
    """
    Contains information about a deployment job that IoT Greengrass sends to a Greengrass core device.
    """

    deploymentId: DeploymentID
    deploymentName: DeploymentName3
    iotJobId: Optional[IoTJobId] = None
    iotJobArn: Optional[IoTJobARN] = None
    description: Optional[Description2] = None
    targetArn: TargetARN
    coreDeviceExecutionStatus: EffectiveDeploymentExecutionStatus
    reason: Optional[Reason] = None
    creationTimestamp: Timestamp
    modifiedTimestamp: Timestamp


class EffectiveDeploymentsList(BaseModel):
    __root__: List[EffectiveDeployment]


class FileSystemPath(RecipeBlob):
    pass


class GGCVersion(CoreDeviceArchitectureString):
    pass


class GenericV2ARN(BaseModel):
    __root__: Annotated[
        str,
        Field(
            regex='arn:aws(-cn|-us-gov)?:greengrass:[^:]+:(aws|[0-9]+):(components|deployments|coreDevices):.+'
        ),
    ]


class RecipeOutputFormat(Enum):
    JSON = 'JSON'
    YAML = 'YAML'


class GetComponentRequest(BaseModel):
    pass


class GetComponentVersionArtifactRequest(BaseModel):
    pass


class GetCoreDeviceRequest(BaseModel):
    pass


class GetDeploymentRequest(BaseModel):
    pass


class NullableString(RecipeBlob):
    pass


class InstalledComponentLifecycleState(Enum):
    NEW = 'NEW'
    INSTALLED = 'INSTALLED'
    STARTING = 'STARTING'
    RUNNING = 'RUNNING'
    STOPPING = 'STOPPING'
    ERRORED = 'ERRORED'
    BROKEN = 'BROKEN'
    FINISHED = 'FINISHED'


class LifecycleStateDetails(BaseModel):
    __root__: Annotated[str, Field(max_length=1000, min_length=1)]


class IsRoot(IsLatestForTarget):
    pass


class InstalledComponent(BaseModel):
    """
    Contains information about a component on a Greengrass core device.
    """

    componentName: Optional[ComponentNameString] = None
    componentVersion: Optional[ComponentVersionString] = None
    lifecycleState: Optional[InstalledComponentLifecycleState] = None
    lifecycleStateDetails: Optional[LifecycleStateDetails] = None
    isRoot: Optional[IsRoot] = None


class InstalledComponentList(BaseModel):
    __root__: List[InstalledComponent]


class IoTJobAbortAction(Enum):
    CANCEL = 'CANCEL'


class IoTJobExecutionFailureType(Enum):
    FAILED = 'FAILED'
    REJECTED = 'REJECTED'
    TIMED_OUT = 'TIMED_OUT'
    ALL = 'ALL'


class IoTJobAbortThresholdPercentage(BaseModel):
    __root__: Annotated[float, Field(le=100.0)]


class IoTJobMinimumNumberOfExecutedThings(BaseModel):
    __root__: Annotated[int, Field(ge=1.0)]


class IoTJobAbortCriteria(BaseModel):
    """
    <p>Contains criteria that define when and how to cancel a job.</p> <p>The deployment stops if the following conditions are true:</p> <ol> <li> <p>The number of things that receive the deployment exceeds the <code>minNumberOfExecutedThings</code>.</p> </li> <li> <p>The percentage of failures with type <code>failureType</code> exceeds the <code>thresholdPercentage</code>.</p> </li> </ol>
    """

    failureType: IoTJobExecutionFailureType
    action: IoTJobAbortAction
    thresholdPercentage: IoTJobAbortThresholdPercentage
    minNumberOfExecutedThings: IoTJobMinimumNumberOfExecutedThings


class IoTJobMaxExecutionsPerMin(BaseModel):
    __root__: Annotated[int, Field(ge=1.0, le=1000.0)]


class IoTJobRolloutBaseRatePerMinute(IoTJobMaxExecutionsPerMin):
    pass


class IoTJobRolloutIncrementFactor(BaseModel):
    __root__: Annotated[float, Field(ge=1.0, le=5.0)]


class IoTJobInProgressTimeoutInMinutes(OptionalInteger):
    pass


class IoTJobNumberOfThings(IoTJobMinimumNumberOfExecutedThings):
    pass


class OptionalBoolean(IsLatestForTarget):
    pass


class LambdaFilesystemPermission(Enum):
    ro = 'ro'
    rw = 'rw'


class String(RecipeBlob):
    pass


class LambdaEnvironmentVariables(BaseModel):
    pass

    class Config:
        extra = Extra.allow


class TopicString(RecipeBlob):
    pass


class LambdaEventSourceType(Enum):
    PUB_SUB = 'PUB_SUB'
    IOT_CORE = 'IOT_CORE'


class LambdaEventSource(BaseModel):
    """
    Contains information about an event source for an Lambda function. The event source defines the topics on which this Lambda function subscribes to receive messages that run the function.
    """

    topic: TopicString
    type: LambdaEventSourceType


class LambdaEventSourceList(BaseModel):
    __root__: List[LambdaEventSource]


class LambdaExecArg(RecipeBlob):
    pass


class LambdaExecArgsList(BaseModel):
    __root__: List[LambdaExecArg]


class LambdaInputPayloadEncodingType(Enum):
    json = 'json'
    binary = 'binary'


class LambdaIsolationMode(Enum):
    GreengrassContainer = 'GreengrassContainer'
    NoContainer = 'NoContainer'


class LambdaVolumeMount(BaseModel):
    """
    Contains information about a volume that Linux processes in a container can access. When you define a volume, the IoT Greengrass Core software mounts the source files to the destination inside the container.
    """

    sourcePath: FileSystemPath
    destinationPath: FileSystemPath
    permission: Optional[LambdaFilesystemPermission] = None
    addGroupOwner: Optional[OptionalBoolean] = None


class NextTokenString(RecipeBlob):
    pass


class ListClientDevicesAssociatedWithCoreDeviceRequest(BaseModel):
    pass


class ListComponentVersionsRequest(BaseModel):
    pass


class ListComponentsRequest(BaseModel):
    pass


class ThingGroupARN(BaseModel):
    __root__: Annotated[
        str, Field(regex='arn:aws(-cn|-us-gov)?:iot:[^:]+:[0-9]+:thinggroup/.+')
    ]


class ListCoreDevicesRequest(BaseModel):
    pass


class ListDeploymentsRequest(BaseModel):
    pass


class ListEffectiveDeploymentsRequest(BaseModel):
    pass


class ListInstalledComponentsRequest(BaseModel):
    pass


class ListTagsForResourceRequest(BaseModel):
    pass


class Memory(BaseModel):
    __root__: Annotated[int, Field(ge=0.0, le=9.223372036854772e18)]


class ResolvedComponentVersion(BaseModel):
    """
    Contains information about a component version that is compatible to run on a Greengrass core device.
    """

    arn: Optional[ComponentVersionARN] = None
    componentName: Optional[ComponentNameString] = None
    componentVersion: Optional[ComponentVersionString] = None
    recipe: Optional[RecipeBlob] = None


class TagKeyList(BaseModel):
    __root__: Annotated[List[TagKey], Field(max_items=50, min_items=1)]


class TagResourceRequest(BaseModel):
    tags: TagMap


class UntagResourceRequest(BaseModel):
    pass


class BatchAssociateClientDeviceWithCoreDeviceResponse(BaseModel):
    errorEntries: Optional[AssociateClientDeviceWithCoreDeviceErrorList] = None


class AssociateClientDeviceWithCoreDeviceEntry(BaseModel):
    """
    Contains a request to associate a client device with a core device. The <a href="https://docs.aws.amazon.com/greengrass/v2/APIReference/API_BatchAssociateClientDeviceWithCoreDevice.html">BatchAssociateClientDeviceWithCoreDevice</a> operation consumes a list of these requests.
    """

    thingName: IoTThingName


class DisassociateClientDeviceFromCoreDeviceEntry(
    AssociateClientDeviceWithCoreDeviceEntry
):
    """
    Contains a request to disassociate a client device from a core device. The <a href="https://docs.aws.amazon.com/greengrass/v2/APIReference/API_BatchDisassociateClientDeviceWithCoreDevice.html">BatchDisassociateClientDeviceWithCoreDevice</a> operation consumes a list of these requests.
    """

    pass


class CancelDeploymentResponse(BaseModel):
    message: Optional[NonEmptyString] = None


class CreateComponentVersionResponse(BaseModel):
    arn: Optional[ComponentVersionARN] = None
    componentName: ComponentNameString
    componentVersion: ComponentVersionString
    creationTimestamp: Timestamp
    status: CloudComponentStatus


class ComponentPlatformList(BaseModel):
    __root__: List[ComponentPlatform]


class CreateDeploymentResponse(BaseModel):
    deploymentId: Optional[NonEmptyString] = None
    iotJobId: Optional[NonEmptyString] = None
    iotJobArn: Optional[IoTJobARN] = None


class IoTJobTimeoutConfig(BaseModel):
    """
    Contains information about the timeout configuration for a job.
    """

    inProgressTimeoutInMinutes: Optional[IoTJobInProgressTimeoutInMinutes] = None


class DeploymentComponentUpdatePolicy(BaseModel):
    """
    <p>Contains information about a deployment's policy that defines when components are safe to update.</p> <p>Each component on a device can report whether or not it's ready to update. After a component and its dependencies are ready, they can apply the update in the deployment. You can configure whether or not the deployment notifies components of an update and waits for a response. You specify the amount of time each component has to respond to the update notification.</p>
    """

    timeoutInSeconds: Optional[OptionalInteger] = None
    action: Optional[DeploymentComponentUpdatePolicyAction] = None


class DeploymentConfigurationValidationPolicy(BaseModel):
    """
    Contains information about how long a component on a core device can validate its configuration updates before it times out. Components can use the <a href="https://docs.aws.amazon.com/greengrass/v2/developerguide/interprocess-communication.html#ipc-operation-subscribetovalidateconfigurationupdates">SubscribeToValidateConfigurationUpdates</a> IPC operation to receive notifications when a deployment specifies a configuration update. Then, components can respond with the <a href="https://docs.aws.amazon.com/greengrass/v2/developerguide/interprocess-communication.html#ipc-operation-sendconfigurationvalidityreport">SendConfigurationValidityReport</a> IPC operation. For more information, see <a href="https://docs.aws.amazon.com/greengrass/v2/developerguide/create-deployments.html">Create deployments</a> in the <i>IoT Greengrass V2 Developer Guide</i>.
    """

    timeoutInSeconds: Optional[OptionalInteger] = None


class DescribeComponentResponse(BaseModel):
    arn: Optional[ComponentVersionARN] = None
    componentName: Optional[ComponentNameString] = None
    componentVersion: Optional[ComponentVersionString] = None
    creationTimestamp: Optional[Timestamp] = None
    publisher: Optional[PublisherString] = None
    description: Optional[DescriptionString] = None
    status: Optional[CloudComponentStatus] = None
    platforms: Optional[ComponentPlatformList] = None
    tags: Optional[TagMap] = None


class GetComponentResponse(BaseModel):
    recipeOutputFormat: RecipeOutputFormat
    recipe: RecipeBlob
    tags: Optional[TagMap] = None


class GetComponentVersionArtifactResponse(BaseModel):
    preSignedUrl: NonEmptyString


class GetCoreDeviceResponse(BaseModel):
    coreDeviceThingName: Optional[CoreDeviceThingName] = None
    coreVersion: Optional[GGCVersion] = None
    platform: Optional[CoreDevicePlatformString] = None
    architecture: Optional[CoreDeviceArchitectureString] = None
    status: Optional[CoreDeviceStatus] = None
    lastStatusUpdateTimestamp: Optional[Timestamp] = None
    tags: Optional[TagMap] = None


class ListClientDevicesAssociatedWithCoreDeviceResponse(BaseModel):
    associatedClientDevices: Optional[AssociatedClientDeviceList] = None
    nextToken: Optional[NextTokenString] = None


class ListComponentVersionsResponse(BaseModel):
    componentVersions: Optional[ComponentVersionList] = None
    nextToken: Optional[NextTokenString] = None


class ListCoreDevicesResponse(BaseModel):
    coreDevices: Optional[CoreDevicesList] = None
    nextToken: Optional[NextTokenString] = None


class ListDeploymentsResponse(BaseModel):
    deployments: Optional[DeploymentList] = None
    nextToken: Optional[NextTokenString] = None


class ListEffectiveDeploymentsResponse(BaseModel):
    effectiveDeployments: Optional[EffectiveDeploymentsList] = None
    nextToken: Optional[NextTokenString] = None


class ListInstalledComponentsResponse(BaseModel):
    installedComponents: Optional[InstalledComponentList] = None
    nextToken: Optional[NextTokenString] = None


class ListTagsForResourceResponse(BaseModel):
    tags: Optional[TagMap] = None


class ComponentCandidate(BaseModel):
    """
    Contains information about a component that is a candidate to deploy to a Greengrass core device.
    """

    componentName: Optional[ComponentNameString] = None
    componentVersion: Optional[ComponentVersionString] = None
    versionRequirements: Optional[ComponentVersionRequirementMap] = None


class AssociateClientDeviceWithCoreDeviceEntryList(BaseModel):
    __root__: Annotated[
        List[AssociateClientDeviceWithCoreDeviceEntry],
        Field(max_items=100, min_items=1),
    ]


class BatchAssociateClientDeviceWithCoreDeviceRequest(BaseModel):
    entries: Optional[AssociateClientDeviceWithCoreDeviceEntryList] = None


class DisassociateClientDeviceFromCoreDeviceEntryList(BaseModel):
    __root__: Annotated[
        List[DisassociateClientDeviceFromCoreDeviceEntry],
        Field(max_items=100, min_items=1),
    ]


class BatchDisassociateClientDeviceFromCoreDeviceRequest(BaseModel):
    entries: Optional[DisassociateClientDeviceFromCoreDeviceEntryList] = None


class DisassociateClientDeviceFromCoreDeviceErrorList(BaseModel):
    __root__: Annotated[
        List[DisassociateClientDeviceFromCoreDeviceErrorEntry],
        Field(max_items=100, min_items=1),
    ]


class ComponentLatestVersion(BaseModel):
    """
    Contains information about the latest version of a component.
    """

    arn: Optional[ComponentVersionARN] = None
    componentVersion: Optional[ComponentVersionString] = None
    creationTimestamp: Optional[Timestamp] = None
    description: Optional[NonEmptyString] = None
    publisher: Optional[NonEmptyString] = None
    platforms: Optional[ComponentPlatformList] = None


class Component(BaseModel):
    """
    Contains information about a component.
    """

    arn: Optional[ComponentARN] = None
    componentName: Optional[ComponentNameString] = None
    latestVersion: Optional[ComponentLatestVersion] = None


class ComponentCandidateList(BaseModel):
    __root__: List[ComponentCandidate]


class ComponentDependencyRequirement(BaseModel):
    """
    Contains information about a component dependency for a Lambda function component.
    """

    versionRequirement: Optional[NonEmptyString] = None
    dependencyType: Optional[ComponentDependencyType] = None


class ComponentList(BaseModel):
    __root__: List[Component]


class SystemResourceLimits(BaseModel):
    """
    Contains information about system resource limits that the IoT Greengrass Core software applies to a component's processes. For more information, see <a href="https://docs.aws.amazon.com/greengrass/v2/developerguide/configure-greengrass-core-v2.html#configure-component-system-resource-limits">Configure system resource limits for components</a>.
    """

    memory: Optional[Memory] = None
    cpus: Optional[CPU] = None


class DeploymentPolicies(BaseModel):
    """
    Contains information about policies that define how a deployment updates components and handles failure.
    """

    failureHandlingPolicy: Optional[DeploymentFailureHandlingPolicy] = None
    componentUpdatePolicy: Optional[DeploymentComponentUpdatePolicy] = None
    configurationValidationPolicy: Optional[
        DeploymentConfigurationValidationPolicy
    ] = None


class IoTJobAbortCriteriaList(BaseModel):
    __root__: Annotated[List[IoTJobAbortCriteria], Field(min_items=1)]


class IoTJobRateIncreaseCriteria(BaseModel):
    """
    Contains information about criteria to meet before a job increases its rollout rate. Specify either <code>numberOfNotifiedThings</code> or <code>numberOfSucceededThings</code>.
    """

    numberOfNotifiedThings: Optional[IoTJobNumberOfThings] = None
    numberOfSucceededThings: Optional[IoTJobNumberOfThings] = None


class LambdaVolumeList(BaseModel):
    __root__: List[LambdaVolumeMount]


class LambdaDeviceMount(BaseModel):
    """
    Contains information about a device that Linux processes in a container can access.
    """

    path: FileSystemPath
    permission: Optional[LambdaFilesystemPermission] = None
    addGroupOwner: Optional[OptionalBoolean] = None


class ResolveComponentCandidatesRequest(BaseModel):
    platform: ComponentPlatform
    componentCandidates: ComponentCandidateList


class ResolvedComponentVersionsList(BaseModel):
    __root__: List[ResolvedComponentVersion]


class BatchDisassociateClientDeviceFromCoreDeviceResponse(BaseModel):
    errorEntries: Optional[DisassociateClientDeviceFromCoreDeviceErrorList] = None


class IoTJobAbortConfig(BaseModel):
    """
    Contains a list of criteria that define when and how to cancel a configuration deployment.
    """

    criteriaList: IoTJobAbortCriteriaList


class ListComponentsResponse(BaseModel):
    components: Optional[ComponentList] = None
    nextToken: Optional[NextTokenString] = None


class ResolveComponentCandidatesResponse(BaseModel):
    resolvedComponentVersions: Optional[ResolvedComponentVersionsList] = None


class ComponentRunWith(BaseModel):
    """
    Contains information system user and group that the IoT Greengrass Core software uses to run component processes on the core device. For more information, see <a href="https://docs.aws.amazon.com/greengrass/v2/developerguide/configure-greengrass-core-v2.html#configure-component-user">Configure the user and group that run components</a> in the <i>IoT Greengrass V2 Developer Guide</i>.
    """

    posixUser: Optional[NonEmptyString] = None
    systemResourceLimits: Optional[SystemResourceLimits] = None


class IoTJobExponentialRolloutRate(BaseModel):
    """
    Contains information about an exponential rollout rate for a configuration deployment job.
    """

    baseRatePerMinute: IoTJobRolloutBaseRatePerMinute
    incrementFactor: IoTJobRolloutIncrementFactor
    rateIncreaseCriteria: IoTJobRateIncreaseCriteria


class LambdaDeviceList(BaseModel):
    __root__: List[LambdaDeviceMount]


class LambdaContainerParams(BaseModel):
    """
    Contains information about a container in which Lambda functions run on Greengrass core devices.
    """

    memorySizeInKB: Optional[OptionalInteger] = None
    mountROSysfs: Optional[OptionalBoolean] = None
    volumes: Optional[LambdaVolumeList] = None
    devices: Optional[LambdaDeviceList] = None


class LambdaLinuxProcessParams(BaseModel):
    """
    Contains parameters for a Linux process that contains an Lambda function.
    """

    isolationMode: Optional[LambdaIsolationMode] = None
    containerParams: Optional[LambdaContainerParams] = None


class LambdaExecutionParameters(BaseModel):
    """
    Contains parameters for a Lambda function that runs on IoT Greengrass.
    """

    eventSources: Optional[LambdaEventSourceList] = None
    maxQueueSize: Optional[OptionalInteger] = None
    maxInstancesCount: Optional[OptionalInteger] = None
    maxIdleTimeInSeconds: Optional[OptionalInteger] = None
    timeoutInSeconds: Optional[OptionalInteger] = None
    statusTimeoutInSeconds: Optional[OptionalInteger] = None
    pinned: Optional[OptionalBoolean] = None
    inputPayloadEncodingType: Optional[LambdaInputPayloadEncodingType] = None
    execArgs: Optional[LambdaExecArgsList] = None
    environmentVariables: Optional[LambdaEnvironmentVariables] = None
    linuxProcessParams: Optional[LambdaLinuxProcessParams] = None


class ComponentDeploymentSpecification(BaseModel):
    """
    Contains information about a component to deploy.
    """

    componentVersion: Optional[ComponentVersionString] = None
    configurationUpdate: Optional[ComponentConfigurationUpdate] = None
    runWith: Optional[ComponentRunWith] = None


class IoTJobExecutionsRolloutConfig(BaseModel):
    """
    Contains information about the rollout configuration for a job. This configuration defines the rate at which the job deploys a configuration to a fleet of target devices.
    """

    exponentialRate: Optional[IoTJobExponentialRolloutRate] = None
    maximumPerMinute: Optional[IoTJobMaxExecutionsPerMin] = None


class LambdaFunctionRecipeSource(BaseModel):
    """
    Contains information about an Lambda function to import to create a component.
    """

    lambdaArn: LambdaFunctionARNWithVersionNumber
    componentName: Optional[ComponentNameString] = None
    componentVersion: Optional[ComponentVersionString] = None
    componentPlatforms: Optional[ComponentPlatformList] = None
    componentDependencies: Optional[ComponentDependencyMap] = None
    componentLambdaParameters: Optional[LambdaExecutionParameters] = None


class CreateComponentVersionRequest(BaseModel):
    inlineRecipe: Optional[RecipeBlob] = None
    lambdaFunction: Optional[LambdaFunctionRecipeSource] = None
    tags: Optional[TagMap] = None
    clientToken: Optional[ClientTokenString] = None


class DeploymentIoTJobConfiguration(BaseModel):
    """
    Contains information about an IoT job configuration.
    """

    jobExecutionsRolloutConfig: Optional[IoTJobExecutionsRolloutConfig] = None
    abortConfig: Optional[IoTJobAbortConfig] = None
    timeoutConfig: Optional[IoTJobTimeoutConfig] = None


class CreateDeploymentRequest(BaseModel):
    targetArn: TargetARN
    deploymentName: Optional[NonEmptyString] = None
    components: Optional[ComponentDeploymentSpecifications] = None
    iotJobConfiguration: Optional[DeploymentIoTJobConfiguration] = None
    deploymentPolicies: Optional[DeploymentPolicies] = None
    tags: Optional[TagMap] = None
    clientToken: Optional[ClientTokenString] = None


class GetDeploymentResponse(BaseModel):
    targetArn: Optional[TargetARN] = None
    revisionId: Optional[NonEmptyString] = None
    deploymentId: Optional[NonEmptyString] = None
    deploymentName: Optional[NullableString] = None
    deploymentStatus: Optional[DeploymentStatus] = None
    iotJobId: Optional[NullableString] = None
    iotJobArn: Optional[IoTJobARN] = None
    components: Optional[ComponentDeploymentSpecifications] = None
    deploymentPolicies: Optional[DeploymentPolicies] = None
    iotJobConfiguration: Optional[DeploymentIoTJobConfiguration] = None
    creationTimestamp: Optional[Timestamp] = None
    isLatestForTarget: Optional[IsLatestForTarget] = None
    tags: Optional[TagMap] = None
