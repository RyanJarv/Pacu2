# generated by datamodel-codegen:
#   filename:  openapi.yaml
#   timestamp: 2021-12-31T02:59:11+00:00

from __future__ import annotations

from enum import Enum
from typing import Annotated, Any, List, Optional

from pydantic import BaseModel, Field, SecretStr


class AccessDeniedException(BaseModel):
    __root__: Any


class InternalServerException(AccessDeniedException):
    pass


class ThrottlingException(AccessDeniedException):
    pass


class ValidationException(AccessDeniedException):
    pass


class InvalidEndpointException(AccessDeniedException):
    pass


class DescribeEndpointsRequest(BaseModel):
    pass


class ConflictException(AccessDeniedException):
    pass


class QueryExecutionException(AccessDeniedException):
    pass


class QueryId(BaseModel):
    __root__: Annotated[str, Field(max_length=64, min_length=1, regex='[a-zA-Z0-9]+')]


class String(BaseModel):
    __root__: str


class ClientRequestToken(BaseModel):
    __root__: Annotated[SecretStr, Field(max_length=128, min_length=32)]


class ScalarValue(String):
    pass


class NullableBoolean(BaseModel):
    __root__: bool


class Double(BaseModel):
    __root__: float


class Long(BaseModel):
    __root__: int


class Endpoint(BaseModel):
    """
    Represents an available endpoint against which to make API calls agaisnt, as well as the TTL for that endpoint.
    """

    Address: String
    CachePeriodInMinutes: Long


class MaxQueryResults(BaseModel):
    __root__: Annotated[int, Field(ge=1.0, le=1000.0)]


class QueryString(BaseModel):
    __root__: SecretStr


class QueryStatus(BaseModel):
    """
    Information about the status of the query, including progress and bytes scannned.
    """

    ProgressPercentage: Optional[Double] = None
    CumulativeBytesScanned: Optional[Long] = None
    CumulativeBytesMetered: Optional[Long] = None


class ScalarType(Enum):
    VARCHAR = 'VARCHAR'
    BOOLEAN = 'BOOLEAN'
    BIGINT = 'BIGINT'
    DOUBLE = 'DOUBLE'
    TIMESTAMP = 'TIMESTAMP'
    DATE = 'DATE'
    TIME = 'TIME'
    INTERVAL_DAY_TO_SECOND = 'INTERVAL_DAY_TO_SECOND'
    INTERVAL_YEAR_TO_MONTH = 'INTERVAL_YEAR_TO_MONTH'
    UNKNOWN = 'UNKNOWN'
    INTEGER = 'INTEGER'


class Timestamp(String):
    pass


class CancelQueryResponse(BaseModel):
    CancellationMessage: Optional[String] = None


class CancelQueryRequest(BaseModel):
    QueryId: QueryId


class QueryRequest(BaseModel):
    QueryString: QueryString
    ClientToken: Optional[ClientRequestToken] = None
    NextToken: Optional[String] = None
    MaxRows: Optional[MaxQueryResults] = None


class Endpoints(BaseModel):
    __root__: List[Endpoint]


class DescribeEndpointsResponse(BaseModel):
    Endpoints: Endpoints


class QueryResponse(BaseModel):
    QueryId: QueryId
    NextToken: Optional[String] = None
    Rows: RowList
    ColumnInfo: ColumnInfoList
    QueryStatus: Optional[QueryStatus] = None


class Type(BaseModel):
    """
    Contains the data type of a column in a query result set. The data type can be scalar or complex. The supported scalar data types are integers, boolean, string, double, timestamp, date, time, and intervals. The supported complex data types are arrays, rows, and timeseries.
    """

    ScalarType: Optional[ScalarType] = None
    ArrayColumnInfo: Optional[ColumnInfo] = None
    TimeSeriesMeasureValueColumnInfo: Optional[ColumnInfo] = None
    RowColumnInfo: Optional[ColumnInfoList] = None


class ColumnInfo(BaseModel):
    """
    Contains the meta data for query results such as the column names, data types, and other attributes.
    """

    Name: Optional[String] = None
    Type: Type


class ColumnInfoList(BaseModel):
    __root__: List[ColumnInfo]


class TimeSeriesDataPointList(BaseModel):
    __root__: List[TimeSeriesDataPoint]


class DatumList(BaseModel):
    __root__: List[Datum]


class Row(BaseModel):
    """
    Represents a single row in the query results.
    """

    Data: DatumList


class Datum(BaseModel):
    """
    Datum represents a single data point in a query result.
    """

    ScalarValue: Optional[ScalarValue] = None
    TimeSeriesValue: Optional[TimeSeriesDataPointList] = None
    ArrayValue: Optional[DatumList] = None
    RowValue: Optional[Row] = None
    NullValue: Optional[NullableBoolean] = None


class RowList(BaseModel):
    __root__: List[Row]


class TimeSeriesDataPoint(BaseModel):
    """
    The timeseries datatype represents the values of a measure over time. A time series is an array of rows of timestamps and measure values, with rows sorted in ascending order of time. A TimeSeriesDataPoint is a single data point in the timeseries. It represents a tuple of (time, measure value) in a timeseries.
    """

    Time: Timestamp
    Value: Datum


QueryResponse.update_forward_refs()
Type.update_forward_refs()
TimeSeriesDataPointList.update_forward_refs()
DatumList.update_forward_refs()
