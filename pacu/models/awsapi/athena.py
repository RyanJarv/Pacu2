# generated by datamodel-codegen:
#   filename:  openapi.yaml
#   timestamp: 2021-12-31T02:45:21+00:00

from __future__ import annotations

from datetime import datetime
from enum import Enum
from typing import Annotated, Any, List, Optional

from pydantic import BaseModel, Extra, Field


class InternalServerException(BaseModel):
    __root__: Any


class InvalidRequestException(InternalServerException):
    pass


class CreateDataCatalogOutput(BaseModel):
    pass


class CreatePreparedStatementOutput(CreateDataCatalogOutput):
    pass


class CreateWorkGroupOutput(CreateDataCatalogOutput):
    pass


class DeleteDataCatalogOutput(CreateDataCatalogOutput):
    pass


class DeleteNamedQueryOutput(CreateDataCatalogOutput):
    pass


class DeletePreparedStatementOutput(CreateDataCatalogOutput):
    pass


class ResourceNotFoundException(InternalServerException):
    pass


class DeleteWorkGroupOutput(CreateDataCatalogOutput):
    pass


class MetadataException(InternalServerException):
    pass


class TooManyRequestsException(InternalServerException):
    pass


class StopQueryExecutionOutput(CreateDataCatalogOutput):
    pass


class TagResourceOutput(CreateDataCatalogOutput):
    pass


class UntagResourceOutput(CreateDataCatalogOutput):
    pass


class UpdateDataCatalogOutput(CreateDataCatalogOutput):
    pass


class UpdatePreparedStatementOutput(CreateDataCatalogOutput):
    pass


class UpdateWorkGroupOutput(CreateDataCatalogOutput):
    pass


class AmazonResourceName(BaseModel):
    __root__: Annotated[str, Field(max_length=1011, min_length=1)]


class Boolean(BaseModel):
    __root__: bool


class BoxedBoolean(Boolean):
    pass


class BytesScannedCutoffValue(BaseModel):
    __root__: Annotated[int, Field(ge=10000000.0)]


class CatalogNameString(BaseModel):
    __root__: Annotated[str, Field(max_length=256, min_length=1)]


class NameString(BaseModel):
    __root__: Annotated[str, Field(max_length=128, min_length=1)]


class TypeString(BaseModel):
    __root__: Annotated[str, Field(max_length=4096, min_length=0)]


class CommentString(BaseModel):
    __root__: Annotated[str, Field(max_length=255, min_length=0)]


class Column(BaseModel):
    """
    Contains metadata for a column in a table.
    """

    Name: NameString
    Type: Optional[TypeString] = None
    Comment: Optional[CommentString] = None


class String(BaseModel):
    __root__: str


class Integer(BaseModel):
    __root__: int


class ColumnNullable(Enum):
    NOT_NULL = 'NOT_NULL'
    NULLABLE = 'NULLABLE'
    UNKNOWN = 'UNKNOWN'


class ColumnInfo(BaseModel):
    """
    Information about the columns in a query execution result.
    """

    CatalogName: Optional[String] = None
    SchemaName: Optional[String] = None
    TableName: Optional[String] = None
    Name: String
    Label: Optional[String] = None
    Type: String
    Precision: Optional[Integer] = None
    Scale: Optional[Integer] = None
    Nullable: Optional[ColumnNullable] = None
    CaseSensitive: Optional[Boolean] = None


class ColumnInfoList(BaseModel):
    __root__: List[ColumnInfo]


class ColumnList(BaseModel):
    __root__: List[Column]


class DataCatalogType(Enum):
    LAMBDA = 'LAMBDA'
    GLUE = 'GLUE'
    HIVE = 'HIVE'


class DescriptionString(BaseModel):
    __root__: Annotated[str, Field(max_length=1024, min_length=1)]


class ParametersMap(BaseModel):
    pass

    class Config:
        extra = Extra.allow


class DatabaseString(BaseModel):
    __root__: Annotated[str, Field(max_length=255, min_length=1)]


class QueryString(BaseModel):
    __root__: Annotated[str, Field(max_length=262144, min_length=1)]


class IdempotencyToken(BaseModel):
    __root__: Annotated[str, Field(max_length=128, min_length=32)]


class WorkGroupName(BaseModel):
    __root__: Annotated[str, Field(regex='[a-zA-Z0-9._-]{1,128}')]


class NamedQueryId(String):
    pass


class StatementName(BaseModel):
    __root__: Annotated[
        str, Field(max_length=256, min_length=1, regex='[a-zA-Z_][a-zA-Z0-9_@:]{1,256}')
    ]


class WorkGroupDescriptionString(BaseModel):
    __root__: Annotated[str, Field(max_length=1024, min_length=0)]


class DataCatalog(BaseModel):
    """
    Contains information about a data catalog in an Amazon Web Services account.
    """

    Name: CatalogNameString
    Description: Optional[DescriptionString] = None
    Type: DataCatalogType
    Parameters: Optional[ParametersMap] = None


class DataCatalogSummary(BaseModel):
    """
    The summary information for the data catalog, which includes its name and type.
    """

    CatalogName: Optional[CatalogNameString] = None
    Type: Optional[DataCatalogType] = None


class DataCatalogSummaryList(BaseModel):
    __root__: List[DataCatalogSummary]


class Database(BaseModel):
    """
    Contains metadata information for a database in a data catalog.
    """

    Name: NameString
    Description: Optional[DescriptionString] = None
    Parameters: Optional[ParametersMap] = None


class DatabaseList(BaseModel):
    __root__: List[Database]


class Date(BaseModel):
    __root__: datetime


class DatumString(String):
    pass


class Datum(BaseModel):
    """
    A piece of data (a field in the table).
    """

    VarCharValue: Optional[DatumString] = None


class EncryptionOption(Enum):
    SSE_S3 = 'SSE_S3'
    SSE_KMS = 'SSE_KMS'
    CSE_KMS = 'CSE_KMS'


class EncryptionConfiguration(BaseModel):
    """
    If query results are encrypted in Amazon S3, indicates the encryption option used (for example, <code>SSE-KMS</code> or <code>CSE-KMS</code>) and key information.
    """

    EncryptionOption: EncryptionOption
    KmsKey: Optional[String] = None


class EngineVersion(BaseModel):
    """
    The Athena engine version for running queries.
    """

    SelectedEngineVersion: Optional[NameString] = None
    EffectiveEngineVersion: Optional[NameString] = None


class EngineVersionsList(BaseModel):
    __root__: Annotated[List[EngineVersion], Field(max_items=10, min_items=0)]


class ErrorCode(BaseModel):
    __root__: Annotated[
        str,
        Field(
            description='The error code returned when the query execution failed to process, or when the processing request for the named query failed.',
            max_length=256,
            min_length=1,
        ),
    ]


class ErrorMessage(String):
    pass


class ExpressionString(BaseModel):
    __root__: Annotated[str, Field(max_length=256, min_length=0)]


class NamedQuery(BaseModel):
    """
    A query, where <code>QueryString</code> is the list of SQL query statements that comprise the query.
    """

    Name: NameString
    Description: Optional[DescriptionString] = None
    Database: DatabaseString
    QueryString: QueryString
    NamedQueryId: Optional[NamedQueryId] = None
    WorkGroup: Optional[WorkGroupName] = None


class PreparedStatement(BaseModel):
    """
    A prepared SQL statement for use with Athena.
    """

    StatementName: Optional[StatementName] = None
    QueryStatement: Optional[QueryString] = None
    WorkGroupName: Optional[WorkGroupName] = None
    Description: Optional[DescriptionString] = None
    LastModifiedTime: Optional[Date] = None


class QueryExecutionId(String):
    pass


class Token(DescriptionString):
    pass


class MaxQueryResults(BaseModel):
    __root__: Annotated[int, Field(ge=1.0, le=1000.0)]


class Long(Integer):
    pass


class KeyString(DatabaseString):
    pass


class MaxDataCatalogsCount(BaseModel):
    __root__: Annotated[int, Field(ge=2.0, le=50.0)]


class MaxDatabasesCount(BaseModel):
    __root__: Annotated[int, Field(ge=1.0, le=50.0)]


class MaxEngineVersionsCount(BaseModel):
    __root__: Annotated[int, Field(ge=1.0, le=10.0)]


class MaxNamedQueriesCount(BaseModel):
    __root__: Annotated[int, Field(ge=0.0, le=50.0)]


class MaxPreparedStatementsCount(MaxDatabasesCount):
    pass


class MaxQueryExecutionsCount(MaxNamedQueriesCount):
    pass


class MaxTableMetadataCount(MaxDatabasesCount):
    pass


class MaxTagsCount(BaseModel):
    __root__: Annotated[int, Field(ge=75.0)]


class MaxWorkGroupsCount(MaxDatabasesCount):
    pass


class ParametersMapValue(BaseModel):
    __root__: Annotated[str, Field(max_length=51200)]


class PreparedStatementSummary(BaseModel):
    """
    The name and last modified time of the prepared statement.
    """

    StatementName: Optional[StatementName] = None
    LastModifiedTime: Optional[Date] = None


class StatementType(Enum):
    DDL = 'DDL'
    DML = 'DML'
    UTILITY = 'UTILITY'


class ResultConfiguration(BaseModel):
    """
    The location in Amazon S3 where query results are stored and the encryption option, if any, used for query results. These are known as "client-side settings". If workgroup settings override client-side settings, then the query uses the workgroup settings.
    """

    OutputLocation: Optional[String] = None
    EncryptionConfiguration: Optional[EncryptionConfiguration] = None


class QueryExecutionContext(BaseModel):
    """
    The database and data catalog context in which the query execution occurs.
    """

    Database: Optional[DatabaseString] = None
    Catalog: Optional[CatalogNameString] = None


class QueryExecutionStatistics(BaseModel):
    """
    The amount of data scanned during the query execution and the amount of time that it took to execute, and the type of statement that was run.
    """

    EngineExecutionTimeInMillis: Optional[Long] = None
    DataScannedInBytes: Optional[Long] = None
    DataManifestLocation: Optional[String] = None
    TotalExecutionTimeInMillis: Optional[Long] = None
    QueryQueueTimeInMillis: Optional[Long] = None
    QueryPlanningTimeInMillis: Optional[Long] = None
    ServiceProcessingTimeInMillis: Optional[Long] = None


class QueryExecutionState(Enum):
    QUEUED = 'QUEUED'
    RUNNING = 'RUNNING'
    SUCCEEDED = 'SUCCEEDED'
    FAILED = 'FAILED'
    CANCELLED = 'CANCELLED'


class ResultConfigurationUpdates(BaseModel):
    """
    The information about the updates in the query results, such as output location and encryption configuration for the query results.
    """

    OutputLocation: Optional[String] = None
    RemoveOutputLocation: Optional[BoxedBoolean] = None
    EncryptionConfiguration: Optional[EncryptionConfiguration] = None
    RemoveEncryptionConfiguration: Optional[BoxedBoolean] = None


class ResultSetMetadata(BaseModel):
    """
    The metadata that describes the column structure and data types of a table of query results. To return a <code>ResultSetMetadata</code> object, use <a>GetQueryResults</a>.
    """

    ColumnInfo: Optional[ColumnInfoList] = None


class DatumList(BaseModel):
    __root__: List[Datum]


class Row(BaseModel):
    """
    The rows that comprise a query result table.
    """

    Data: Optional[DatumList] = None


class Timestamp(Date):
    pass


class TableTypeString(BaseModel):
    __root__: Annotated[str, Field(max_length=255)]


class TagKey(NameString):
    pass


class TagValue(ExpressionString):
    pass


class Tag(BaseModel):
    """
    A label that you assign to a resource. In Athena, a resource can be a workgroup or data catalog. Each tag consists of a key and an optional value, both of which you define. For example, you can use tags to categorize Athena workgroups or data catalogs by purpose, owner, or environment. Use a consistent set of tag keys to make it easier to search and filter workgroups or data catalogs in your account. For best practices, see <a href="https://aws.amazon.com/answers/account-management/aws-tagging-strategies/">Tagging Best Practices</a>. Tag keys can be from 1 to 128 UTF-8 Unicode characters, and tag values can be from 0 to 256 UTF-8 Unicode characters. Tags can use letters and numbers representable in UTF-8, and the following characters: + - = . _ : / @. Tag keys and values are case-sensitive. Tag keys must be unique per resource. If you specify more than one tag, separate them by commas.
    """

    Key: Optional[TagKey] = None
    Value: Optional[TagValue] = None


class TagKeyList(BaseModel):
    __root__: List[TagKey]


class UnprocessedNamedQueryId(BaseModel):
    """
    Information about a named query ID that could not be processed.
    """

    NamedQueryId: Optional[NamedQueryId] = None
    ErrorCode: Optional[ErrorCode] = None
    ErrorMessage: Optional[ErrorMessage] = None


class UnprocessedQueryExecutionId(BaseModel):
    """
    Describes a query execution that failed to process.
    """

    QueryExecutionId: Optional[QueryExecutionId] = None
    ErrorCode: Optional[ErrorCode] = None
    ErrorMessage: Optional[ErrorMessage] = None


class WorkGroupConfigurationUpdates(BaseModel):
    """
    The configuration information that will be updated for this workgroup, which includes the location in Amazon S3 where query results are stored, the encryption option, if any, used for query results, whether the Amazon CloudWatch Metrics are enabled for the workgroup, whether the workgroup settings override the client-side settings, and the data usage limit for the amount of bytes scanned per query, if it is specified.
    """

    EnforceWorkGroupConfiguration: Optional[BoxedBoolean] = None
    ResultConfigurationUpdates: Optional[ResultConfigurationUpdates] = None
    PublishCloudWatchMetricsEnabled: Optional[BoxedBoolean] = None
    BytesScannedCutoffPerQuery: Optional[BytesScannedCutoffValue] = None
    RemoveBytesScannedCutoffPerQuery: Optional[BoxedBoolean] = None
    RequesterPaysEnabled: Optional[BoxedBoolean] = None
    EngineVersion: Optional[EngineVersion] = None


class WorkGroupState(Enum):
    ENABLED = 'ENABLED'
    DISABLED = 'DISABLED'


class WorkGroupSummary(BaseModel):
    """
    The summary information for the workgroup, which includes its name, state, description, and the date and time it was created.
    """

    Name: Optional[WorkGroupName] = None
    State: Optional[WorkGroupState] = None
    Description: Optional[WorkGroupDescriptionString] = None
    CreationTime: Optional[Date] = None
    EngineVersion: Optional[EngineVersion] = None


class CreateNamedQueryOutput(BaseModel):
    NamedQueryId: Optional[NamedQueryId] = None


class CreateNamedQueryInput(BaseModel):
    Name: NameString
    Description: Optional[DescriptionString] = None
    Database: DatabaseString
    QueryString: QueryString
    ClientRequestToken: Optional[IdempotencyToken] = None
    WorkGroup: Optional[WorkGroupName] = None


class CreatePreparedStatementInput(BaseModel):
    StatementName: StatementName
    WorkGroup: WorkGroupName
    QueryStatement: QueryString
    Description: Optional[DescriptionString] = None


class DeleteDataCatalogInput(BaseModel):
    Name: CatalogNameString


class DeleteNamedQueryInput(BaseModel):
    NamedQueryId: NamedQueryId


class DeletePreparedStatementInput(BaseModel):
    StatementName: StatementName
    WorkGroup: WorkGroupName


class DeleteWorkGroupInput(BaseModel):
    WorkGroup: WorkGroupName
    RecursiveDeleteOption: Optional[BoxedBoolean] = None


class GetDataCatalogOutput(BaseModel):
    DataCatalog: Optional[DataCatalog] = None


class GetDataCatalogInput(BaseModel):
    Name: CatalogNameString


class GetDatabaseOutput(BaseModel):
    Database: Optional[Database] = None


class GetDatabaseInput(BaseModel):
    CatalogName: CatalogNameString
    DatabaseName: NameString


class GetNamedQueryOutput(BaseModel):
    NamedQuery: Optional[NamedQuery] = None


class GetNamedQueryInput(BaseModel):
    NamedQueryId: NamedQueryId


class GetPreparedStatementOutput(BaseModel):
    PreparedStatement: Optional[PreparedStatement] = None


class GetPreparedStatementInput(BaseModel):
    StatementName: StatementName
    WorkGroup: WorkGroupName


class GetQueryExecutionInput(BaseModel):
    QueryExecutionId: QueryExecutionId


class GetQueryResultsInput(BaseModel):
    QueryExecutionId: QueryExecutionId
    NextToken: Optional[Token] = None
    MaxResults: Optional[MaxQueryResults] = None


class GetTableMetadataInput(BaseModel):
    CatalogName: CatalogNameString
    DatabaseName: NameString
    TableName: NameString


class GetWorkGroupInput(BaseModel):
    WorkGroup: WorkGroupName


class ListDataCatalogsOutput(BaseModel):
    DataCatalogsSummary: Optional[DataCatalogSummaryList] = None
    NextToken: Optional[Token] = None


class ListDataCatalogsInput(BaseModel):
    NextToken: Optional[Token] = None
    MaxResults: Optional[MaxDataCatalogsCount] = None


class ListDatabasesOutput(BaseModel):
    DatabaseList: Optional[DatabaseList] = None
    NextToken: Optional[Token] = None


class ListDatabasesInput(BaseModel):
    CatalogName: CatalogNameString
    NextToken: Optional[Token] = None
    MaxResults: Optional[MaxDatabasesCount] = None


class ListEngineVersionsOutput(BaseModel):
    EngineVersions: Optional[EngineVersionsList] = None
    NextToken: Optional[Token] = None


class ListEngineVersionsInput(BaseModel):
    NextToken: Optional[Token] = None
    MaxResults: Optional[MaxEngineVersionsCount] = None


class ListNamedQueriesInput(BaseModel):
    NextToken: Optional[Token] = None
    MaxResults: Optional[MaxNamedQueriesCount] = None
    WorkGroup: Optional[WorkGroupName] = None


class ListPreparedStatementsInput(BaseModel):
    WorkGroup: WorkGroupName
    NextToken: Optional[Token] = None
    MaxResults: Optional[MaxPreparedStatementsCount] = None


class ListQueryExecutionsInput(BaseModel):
    NextToken: Optional[Token] = None
    MaxResults: Optional[MaxQueryExecutionsCount] = None
    WorkGroup: Optional[WorkGroupName] = None


class ListTableMetadataInput(BaseModel):
    CatalogName: CatalogNameString
    DatabaseName: NameString
    Expression: Optional[ExpressionString] = None
    NextToken: Optional[Token] = None
    MaxResults: Optional[MaxTableMetadataCount] = None


class ListTagsForResourceInput(BaseModel):
    ResourceARN: AmazonResourceName
    NextToken: Optional[Token] = None
    MaxResults: Optional[MaxTagsCount] = None


class ListWorkGroupsInput(BaseModel):
    NextToken: Optional[Token] = None
    MaxResults: Optional[MaxWorkGroupsCount] = None


class StartQueryExecutionOutput(BaseModel):
    QueryExecutionId: Optional[QueryExecutionId] = None


class StartQueryExecutionInput(BaseModel):
    QueryString: QueryString
    ClientRequestToken: Optional[IdempotencyToken] = None
    QueryExecutionContext: Optional[QueryExecutionContext] = None
    ResultConfiguration: Optional[ResultConfiguration] = None
    WorkGroup: Optional[WorkGroupName] = None


class StopQueryExecutionInput(BaseModel):
    QueryExecutionId: QueryExecutionId


class UntagResourceInput(BaseModel):
    ResourceARN: AmazonResourceName
    TagKeys: TagKeyList


class UpdateDataCatalogInput(BaseModel):
    Name: CatalogNameString
    Type: DataCatalogType
    Description: Optional[DescriptionString] = None
    Parameters: Optional[ParametersMap] = None


class UpdatePreparedStatementInput(BaseModel):
    StatementName: StatementName
    WorkGroup: WorkGroupName
    QueryStatement: QueryString
    Description: Optional[DescriptionString] = None


class UpdateWorkGroupInput(BaseModel):
    WorkGroup: WorkGroupName
    Description: Optional[WorkGroupDescriptionString] = None
    ConfigurationUpdates: Optional[WorkGroupConfigurationUpdates] = None
    State: Optional[WorkGroupState] = None


class NamedQueryIdList(BaseModel):
    __root__: Annotated[List[NamedQueryId], Field(max_items=50, min_items=1)]


class NamedQueryList(BaseModel):
    __root__: List[NamedQuery]


class UnprocessedNamedQueryIdList(BaseModel):
    __root__: List[UnprocessedNamedQueryId]


class QueryExecutionIdList(BaseModel):
    __root__: Annotated[List[QueryExecutionId], Field(max_items=50, min_items=1)]


class UnprocessedQueryExecutionIdList(BaseModel):
    __root__: List[UnprocessedQueryExecutionId]


class TagList(BaseModel):
    __root__: List[Tag]


class WorkGroupConfiguration(BaseModel):
    """
    The configuration of the workgroup, which includes the location in Amazon S3 where query results are stored, the encryption option, if any, used for query results, whether the Amazon CloudWatch Metrics are enabled for the workgroup and whether workgroup settings override query settings, and the data usage limits for the amount of data scanned per query or per workgroup. The workgroup settings override is specified in <code>EnforceWorkGroupConfiguration</code> (true/false) in the <code>WorkGroupConfiguration</code>. See <a>WorkGroupConfiguration$EnforceWorkGroupConfiguration</a>.
    """

    ResultConfiguration: Optional[ResultConfiguration] = None
    EnforceWorkGroupConfiguration: Optional[BoxedBoolean] = None
    PublishCloudWatchMetricsEnabled: Optional[BoxedBoolean] = None
    BytesScannedCutoffPerQuery: Optional[BytesScannedCutoffValue] = None
    RequesterPaysEnabled: Optional[BoxedBoolean] = None
    EngineVersion: Optional[EngineVersion] = None


class TableMetadata(BaseModel):
    """
    Contains metadata for a table.
    """

    Name: NameString
    CreateTime: Optional[Timestamp] = None
    LastAccessTime: Optional[Timestamp] = None
    TableType: Optional[TableTypeString] = None
    Columns: Optional[ColumnList] = None
    PartitionKeys: Optional[ColumnList] = None
    Parameters: Optional[ParametersMap] = None


class WorkGroup(BaseModel):
    """
    A workgroup, which contains a name, description, creation time, state, and other configuration, listed under <a>WorkGroup$Configuration</a>. Each workgroup enables you to isolate queries for you or your group of users from other queries in the same account, to configure the query results location and the encryption configuration (known as workgroup settings), to enable sending query metrics to Amazon CloudWatch, and to establish per-query data usage control limits for all queries in a workgroup. The workgroup settings override is specified in <code>EnforceWorkGroupConfiguration</code> (true/false) in the <code>WorkGroupConfiguration</code>. See <a>WorkGroupConfiguration$EnforceWorkGroupConfiguration</a>.
    """

    Name: WorkGroupName
    State: Optional[WorkGroupState] = None
    Configuration: Optional[WorkGroupConfiguration] = None
    Description: Optional[WorkGroupDescriptionString] = None
    CreationTime: Optional[Date] = None


class PreparedStatementsList(BaseModel):
    __root__: Annotated[
        List[PreparedStatementSummary], Field(max_items=50, min_items=0)
    ]


class TableMetadataList(BaseModel):
    __root__: List[TableMetadata]


class WorkGroupsList(BaseModel):
    __root__: Annotated[List[WorkGroupSummary], Field(max_items=50, min_items=0)]


class QueryExecutionStatus(BaseModel):
    """
    The completion date, current state, submission time, and state change reason (if applicable) for the query execution.
    """

    State: Optional[QueryExecutionState] = None
    StateChangeReason: Optional[String] = None
    SubmissionDateTime: Optional[Date] = None
    CompletionDateTime: Optional[Date] = None


class RowList(BaseModel):
    __root__: List[Row]


class BatchGetNamedQueryOutput(BaseModel):
    NamedQueries: Optional[NamedQueryList] = None
    UnprocessedNamedQueryIds: Optional[UnprocessedNamedQueryIdList] = None


class BatchGetNamedQueryInput(BaseModel):
    NamedQueryIds: NamedQueryIdList


class BatchGetQueryExecutionInput(BaseModel):
    QueryExecutionIds: QueryExecutionIdList


class CreateDataCatalogInput(BaseModel):
    Name: CatalogNameString
    Type: DataCatalogType
    Description: Optional[DescriptionString] = None
    Parameters: Optional[ParametersMap] = None
    Tags: Optional[TagList] = None


class CreateWorkGroupInput(BaseModel):
    Name: WorkGroupName
    Configuration: Optional[WorkGroupConfiguration] = None
    Description: Optional[WorkGroupDescriptionString] = None
    Tags: Optional[TagList] = None


class GetTableMetadataOutput(BaseModel):
    TableMetadata: Optional[TableMetadata] = None


class GetWorkGroupOutput(BaseModel):
    WorkGroup: Optional[WorkGroup] = None


class ListNamedQueriesOutput(BaseModel):
    NamedQueryIds: Optional[NamedQueryIdList] = None
    NextToken: Optional[Token] = None


class ListPreparedStatementsOutput(BaseModel):
    PreparedStatements: Optional[PreparedStatementsList] = None
    NextToken: Optional[Token] = None


class ListQueryExecutionsOutput(BaseModel):
    QueryExecutionIds: Optional[QueryExecutionIdList] = None
    NextToken: Optional[Token] = None


class ListTableMetadataOutput(BaseModel):
    TableMetadataList: Optional[TableMetadataList] = None
    NextToken: Optional[Token] = None


class ListTagsForResourceOutput(BaseModel):
    Tags: Optional[TagList] = None
    NextToken: Optional[Token] = None


class ListWorkGroupsOutput(BaseModel):
    WorkGroups: Optional[WorkGroupsList] = None
    NextToken: Optional[Token] = None


class TagResourceInput(BaseModel):
    ResourceARN: AmazonResourceName
    Tags: TagList


class QueryExecution(BaseModel):
    """
    Information about a single instance of a query execution.
    """

    QueryExecutionId: Optional[QueryExecutionId] = None
    Query: Optional[QueryString] = None
    StatementType: Optional[StatementType] = None
    ResultConfiguration: Optional[ResultConfiguration] = None
    QueryExecutionContext: Optional[QueryExecutionContext] = None
    Status: Optional[QueryExecutionStatus] = None
    Statistics: Optional[QueryExecutionStatistics] = None
    WorkGroup: Optional[WorkGroupName] = None
    EngineVersion: Optional[EngineVersion] = None


class ResultSet(BaseModel):
    """
    The metadata and rows that comprise a query result set. The metadata describes the column structure and data types. To return a <code>ResultSet</code> object, use <a>GetQueryResults</a>.
    """

    Rows: Optional[RowList] = None
    ResultSetMetadata: Optional[ResultSetMetadata] = None


class GetQueryExecutionOutput(BaseModel):
    QueryExecution: Optional[QueryExecution] = None


class GetQueryResultsOutput(BaseModel):
    UpdateCount: Optional[Long] = None
    ResultSet: Optional[ResultSet] = None
    NextToken: Optional[Token] = None


class QueryExecutionList(BaseModel):
    __root__: List[QueryExecution]


class BatchGetQueryExecutionOutput(BaseModel):
    QueryExecutions: Optional[QueryExecutionList] = None
    UnprocessedQueryExecutionIds: Optional[UnprocessedQueryExecutionIdList] = None
