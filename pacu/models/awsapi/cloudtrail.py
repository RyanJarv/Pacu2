# generated by datamodel-codegen:
#   filename:  openapi.yaml
#   timestamp: 2021-12-31T02:46:16+00:00

from __future__ import annotations

from datetime import datetime
from enum import Enum
from typing import Annotated, Any, List, Optional

from pydantic import BaseModel, Field


class AddTagsResponse(BaseModel):
    """
    Returns the objects or data if successful. Otherwise, returns an error.
    """

    pass


class ResourceNotFoundException(BaseModel):
    __root__: Any


class CloudTrailARNInvalidException(ResourceNotFoundException):
    pass


class ResourceTypeNotSupportedException(ResourceNotFoundException):
    pass


class TagsLimitExceededException(ResourceNotFoundException):
    pass


class InvalidTrailNameException(ResourceNotFoundException):
    pass


class InvalidTagParameterException(ResourceNotFoundException):
    pass


class UnsupportedOperationException(ResourceNotFoundException):
    pass


class OperationNotPermittedException(ResourceNotFoundException):
    pass


class NotOrganizationMasterAccountException(ResourceNotFoundException):
    pass


class MaximumNumberOfTrailsExceededException(ResourceNotFoundException):
    pass


class TrailAlreadyExistsException(ResourceNotFoundException):
    pass


class S3BucketDoesNotExistException(ResourceNotFoundException):
    pass


class InsufficientS3BucketPolicyException(ResourceNotFoundException):
    pass


class InsufficientSnsTopicPolicyException(ResourceNotFoundException):
    pass


class InsufficientEncryptionPolicyException(ResourceNotFoundException):
    pass


class InvalidS3BucketNameException(ResourceNotFoundException):
    pass


class InvalidS3PrefixException(ResourceNotFoundException):
    pass


class InvalidSnsTopicNameException(ResourceNotFoundException):
    pass


class InvalidKmsKeyIdException(ResourceNotFoundException):
    pass


class TrailNotProvidedException(ResourceNotFoundException):
    pass


class InvalidParameterCombinationException(ResourceNotFoundException):
    pass


class KmsKeyNotFoundException(ResourceNotFoundException):
    pass


class KmsKeyDisabledException(ResourceNotFoundException):
    pass


class KmsException(ResourceNotFoundException):
    pass


class InvalidCloudWatchLogsLogGroupArnException(ResourceNotFoundException):
    pass


class InvalidCloudWatchLogsRoleArnException(ResourceNotFoundException):
    pass


class CloudWatchLogsDeliveryUnavailableException(ResourceNotFoundException):
    pass


class CloudTrailAccessNotEnabledException(ResourceNotFoundException):
    pass


class InsufficientDependencyServiceAccessPermissionException(ResourceNotFoundException):
    pass


class OrganizationsNotInUseException(ResourceNotFoundException):
    pass


class OrganizationNotInAllFeaturesModeException(ResourceNotFoundException):
    pass


class CloudTrailInvalidClientTokenIdException(ResourceNotFoundException):
    pass


class DeleteTrailResponse(AddTagsResponse):
    """
    Returns the objects or data listed below if successful. Otherwise, returns an error.
    """

    pass


class TrailNotFoundException(ResourceNotFoundException):
    pass


class InvalidHomeRegionException(ResourceNotFoundException):
    pass


class ConflictException(ResourceNotFoundException):
    pass


class InsightNotEnabledException(ResourceNotFoundException):
    pass


class InvalidTimeRangeException(ResourceNotFoundException):
    pass


class InvalidTokenException(ResourceNotFoundException):
    pass


class InvalidLookupAttributesException(ResourceNotFoundException):
    pass


class InvalidMaxResultsException(ResourceNotFoundException):
    pass


class InvalidNextTokenException(ResourceNotFoundException):
    pass


class InvalidEventCategoryException(ResourceNotFoundException):
    pass


class InvalidEventSelectorsException(ResourceNotFoundException):
    pass


class InvalidInsightSelectorsException(ResourceNotFoundException):
    pass


class RemoveTagsResponse(AddTagsResponse):
    """
    Returns the objects or data listed below if successful. Otherwise, returns an error.
    """

    pass


class StartLoggingResponse(AddTagsResponse):
    """
    Returns the objects or data listed below if successful. Otherwise, returns an error.
    """

    pass


class StopLoggingResponse(AddTagsResponse):
    """
    Returns the objects or data listed below if successful. Otherwise, returns an error.
    """

    pass


class String(BaseModel):
    __root__: str


class SelectorName(BaseModel):
    __root__: Annotated[str, Field(max_length=1000, min_length=0, regex='.*')]


class SelectorField(BaseModel):
    __root__: Annotated[
        str, Field(max_length=1000, min_length=1, regex='[\\w|\\d|\\.|_]+')
    ]


class Boolean(BaseModel):
    __root__: bool


class ByteBuffer(String):
    pass


class DataResourceValues(BaseModel):
    __root__: List[String]


class DataResource(BaseModel):
    """
    <p>The Amazon S3 buckets, Lambda functions, or Amazon DynamoDB tables that you specify in your event selectors for your trail to log data events. Data events provide information about the resource operations performed on or within a resource itself. These are also known as data plane operations. You can specify up to 250 data resources for a trail.</p> <note> <p>The total number of allowed data resources is 250. This number can be distributed between 1 and 5 event selectors, but the total cannot exceed 250 across all selectors.</p> <p>If you are using advanced event selectors, the maximum total number of values for all conditions, across all advanced event selectors for the trail, is 500.</p> </note> <p>The following example demonstrates how logging works when you configure logging of all data events for an S3 bucket named <code>bucket-1</code>. In this example, the CloudTrail user specified an empty prefix, and the option to log both <code>Read</code> and <code>Write</code> data events.</p> <ol> <li> <p>A user uploads an image file to <code>bucket-1</code>.</p> </li> <li> <p>The <code>PutObject</code> API operation is an Amazon S3 object-level API. It is recorded as a data event in CloudTrail. Because the CloudTrail user specified an S3 bucket with an empty prefix, events that occur on any object in that bucket are logged. The trail processes and logs the event.</p> </li> <li> <p>A user uploads an object to an Amazon S3 bucket named <code>arn:aws:s3:::bucket-2</code>.</p> </li> <li> <p>The <code>PutObject</code> API operation occurred for an object in an S3 bucket that the CloudTrail user didn't specify for the trail. The trail doesn’t log the event.</p> </li> </ol> <p>The following example demonstrates how logging works when you configure logging of Lambda data events for a Lambda function named <i>MyLambdaFunction</i>, but not for all Lambda functions.</p> <ol> <li> <p>A user runs a script that includes a call to the <i>MyLambdaFunction</i> function and the <i>MyOtherLambdaFunction</i> function.</p> </li> <li> <p>The <code>Invoke</code> API operation on <i>MyLambdaFunction</i> is an Lambda API. It is recorded as a data event in CloudTrail. Because the CloudTrail user specified logging data events for <i>MyLambdaFunction</i>, any invocations of that function are logged. The trail processes and logs the event.</p> </li> <li> <p>The <code>Invoke</code> API operation on <i>MyOtherLambdaFunction</i> is an Lambda API. Because the CloudTrail user did not specify logging data events for all Lambda functions, the <code>Invoke</code> operation for <i>MyOtherLambdaFunction</i> does not match the function specified for the trail. The trail doesn’t log the event. </p> </li> </ol>
    """

    Type: Optional[String] = None
    Values: Optional[DataResourceValues] = None


class DataResources(BaseModel):
    __root__: List[DataResource]


class Date(BaseModel):
    __root__: datetime


class TrailNameList(DataResourceValues):
    pass


class EventCategory(Enum):
    insight = 'insight'


class ReadWriteType(Enum):
    ReadOnly = 'ReadOnly'
    WriteOnly = 'WriteOnly'
    All = 'All'


class ExcludeManagementEventSources(DataResourceValues):
    pass


class EventSelector(BaseModel):
    """
    <p>Use event selectors to further specify the management and data event settings for your trail. By default, trails created without specific event selectors will be configured to log all read and write management events, and no data events. When an event occurs in your account, CloudTrail evaluates the event selector for all trails. For each trail, if the event matches any event selector, the trail processes and logs the event. If the event doesn't match any event selector, the trail doesn't log the event.</p> <p>You can configure up to five event selectors for a trail.</p> <p>You cannot apply both event selectors and advanced event selectors to a trail.</p>
    """

    ReadWriteType: Optional[ReadWriteType] = None
    IncludeManagementEvents: Optional[Boolean] = None
    DataResources: Optional[DataResources] = None
    ExcludeManagementEventSources: Optional[ExcludeManagementEventSources] = None


class EventSelectors(BaseModel):
    __root__: List[EventSelector]


class Trail(BaseModel):
    """
    The settings for a trail.
    """

    Name: Optional[String] = None
    S3BucketName: Optional[String] = None
    S3KeyPrefix: Optional[String] = None
    SnsTopicName: Optional[String] = None
    SnsTopicARN: Optional[String] = None
    IncludeGlobalServiceEvents: Optional[Boolean] = None
    IsMultiRegionTrail: Optional[Boolean] = None
    HomeRegion: Optional[String] = None
    TrailARN: Optional[String] = None
    LogFileValidationEnabled: Optional[Boolean] = None
    CloudWatchLogsLogGroupArn: Optional[String] = None
    CloudWatchLogsRoleArn: Optional[String] = None
    KmsKeyId: Optional[String] = None
    HasCustomEventSelectors: Optional[Boolean] = None
    HasInsightSelectors: Optional[Boolean] = None
    IsOrganizationTrail: Optional[Boolean] = None


class InsightType(Enum):
    ApiCallRateInsight = 'ApiCallRateInsight'


class InsightSelector(BaseModel):
    """
    A JSON string that contains a list of insight types that are logged on a trail.
    """

    InsightType: Optional[InsightType] = None


class ResourceIdList(DataResourceValues):
    pass


class LookupAttributeKey(Enum):
    EventId = 'EventId'
    EventName = 'EventName'
    ReadOnly = 'ReadOnly'
    Username = 'Username'
    ResourceType = 'ResourceType'
    ResourceName = 'ResourceName'
    EventSource = 'EventSource'
    AccessKeyId = 'AccessKeyId'


class LookupAttribute(BaseModel):
    """
    Specifies an attribute and value that filter the events returned.
    """

    AttributeKey: LookupAttributeKey
    AttributeValue: String


class LookupAttributesList(BaseModel):
    __root__: List[LookupAttribute]


class MaxResults(BaseModel):
    __root__: Annotated[int, Field(ge=1.0, le=50.0)]


class NextToken(String):
    pass


class OperatorValue(BaseModel):
    __root__: Annotated[str, Field(max_length=2048, min_length=1, regex='.+')]


class PublicKey(BaseModel):
    """
    Contains information about a returned public key.
    """

    Value: Optional[ByteBuffer] = None
    ValidityStartTime: Optional[Date] = None
    ValidityEndTime: Optional[Date] = None
    Fingerprint: Optional[String] = None


class Resource(BaseModel):
    """
    Specifies the type and name of a resource referenced by an event.
    """

    ResourceType: Optional[String] = None
    ResourceName: Optional[String] = None


class Tag(BaseModel):
    """
    A custom key-value pair associated with a resource such as a CloudTrail trail.
    """

    Key: String
    Value: Optional[String] = None


class TrailInfo(BaseModel):
    """
    Information about a CloudTrail trail, including the trail's name, home region, and Amazon Resource Name (ARN).
    """

    TrailARN: Optional[String] = None
    Name: Optional[String] = None
    HomeRegion: Optional[String] = None


class CreateTrailResponse(BaseModel):
    """
    Returns the objects or data listed below if successful. Otherwise, returns an error.
    """

    Name: Optional[String] = None
    S3BucketName: Optional[String] = None
    S3KeyPrefix: Optional[String] = None
    SnsTopicName: Optional[String] = None
    SnsTopicARN: Optional[String] = None
    IncludeGlobalServiceEvents: Optional[Boolean] = None
    IsMultiRegionTrail: Optional[Boolean] = None
    TrailARN: Optional[String] = None
    LogFileValidationEnabled: Optional[Boolean] = None
    CloudWatchLogsLogGroupArn: Optional[String] = None
    CloudWatchLogsRoleArn: Optional[String] = None
    KmsKeyId: Optional[String] = None
    IsOrganizationTrail: Optional[Boolean] = None


class DeleteTrailRequest(BaseModel):
    """
    The request that specifies the name of a trail to delete.
    """

    Name: String


class DescribeTrailsRequest(BaseModel):
    """
    Returns information about the trail.
    """

    trailNameList: Optional[TrailNameList] = None
    includeShadowTrails: Optional[Boolean] = None


class GetEventSelectorsRequest(BaseModel):
    TrailName: String


class GetInsightSelectorsRequest(BaseModel):
    TrailName: String


class GetTrailResponse(BaseModel):
    Trail: Optional[Trail] = None


class GetTrailRequest(BaseModel):
    Name: String


class GetTrailStatusResponse(BaseModel):
    """
    Returns the objects or data listed below if successful. Otherwise, returns an error.
    """

    IsLogging: Optional[Boolean] = None
    LatestDeliveryError: Optional[String] = None
    LatestNotificationError: Optional[String] = None
    LatestDeliveryTime: Optional[Date] = None
    LatestNotificationTime: Optional[Date] = None
    StartLoggingTime: Optional[Date] = None
    StopLoggingTime: Optional[Date] = None
    LatestCloudWatchLogsDeliveryError: Optional[String] = None
    LatestCloudWatchLogsDeliveryTime: Optional[Date] = None
    LatestDigestDeliveryTime: Optional[Date] = None
    LatestDigestDeliveryError: Optional[String] = None
    LatestDeliveryAttemptTime: Optional[String] = None
    LatestNotificationAttemptTime: Optional[String] = None
    LatestNotificationAttemptSucceeded: Optional[String] = None
    LatestDeliveryAttemptSucceeded: Optional[String] = None
    TimeLoggingStarted: Optional[String] = None
    TimeLoggingStopped: Optional[String] = None


class GetTrailStatusRequest(BaseModel):
    """
    The name of a trail about which you want the current status.
    """

    Name: String


class ListPublicKeysRequest(BaseModel):
    """
    Requests the public keys for a specified time range.
    """

    StartTime: Optional[Date] = None
    EndTime: Optional[Date] = None
    NextToken: Optional[String] = None


class ListTagsRequest(BaseModel):
    """
    Specifies a list of trail tags to return.
    """

    ResourceIdList: ResourceIdList
    NextToken: Optional[String] = None


class ListTrailsRequest(BaseModel):
    NextToken: Optional[String] = None


class LookupEventsRequest(BaseModel):
    """
    Contains a request for LookupEvents.
    """

    LookupAttributes: Optional[LookupAttributesList] = None
    StartTime: Optional[Date] = None
    EndTime: Optional[Date] = None
    EventCategory: Optional[EventCategory] = None
    MaxResults: Optional[MaxResults] = None
    NextToken: Optional[NextToken] = None


class StartLoggingRequest(BaseModel):
    """
    The request to CloudTrail to start logging Amazon Web Services API calls for an account.
    """

    Name: String


class StopLoggingRequest(BaseModel):
    """
    Passes the request to CloudTrail to stop logging Amazon Web Services API calls for the specified account.
    """

    Name: String


class UpdateTrailResponse(CreateTrailResponse):
    """
    Returns the objects or data listed below if successful. Otherwise, returns an error.
    """

    pass


class UpdateTrailRequest(BaseModel):
    """
    Specifies settings to update for the trail.
    """

    Name: String
    S3BucketName: Optional[String] = None
    S3KeyPrefix: Optional[String] = None
    SnsTopicName: Optional[String] = None
    IncludeGlobalServiceEvents: Optional[Boolean] = None
    IsMultiRegionTrail: Optional[Boolean] = None
    EnableLogFileValidation: Optional[Boolean] = None
    CloudWatchLogsLogGroupArn: Optional[String] = None
    CloudWatchLogsRoleArn: Optional[String] = None
    KmsKeyId: Optional[String] = None
    IsOrganizationTrail: Optional[Boolean] = None


class TagsList(BaseModel):
    """
    A list of tags.
    """

    __root__: Annotated[List[Tag], Field(description='A list of tags.')]


class Operator(BaseModel):
    __root__: Annotated[List[OperatorValue], Field(min_items=1)]


class AdvancedFieldSelector(BaseModel):
    """
    A single selector statement in an advanced event selector.
    """

    Field: SelectorField
    Equals: Optional[Operator] = None
    StartsWith: Optional[Operator] = None
    EndsWith: Optional[Operator] = None
    NotEquals: Optional[Operator] = None
    NotStartsWith: Optional[Operator] = None
    NotEndsWith: Optional[Operator] = None


class TrailList(BaseModel):
    __root__: List[Trail]


class ResourceList(BaseModel):
    """
    A list of resources referenced by the event returned.
    """

    __root__: Annotated[
        List[Resource],
        Field(description='A list of resources referenced by the event returned.'),
    ]


class Event(BaseModel):
    """
    Contains information about an event that was returned by a lookup request. The result includes a representation of a CloudTrail event.
    """

    EventId: Optional[String] = None
    EventName: Optional[String] = None
    ReadOnly: Optional[String] = None
    AccessKeyId: Optional[String] = None
    EventTime: Optional[Date] = None
    EventSource: Optional[String] = None
    Username: Optional[String] = None
    Resources: Optional[ResourceList] = None
    CloudTrailEvent: Optional[String] = None


class EventsList(BaseModel):
    __root__: List[Event]


class InsightSelectors(BaseModel):
    __root__: List[InsightSelector]


class PublicKeyList(BaseModel):
    __root__: List[PublicKey]


class Trails(BaseModel):
    __root__: List[TrailInfo]


class ResourceTag(BaseModel):
    """
    A resource tag.
    """

    ResourceId: Optional[String] = None
    TagsList: Optional[TagsList] = None


class AddTagsRequest(BaseModel):
    """
    Specifies the tags to add to a trail.
    """

    ResourceId: String
    TagsList: Optional[TagsList] = None


class CreateTrailRequest(BaseModel):
    """
    Specifies the settings for each trail.
    """

    Name: String
    S3BucketName: String
    S3KeyPrefix: Optional[String] = None
    SnsTopicName: Optional[String] = None
    IncludeGlobalServiceEvents: Optional[Boolean] = None
    IsMultiRegionTrail: Optional[Boolean] = None
    EnableLogFileValidation: Optional[Boolean] = None
    CloudWatchLogsLogGroupArn: Optional[String] = None
    CloudWatchLogsRoleArn: Optional[String] = None
    KmsKeyId: Optional[String] = None
    IsOrganizationTrail: Optional[Boolean] = None
    TagsList: Optional[TagsList] = None


class DescribeTrailsResponse(BaseModel):
    """
    Returns the objects or data listed below if successful. Otherwise, returns an error.
    """

    trailList: Optional[TrailList] = None


class GetInsightSelectorsResponse(BaseModel):
    TrailARN: Optional[String] = None
    InsightSelectors: Optional[InsightSelectors] = None


class ListPublicKeysResponse(BaseModel):
    """
    Returns the objects or data listed below if successful. Otherwise, returns an error.
    """

    PublicKeyList: Optional[PublicKeyList] = None
    NextToken: Optional[String] = None


class ListTrailsResponse(BaseModel):
    Trails: Optional[Trails] = None
    NextToken: Optional[String] = None


class LookupEventsResponse(BaseModel):
    """
    Contains a response to a LookupEvents action.
    """

    Events: Optional[EventsList] = None
    NextToken: Optional[NextToken] = None


class PutInsightSelectorsResponse(GetInsightSelectorsResponse):
    pass


class PutInsightSelectorsRequest(BaseModel):
    TrailName: String
    InsightSelectors: InsightSelectors


class RemoveTagsRequest(BaseModel):
    """
    Specifies the tags to remove from a trail.
    """

    ResourceId: String
    TagsList: Optional[TagsList] = None


class AdvancedFieldSelectors(BaseModel):
    __root__: Annotated[List[AdvancedFieldSelector], Field(min_items=1)]


class AdvancedEventSelector(BaseModel):
    """
    <p>Advanced event selectors let you create fine-grained selectors for the following CloudTrail event record ﬁelds. They help you control costs by logging only those events that are important to you. For more information about advanced event selectors, see <a href="https://docs.aws.amazon.com/awscloudtrail/latest/userguide/logging-data-events-with-cloudtrail.html">Logging data events for trails</a> in the <i>CloudTrail User Guide</i>.</p> <ul> <li> <p> <code>readOnly</code> </p> </li> <li> <p> <code>eventSource</code> </p> </li> <li> <p> <code>eventName</code> </p> </li> <li> <p> <code>eventCategory</code> </p> </li> <li> <p> <code>resources.type</code> </p> </li> <li> <p> <code>resources.ARN</code> </p> </li> </ul> <p>You cannot apply both event selectors and advanced event selectors to a trail.</p>
    """

    Name: Optional[SelectorName] = None
    FieldSelectors: AdvancedFieldSelectors


class AdvancedEventSelectors(BaseModel):
    __root__: List[AdvancedEventSelector]


class ResourceTagList(BaseModel):
    __root__: List[ResourceTag]


class GetEventSelectorsResponse(BaseModel):
    TrailARN: Optional[String] = None
    EventSelectors: Optional[EventSelectors] = None
    AdvancedEventSelectors: Optional[AdvancedEventSelectors] = None


class ListTagsResponse(BaseModel):
    """
    Returns the objects or data listed below if successful. Otherwise, returns an error.
    """

    ResourceTagList: Optional[ResourceTagList] = None
    NextToken: Optional[String] = None


class PutEventSelectorsResponse(GetEventSelectorsResponse):
    pass


class PutEventSelectorsRequest(BaseModel):
    TrailName: String
    EventSelectors: Optional[EventSelectors] = None
    AdvancedEventSelectors: Optional[AdvancedEventSelectors] = None
