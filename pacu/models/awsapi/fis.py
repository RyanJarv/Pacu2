# generated by datamodel-codegen:
#   filename:  openapi.yaml
#   timestamp: 2021-12-31T02:49:34+00:00

from __future__ import annotations

from datetime import datetime
from enum import Enum
from typing import Annotated, Any, List, Optional

from pydantic import BaseModel, Extra, Field


class TagValue(BaseModel):
    __root__: Annotated[str, Field(max_length=256, regex='[\\s\\S]*')]


class ValidationException(BaseModel):
    __root__: Any


class ConflictException(ValidationException):
    pass


class ResourceNotFoundException(ValidationException):
    pass


class ServiceQuotaExceededException(ValidationException):
    pass


class TagResourceResponse(BaseModel):
    pass


class UntagResourceResponse(TagResourceResponse):
    pass


class TagKey(BaseModel):
    __root__: Annotated[str, Field(max_length=128, regex='[\\s\\S]+')]


class ActionId(BaseModel):
    __root__: Annotated[str, Field(max_length=128, regex='[\\S]+')]


class ActionDescription(BaseModel):
    __root__: Annotated[str, Field(max_length=512, regex='[\\s\\S]+')]


class ActionParameterMap(BaseModel):
    pass

    class Config:
        extra = Extra.allow


class ActionTargetMap(BaseModel):
    pass

    class Config:
        extra = Extra.allow


class TagMap(BaseModel):
    pass

    class Config:
        extra = Extra.allow


class Action(BaseModel):
    """
    Describes an action. For more information, see <a href="https://docs.aws.amazon.com/fis/latest/userguide/fis-actions-reference.html">AWS FIS actions</a> in the <i>AWS Fault Injection Simulator User Guide</i>.
    """

    id: Optional[ActionId] = None
    description: Optional[ActionDescription] = None
    parameters: Optional[ActionParameterMap] = None
    targets: Optional[ActionTargetMap] = None
    tags: Optional[TagMap] = None


class ActionParameterDescription(ActionDescription):
    pass


class ActionParameterRequired(BaseModel):
    __root__: bool


class ActionParameter(BaseModel):
    """
    Describes a parameter for an action.
    """

    description: Optional[ActionParameterDescription] = None
    required: Optional[ActionParameterRequired] = None


class ActionParameterName(BaseModel):
    __root__: Annotated[str, Field(max_length=64, regex='[\\S]+')]


class ActionSummary(BaseModel):
    """
    Provides a summary of an action.
    """

    id: Optional[ActionId] = None
    description: Optional[ActionDescription] = None
    targets: Optional[ActionTargetMap] = None
    tags: Optional[TagMap] = None


class ActionSummaryList(BaseModel):
    __root__: List[ActionSummary]


class TargetResourceType(ActionId):
    pass


class ActionTarget(BaseModel):
    """
    Describes a target for an action.
    """

    resourceType: Optional[TargetResourceType] = None


class ActionTargetName(ActionParameterName):
    pass


class ClientToken(BaseModel):
    __root__: Annotated[str, Field(max_length=1024, min_length=1, regex='[\\S]+')]


class ExperimentTemplateActionDescription(ActionDescription):
    pass


class ExperimentTemplateActionParameterMap(BaseModel):
    pass

    class Config:
        extra = Extra.allow


class ExperimentTemplateActionTargetMap(BaseModel):
    pass

    class Config:
        extra = Extra.allow


class CreateExperimentTemplateActionInputMap(BaseModel):
    pass

    class Config:
        extra = Extra.allow


class ExperimentTemplateDescription(ActionDescription):
    pass


class CreateExperimentTemplateTargetInputMap(BaseModel):
    pass

    class Config:
        extra = Extra.allow


class RoleArn(BaseModel):
    __root__: Annotated[str, Field(max_length=2048, min_length=20, regex='[\\S]+')]


class StopConditionSource(ActionParameterName):
    pass


class StopConditionValue(BaseModel):
    __root__: Annotated[str, Field(max_length=2048, min_length=20, regex='[\\s\\S]+')]


class ResourceType(ActionParameterName):
    pass


class ExperimentTemplateTargetSelectionMode(ActionParameterName):
    pass


class CreationTime(BaseModel):
    __root__: datetime


class ExperimentTemplateId(ActionParameterName):
    pass


class DeleteExperimentTemplateRequest(BaseModel):
    pass


class ExperimentId(ActionParameterName):
    pass


class ExperimentTargetMap(BaseModel):
    pass

    class Config:
        extra = Extra.allow


class ExperimentActionMap(BaseModel):
    pass

    class Config:
        extra = Extra.allow


class ExperimentStartTime(CreationTime):
    pass


class ExperimentEndTime(CreationTime):
    pass


class ExperimentActionDescription(ActionDescription):
    pass


class ExperimentActionParameterMap(BaseModel):
    pass

    class Config:
        extra = Extra.allow


class ExperimentActionTargetMap(BaseModel):
    pass

    class Config:
        extra = Extra.allow


class ExperimentActionName(ActionParameterName):
    pass


class ExperimentActionParameter(BaseModel):
    __root__: Annotated[str, Field(max_length=1024, regex='[\\S]+')]


class ExperimentActionParameterName(ActionParameterName):
    pass


class ExperimentActionStartAfter(ActionParameterName):
    pass


class ExperimentActionStatus(Enum):
    pending = 'pending'
    initiating = 'initiating'
    running = 'running'
    completed = 'completed'
    cancelled = 'cancelled'
    stopping = 'stopping'
    stopped = 'stopped'
    failed = 'failed'


class ExperimentActionStatusReason(ActionDescription):
    pass


class ExperimentTargetName(ActionParameterName):
    pass


class ExperimentActionTargetName(ActionParameterName):
    pass


class ExperimentStatus(Enum):
    pending = 'pending'
    initiating = 'initiating'
    running = 'running'
    completed = 'completed'
    stopping = 'stopping'
    stopped = 'stopped'
    failed = 'failed'


class ExperimentStatusReason(ActionDescription):
    pass


class ExperimentStopCondition(BaseModel):
    """
    Describes the stop condition for an experiment.
    """

    source: Optional[StopConditionSource] = None
    value: Optional[StopConditionValue] = None


class ExperimentTargetSelectionMode(ActionParameterName):
    pass


class ExperimentTargetFilterPath(BaseModel):
    __root__: Annotated[str, Field(max_length=256, regex='[\\S]+')]


class ExperimentTargetFilterValue(ActionId):
    pass


class ExperimentTemplateTargetMap(BaseModel):
    pass

    class Config:
        extra = Extra.allow


class ExperimentTemplateActionMap(BaseModel):
    pass

    class Config:
        extra = Extra.allow


class LastUpdateTime(CreationTime):
    pass


class ExperimentTemplateActionName(ActionParameterName):
    pass


class ExperimentTemplateActionParameter(ExperimentActionParameter):
    pass


class ExperimentTemplateActionParameterName(ActionParameterName):
    pass


class ExperimentTemplateActionStartAfter(ActionParameterName):
    pass


class ExperimentTemplateTargetName(ActionParameterName):
    pass


class ExperimentTemplateActionTargetName(ActionParameterName):
    pass


class ExperimentTemplateStopCondition(ExperimentStopCondition):
    """
    Describes a stop condition for an experiment template.
    """

    pass


class ExperimentTemplateSummary(BaseModel):
    """
    Provides a summary of an experiment template.
    """

    id: Optional[ExperimentTemplateId] = None
    description: Optional[ExperimentTemplateDescription] = None
    creationTime: Optional[CreationTime] = None
    lastUpdateTime: Optional[LastUpdateTime] = None
    tags: Optional[TagMap] = None


class ExperimentTemplateSummaryList(BaseModel):
    __root__: List[ExperimentTemplateSummary]


class ExperimentTemplateTargetFilterPath(ExperimentTargetFilterPath):
    pass


class ExperimentTemplateTargetFilterValue(ActionId):
    pass


class GetActionRequest(BaseModel):
    pass


class GetExperimentRequest(BaseModel):
    pass


class GetExperimentTemplateRequest(BaseModel):
    pass


class ListActionsMaxResults(BaseModel):
    __root__: Annotated[int, Field(ge=1.0, le=100.0)]


class NextToken(ClientToken):
    pass


class ListActionsRequest(BaseModel):
    pass


class ListExperimentTemplatesMaxResults(ListActionsMaxResults):
    pass


class ListExperimentTemplatesRequest(BaseModel):
    pass


class ListExperimentsMaxResults(ListActionsMaxResults):
    pass


class ListExperimentsRequest(BaseModel):
    pass


class ResourceArn(RoleArn):
    pass


class ListTagsForResourceRequest(BaseModel):
    pass


class StartExperimentRequest(BaseModel):
    clientToken: ClientToken
    experimentTemplateId: ExperimentTemplateId
    tags: Optional[TagMap] = None


class StopExperimentRequest(BaseModel):
    pass


class TagKeyList(BaseModel):
    __root__: List[TagKey]


class TagResourceRequest(BaseModel):
    tags: TagMap


class UntagResourceRequest(BaseModel):
    pass


class UpdateExperimentTemplateActionInputMap(BaseModel):
    pass

    class Config:
        extra = Extra.allow


class UpdateExperimentTemplateTargetInputMap(BaseModel):
    pass

    class Config:
        extra = Extra.allow


class CreateExperimentTemplateStopConditionInput(BaseModel):
    """
    Specifies a stop condition for an experiment template.
    """

    source: StopConditionSource
    value: Optional[StopConditionValue] = None


class GetActionResponse(BaseModel):
    action: Optional[Action] = None


class ListActionsResponse(BaseModel):
    actions: Optional[ActionSummaryList] = None
    nextToken: Optional[NextToken] = None


class ListExperimentTemplatesResponse(BaseModel):
    experimentTemplates: Optional[ExperimentTemplateSummaryList] = None
    nextToken: Optional[NextToken] = None


class ListTagsForResourceResponse(BaseModel):
    tags: Optional[TagMap] = None


class UpdateExperimentTemplateStopConditionInput(
    CreateExperimentTemplateStopConditionInput
):
    """
    Specifies a stop condition for an experiment. You can define a stop condition as a CloudWatch alarm.
    """

    pass


class ExperimentTemplateActionStartAfterList(BaseModel):
    __root__: List[ExperimentTemplateActionStartAfter]


class CreateExperimentTemplateStopConditionInputList(BaseModel):
    __root__: List[CreateExperimentTemplateStopConditionInput]


class CreateExperimentTemplateRequest(BaseModel):
    clientToken: ClientToken
    description: ExperimentTemplateDescription
    stopConditions: CreateExperimentTemplateStopConditionInputList
    targets: Optional[CreateExperimentTemplateTargetInputMap] = None
    actions: CreateExperimentTemplateActionInputMap
    roleArn: RoleArn
    tags: Optional[TagMap] = None


class ResourceArnList(BaseModel):
    __root__: Annotated[List[ResourceArn], Field(max_items=5)]


class ExperimentState(BaseModel):
    """
    Describes the state of an experiment.
    """

    status: Optional[ExperimentStatus] = None
    reason: Optional[ExperimentStatusReason] = None


class ExperimentStopConditionList(BaseModel):
    __root__: List[ExperimentStopCondition]


class Experiment(BaseModel):
    """
    Describes an experiment.
    """

    id: Optional[ExperimentId] = None
    experimentTemplateId: Optional[ExperimentTemplateId] = None
    roleArn: Optional[RoleArn] = None
    state: Optional[ExperimentState] = None
    targets: Optional[ExperimentTargetMap] = None
    actions: Optional[ExperimentActionMap] = None
    stopConditions: Optional[ExperimentStopConditionList] = None
    creationTime: Optional[CreationTime] = None
    startTime: Optional[ExperimentStartTime] = None
    endTime: Optional[ExperimentEndTime] = None
    tags: Optional[TagMap] = None


class ExperimentActionStartAfterList(BaseModel):
    __root__: List[ExperimentActionStartAfter]


class ExperimentActionState(BaseModel):
    """
    Describes the state of an action.
    """

    status: Optional[ExperimentActionStatus] = None
    reason: Optional[ExperimentActionStatusReason] = None


class ExperimentAction(BaseModel):
    """
    Describes the action for an experiment.
    """

    actionId: Optional[ActionId] = None
    description: Optional[ExperimentActionDescription] = None
    parameters: Optional[ExperimentActionParameterMap] = None
    targets: Optional[ExperimentActionTargetMap] = None
    startAfter: Optional[ExperimentActionStartAfterList] = None
    state: Optional[ExperimentActionState] = None


class ExperimentSummary(BaseModel):
    """
    Provides a summary of an experiment.
    """

    id: Optional[ExperimentId] = None
    experimentTemplateId: Optional[ExperimentTemplateId] = None
    state: Optional[ExperimentState] = None
    creationTime: Optional[CreationTime] = None
    tags: Optional[TagMap] = None


class ExperimentSummaryList(BaseModel):
    __root__: List[ExperimentSummary]


class ExperimentTargetFilterValues(BaseModel):
    __root__: List[ExperimentTargetFilterValue]


class ExperimentTargetFilter(BaseModel):
    """
    Describes a filter used for the target resources in an experiment.
    """

    path: Optional[ExperimentTargetFilterPath] = None
    values: Optional[ExperimentTargetFilterValues] = None


class ExperimentTemplateStopConditionList(BaseModel):
    __root__: List[ExperimentTemplateStopCondition]


class ExperimentTemplateAction(BaseModel):
    """
    Describes an action for an experiment template.
    """

    actionId: Optional[ActionId] = None
    description: Optional[ExperimentTemplateActionDescription] = None
    parameters: Optional[ExperimentTemplateActionParameterMap] = None
    targets: Optional[ExperimentTemplateActionTargetMap] = None
    startAfter: Optional[ExperimentTemplateActionStartAfterList] = None


class ExperimentTemplateTargetFilterValues(BaseModel):
    __root__: List[ExperimentTemplateTargetFilterValue]


class ExperimentTemplateTargetFilter(BaseModel):
    """
    Describes a filter used for the target resources in an experiment template.
    """

    path: Optional[ExperimentTemplateTargetFilterPath] = None
    values: Optional[ExperimentTemplateTargetFilterValues] = None


class ExperimentTemplateTargetInputFilter(BaseModel):
    """
    Describes a filter used for the target resource input in an experiment template.
    """

    path: ExperimentTemplateTargetFilterPath
    values: ExperimentTemplateTargetFilterValues


class UpdateExperimentTemplateStopConditionInputList(BaseModel):
    __root__: List[UpdateExperimentTemplateStopConditionInput]


class UpdateExperimentTemplateRequest(BaseModel):
    description: Optional[ExperimentTemplateDescription] = None
    stopConditions: Optional[UpdateExperimentTemplateStopConditionInputList] = None
    targets: Optional[UpdateExperimentTemplateTargetInputMap] = None
    actions: Optional[UpdateExperimentTemplateActionInputMap] = None
    roleArn: Optional[RoleArn] = None


class CreateExperimentTemplateActionInput(BaseModel):
    """
    Specifies an action for an experiment template.
    """

    actionId: ActionId
    description: Optional[ExperimentTemplateActionDescription] = None
    parameters: Optional[ExperimentTemplateActionParameterMap] = None
    targets: Optional[ExperimentTemplateActionTargetMap] = None
    startAfter: Optional[ExperimentTemplateActionStartAfterList] = None


class GetExperimentResponse(BaseModel):
    experiment: Optional[Experiment] = None


class ListExperimentsResponse(BaseModel):
    experiments: Optional[ExperimentSummaryList] = None
    nextToken: Optional[NextToken] = None


class StartExperimentResponse(GetExperimentResponse):
    pass


class StopExperimentResponse(GetExperimentResponse):
    pass


class UpdateExperimentTemplateActionInputItem(ExperimentTemplateAction):
    """
    Specifies an action for an experiment template.
    """

    pass


class ExperimentTemplate(BaseModel):
    """
    Describes an experiment template.
    """

    id: Optional[ExperimentTemplateId] = None
    description: Optional[ExperimentTemplateDescription] = None
    targets: Optional[ExperimentTemplateTargetMap] = None
    actions: Optional[ExperimentTemplateActionMap] = None
    stopConditions: Optional[ExperimentTemplateStopConditionList] = None
    creationTime: Optional[CreationTime] = None
    lastUpdateTime: Optional[LastUpdateTime] = None
    roleArn: Optional[RoleArn] = None
    tags: Optional[TagMap] = None


class ExperimentTemplateTargetFilterInputList(BaseModel):
    __root__: List[ExperimentTemplateTargetInputFilter]


class ExperimentTargetFilterList(BaseModel):
    __root__: List[ExperimentTargetFilter]


class ExperimentTarget(BaseModel):
    """
    Describes a target for an experiment.
    """

    resourceType: Optional[ResourceType] = None
    resourceArns: Optional[ResourceArnList] = None
    resourceTags: Optional[TagMap] = None
    filters: Optional[ExperimentTargetFilterList] = None
    selectionMode: Optional[ExperimentTargetSelectionMode] = None


class ExperimentTemplateTargetFilterList(BaseModel):
    __root__: List[ExperimentTemplateTargetFilter]


class ExperimentTemplateTarget(BaseModel):
    """
    Describes a target for an experiment template.
    """

    resourceType: Optional[ResourceType] = None
    resourceArns: Optional[ResourceArnList] = None
    resourceTags: Optional[TagMap] = None
    filters: Optional[ExperimentTemplateTargetFilterList] = None
    selectionMode: Optional[ExperimentTemplateTargetSelectionMode] = None


class CreateExperimentTemplateResponse(BaseModel):
    experimentTemplate: Optional[ExperimentTemplate] = None


class CreateExperimentTemplateTargetInput(BaseModel):
    """
    Specifies a target for an experiment. You must specify at least one Amazon Resource Name (ARN) or at least one resource tag. You cannot specify both ARNs and tags.
    """

    resourceType: ResourceType
    resourceArns: Optional[ResourceArnList] = None
    resourceTags: Optional[TagMap] = None
    filters: Optional[ExperimentTemplateTargetFilterInputList] = None
    selectionMode: ExperimentTemplateTargetSelectionMode


class DeleteExperimentTemplateResponse(CreateExperimentTemplateResponse):
    pass


class GetExperimentTemplateResponse(CreateExperimentTemplateResponse):
    pass


class UpdateExperimentTemplateResponse(CreateExperimentTemplateResponse):
    pass


class UpdateExperimentTemplateTargetInput(CreateExperimentTemplateTargetInput):
    """
    Specifies a target for an experiment. You must specify at least one Amazon Resource Name (ARN) or at least one resource tag. You cannot specify both.
    """

    pass
