# generated by datamodel-codegen:
#   filename:  openapi.yaml
#   timestamp: 2021-12-31T02:45:19+00:00

from __future__ import annotations

from enum import Enum
from typing import Annotated, Any, List, Optional

from pydantic import BaseModel, Extra, Field


class BadRequestException(BaseModel):
    __root__: Any


class ConcurrentModificationException(BadRequestException):
    pass


class NotFoundException(BadRequestException):
    pass


class UnauthorizedException(BadRequestException):
    pass


class InternalFailureException(BadRequestException):
    pass


class LimitExceededException(BadRequestException):
    pass


class ApiKeyLimitExceededException(BadRequestException):
    pass


class ApiKeyValidityOutOfBoundsException(BadRequestException):
    pass


class String(BaseModel):
    __root__: str


class Boolean(BaseModel):
    __root__: bool


class RelationalDatabaseSourceType(Enum):
    RDS_HTTP_ENDPOINT = 'RDS_HTTP_ENDPOINT'


class RdsHttpEndpointConfig(BaseModel):
    """
    The Amazon RDS HTTP endpoint configuration.
    """

    awsRegion: Optional[String] = None
    dbClusterIdentifier: Optional[String] = None
    databaseName: Optional[String] = None
    schema_: Annotated[Optional[String], Field(alias='schema')] = None
    awsSecretStoreArn: Optional[String] = None


class ConflictHandlerType(Enum):
    OPTIMISTIC_CONCURRENCY = 'OPTIMISTIC_CONCURRENCY'
    LAMBDA = 'LAMBDA'
    AUTOMERGE = 'AUTOMERGE'
    NONE = 'NONE'


class ConflictDetectionType(Enum):
    VERSION = 'VERSION'
    NONE = 'NONE'


class LambdaConflictHandlerConfig(BaseModel):
    """
    The <code>LambdaConflictHandlerConfig</code> object when configuring LAMBDA as the Conflict Handler.
    """

    lambdaConflictHandlerArn: Optional[String] = None


class FieldLogLevel(Enum):
    NONE = 'NONE'
    ERROR = 'ERROR'
    ALL = 'ALL'


class DefaultAction(Enum):
    ALLOW = 'ALLOW'
    DENY = 'DENY'


class Long(BaseModel):
    __root__: int


class TagValue(BaseModel):
    __root__: Annotated[
        str, Field(description='The value for the tag.', max_length=256)
    ]


class TTL(BaseModel):
    __root__: Annotated[int, Field(ge=0.0, le=3600.0)]


class ApiLimitExceededException(BadRequestException):
    pass


class FunctionsIds(BaseModel):
    __root__: List[String]


class CachingKeys(FunctionsIds):
    pass


class DeleteApiCacheResponse(BaseModel):
    """
    Represents the output of a <code>DeleteApiCache</code> operation.
    """

    pass


class DeleteApiKeyResponse(DeleteApiCacheResponse):
    pass


class DeleteDataSourceResponse(DeleteApiCacheResponse):
    pass


class DeleteFunctionResponse(DeleteApiCacheResponse):
    pass


class DeleteGraphqlApiResponse(DeleteApiCacheResponse):
    pass


class AccessDeniedException(BadRequestException):
    pass


class DeleteResolverResponse(DeleteApiCacheResponse):
    pass


class DeleteTypeResponse(DeleteApiCacheResponse):
    pass


class FlushApiCacheResponse(DeleteApiCacheResponse):
    """
    Represents the output of a <code>FlushApiCache</code> operation.
    """

    pass


class GraphQLSchemaException(BadRequestException):
    pass


class TagResourceResponse(DeleteApiCacheResponse):
    pass


class UntagResourceResponse(DeleteApiCacheResponse):
    pass


class TagKey(BaseModel):
    __root__: Annotated[
        str,
        Field(
            description='The key for the tag.',
            max_length=128,
            min_length=1,
            regex='^(?!aws:)[ a-zA-Z+-=._:/]+$',
        ),
    ]


class AuthenticationType(Enum):
    API_KEY = 'API_KEY'
    AWS_IAM = 'AWS_IAM'
    AMAZON_COGNITO_USER_POOLS = 'AMAZON_COGNITO_USER_POOLS'
    OPENID_CONNECT = 'OPENID_CONNECT'
    AWS_LAMBDA = 'AWS_LAMBDA'


class OpenIDConnectConfig(BaseModel):
    """
    Describes an OpenID Connect configuration.
    """

    issuer: String
    clientId: Optional[String] = None
    iatTTL: Optional[Long] = None
    authTTL: Optional[Long] = None


class CognitoUserPoolConfig(BaseModel):
    """
    Describes an Amazon Cognito user pool configuration.
    """

    userPoolId: String
    awsRegion: String
    appIdClientRegex: Optional[String] = None


class LambdaAuthorizerConfig(BaseModel):
    """
    A <code>LambdaAuthorizerConfig</code> holds configuration on how to authorize AppSync API access when using the <code>AWS_LAMBDA</code> authorizer mode. Be aware that an AppSync API may have only one Lambda authorizer configured at a time.
    """

    authorizerResultTtlInSeconds: Optional[TTL] = None
    authorizerUri: String
    identityValidationExpression: Optional[String] = None


class ApiCachingBehavior(Enum):
    FULL_REQUEST_CACHING = 'FULL_REQUEST_CACHING'
    PER_RESOLVER_CACHING = 'PER_RESOLVER_CACHING'


class ApiCacheType(Enum):
    T2_SMALL = 'T2_SMALL'
    T2_MEDIUM = 'T2_MEDIUM'
    R4_LARGE = 'R4_LARGE'
    R4_XLARGE = 'R4_XLARGE'
    R4_2XLARGE = 'R4_2XLARGE'
    R4_4XLARGE = 'R4_4XLARGE'
    R4_8XLARGE = 'R4_8XLARGE'
    SMALL = 'SMALL'
    MEDIUM = 'MEDIUM'
    LARGE = 'LARGE'
    XLARGE = 'XLARGE'
    LARGE_2X = 'LARGE_2X'
    LARGE_4X = 'LARGE_4X'
    LARGE_8X = 'LARGE_8X'
    LARGE_12X = 'LARGE_12X'


class ApiCacheStatus(Enum):
    AVAILABLE = 'AVAILABLE'
    CREATING = 'CREATING'
    DELETING = 'DELETING'
    MODIFYING = 'MODIFYING'
    FAILED = 'FAILED'


class ApiCache(BaseModel):
    """
    The <code>ApiCache</code> object.
    """

    ttl: Optional[Long] = None
    apiCachingBehavior: Optional[ApiCachingBehavior] = None
    transitEncryptionEnabled: Optional[Boolean] = None
    atRestEncryptionEnabled: Optional[Boolean] = None
    type: Optional[ApiCacheType] = None
    status: Optional[ApiCacheStatus] = None


class ApiKey(BaseModel):
    """
    <p>Describes an API key.</p> <p>Customers invoke AppSync GraphQL API operations with API keys as an identity mechanism. There are two key versions:</p> <p> <b>da1</b>: This version was introduced at launch in November 2017. These keys always expire after 7 days. Key expiration is managed by Amazon DynamoDB TTL. The keys ceased to be valid after February 21, 2018 and should not be used after that date.</p> <ul> <li> <p> <code>ListApiKeys</code> returns the expiration time in milliseconds.</p> </li> <li> <p> <code>CreateApiKey</code> returns the expiration time in milliseconds.</p> </li> <li> <p> <code>UpdateApiKey</code> is not available for this key version.</p> </li> <li> <p> <code>DeleteApiKey</code> deletes the item from the table.</p> </li> <li> <p>Expiration is stored in Amazon DynamoDB as milliseconds. This results in a bug where keys are not automatically deleted because DynamoDB expects the TTL to be stored in seconds. As a one-time action, we will delete these keys from the table after February 21, 2018.</p> </li> </ul> <p> <b>da2</b>: This version was introduced in February 2018 when AppSync added support to extend key expiration.</p> <ul> <li> <p> <code>ListApiKeys</code> returns the expiration time and deletion time in seconds.</p> </li> <li> <p> <code>CreateApiKey</code> returns the expiration time and deletion time in seconds and accepts a user-provided expiration time in seconds.</p> </li> <li> <p> <code>UpdateApiKey</code> returns the expiration time and and deletion time in seconds and accepts a user-provided expiration time in seconds. Expired API keys are kept for 60 days after the expiration time. Key expiration time can be updated while the key is not deleted. </p> </li> <li> <p> <code>DeleteApiKey</code> deletes the item from the table.</p> </li> <li> <p>Expiration is stored in Amazon DynamoDB as seconds. After the expiration time, using the key to authenticate will fail. But the key can be reinstated before deletion.</p> </li> <li> <p>Deletion is stored in Amazon DynamoDB as seconds. The key will be deleted after deletion time. </p> </li> </ul>
    """

    id: Optional[String] = None
    description: Optional[String] = None
    expires: Optional[Long] = None
    deletes: Optional[Long] = None


class ApiKeys(BaseModel):
    __root__: List[ApiKey]


class AuthorizationType(Enum):
    AWS_IAM = 'AWS_IAM'


class AwsIamConfig(BaseModel):
    """
    The Identity and Access Management configuration.
    """

    signingRegion: Optional[String] = None
    signingServiceName: Optional[String] = None


class Blob(String):
    pass


class BooleanValue(Boolean):
    pass


class CachingConfig(BaseModel):
    """
    The caching configuration for a resolver that has caching enabled.
    """

    ttl: Optional[Long] = None
    cachingKeys: Optional[CachingKeys] = None


class CreateApiCacheRequest(BaseModel):
    """
    Represents the input of a <code>CreateApiCache</code> operation.
    """

    ttl: Long
    transitEncryptionEnabled: Optional[Boolean] = None
    atRestEncryptionEnabled: Optional[Boolean] = None
    apiCachingBehavior: ApiCachingBehavior
    type: ApiCacheType


class CreateApiKeyRequest(BaseModel):
    description: Optional[String] = None
    expires: Optional[Long] = None


class ResourceName(BaseModel):
    __root__: Annotated[
        str, Field(max_length=65536, min_length=1, regex='[_A-Za-z][_0-9A-Za-z]*')
    ]


class DataSourceType(Enum):
    AWS_LAMBDA = 'AWS_LAMBDA'
    AMAZON_DYNAMODB = 'AMAZON_DYNAMODB'
    AMAZON_ELASTICSEARCH = 'AMAZON_ELASTICSEARCH'
    NONE = 'NONE'
    HTTP = 'HTTP'
    RELATIONAL_DATABASE = 'RELATIONAL_DATABASE'


class LambdaDataSourceConfig(BaseModel):
    """
    Describes an Amazon Web Services Lambda data source configuration.
    """

    lambdaFunctionArn: String


class ElasticsearchDataSourceConfig(BaseModel):
    """
    Describes an Elasticsearch data source configuration.
    """

    endpoint: String
    awsRegion: String


class RelationalDatabaseDataSourceConfig(BaseModel):
    """
    Describes a relational database data source configuration.
    """

    relationalDatabaseSourceType: Optional[RelationalDatabaseSourceType] = None
    rdsHttpEndpointConfig: Optional[RdsHttpEndpointConfig] = None


class MappingTemplate(BaseModel):
    __root__: Annotated[str, Field(max_length=65536, min_length=1)]


class SyncConfig(BaseModel):
    """
    <p>Describes a Sync configuration for a resolver.</p> <p>Contains information on which Conflict Detection as well as Resolution strategy should be performed when the resolver is invoked.</p>
    """

    conflictHandler: Optional[ConflictHandlerType] = None
    conflictDetection: Optional[ConflictDetectionType] = None
    lambdaConflictHandlerConfig: Optional[LambdaConflictHandlerConfig] = None


class CreateFunctionRequest(BaseModel):
    name: ResourceName
    description: Optional[String] = None
    dataSourceName: ResourceName
    requestMappingTemplate: Optional[MappingTemplate] = None
    responseMappingTemplate: Optional[MappingTemplate] = None
    functionVersion: String
    syncConfig: Optional[SyncConfig] = None


class FunctionConfiguration(BaseModel):
    """
    A function is a reusable entity. Multiple functions can be used to compose the resolver logic.
    """

    functionId: Optional[String] = None
    functionArn: Optional[String] = None
    name: Optional[ResourceName] = None
    description: Optional[String] = None
    dataSourceName: Optional[ResourceName] = None
    requestMappingTemplate: Optional[MappingTemplate] = None
    responseMappingTemplate: Optional[MappingTemplate] = None
    functionVersion: Optional[String] = None
    syncConfig: Optional[SyncConfig] = None


class LogConfig(BaseModel):
    """
    The CloudWatch Logs configuration.
    """

    fieldLogLevel: FieldLogLevel
    cloudWatchLogsRoleArn: String
    excludeVerboseContent: Optional[Boolean] = None


class UserPoolConfig1(BaseModel):
    """
    Describes an Amazon Cognito user pool configuration.
    """

    userPoolId: String
    awsRegion: String
    defaultAction: DefaultAction
    appIdClientRegex: Optional[String] = None


class TagMap(BaseModel):
    """
    A map with keys of <code>TagKey</code> objects and values of <code>TagValue</code> objects.
    """

    pass

    class Config:
        extra = Extra.allow


class ResolverKind(Enum):
    UNIT = 'UNIT'
    PIPELINE = 'PIPELINE'


class PipelineConfig(BaseModel):
    """
    The pipeline configuration for a resolver of kind <code>PIPELINE</code>.
    """

    functions: Optional[FunctionsIds] = None


class CreateResolverRequest(BaseModel):
    fieldName: ResourceName
    dataSourceName: Optional[ResourceName] = None
    requestMappingTemplate: Optional[MappingTemplate] = None
    responseMappingTemplate: Optional[MappingTemplate] = None
    kind: Optional[ResolverKind] = None
    pipelineConfig: Optional[PipelineConfig] = None
    syncConfig: Optional[SyncConfig] = None
    cachingConfig: Optional[CachingConfig] = None


class Resolver(BaseModel):
    """
    Describes a resolver.
    """

    typeName: Optional[ResourceName] = None
    fieldName: Optional[ResourceName] = None
    dataSourceName: Optional[ResourceName] = None
    resolverArn: Optional[String] = None
    requestMappingTemplate: Optional[MappingTemplate] = None
    responseMappingTemplate: Optional[MappingTemplate] = None
    kind: Optional[ResolverKind] = None
    pipelineConfig: Optional[PipelineConfig] = None
    syncConfig: Optional[SyncConfig] = None
    cachingConfig: Optional[CachingConfig] = None


class TypeDefinitionFormat(Enum):
    SDL = 'SDL'
    JSON = 'JSON'


class CreateTypeRequest(BaseModel):
    definition: String
    format: TypeDefinitionFormat


class Type(BaseModel):
    """
    Describes a type.
    """

    name: Optional[ResourceName] = None
    description: Optional[String] = None
    arn: Optional[String] = None
    definition: Optional[String] = None
    format: Optional[TypeDefinitionFormat] = None


class DeleteApiCacheRequest(BaseModel):
    """
    Represents the input of a <code>DeleteApiCache</code> operation.
    """

    pass


class DeleteApiKeyRequest(BaseModel):
    pass


class DeleteDataSourceRequest(BaseModel):
    pass


class DeleteFunctionRequest(BaseModel):
    pass


class DeleteGraphqlApiRequest(BaseModel):
    pass


class DeleteResolverRequest(BaseModel):
    pass


class DeleteTypeRequest(BaseModel):
    pass


class FlushApiCacheRequest(BaseModel):
    """
    Represents the input of a <code>FlushApiCache</code> operation.
    """

    pass


class Functions(BaseModel):
    __root__: List[FunctionConfiguration]


class GetApiCacheRequest(BaseModel):
    """
    Represents the input of a <code>GetApiCache</code> operation.
    """

    pass


class GetDataSourceRequest(BaseModel):
    pass


class GetFunctionRequest(BaseModel):
    pass


class GetGraphqlApiRequest(BaseModel):
    pass


class GetIntrospectionSchemaRequest(BaseModel):
    pass


class GetResolverRequest(BaseModel):
    pass


class GetSchemaCreationStatusRequest(BaseModel):
    pass


class SchemaStatus(Enum):
    PROCESSING = 'PROCESSING'
    ACTIVE = 'ACTIVE'
    DELETING = 'DELETING'
    FAILED = 'FAILED'
    SUCCESS = 'SUCCESS'
    NOT_APPLICABLE = 'NOT_APPLICABLE'


class GetTypeRequest(BaseModel):
    pass


class MapOfStringToString(BaseModel):
    pass

    class Config:
        extra = Extra.allow


class PaginationToken(BaseModel):
    __root__: Annotated[str, Field(max_length=65536, min_length=1, regex='[\\\\S]+')]


class MaxResults(BaseModel):
    __root__: Annotated[int, Field(ge=0.0, le=25.0)]


class ListApiKeysRequest(BaseModel):
    pass


class ListDataSourcesRequest(BaseModel):
    pass


class ListFunctionsRequest(BaseModel):
    pass


class ListGraphqlApisRequest(BaseModel):
    pass


class ListResolversByFunctionRequest(BaseModel):
    pass


class Resolvers(BaseModel):
    __root__: List[Resolver]


class ListResolversRequest(BaseModel):
    pass


class ResourceArn(BaseModel):
    __root__: Annotated[
        str,
        Field(
            max_length=75,
            min_length=70,
            regex='^arn:aws:appsync:[A-Za-z0-9_/.-]{0,63}:\\d{12}:apis/[0-9A-Za-z_-]{26}$',
        ),
    ]


class ListTagsForResourceRequest(BaseModel):
    pass


class ListTypesRequest(BaseModel):
    pass


class TypeList(BaseModel):
    __root__: List[Type]


class StartSchemaCreationRequest(BaseModel):
    definition: Blob


class TagKeyList(BaseModel):
    __root__: Annotated[List[TagKey], Field(max_items=50, min_items=1)]


class TagResourceRequest(BaseModel):
    tags: TagMap


class UntagResourceRequest(BaseModel):
    pass


class UpdateApiCacheRequest(BaseModel):
    """
    Represents the input of a <code>UpdateApiCache</code> operation.
    """

    ttl: Long
    apiCachingBehavior: ApiCachingBehavior
    type: ApiCacheType


class UpdateApiKeyRequest(BaseModel):
    description: Optional[String] = None
    expires: Optional[Long] = None


class UpdateFunctionRequest(BaseModel):
    name: ResourceName
    description: Optional[String] = None
    dataSourceName: ResourceName
    requestMappingTemplate: Optional[MappingTemplate] = None
    responseMappingTemplate: Optional[MappingTemplate] = None
    functionVersion: String
    syncConfig: Optional[SyncConfig] = None


class UpdateResolverRequest(BaseModel):
    dataSourceName: Optional[ResourceName] = None
    requestMappingTemplate: Optional[MappingTemplate] = None
    responseMappingTemplate: Optional[MappingTemplate] = None
    kind: Optional[ResolverKind] = None
    pipelineConfig: Optional[PipelineConfig] = None
    syncConfig: Optional[SyncConfig] = None
    cachingConfig: Optional[CachingConfig] = None


class UpdateTypeRequest(BaseModel):
    definition: Optional[String] = None
    format: TypeDefinitionFormat


class CreateApiCacheResponse(BaseModel):
    """
    Represents the output of a <code>CreateApiCache</code> operation.
    """

    apiCache: Optional[ApiCache] = None


class CreateApiKeyResponse(BaseModel):
    apiKey: Optional[ApiKey] = None


class DeltaSyncConfig(BaseModel):
    """
    Describes a Delta Sync configuration.
    """

    baseTableTTL: Optional[Long] = None
    deltaSyncTableName: Optional[String] = None
    deltaSyncTableTTL: Optional[Long] = None


class AuthorizationConfig(BaseModel):
    """
    The authorization config in case the HTTP endpoint requires authorization.
    """

    authorizationType: AuthorizationType
    awsIamConfig: Optional[AwsIamConfig] = None


class CreateFunctionResponse(BaseModel):
    functionConfiguration: Optional[FunctionConfiguration] = None


class AdditionalAuthenticationProvider(BaseModel):
    """
    Describes an additional authentication provider.
    """

    authenticationType: Optional[AuthenticationType] = None
    openIDConnectConfig: Optional[OpenIDConnectConfig] = None
    userPoolConfig: Optional[CognitoUserPoolConfig] = None
    lambdaAuthorizerConfig: Optional[LambdaAuthorizerConfig] = None


class CreateResolverResponse(BaseModel):
    resolver: Optional[Resolver] = None


class CreateTypeResponse(BaseModel):
    type: Optional[Type] = None


class GetApiCacheResponse(CreateApiCacheResponse):
    """
    Represents the output of a <code>GetApiCache</code> operation.
    """

    pass


class GetFunctionResponse(CreateFunctionResponse):
    pass


class GetIntrospectionSchemaResponse(BaseModel):
    schema_: Annotated[Optional[Blob], Field(alias='schema')] = None


class GetResolverResponse(CreateResolverResponse):
    pass


class GetSchemaCreationStatusResponse(BaseModel):
    status: Optional[SchemaStatus] = None
    details: Optional[String] = None


class GetTypeResponse(CreateTypeResponse):
    pass


class ListApiKeysResponse(BaseModel):
    apiKeys: Optional[ApiKeys] = None
    nextToken: Optional[PaginationToken] = None


class ListFunctionsResponse(BaseModel):
    functions: Optional[Functions] = None
    nextToken: Optional[PaginationToken] = None


class ListResolversResponse(BaseModel):
    resolvers: Optional[Resolvers] = None
    nextToken: Optional[PaginationToken] = None


class ListResolversByFunctionResponse(ListResolversResponse):
    pass


class ListTagsForResourceResponse(BaseModel):
    tags: Optional[TagMap] = None


class ListTypesResponse(BaseModel):
    types: Optional[TypeList] = None
    nextToken: Optional[PaginationToken] = None


class StartSchemaCreationResponse(BaseModel):
    status: Optional[SchemaStatus] = None


class UpdateApiCacheResponse(CreateApiCacheResponse):
    """
    Represents the output of a <code>UpdateApiCache</code> operation.
    """

    pass


class UpdateApiKeyResponse(CreateApiKeyResponse):
    pass


class UpdateFunctionResponse(CreateFunctionResponse):
    pass


class UpdateResolverResponse(CreateResolverResponse):
    pass


class UpdateTypeResponse(CreateTypeResponse):
    pass


class AdditionalAuthenticationProviders(BaseModel):
    __root__: List[AdditionalAuthenticationProvider]


class DynamodbDataSourceConfig(BaseModel):
    """
    Describes an Amazon DynamoDB data source configuration.
    """

    tableName: String
    awsRegion: String
    useCallerCredentials: Optional[Boolean] = None
    deltaSyncConfig: Optional[DeltaSyncConfig] = None
    versioned: Optional[Boolean] = None


class HttpDataSourceConfig(BaseModel):
    """
    Describes an HTTP data source configuration.
    """

    endpoint: Optional[String] = None
    authorizationConfig: Optional[AuthorizationConfig] = None


class CreateDataSourceRequest(BaseModel):
    name: ResourceName
    description: Optional[String] = None
    type: DataSourceType
    serviceRoleArn: Optional[String] = None
    dynamodbConfig: Optional[DynamodbDataSourceConfig] = None
    lambdaConfig: Optional[LambdaDataSourceConfig] = None
    elasticsearchConfig: Optional[ElasticsearchDataSourceConfig] = None
    httpConfig: Optional[HttpDataSourceConfig] = None
    relationalDatabaseConfig: Optional[RelationalDatabaseDataSourceConfig] = None


class DataSource(BaseModel):
    """
    Describes a data source.
    """

    dataSourceArn: Optional[String] = None
    name: Optional[ResourceName] = None
    description: Optional[String] = None
    type: Optional[DataSourceType] = None
    serviceRoleArn: Optional[String] = None
    dynamodbConfig: Optional[DynamodbDataSourceConfig] = None
    lambdaConfig: Optional[LambdaDataSourceConfig] = None
    elasticsearchConfig: Optional[ElasticsearchDataSourceConfig] = None
    httpConfig: Optional[HttpDataSourceConfig] = None
    relationalDatabaseConfig: Optional[RelationalDatabaseDataSourceConfig] = None


class CreateGraphqlApiRequest(BaseModel):
    name: String
    logConfig: Optional[LogConfig] = None
    authenticationType: AuthenticationType
    userPoolConfig: Optional[UserPoolConfig1] = None
    openIDConnectConfig: Optional[OpenIDConnectConfig] = None
    tags: Optional[TagMap] = None
    additionalAuthenticationProviders: Optional[
        AdditionalAuthenticationProviders
    ] = None
    xrayEnabled: Optional[Boolean] = None
    lambdaAuthorizerConfig: Optional[LambdaAuthorizerConfig] = None


class GraphqlApi(BaseModel):
    """
    Describes a GraphQL API.
    """

    name: Optional[ResourceName] = None
    apiId: Optional[String] = None
    authenticationType: Optional[AuthenticationType] = None
    logConfig: Optional[LogConfig] = None
    userPoolConfig: Optional[UserPoolConfig1] = None
    openIDConnectConfig: Optional[OpenIDConnectConfig] = None
    arn: Optional[String] = None
    uris: Optional[MapOfStringToString] = None
    tags: Optional[TagMap] = None
    additionalAuthenticationProviders: Optional[
        AdditionalAuthenticationProviders
    ] = None
    xrayEnabled: Optional[Boolean] = None
    wafWebAclArn: Optional[String] = None
    lambdaAuthorizerConfig: Optional[LambdaAuthorizerConfig] = None


class DataSources(BaseModel):
    __root__: List[DataSource]


class GraphqlApis(BaseModel):
    __root__: List[GraphqlApi]


class UpdateDataSourceRequest(BaseModel):
    description: Optional[String] = None
    type: DataSourceType
    serviceRoleArn: Optional[String] = None
    dynamodbConfig: Optional[DynamodbDataSourceConfig] = None
    lambdaConfig: Optional[LambdaDataSourceConfig] = None
    elasticsearchConfig: Optional[ElasticsearchDataSourceConfig] = None
    httpConfig: Optional[HttpDataSourceConfig] = None
    relationalDatabaseConfig: Optional[RelationalDatabaseDataSourceConfig] = None


class UpdateGraphqlApiRequest(BaseModel):
    name: String
    logConfig: Optional[LogConfig] = None
    authenticationType: Optional[AuthenticationType] = None
    userPoolConfig: Optional[UserPoolConfig1] = None
    openIDConnectConfig: Optional[OpenIDConnectConfig] = None
    additionalAuthenticationProviders: Optional[
        AdditionalAuthenticationProviders
    ] = None
    xrayEnabled: Optional[Boolean] = None
    lambdaAuthorizerConfig: Optional[LambdaAuthorizerConfig] = None


class CreateDataSourceResponse(BaseModel):
    dataSource: Optional[DataSource] = None


class CreateGraphqlApiResponse(BaseModel):
    graphqlApi: Optional[GraphqlApi] = None


class GetDataSourceResponse(CreateDataSourceResponse):
    pass


class GetGraphqlApiResponse(CreateGraphqlApiResponse):
    pass


class ListDataSourcesResponse(BaseModel):
    dataSources: Optional[DataSources] = None
    nextToken: Optional[PaginationToken] = None


class ListGraphqlApisResponse(BaseModel):
    graphqlApis: Optional[GraphqlApis] = None
    nextToken: Optional[PaginationToken] = None


class UpdateDataSourceResponse(CreateDataSourceResponse):
    pass


class UpdateGraphqlApiResponse(CreateGraphqlApiResponse):
    pass
