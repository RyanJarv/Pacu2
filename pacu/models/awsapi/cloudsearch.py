# generated by datamodel-codegen:
#   filename:  openapi.yaml
#   timestamp: 2021-12-31T02:46:13+00:00

from __future__ import annotations

from datetime import datetime
from enum import Enum
from typing import Annotated, Any, List, Optional

from pydantic import BaseModel, Extra, Field


class BaseException(BaseModel):
    __root__: Any


class InternalException(BaseException):
    pass


class ResourceNotFoundException(BaseException):
    pass


class LimitExceededException(BaseException):
    pass


class ResourceAlreadyExistsException(BaseException):
    pass


class ValidationException(BaseException):
    pass


class StandardName(BaseModel):
    __root__: Annotated[
        str,
        Field(
            description='Names must begin with a letter and can contain the following characters: a-z (lowercase), 0-9, and _ (underscore).',
            max_length=64,
            min_length=1,
            regex='[a-z][a-z0-9_]*',
        ),
    ]


class AnalysisSchemeLanguage(Enum):
    """
    An <a href="http://tools.ietf.org/html/rfc4646" target="_blank">IETF RFC 4646</a> language code or <code>mul</code> for multiple languages.
    """

    ar = 'ar'
    bg = 'bg'
    ca = 'ca'
    cs = 'cs'
    da = 'da'
    de = 'de'
    el = 'el'
    en = 'en'
    es = 'es'
    eu = 'eu'
    fa = 'fa'
    fi = 'fi'
    fr = 'fr'
    ga = 'ga'
    gl = 'gl'
    he = 'he'
    hi = 'hi'
    hu = 'hu'
    hy = 'hy'
    id = 'id'
    it = 'it'
    ja = 'ja'
    ko = 'ko'
    lv = 'lv'
    mul = 'mul'
    nl = 'nl'
    no = 'no'
    pt = 'pt'
    ro = 'ro'
    ru = 'ru'
    sv = 'sv'
    th = 'th'
    tr = 'tr'
    zh_Hans = 'zh-Hans'
    zh_Hant = 'zh-Hant'


class InvalidTypeException(BaseException):
    pass


class ExpressionValue(BaseModel):
    __root__: Annotated[
        str,
        Field(
            description='The expression to evaluate for sorting while processing a search request. The <code>Expression</code> syntax is based on JavaScript expressions. For more information, see <a href="http://docs.aws.amazon.com/cloudsearch/latest/developerguide/configuring-expressions.html" target="_blank">Configuring Expressions</a> in the <i>Amazon CloudSearch Developer Guide</i>.',
            max_length=10240,
            min_length=1,
        ),
    ]


class DynamicFieldName(BaseModel):
    __root__: Annotated[
        str,
        Field(max_length=64, min_length=1, regex='([a-z][a-z0-9_]*\\*?|\\*[a-z0-9_]*)'),
    ]


class IndexFieldType(Enum):
    """
    The type of field. The valid options for a field depend on the field type. For more information about the supported field types, see <a href="http://docs.aws.amazon.com/cloudsearch/latest/developerguide/configuring-index-fields.html" target="_blank">Configuring Index Fields</a> in the <i>Amazon CloudSearch Developer Guide</i>.
    """

    int = 'int'
    double = 'double'
    literal = 'literal'
    text = 'text'
    date = 'date'
    latlon = 'latlon'
    int_array = 'int-array'
    double_array = 'double-array'
    literal_array = 'literal-array'
    text_array = 'text-array'
    date_array = 'date-array'


class DisabledOperationException(BaseException):
    pass


class DomainName(BaseModel):
    __root__: Annotated[
        str,
        Field(
            description='A string that represents the name of a domain. Domain names are unique across the domains owned by an account within an AWS region. Domain names start with a letter or number and can contain the following characters: a-z (lowercase), 0-9, and - (hyphen).',
            max_length=28,
            min_length=3,
            regex='[a-z][a-z0-9\\-]+',
        ),
    ]


class Boolean(BaseModel):
    __root__: bool


class TLSSecurityPolicy(Enum):
    """
    The minimum required TLS version.
    """

    Policy_Min_TLS_1_0_2019_07 = 'Policy-Min-TLS-1-0-2019-07'
    Policy_Min_TLS_1_2_2019_07 = 'Policy-Min-TLS-1-2-2019-07'


class PartitionInstanceType(Enum):
    """
    The instance type (such as <code>search.m1.small</code>) on which an index partition is hosted.
    """

    search_m1_small = 'search.m1.small'
    search_m1_large = 'search.m1.large'
    search_m2_xlarge = 'search.m2.xlarge'
    search_m2_2xlarge = 'search.m2.2xlarge'
    search_m3_medium = 'search.m3.medium'
    search_m3_large = 'search.m3.large'
    search_m3_xlarge = 'search.m3.xlarge'
    search_m3_2xlarge = 'search.m3.2xlarge'
    search_small = 'search.small'
    search_medium = 'search.medium'
    search_large = 'search.large'
    search_xlarge = 'search.xlarge'
    search_2xlarge = 'search.2xlarge'
    search_previousgeneration_small = 'search.previousgeneration.small'
    search_previousgeneration_large = 'search.previousgeneration.large'
    search_previousgeneration_xlarge = 'search.previousgeneration.xlarge'
    search_previousgeneration_2xlarge = 'search.previousgeneration.2xlarge'


class UIntValue(BaseModel):
    __root__: Annotated[int, Field(ge=0.0)]


class APIVersion(BaseModel):
    __root__: Annotated[
        str,
        Field(
            description='The Amazon CloudSearch API version for a domain: 2011-02-01 or 2013-01-01.'
        ),
    ]


class ARN(BaseModel):
    __root__: Annotated[
        str,
        Field(
            description='The Amazon Resource Name (ARN) of the search domain. See <a href="http://docs.aws.amazon.com/IAM/latest/UserGuide/index.html?Using_Identifiers.html" target="_blank">Identifiers for IAM Entities</a> in <i>Using AWS Identity and Access Management</i> for more information.'
        ),
    ]


class PolicyDocument(BaseModel):
    __root__: Annotated[
        str,
        Field(
            description='Access rules for a domain\'s document or search service endpoints. For more information, see <a href="http://docs.aws.amazon.com/cloudsearch/latest/developerguide/configuring-access.html" target="_blank">Configuring Access for a Search Domain</a> in the <i>Amazon CloudSearch Developer Guide</i>. The maximum size of a policy document is 100 KB.'
        ),
    ]


class AlgorithmicStemming(Enum):
    none = 'none'
    minimal = 'minimal'
    light = 'light'
    full = 'full'


class String(BaseModel):
    __root__: str


class MultiAZ(Boolean):
    pass


class BuildSuggestersRequest(BaseModel):
    """
    Container for the parameters to the <code><a>BuildSuggester</a></code> operation. Specifies the name of the domain you want to update.
    """

    DomainName: DomainName


class CreateDomainRequest(BaseModel):
    """
    Container for the parameters to the <code><a>CreateDomain</a></code> operation. Specifies a name for the new search domain.
    """

    DomainName: DomainName


class FieldValue(BaseModel):
    __root__: Annotated[
        str,
        Field(
            description='The value of a field attribute.', max_length=1024, min_length=0
        ),
    ]


class FieldNameCommaList(BaseModel):
    __root__: Annotated[
        str, Field(regex='\\s*[a-z*][a-z0-9_]*\\*?\\s*(,\\s*[a-z*][a-z0-9_]*\\*?\\s*)*')
    ]


class FieldName(BaseModel):
    __root__: Annotated[
        str,
        Field(
            description="<p>A string that represents the name of an index field. CloudSearch supports regular index fields as well as dynamic fields. A dynamic field's name defines a pattern that begins or ends with a wildcard. Any document fields that don't map to a regular index field but do match a dynamic field's pattern are configured with the dynamic field's indexing options. </p> <p>Regular field names begin with a letter and can contain the following characters: a-z (lowercase), 0-9, and _ (underscore). Dynamic field names must begin or end with a wildcard (*). The wildcard can also be the only character in a dynamic field name. Multiple wildcards, and wildcards embedded within a string are not supported. </p> <p>The name <code>score</code> is reserved and cannot be used as a field name. To reference a document's ID, you can use the name <code>_id</code>. </p>",
            max_length=64,
            min_length=1,
            regex='[a-z][a-z0-9_]*',
        ),
    ]


class Expression1(BaseModel):
    """
    A named expression that can be evaluated at search time. Can be used to sort the search results, define other expressions, or return computed information in the search results.
    """

    ExpressionName: StandardName
    ExpressionValue: ExpressionValue


class DefineExpressionRequest(BaseModel):
    """
    Container for the parameters to the <code><a>DefineExpression</a></code> operation. Specifies the name of the domain you want to update and the expression you want to configure.
    """

    DomainName: DomainName
    Expression: Expression1


class DeleteAnalysisSchemeRequest(BaseModel):
    """
    Container for the parameters to the <code><a>DeleteAnalysisScheme</a></code> operation. Specifies the name of the domain you want to update and the analysis scheme you want to delete.
    """

    DomainName: DomainName
    AnalysisSchemeName: StandardName


class DeleteDomainRequest(BaseModel):
    """
    Container for the parameters to the <code><a>DeleteDomain</a></code> operation. Specifies the name of the domain you want to delete.
    """

    DomainName: DomainName


class DeleteExpressionRequest(BaseModel):
    """
    Container for the parameters to the <code><a>DeleteExpression</a></code> operation. Specifies the name of the domain you want to update and the name of the expression you want to delete.
    """

    DomainName: DomainName
    ExpressionName: StandardName


class DeleteIndexFieldRequest(BaseModel):
    """
    Container for the parameters to the <code><a>DeleteIndexField</a></code> operation. Specifies the name of the domain you want to update and the name of the index field you want to delete.
    """

    DomainName: DomainName
    IndexFieldName: DynamicFieldName


class DeleteSuggesterRequest(BaseModel):
    """
    Container for the parameters to the <code><a>DeleteSuggester</a></code> operation. Specifies the name of the domain you want to update and name of the suggester you want to delete.
    """

    DomainName: DomainName
    SuggesterName: StandardName


class StandardNameList(BaseModel):
    __root__: List[StandardName]


class DescribeAnalysisSchemesRequest(BaseModel):
    """
    Container for the parameters to the <code><a>DescribeAnalysisSchemes</a></code> operation. Specifies the name of the domain you want to describe. To limit the response to particular analysis schemes, specify the names of the analysis schemes you want to describe. To show the active configuration and exclude any pending changes, set the <code>Deployed</code> option to <code>true</code>.
    """

    DomainName: DomainName
    AnalysisSchemeNames: Optional[StandardNameList] = None
    Deployed: Optional[Boolean] = None


class DescribeAvailabilityOptionsRequest(BaseModel):
    """
    Container for the parameters to the <code><a>DescribeAvailabilityOptions</a></code> operation. Specifies the name of the domain you want to describe. To show the active configuration and exclude any pending changes, set the Deployed option to <code>true</code>.
    """

    DomainName: DomainName
    Deployed: Optional[Boolean] = None


class DescribeDomainEndpointOptionsRequest(BaseModel):
    """
    Container for the parameters to the <code><a>DescribeDomainEndpointOptions</a></code> operation. Specify the name of the domain you want to describe. To show the active configuration and exclude any pending changes, set the Deployed option to <code>true</code>.
    """

    DomainName: DomainName
    Deployed: Optional[Boolean] = None


class DomainNameList(BaseModel):
    """
    A list of domain names.
    """

    __root__: Annotated[List[DomainName], Field(description='A list of domain names.')]


class DescribeDomainsRequest(BaseModel):
    """
    Container for the parameters to the <code><a>DescribeDomains</a></code> operation. By default shows the status of all domains. To restrict the response to particular domains, specify the names of the domains you want to describe.
    """

    DomainNames: Optional[DomainNameList] = None


class DescribeExpressionsRequest(BaseModel):
    """
    Container for the parameters to the <code><a>DescribeDomains</a></code> operation. Specifies the name of the domain you want to describe. To restrict the response to particular expressions, specify the names of the expressions you want to describe. To show the active configuration and exclude any pending changes, set the <code>Deployed</code> option to <code>true</code>.
    """

    DomainName: DomainName
    ExpressionNames: Optional[StandardNameList] = None
    Deployed: Optional[Boolean] = None


class DynamicFieldNameList(BaseModel):
    __root__: List[DynamicFieldName]


class DescribeIndexFieldsRequest(BaseModel):
    """
    Container for the parameters to the <code><a>DescribeIndexFields</a></code> operation. Specifies the name of the domain you want to describe. To restrict the response to particular index fields, specify the names of the index fields you want to describe. To show the active configuration and exclude any pending changes, set the <code>Deployed</code> option to <code>true</code>.
    """

    DomainName: DomainName
    FieldNames: Optional[DynamicFieldNameList] = None
    Deployed: Optional[Boolean] = None


class DescribeScalingParametersRequest(BaseModel):
    """
    Container for the parameters to the <code><a>DescribeScalingParameters</a></code> operation. Specifies the name of the domain you want to describe.
    """

    DomainName: DomainName


class DescribeServiceAccessPoliciesRequest(BaseModel):
    """
    Container for the parameters to the <code><a>DescribeServiceAccessPolicies</a></code> operation. Specifies the name of the domain you want to describe. To show the active configuration and exclude any pending changes, set the <code>Deployed</code> option to <code>true</code>.
    """

    DomainName: DomainName
    Deployed: Optional[Boolean] = None


class DescribeSuggestersRequest(BaseModel):
    """
    Container for the parameters to the <code><a>DescribeSuggester</a></code> operation. Specifies the name of the domain you want to describe. To restrict the response to particular suggesters, specify the names of the suggesters you want to describe. To show the active configuration and exclude any pending changes, set the <code>Deployed</code> option to <code>true</code>.
    """

    DomainName: DomainName
    SuggesterNames: Optional[StandardNameList] = None
    Deployed: Optional[Boolean] = None


class SuggesterFuzzyMatching(Enum):
    none = 'none'
    low = 'low'
    high = 'high'


class DomainEndpointOptions(BaseModel):
    """
    The domain's endpoint options.
    """

    EnforceHTTPS: Optional[Boolean] = None
    TLSSecurityPolicy: Optional[TLSSecurityPolicy] = None


class DomainId(BaseModel):
    __root__: Annotated[
        str,
        Field(
            description='An internally generated unique identifier for a domain.',
            max_length=64,
            min_length=1,
        ),
    ]


class DomainNameMap(BaseModel):
    """
    A collection of domain names.
    """

    pass

    class Config:
        extra = Extra.allow


class SearchInstanceType(BaseModel):
    __root__: Annotated[
        str,
        Field(
            description='The instance type (such as <code>search.m1.small</code>) that is being used to process search requests.'
        ),
    ]


class PartitionCount(BaseModel):
    __root__: Annotated[
        int,
        Field(
            description="The number of partitions used to hold the domain's index.",
            ge=1.0,
        ),
    ]


class InstanceCount(BaseModel):
    __root__: Annotated[int, Field(ge=1.0)]


class Double(BaseModel):
    __root__: float


class IndexDocumentsRequest(BaseModel):
    """
    Container for the parameters to the <code><a>IndexDocuments</a></code> operation. Specifies the name of the domain you want to re-index.
    """

    DomainName: DomainName


class Long(BaseModel):
    __root__: int


class MaximumReplicationCount(InstanceCount):
    pass


class MaximumPartitionCount(InstanceCount):
    pass


class OptionState(Enum):
    """
    <p>The state of processing a change to an option. One of:</p> <ul> <li>RequiresIndexDocuments: The option's latest value will not be deployed until <a>IndexDocuments</a> has been called and indexing is complete.</li> <li>Processing: The option's latest value is in the process of being activated.</li> <li>Active: The option's latest value is fully deployed. </li> <li>FailedToValidate: The option value is not compatible with the domain's data and cannot be used to index the data. You must either modify the option value or update or remove the incompatible documents.</li> </ul>
    """

    RequiresIndexDocuments = 'RequiresIndexDocuments'
    Processing = 'Processing'
    Active = 'Active'
    FailedToValidate = 'FailedToValidate'


class UpdateTimestamp(BaseModel):
    __root__: datetime


class ScalingParameters(BaseModel):
    """
    The desired instance type and desired number of replicas of each index partition.
    """

    DesiredInstanceType: Optional[PartitionInstanceType] = None
    DesiredReplicationCount: Optional[UIntValue] = None
    DesiredPartitionCount: Optional[UIntValue] = None


class ServiceUrl(BaseModel):
    __root__: Annotated[
        str,
        Field(
            description='The endpoint to which service requests can be submitted. For example, <code>search-imdb-movies-oopcnjfn6ugofer3zx5iadxxca.eu-west-1.cloudsearch.amazonaws.com</code> or <code>doc-imdb-movies-oopcnjfn6ugofer3zx5iadxxca.eu-west-1.cloudsearch.amazonaws.com</code>.'
        ),
    ]


class Word(BaseModel):
    __root__: Annotated[str, Field(regex='[\\S]+')]


class UpdateAvailabilityOptionsRequest(BaseModel):
    """
    Container for the parameters to the <code><a>UpdateAvailabilityOptions</a></code> operation. Specifies the name of the domain you want to update and the Multi-AZ availability option.
    """

    DomainName: DomainName
    MultiAZ: Boolean


class UpdateDomainEndpointOptionsRequest(BaseModel):
    """
    Container for the parameters to the <code><a>UpdateDomainEndpointOptions</a></code> operation. Specifies the name of the domain you want to update and the domain endpoint options.
    """

    DomainName: DomainName
    DomainEndpointOptions: DomainEndpointOptions


class UpdateScalingParametersRequest(BaseModel):
    """
    Container for the parameters to the <code><a>UpdateScalingParameters</a></code> operation. Specifies the name of the domain you want to update and the scaling parameters you want to configure.
    """

    DomainName: DomainName
    ScalingParameters: ScalingParameters


class UpdateServiceAccessPoliciesRequest(BaseModel):
    """
    Container for the parameters to the <code><a>UpdateServiceAccessPolicies</a></code> operation. Specifies the name of the domain you want to update and the access rules you want to configure.
    """

    DomainName: DomainName
    AccessPolicies: PolicyDocument


class AnalysisOptions(BaseModel):
    """
    Synonyms, stopwords, and stemming options for an analysis scheme. Includes tokenization dictionary for Japanese.
    """

    Synonyms: Optional[String] = None
    Stopwords: Optional[String] = None
    StemmingDictionary: Optional[String] = None
    JapaneseTokenizationDictionary: Optional[String] = None
    AlgorithmicStemming: Optional[AlgorithmicStemming] = None


class IntOptions(BaseModel):
    """
    Options for a 64-bit signed integer field. Present if <code>IndexFieldType</code> specifies the field is of type <code>int</code>. All options are enabled by default.
    """

    DefaultValue: Optional[Long] = None
    SourceField: Optional[FieldName] = None
    FacetEnabled: Optional[Boolean] = None
    SearchEnabled: Optional[Boolean] = None
    ReturnEnabled: Optional[Boolean] = None
    SortEnabled: Optional[Boolean] = None


class DoubleOptions(BaseModel):
    """
    Options for a double-precision 64-bit floating point field. Present if <code>IndexFieldType</code> specifies the field is of type <code>double</code>. All options are enabled by default.
    """

    DefaultValue: Optional[Double] = None
    SourceField: Optional[FieldName] = None
    FacetEnabled: Optional[Boolean] = None
    SearchEnabled: Optional[Boolean] = None
    ReturnEnabled: Optional[Boolean] = None
    SortEnabled: Optional[Boolean] = None


class LiteralOptions(BaseModel):
    """
    Options for literal field. Present if <code>IndexFieldType</code> specifies the field is of type <code>literal</code>. All options are enabled by default.
    """

    DefaultValue: Optional[FieldValue] = None
    SourceField: Optional[FieldName] = None
    FacetEnabled: Optional[Boolean] = None
    SearchEnabled: Optional[Boolean] = None
    ReturnEnabled: Optional[Boolean] = None
    SortEnabled: Optional[Boolean] = None


class TextOptions(BaseModel):
    """
    Options for text field. Present if <code>IndexFieldType</code> specifies the field is of type <code>text</code>. A <code>text</code> field is always searchable. All options are enabled by default.
    """

    DefaultValue: Optional[FieldValue] = None
    SourceField: Optional[FieldName] = None
    ReturnEnabled: Optional[Boolean] = None
    SortEnabled: Optional[Boolean] = None
    HighlightEnabled: Optional[Boolean] = None
    AnalysisScheme: Optional[Word] = None


class DateOptions(LiteralOptions):
    """
    Options for a date field. Dates and times are specified in UTC (Coordinated Universal Time) according to IETF RFC3339: yyyy-mm-ddT00:00:00Z. Present if <code>IndexFieldType</code> specifies the field is of type <code>date</code>. All options are enabled by default.
    """

    pass


class LatLonOptions(LiteralOptions):
    """
    Options for a latlon field. A latlon field contains a location stored as a latitude and longitude value pair. Present if <code>IndexFieldType</code> specifies the field is of type <code>latlon</code>. All options are enabled by default.
    """

    pass


class IntArrayOptions(BaseModel):
    """
    Options for a field that contains an array of 64-bit signed integers. Present if <code>IndexFieldType</code> specifies the field is of type <code>int-array</code>. All options are enabled by default.
    """

    DefaultValue: Optional[Long] = None
    SourceFields: Optional[FieldNameCommaList] = None
    FacetEnabled: Optional[Boolean] = None
    SearchEnabled: Optional[Boolean] = None
    ReturnEnabled: Optional[Boolean] = None


class DoubleArrayOptions(BaseModel):
    """
    Options for a field that contains an array of double-precision 64-bit floating point values. Present if <code>IndexFieldType</code> specifies the field is of type <code>double-array</code>. All options are enabled by default.
    """

    DefaultValue: Optional[Double] = None
    SourceFields: Optional[FieldNameCommaList] = None
    FacetEnabled: Optional[Boolean] = None
    SearchEnabled: Optional[Boolean] = None
    ReturnEnabled: Optional[Boolean] = None


class LiteralArrayOptions(BaseModel):
    """
    Options for a field that contains an array of literal strings. Present if <code>IndexFieldType</code> specifies the field is of type <code>literal-array</code>. All options are enabled by default.
    """

    DefaultValue: Optional[FieldValue] = None
    SourceFields: Optional[FieldNameCommaList] = None
    FacetEnabled: Optional[Boolean] = None
    SearchEnabled: Optional[Boolean] = None
    ReturnEnabled: Optional[Boolean] = None


class TextArrayOptions(BaseModel):
    """
    Options for a field that contains an array of text strings. Present if <code>IndexFieldType</code> specifies the field is of type <code>text-array</code>. A <code>text-array</code> field is always searchable. All options are enabled by default.
    """

    DefaultValue: Optional[FieldValue] = None
    SourceFields: Optional[FieldNameCommaList] = None
    ReturnEnabled: Optional[Boolean] = None
    HighlightEnabled: Optional[Boolean] = None
    AnalysisScheme: Optional[Word] = None


class DateArrayOptions(LiteralArrayOptions):
    """
    Options for a field that contains an array of dates. Present if <code>IndexFieldType</code> specifies the field is of type <code>date-array</code>. All options are enabled by default.
    """

    pass


class DocumentSuggesterOptions(BaseModel):
    """
    Options for a search suggester.
    """

    SourceField: FieldName
    FuzzyMatching: Optional[SuggesterFuzzyMatching] = None
    SortExpression: Optional[String] = None


class ListDomainNamesResponse(BaseModel):
    """
    The result of a <code>ListDomainNames</code> request. Contains a list of the domains owned by an account.
    """

    DomainNames: Optional[DomainNameMap] = None


class OptionStatus(BaseModel):
    """
    The status of domain configuration option.
    """

    CreationDate: UpdateTimestamp
    UpdateDate: UpdateTimestamp
    UpdateVersion: Optional[UIntValue] = None
    State: OptionState
    PendingDeletion: Optional[Boolean] = None


class AccessPoliciesStatus(BaseModel):
    """
    The configured access rules for the domain's document and search endpoints, and the current status of those rules.
    """

    Options: PolicyDocument
    Status: OptionStatus


class AnalysisScheme3(BaseModel):
    """
    Configuration information for an analysis scheme. Each analysis scheme has a unique name and specifies the language of the text to be processed. The following options can be configured for an analysis scheme: <code>Synonyms</code>, <code>Stopwords</code>, <code>StemmingDictionary</code>, <code>JapaneseTokenizationDictionary</code> and <code>AlgorithmicStemming</code>.
    """

    AnalysisSchemeName: StandardName
    AnalysisSchemeLanguage: AnalysisSchemeLanguage
    AnalysisOptions: Optional[AnalysisOptions] = None


class AnalysisSchemeStatus(BaseModel):
    """
    The status and configuration of an <code>AnalysisScheme</code>.
    """

    Options: AnalysisScheme3
    Status: OptionStatus


class AnalysisSchemeStatusList(BaseModel):
    """
    A list of the analysis schemes configured for a domain.
    """

    __root__: Annotated[
        List[AnalysisSchemeStatus],
        Field(description='A list of the analysis schemes configured for a domain.'),
    ]


class AvailabilityOptionsStatus(BaseModel):
    """
    The status and configuration of the domain's availability options.
    """

    Options: MultiAZ
    Status: OptionStatus


class FieldNameList(BaseModel):
    """
    A list of field names.
    """

    __root__: Annotated[List[FieldName], Field(description='A list of field names.')]


class DefineAnalysisSchemeRequest(BaseModel):
    """
    Container for the parameters to the <code><a>DefineAnalysisScheme</a></code> operation. Specifies the name of the domain you want to update and the analysis scheme configuration.
    """

    DomainName: DomainName
    AnalysisScheme: AnalysisScheme3


class ExpressionStatus(BaseModel):
    """
    The value of an <code>Expression</code> and its current status.
    """

    Options: Expression1
    Status: OptionStatus


class IndexField1(BaseModel):
    """
    Configuration information for a field in the index, including its name, type, and options. The supported options depend on the <code><a>IndexFieldType</a></code>.
    """

    IndexFieldName: DynamicFieldName
    IndexFieldType: IndexFieldType
    IntOptions: Optional[IntOptions] = None
    DoubleOptions: Optional[DoubleOptions] = None
    LiteralOptions: Optional[LiteralOptions] = None
    TextOptions: Optional[TextOptions] = None
    DateOptions: Optional[DateOptions] = None
    LatLonOptions: Optional[LatLonOptions] = None
    IntArrayOptions: Optional[IntArrayOptions] = None
    DoubleArrayOptions: Optional[DoubleArrayOptions] = None
    LiteralArrayOptions: Optional[LiteralArrayOptions] = None
    TextArrayOptions: Optional[TextArrayOptions] = None
    DateArrayOptions: Optional[DateArrayOptions] = None


class DefineIndexFieldRequest(BaseModel):
    """
    Container for the parameters to the <code><a>DefineIndexField</a></code> operation. Specifies the name of the domain you want to update and the index field configuration.
    """

    DomainName: DomainName
    IndexField: IndexField1


class IndexFieldStatus(BaseModel):
    """
    The value of an <code>IndexField</code> and its current status.
    """

    Options: IndexField1
    Status: OptionStatus


class Suggester1(BaseModel):
    """
    Configuration information for a search suggester. Each suggester has a unique name and specifies the text field you want to use for suggestions. The following options can be configured for a suggester: <code>FuzzyMatching</code>, <code>SortExpression</code>.
    """

    SuggesterName: StandardName
    DocumentSuggesterOptions: DocumentSuggesterOptions


class DefineSuggesterRequest(BaseModel):
    """
    Container for the parameters to the <code><a>DefineSuggester</a></code> operation. Specifies the name of the domain you want to update and the suggester configuration.
    """

    DomainName: DomainName
    Suggester: Suggester1


class SuggesterStatus(BaseModel):
    """
    The value of a <code>Suggester</code> and its current status.
    """

    Options: Suggester1
    Status: OptionStatus


class DomainEndpointOptionsStatus(BaseModel):
    """
    The configuration and status of the domain's endpoint options.
    """

    Options: DomainEndpointOptions
    Status: OptionStatus


class ExpressionStatusList(BaseModel):
    """
    Contains the status of multiple expressions.
    """

    __root__: Annotated[
        List[ExpressionStatus],
        Field(description='Contains the status of multiple expressions.'),
    ]


class IndexFieldStatusList(BaseModel):
    """
    Contains the status of multiple index fields.
    """

    __root__: Annotated[
        List[IndexFieldStatus],
        Field(description='Contains the status of multiple index fields.'),
    ]


class ScalingParametersStatus(BaseModel):
    """
    The status and configuration of a search domain's scaling parameters.
    """

    Options: ScalingParameters
    Status: OptionStatus


class SuggesterStatusList(BaseModel):
    """
    Contains the status of multiple suggesters.
    """

    __root__: Annotated[
        List[SuggesterStatus],
        Field(description='Contains the status of multiple suggesters.'),
    ]


class ServiceEndpoint(BaseModel):
    """
    The endpoint to which service requests can be submitted.
    """

    Endpoint: Optional[ServiceUrl] = None


class Limits(BaseModel):
    MaximumReplicationCount: MaximumReplicationCount
    MaximumPartitionCount: MaximumPartitionCount


class BuildSuggestersResponse(BaseModel):
    """
    The result of a <code>BuildSuggester</code> request. Contains a list of the fields used for suggestions.
    """

    FieldNames: Optional[FieldNameList] = None


class DefineAnalysisSchemeResponse(BaseModel):
    """
    The result of a <code><a>DefineAnalysisScheme</a></code> request. Contains the status of the newly-configured analysis scheme.
    """

    AnalysisScheme: AnalysisSchemeStatus


class DefineExpressionResponse(BaseModel):
    """
    The result of a <code>DefineExpression</code> request. Contains the status of the newly-configured expression.
    """

    Expression: ExpressionStatus


class DefineIndexFieldResponse(BaseModel):
    """
    The result of a <code><a>DefineIndexField</a></code> request. Contains the status of the newly-configured index field.
    """

    IndexField: IndexFieldStatus


class DefineSuggesterResponse(BaseModel):
    """
    The result of a <code>DefineSuggester</code> request. Contains the status of the newly-configured suggester.
    """

    Suggester: SuggesterStatus


class DeleteAnalysisSchemeResponse(DefineAnalysisSchemeResponse):
    """
    The result of a <code>DeleteAnalysisScheme</code> request. Contains the status of the deleted analysis scheme.
    """

    pass


class DeleteExpressionResponse(DefineExpressionResponse):
    """
    The result of a <code><a>DeleteExpression</a></code> request. Specifies the expression being deleted.
    """

    pass


class DeleteIndexFieldResponse(DefineIndexFieldResponse):
    """
    The result of a <code><a>DeleteIndexField</a></code> request.
    """

    pass


class DeleteSuggesterResponse(DefineSuggesterResponse):
    """
    The result of a <code>DeleteSuggester</code> request. Contains the status of the deleted suggester.
    """

    pass


class DescribeAnalysisSchemesResponse(BaseModel):
    """
    The result of a <code>DescribeAnalysisSchemes</code> request. Contains the analysis schemes configured for the domain specified in the request.
    """

    AnalysisSchemes: AnalysisSchemeStatusList


class DescribeAvailabilityOptionsResponse(BaseModel):
    """
    The result of a <code>DescribeAvailabilityOptions</code> request. Indicates whether or not the Multi-AZ option is enabled for the domain specified in the request.
    """

    AvailabilityOptions: Optional[AvailabilityOptionsStatus] = None


class DescribeDomainEndpointOptionsResponse(BaseModel):
    """
    The result of a <code>DescribeDomainEndpointOptions</code> request. Contains the status and configuration of a search domain's endpoint options.
    """

    DomainEndpointOptions: Optional[DomainEndpointOptionsStatus] = None


class DescribeExpressionsResponse(BaseModel):
    """
    The result of a <code>DescribeExpressions</code> request. Contains the expressions configured for the domain specified in the request.
    """

    Expressions: ExpressionStatusList


class DescribeIndexFieldsResponse(BaseModel):
    """
    The result of a <code>DescribeIndexFields</code> request. Contains the index fields configured for the domain specified in the request.
    """

    IndexFields: IndexFieldStatusList


class DescribeScalingParametersResponse(BaseModel):
    """
    The result of a <code>DescribeScalingParameters</code> request. Contains the scaling parameters configured for the domain specified in the request.
    """

    ScalingParameters: ScalingParametersStatus


class DescribeServiceAccessPoliciesResponse(BaseModel):
    """
    The result of a <code>DescribeServiceAccessPolicies</code> request.
    """

    AccessPolicies: AccessPoliciesStatus


class DescribeSuggestersResponse(BaseModel):
    """
    The result of a <code>DescribeSuggesters</code> request.
    """

    Suggesters: SuggesterStatusList


class IndexDocumentsResponse(BuildSuggestersResponse):
    """
    The result of an <code>IndexDocuments</code> request. Contains the status of the indexing operation, including the fields being indexed.
    """

    pass


class UpdateAvailabilityOptionsResponse(DescribeAvailabilityOptionsResponse):
    """
    The result of a <code>UpdateAvailabilityOptions</code> request. Contains the status of the domain's availability options.
    """

    pass


class UpdateDomainEndpointOptionsResponse(DescribeDomainEndpointOptionsResponse):
    """
    The result of a <code>UpdateDomainEndpointOptions</code> request. Contains the configuration and status of the domain's endpoint options.
    """

    pass


class UpdateScalingParametersResponse(DescribeScalingParametersResponse):
    """
    The result of a <code>UpdateScalingParameters</code> request. Contains the status of the newly-configured scaling parameters.
    """

    pass


class UpdateServiceAccessPoliciesResponse(DescribeServiceAccessPoliciesResponse):
    """
    The result of an <code>UpdateServiceAccessPolicies</code> request. Contains the new access policies.
    """

    pass


class DomainStatus(BaseModel):
    """
    The current status of the search domain.
    """

    DomainId: DomainId
    DomainName: DomainName
    ARN: Optional[ARN] = None
    Created: Optional[Boolean] = None
    Deleted: Optional[Boolean] = None
    DocService: Optional[ServiceEndpoint] = None
    SearchService: Optional[ServiceEndpoint] = None
    RequiresIndexDocuments: Boolean
    Processing: Optional[Boolean] = None
    SearchInstanceType: Optional[SearchInstanceType] = None
    SearchPartitionCount: Optional[PartitionCount] = None
    SearchInstanceCount: Optional[InstanceCount] = None
    Limits: Optional[Limits] = None


class DomainStatusList(BaseModel):
    """
    A list that contains the status of each requested domain.
    """

    __root__: Annotated[
        List[DomainStatus],
        Field(description='A list that contains the status of each requested domain.'),
    ]


class CreateDomainResponse(BaseModel):
    """
    The result of a <code>CreateDomainRequest</code>. Contains the status of a newly created domain.
    """

    DomainStatus: Optional[DomainStatus] = None


class DeleteDomainResponse(CreateDomainResponse):
    """
    The result of a <code>DeleteDomain</code> request. Contains the status of a newly deleted domain, or no status if the domain has already been completely deleted.
    """

    pass


class DescribeDomainsResponse(BaseModel):
    """
    The result of a <code>DescribeDomains</code> request. Contains the status of the domains specified in the request or all domains owned by the account.
    """

    DomainStatusList: DomainStatusList
