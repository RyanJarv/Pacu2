# generated by datamodel-codegen:
#   filename:  openapi.yaml
#   timestamp: 2021-12-31T02:45:24+00:00

from __future__ import annotations

from datetime import datetime
from enum import Enum
from typing import Annotated, Any, List, Optional

from pydantic import BaseModel, Extra, Field


class AssociateAssessmentReportEvidenceFolderResponse(BaseModel):
    pass


class ValidationException(BaseModel):
    __root__: Any


class AccessDeniedException(ValidationException):
    pass


class InternalServerException(ValidationException):
    pass


class ResourceNotFoundException(ValidationException):
    pass


class UUID(BaseModel):
    __root__: Annotated[
        str,
        Field(
            max_length=36,
            min_length=36,
            regex='^[a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12}$',
        ),
    ]


class AssessmentReportDestinationType(Enum):
    S3 = 'S3'


class S3Url(BaseModel):
    __root__: Annotated[
        str,
        Field(
            max_length=1024,
            min_length=1,
            regex="^(S|s)3:\\/\\/[a-zA-Z0-9\\-\\.\\(\\)\\'\\*\\_\\!\\/]+$",
        ),
    ]


class TagValue(BaseModel):
    __root__: Annotated[str, Field(max_length=256, min_length=0, regex='.{0,255}')]


class DeleteAssessmentResponse(AssociateAssessmentReportEvidenceFolderResponse):
    pass


class DeleteAssessmentFrameworkResponse(
    AssociateAssessmentReportEvidenceFolderResponse
):
    pass


class DeleteAssessmentReportResponse(AssociateAssessmentReportEvidenceFolderResponse):
    pass


class DeleteControlResponse(AssociateAssessmentReportEvidenceFolderResponse):
    pass


class DeregisterOrganizationAdminAccountResponse(
    AssociateAssessmentReportEvidenceFolderResponse
):
    pass


class DisassociateAssessmentReportEvidenceFolderResponse(
    AssociateAssessmentReportEvidenceFolderResponse
):
    pass


class TagResourceResponse(AssociateAssessmentReportEvidenceFolderResponse):
    pass


class UntagResourceResponse(AssociateAssessmentReportEvidenceFolderResponse):
    pass


class TagKey(BaseModel):
    __root__: Annotated[
        str, Field(max_length=128, min_length=1, regex='^(?!aws:)[a-zA-Z+-=._:/]+$')
    ]


class AccountId(BaseModel):
    __root__: Annotated[str, Field(max_length=12, min_length=12, regex='^[0-9]{12}$')]


class EmailAddress(BaseModel):
    __root__: Annotated[str, Field(max_length=320, min_length=1, regex='^.*@.*$')]


class AccountName(BaseModel):
    __root__: Annotated[
        str, Field(max_length=50, min_length=1, regex='^[\\u0020-\\u007E]+$')
    ]


class AWSAccount(BaseModel):
    """
    The wrapper of account details, such as account ID, email address, and so on.
    """

    id: Optional[AccountId] = None
    emailAddress: Optional[EmailAddress] = None
    name: Optional[AccountName] = None


class AWSServiceName(BaseModel):
    __root__: Annotated[
        str, Field(max_length=40, min_length=1, regex='^[a-zA-Z0-9-\\s().]+$')
    ]


class AWSService(BaseModel):
    """
    An Amazon Web Service such as Amazon S3, CloudTrail, and so on.
    """

    serviceName: Optional[AWSServiceName] = None


class AccountStatus(Enum):
    ACTIVE = 'ACTIVE'
    INACTIVE = 'INACTIVE'
    PENDING_ACTIVATION = 'PENDING_ACTIVATION'


class ActionEnum(Enum):
    CREATE = 'CREATE'
    UPDATE_METADATA = 'UPDATE_METADATA'
    ACTIVE = 'ACTIVE'
    INACTIVE = 'INACTIVE'
    DELETE = 'DELETE'
    UNDER_REVIEW = 'UNDER_REVIEW'
    REVIEWED = 'REVIEWED'
    IMPORT_EVIDENCE = 'IMPORT_EVIDENCE'


class ActionPlanInstructions(BaseModel):
    __root__: Annotated[str, Field(max_length=1000, regex='^[\\w\\W\\s\\S]*$')]


class ActionPlanTitle(BaseModel):
    __root__: Annotated[str, Field(max_length=300, regex='^[\\w\\W\\s\\S]*$')]


class AuditManagerArn(BaseModel):
    __root__: Annotated[
        str, Field(max_length=2048, min_length=20, regex='^arn:.*:auditmanager:.*')
    ]


class TagMap(BaseModel):
    pass

    class Config:
        extra = Extra.allow


class ControlName(BaseModel):
    __root__: Annotated[str, Field(max_length=300, min_length=1, regex='^[^\\\\]*$')]


class ControlDescription(ActionPlanInstructions):
    pass


class ControlStatus(Enum):
    UNDER_REVIEW = 'UNDER_REVIEW'
    REVIEWED = 'REVIEWED'
    INACTIVE = 'INACTIVE'


class ControlResponse(Enum):
    MANUAL = 'MANUAL'
    AUTOMATE = 'AUTOMATE'
    DEFER = 'DEFER'
    IGNORE = 'IGNORE'


class Integer(BaseModel):
    __root__: int


class ControlSetId(BaseModel):
    __root__: Annotated[
        str, Field(max_length=300, min_length=1, regex='^[\\w\\W\\s\\S]*$')
    ]


class NonEmptyString(BaseModel):
    __root__: Annotated[str, Field(max_length=2048, min_length=1, regex='.*\\S.*')]


class ControlSetStatus(Enum):
    ACTIVE = 'ACTIVE'
    UNDER_REVIEW = 'UNDER_REVIEW'
    REVIEWED = 'REVIEWED'


class AssessmentDescription(ActionPlanInstructions):
    pass


class AssessmentEvidenceFolderName(ControlSetId):
    pass


class Timestamp(BaseModel):
    __root__: datetime


class String(BaseModel):
    __root__: Annotated[str, Field(max_length=2048, min_length=0, regex='.*')]


class AssessmentEvidenceFolder(BaseModel):
    """
    The folder in which Audit Manager stores evidence for an assessment.
    """

    name: Optional[AssessmentEvidenceFolderName] = None
    date: Optional[Timestamp] = None
    assessmentId: Optional[UUID] = None
    controlSetId: Optional[ControlSetId] = None
    controlId: Optional[UUID] = None
    id: Optional[UUID] = None
    dataSource: Optional[String] = None
    author: Optional[String] = None
    totalEvidence: Optional[Integer] = None
    assessmentReportSelectionCount: Optional[Integer] = None
    controlName: Optional[ControlName] = None
    evidenceResourcesIncludedCount: Optional[Integer] = None
    evidenceByTypeConfigurationDataCount: Optional[Integer] = None
    evidenceByTypeManualCount: Optional[Integer] = None
    evidenceByTypeComplianceCheckCount: Optional[Integer] = None
    evidenceByTypeComplianceCheckIssuesCount: Optional[Integer] = None
    evidenceByTypeUserActivityCount: Optional[Integer] = None
    evidenceAwsServiceSourceCount: Optional[Integer] = None


class AssessmentEvidenceFolders(BaseModel):
    __root__: List[AssessmentEvidenceFolder]


class AssessmentFrameworkDescription(BaseModel):
    __root__: Annotated[
        str, Field(max_length=200, min_length=1, regex='^[\\w\\W\\s\\S]*$')
    ]


class FrameworkType(Enum):
    Standard = 'Standard'
    Custom = 'Custom'


class FrameworkName(ControlName):
    pass


class FrameworkDescription(BaseModel):
    __root__: Annotated[
        str, Field(max_length=1000, min_length=1, regex='^[\\w\\W\\s\\S]*$')
    ]


class Filename(BaseModel):
    __root__: Annotated[
        str, Field(max_length=255, min_length=1, regex='^[\\w,\\s-]+\\.[A-Za-z]+$')
    ]


class ComplianceType(BaseModel):
    __root__: Annotated[str, Field(max_length=100, regex='^[\\w\\W\\s\\S]*$')]


class ControlsCount(Integer):
    pass


class ControlSetsCount(Integer):
    pass


class AssessmentFrameworkMetadata(BaseModel):
    """
    The metadata associated with a standard or custom framework.
    """

    arn: Optional[AuditManagerArn] = None
    id: Optional[UUID] = None
    type: Optional[FrameworkType] = None
    name: Optional[FrameworkName] = None
    description: Optional[FrameworkDescription] = None
    logo: Optional[Filename] = None
    complianceType: Optional[ComplianceType] = None
    controlsCount: Optional[ControlsCount] = None
    controlSetsCount: Optional[ControlSetsCount] = None
    createdAt: Optional[Timestamp] = None
    lastUpdatedAt: Optional[Timestamp] = None


class AssessmentName(ControlName):
    pass


class AssessmentStatus(Enum):
    ACTIVE = 'ACTIVE'
    INACTIVE = 'INACTIVE'


class AssessmentReportsDestination(BaseModel):
    """
    The location in which Audit Manager saves assessment reports for the given assessment.
    """

    destinationType: Optional[AssessmentReportDestinationType] = None
    destination: Optional[S3Url] = None


class AssessmentReportName(BaseModel):
    __root__: Annotated[
        str, Field(max_length=300, min_length=1, regex='^[a-zA-Z0-9-_\\.]+$')
    ]


class AssessmentReportDescription(ActionPlanInstructions):
    pass


class Username(BaseModel):
    __root__: Annotated[
        str, Field(max_length=128, min_length=1, regex='^[a-zA-Z0-9-_()\\s\\+=,.@]+$')
    ]


class AssessmentReportStatus(Enum):
    COMPLETE = 'COMPLETE'
    IN_PROGRESS = 'IN_PROGRESS'
    FAILED = 'FAILED'


class AssessmentReport(BaseModel):
    """
    A finalized document generated from an Audit Manager assessment. These reports summarize the relevant evidence collected for your audit, and link to the relevant evidence folders which are named and organized according to the controls specified in your assessment.
    """

    id: Optional[UUID] = None
    name: Optional[AssessmentReportName] = None
    description: Optional[AssessmentReportDescription] = None
    awsAccountId: Optional[AccountId] = None
    assessmentId: Optional[UUID] = None
    assessmentName: Optional[AssessmentName] = None
    author: Optional[Username] = None
    status: Optional[AssessmentReportStatus] = None
    creationTime: Optional[Timestamp] = None


class ErrorCode(BaseModel):
    __root__: Annotated[str, Field(max_length=3, min_length=3, regex='[0-9]{3}')]


class ErrorMessage(ActionPlanTitle):
    pass


class AssessmentReportEvidenceError(BaseModel):
    """
    An error entity for the <code>AssessmentReportEvidence</code> API. This is used to provide more meaningful errors than a simple string message.
    """

    evidenceId: Optional[UUID] = None
    errorCode: Optional[ErrorCode] = None
    errorMessage: Optional[ErrorMessage] = None


class AssessmentReportEvidenceErrors(BaseModel):
    __root__: List[AssessmentReportEvidenceError]


class AssessmentReportMetadata(BaseModel):
    """
    The metadata objects associated with the specified assessment report.
    """

    id: Optional[UUID] = None
    name: Optional[AssessmentReportName] = None
    description: Optional[AssessmentReportDescription] = None
    assessmentId: Optional[UUID] = None
    assessmentName: Optional[AssessmentName] = None
    author: Optional[Username] = None
    status: Optional[AssessmentReportStatus] = None
    creationTime: Optional[Timestamp] = None


class AssessmentReportsMetadata(BaseModel):
    __root__: List[AssessmentReportMetadata]


class AssociateAssessmentReportEvidenceFolderRequest(BaseModel):
    evidenceFolderId: UUID


class EvidenceIds(BaseModel):
    __root__: Annotated[List[UUID], Field(max_items=50, min_items=0)]


class BatchAssociateAssessmentReportEvidenceRequest(BaseModel):
    evidenceFolderId: UUID
    evidenceIds: EvidenceIds


class BatchDeleteDelegationByAssessmentError(BaseModel):
    """
    An error entity for the <code>BatchDeleteDelegationByAssessment</code> API. This is used to provide more meaningful errors than a simple string message.
    """

    delegationId: Optional[UUID] = None
    errorCode: Optional[ErrorCode] = None
    errorMessage: Optional[ErrorMessage] = None


class BatchDeleteDelegationByAssessmentErrors(BaseModel):
    __root__: List[BatchDeleteDelegationByAssessmentError]


class DelegationIds(BaseModel):
    __root__: Annotated[List[UUID], Field(max_items=50, min_items=1)]


class BatchDeleteDelegationByAssessmentRequest(BaseModel):
    delegationIds: DelegationIds


class BatchDisassociateAssessmentReportEvidenceRequest(BaseModel):
    evidenceFolderId: UUID
    evidenceIds: EvidenceIds


class Boolean(BaseModel):
    __root__: bool


class ObjectTypeEnum(Enum):
    ASSESSMENT = 'ASSESSMENT'
    CONTROL_SET = 'CONTROL_SET'
    CONTROL = 'CONTROL'
    DELEGATION = 'DELEGATION'
    ASSESSMENT_REPORT = 'ASSESSMENT_REPORT'


class IamArn(BaseModel):
    __root__: Annotated[
        str, Field(max_length=2048, min_length=20, regex='^arn:.*:iam:.*')
    ]


class ChangeLog(BaseModel):
    """
    The record of a change within Audit Manager, such as a modified assessment, a delegated control set, and so on.
    """

    objectType: Optional[ObjectTypeEnum] = None
    objectName: Optional[NonEmptyString] = None
    action: Optional[ActionEnum] = None
    createdAt: Optional[Timestamp] = None
    createdBy: Optional[IamArn] = None


class ChangeLogs(BaseModel):
    __root__: List[ChangeLog]


class TestingInformation(ActionPlanInstructions):
    pass


class ControlSources(BaseModel):
    __root__: Annotated[
        str, Field(max_length=100, min_length=1, regex='^[a-zA-Z_0-9-\\s.,]+$')
    ]


class CreatedBy1(BaseModel):
    __root__: Annotated[
        str, Field(max_length=100, min_length=1, regex='^[a-zA-Z0-9\\s-_()\\[\\]]+$')
    ]


class LastUpdatedBy(CreatedBy1):
    pass


class ControlCommentBody(BaseModel):
    __root__: Annotated[str, Field(max_length=500, regex='^[\\w\\W\\s\\S]*$')]


class ControlComment(BaseModel):
    """
    A comment posted by a user on a control. This includes the author's name, the comment text, and a timestamp.
    """

    authorName: Optional[Username] = None
    commentBody: Optional[ControlCommentBody] = None
    postedDate: Optional[Timestamp] = None


class SourceName(BaseModel):
    __root__: Annotated[str, Field(max_length=100, min_length=1)]


class SourceDescription(ActionPlanInstructions):
    pass


class SourceSetUpOption(Enum):
    System_Controls_Mapping = 'System_Controls_Mapping'
    Procedural_Controls_Mapping = 'Procedural_Controls_Mapping'


class SourceType(Enum):
    AWS_Cloudtrail = 'AWS_Cloudtrail'
    AWS_Config = 'AWS_Config'
    AWS_Security_Hub = 'AWS_Security_Hub'
    AWS_API_Call = 'AWS_API_Call'
    MANUAL = 'MANUAL'


class SourceFrequency(Enum):
    DAILY = 'DAILY'
    WEEKLY = 'WEEKLY'
    MONTHLY = 'MONTHLY'


class TroubleshootingText(ActionPlanInstructions):
    pass


class ControlMetadata(BaseModel):
    """
    The metadata associated with the specified standard or custom control.
    """

    arn: Optional[AuditManagerArn] = None
    id: Optional[UUID] = None
    name: Optional[ControlName] = None
    controlSources: Optional[ControlSources] = None
    createdAt: Optional[Timestamp] = None
    lastUpdatedAt: Optional[Timestamp] = None


class ControlMetadataList(BaseModel):
    __root__: List[ControlMetadata]


class ControlSetName(BaseModel):
    __root__: Annotated[str, Field(max_length=300, min_length=1, regex='^[^\\_]*$')]


class CreateAssessmentFrameworkControl(BaseModel):
    """
    Control entity attributes that uniquely identify an existing control to be added to a framework in Audit Manager.
    """

    id: Optional[UUID] = None


class CreateAssessmentFrameworkControls(BaseModel):
    __root__: Annotated[List[CreateAssessmentFrameworkControl], Field(min_items=1)]


class CreateAssessmentReportRequest(BaseModel):
    name: AssessmentReportName
    description: Optional[AssessmentReportDescription] = None


class DelegationComment(BaseModel):
    __root__: Annotated[str, Field(max_length=350, regex='^[\\w\\W\\s\\S]*$')]


class RoleType(Enum):
    PROCESS_OWNER = 'PROCESS_OWNER'
    RESOURCE_OWNER = 'RESOURCE_OWNER'


class DelegationStatus(Enum):
    IN_PROGRESS = 'IN_PROGRESS'
    UNDER_REVIEW = 'UNDER_REVIEW'
    COMPLETE = 'COMPLETE'


class Delegation(BaseModel):
    """
    The assignment of a control set to a delegate for review.
    """

    id: Optional[UUID] = None
    assessmentName: Optional[AssessmentName] = None
    assessmentId: Optional[UUID] = None
    status: Optional[DelegationStatus] = None
    roleArn: Optional[IamArn] = None
    roleType: Optional[RoleType] = None
    creationTime: Optional[Timestamp] = None
    lastUpdated: Optional[Timestamp] = None
    controlSetId: Optional[ControlSetId] = None
    comment: Optional[DelegationComment] = None
    createdBy: Optional[CreatedBy1] = None


class DelegationMetadata(BaseModel):
    """
    The metadata associated with the specified delegation.
    """

    id: Optional[UUID] = None
    assessmentName: Optional[AssessmentName] = None
    assessmentId: Optional[UUID] = None
    status: Optional[DelegationStatus] = None
    roleArn: Optional[IamArn] = None
    creationTime: Optional[Timestamp] = None
    controlSetName: Optional[NonEmptyString] = None


class DelegationMetadataList(BaseModel):
    __root__: List[DelegationMetadata]


class DeleteAssessmentFrameworkRequest(BaseModel):
    pass


class DeleteAssessmentReportRequest(BaseModel):
    pass


class DeleteAssessmentRequest(BaseModel):
    pass


class DeleteControlRequest(BaseModel):
    pass


class DeregisterAccountRequest(BaseModel):
    pass


class DeregisterOrganizationAdminAccountRequest(BaseModel):
    adminAccountId: Optional[AccountId] = None


class DisassociateAssessmentReportEvidenceFolderRequest(BaseModel):
    evidenceFolderId: UUID


class EventName(ComplianceType):
    pass


class EvidenceAttributes(BaseModel):
    pass

    class Config:
        extra = Extra.allow


class EvidenceAttributeKey(ComplianceType):
    pass


class EvidenceAttributeValue(BaseModel):
    __root__: Annotated[str, Field(max_length=200, regex='^[\\w\\W\\s\\S]*$')]


class FrameworkMetadataList(BaseModel):
    __root__: List[AssessmentFrameworkMetadata]


class GenericArn(BaseModel):
    __root__: Annotated[str, Field(max_length=2048, min_length=20, regex='^arn:.*')]


class GetAccountStatusRequest(BaseModel):
    pass


class GetAssessmentFrameworkRequest(BaseModel):
    pass


class GetAssessmentReportUrlRequest(BaseModel):
    pass


class GetAssessmentRequest(BaseModel):
    pass


class Token(BaseModel):
    __root__: Annotated[
        str, Field(max_length=1000, min_length=1, regex='^[A-Za-z0-9+\\/=]*$')
    ]


class MaxResults(BaseModel):
    __root__: Annotated[
        int, Field(description='Max results in the page.', ge=1.0, le=1000.0)
    ]


class GetChangeLogsRequest(BaseModel):
    pass


class GetControlRequest(BaseModel):
    pass


class GetDelegationsRequest(BaseModel):
    pass


class GetEvidenceByEvidenceFolderRequest(BaseModel):
    pass


class GetEvidenceFolderRequest(BaseModel):
    pass


class GetEvidenceFoldersByAssessmentControlRequest(BaseModel):
    pass


class GetEvidenceFoldersByAssessmentRequest(BaseModel):
    pass


class GetEvidenceRequest(BaseModel):
    pass


class GetOrganizationAdminAccountRequest(BaseModel):
    pass


class OrganizationId(BaseModel):
    __root__: Annotated[
        str, Field(max_length=34, min_length=12, regex='o-[a-z0-9]{10,32}')
    ]


class GetServicesInScopeRequest(BaseModel):
    pass


class SettingAttribute(Enum):
    ALL = 'ALL'
    IS_AWS_ORG_ENABLED = 'IS_AWS_ORG_ENABLED'
    SNS_TOPIC = 'SNS_TOPIC'
    DEFAULT_ASSESSMENT_REPORTS_DESTINATION = 'DEFAULT_ASSESSMENT_REPORTS_DESTINATION'
    DEFAULT_PROCESS_OWNERS = 'DEFAULT_PROCESS_OWNERS'


class GetSettingsRequest(BaseModel):
    pass


class HyperlinkName(AssessmentFrameworkDescription):
    pass


class KeywordInputType(Enum):
    SELECT_FROM_LIST = 'SELECT_FROM_LIST'


class KeywordValue(BaseModel):
    __root__: Annotated[
        str, Field(max_length=100, min_length=1, regex='^[a-zA-Z_0-9-\\s().]+$')
    ]


class Keywords(BaseModel):
    __root__: List[KeywordValue]


class KmsKey(BaseModel):
    __root__: Annotated[
        str, Field(max_length=2048, min_length=7, regex='^arn:.*:kms:.*|DEFAULT')
    ]


class ListAssessmentFrameworksRequest(BaseModel):
    pass


class ListAssessmentReportsRequest(BaseModel):
    pass


class ListAssessmentsRequest(BaseModel):
    pass


class ListControlsRequest(BaseModel):
    pass


class ListKeywordsForDataSourceRequest(BaseModel):
    pass


class ListNotificationsRequest(BaseModel):
    pass


class ListTagsForResourceRequest(BaseModel):
    pass


class TimestampUUID(BaseModel):
    __root__: Annotated[
        str,
        Field(
            max_length=50,
            min_length=47,
            regex='^[0-9]{10,13}_[a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12}$',
        ),
    ]


class Notification(BaseModel):
    """
    The notification used to inform a user of an update in Audit Manager. For example, this includes the notification that is sent when a control set is delegated for review.
    """

    id: Optional[TimestampUUID] = None
    assessmentId: Optional[UUID] = None
    assessmentName: Optional[AssessmentName] = None
    controlSetId: Optional[ControlSetId] = None
    controlSetName: Optional[NonEmptyString] = None
    description: Optional[NonEmptyString] = None
    eventTime: Optional[Timestamp] = None
    source: Optional[NonEmptyString] = None


class RegisterAccountRequest(BaseModel):
    kmsKey: Optional[KmsKey] = None
    delegatedAdminAccount: Optional[AccountId] = None


class RegisterOrganizationAdminAccountRequest(BaseModel):
    adminAccountId: AccountId


class Resource(BaseModel):
    """
    A system asset that is evaluated in an Audit Manager assessment.
    """

    arn: Optional[GenericArn] = None
    value: Optional[String] = None


class SNSTopic(BaseModel):
    __root__: Annotated[
        str, Field(max_length=255, min_length=1, regex='^[a-zA-Z0-9-_\\(\\)\\[\\]]+$')
    ]


class ServiceMetadata(BaseModel):
    """
    The metadata associated with the specified Amazon Web Service.
    """

    name: Optional[AWSServiceName] = None
    displayName: Optional[NonEmptyString] = None
    description: Optional[NonEmptyString] = None
    category: Optional[NonEmptyString] = None


class SnsArn(BaseModel):
    __root__: Annotated[
        str, Field(max_length=2048, min_length=20, regex='^arn:.*:sns:.*')
    ]


class TagKeyList(BaseModel):
    __root__: Annotated[List[TagKey], Field(max_items=50, min_items=1)]


class TagResourceRequest(BaseModel):
    tags: TagMap


class UrlLink(BaseModel):
    __root__: Annotated[
        str,
        Field(
            max_length=8192,
            min_length=1,
            regex='^(https?:\\/\\/)?(www\\.)?[a-zA-Z0-9-_]+([\\.]+[a-zA-Z]+)+[\\/\\w]*$',
        ),
    ]


class UntagResourceRequest(BaseModel):
    pass


class UpdateAssessmentControlRequest(BaseModel):
    controlStatus: Optional[ControlStatus] = None
    commentBody: Optional[ControlCommentBody] = None


class UpdateAssessmentControlSetStatusRequest(BaseModel):
    status: ControlSetStatus
    comment: DelegationComment


class UpdateAssessmentStatusRequest(BaseModel):
    status: AssessmentStatus


class ValidateAssessmentReportIntegrityRequest(BaseModel):
    s3RelativePath: S3Url


class ValidationErrors(BaseModel):
    __root__: List[NonEmptyString]


class BatchAssociateAssessmentReportEvidenceResponse(BaseModel):
    evidenceIds: Optional[EvidenceIds] = None
    errors: Optional[AssessmentReportEvidenceErrors] = None


class CreateDelegationRequest(BaseModel):
    """
    A collection of attributes used to create a delegation for an assessment in Audit Manager.
    """

    comment: Optional[DelegationComment] = None
    controlSetId: Optional[ControlSetId] = None
    roleArn: Optional[IamArn] = None
    roleType: Optional[RoleType] = None


class BatchDeleteDelegationByAssessmentResponse(BaseModel):
    errors: Optional[BatchDeleteDelegationByAssessmentErrors] = None


class BatchDisassociateAssessmentReportEvidenceResponse(
    BatchAssociateAssessmentReportEvidenceResponse
):
    pass


class ManualEvidence(BaseModel):
    """
    Evidence that is uploaded to Audit Manager manually.
    """

    s3ResourcePath: Optional[S3Url] = None


class AWSAccounts(BaseModel):
    __root__: List[AWSAccount]


class AWSServices(BaseModel):
    __root__: List[AWSService]


class Role(BaseModel):
    """
    The wrapper that contains the Audit Manager role information of the current user, such as the role type and IAM Amazon Resource Name (ARN).
    """

    roleType: Optional[RoleType] = None
    roleArn: Optional[IamArn] = None


class CreateAssessmentFrameworkControlSet(BaseModel):
    """
    A <code>controlSet</code> entity that represents a collection of controls in Audit Manager. This does not contain the control set ID.
    """

    name: ControlSetName
    controls: Optional[CreateAssessmentFrameworkControls] = None


class CreateAssessmentReportResponse(BaseModel):
    assessmentReport: Optional[AssessmentReport] = None


class DeregisterAccountResponse(BaseModel):
    status: Optional[AccountStatus] = None


class GetAccountStatusResponse(DeregisterAccountResponse):
    pass


class GetChangeLogsResponse(BaseModel):
    changeLogs: Optional[ChangeLogs] = None
    nextToken: Optional[Token] = None


class GetDelegationsResponse(BaseModel):
    delegations: Optional[DelegationMetadataList] = None
    nextToken: Optional[Token] = None


class GetEvidenceFolderResponse(BaseModel):
    evidenceFolder: Optional[AssessmentEvidenceFolder] = None


class GetEvidenceFoldersByAssessmentResponse(BaseModel):
    evidenceFolders: Optional[AssessmentEvidenceFolders] = None
    nextToken: Optional[Token] = None


class GetEvidenceFoldersByAssessmentControlResponse(
    GetEvidenceFoldersByAssessmentResponse
):
    pass


class GetOrganizationAdminAccountResponse(BaseModel):
    adminAccountId: Optional[AccountId] = None
    organizationId: Optional[OrganizationId] = None


class ListAssessmentFrameworksResponse(BaseModel):
    frameworkMetadataList: Optional[FrameworkMetadataList] = None
    nextToken: Optional[Token] = None


class ListAssessmentReportsResponse(BaseModel):
    assessmentReports: Optional[AssessmentReportsMetadata] = None
    nextToken: Optional[Token] = None


class ListControlsResponse(BaseModel):
    controlMetadataList: Optional[ControlMetadataList] = None
    nextToken: Optional[Token] = None


class ListKeywordsForDataSourceResponse(BaseModel):
    keywords: Optional[Keywords] = None
    nextToken: Optional[Token] = None


class ListTagsForResourceResponse(BaseModel):
    tags: Optional[TagMap] = None


class RegisterAccountResponse(DeregisterAccountResponse):
    pass


class RegisterOrganizationAdminAccountResponse(GetOrganizationAdminAccountResponse):
    pass


class UpdateAssessmentFrameworkControlSet(BaseModel):
    """
    A <code>controlSet</code> entity that represents a collection of controls in Audit Manager. This does not contain the control set ID.
    """

    id: Optional[ControlSetName] = None
    name: ControlSetName
    controls: Optional[CreateAssessmentFrameworkControls] = None


class ValidateAssessmentReportIntegrityResponse(BaseModel):
    signatureValid: Optional[Boolean] = None
    signatureAlgorithm: Optional[String] = None
    signatureDateTime: Optional[String] = None
    signatureKeyId: Optional[String] = None
    validationErrors: Optional[ValidationErrors] = None


class ControlComments(BaseModel):
    __root__: List[ControlComment]


class EvidenceSources(ValidationErrors):
    pass


class AssessmentControl(BaseModel):
    """
    The control entity that represents a standard or custom control used in an Audit Manager assessment.
    """

    id: Optional[UUID] = None
    name: Optional[ControlName] = None
    description: Optional[ControlDescription] = None
    status: Optional[ControlStatus] = None
    response: Optional[ControlResponse] = None
    comments: Optional[ControlComments] = None
    evidenceSources: Optional[EvidenceSources] = None
    evidenceCount: Optional[Integer] = None
    assessmentReportEvidenceCount: Optional[Integer] = None


class Roles(BaseModel):
    __root__: List[Role]


class AssessmentControls(BaseModel):
    __root__: List[AssessmentControl]


class Delegations(BaseModel):
    __root__: List[Delegation]


class AssessmentControlSet(BaseModel):
    """
    Represents a set of controls in an Audit Manager assessment.
    """

    id: Optional[ControlSetId] = None
    description: Optional[NonEmptyString] = None
    status: Optional[ControlSetStatus] = None
    roles: Optional[Roles] = None
    controls: Optional[AssessmentControls] = None
    delegations: Optional[Delegations] = None
    systemEvidenceCount: Optional[Integer] = None
    manualEvidenceCount: Optional[Integer] = None


class AssessmentControlSets(BaseModel):
    __root__: List[AssessmentControlSet]


class FrameworkMetadata(BaseModel):
    """
    The metadata of a framework, such as the name, ID, description, and so on.
    """

    name: Optional[AssessmentName] = None
    description: Optional[AssessmentFrameworkDescription] = None
    logo: Optional[Filename] = None
    complianceType: Optional[ComplianceType] = None


class Scope(BaseModel):
    """
    The wrapper that contains the accounts and services in scope for the assessment.
    """

    awsAccounts: Optional[AWSAccounts] = None
    awsServices: Optional[AWSServices] = None


class AssessmentMetadataItem(BaseModel):
    """
    A metadata object associated with an assessment in Audit Manager.
    """

    name: Optional[AssessmentName] = None
    id: Optional[UUID] = None
    complianceType: Optional[ComplianceType] = None
    status: Optional[AssessmentStatus] = None
    roles: Optional[Roles] = None
    delegations: Optional[Delegations] = None
    creationTime: Optional[Timestamp] = None
    lastUpdated: Optional[Timestamp] = None


class BatchCreateDelegationByAssessmentError(BaseModel):
    """
    An error entity for the <code>BatchCreateDelegationByAssessment</code> API. This is used to provide more meaningful errors than a simple string message.
    """

    createDelegationRequest: Optional[CreateDelegationRequest] = None
    errorCode: Optional[ErrorCode] = None
    errorMessage: Optional[ErrorMessage] = None


class BatchCreateDelegationByAssessmentErrors(BaseModel):
    __root__: List[BatchCreateDelegationByAssessmentError]


class CreateDelegationRequests(BaseModel):
    __root__: Annotated[List[CreateDelegationRequest], Field(max_items=50, min_items=1)]


class BatchCreateDelegationByAssessmentRequest(BaseModel):
    createDelegationRequests: CreateDelegationRequests


class BatchImportEvidenceToAssessmentControlError(BaseModel):
    """
    An error entity for the <code>BatchImportEvidenceToAssessmentControl</code> API. This is used to provide more meaningful errors than a simple string message.
    """

    manualEvidence: Optional[ManualEvidence] = None
    errorCode: Optional[ErrorCode] = None
    errorMessage: Optional[ErrorMessage] = None


class BatchImportEvidenceToAssessmentControlErrors(BaseModel):
    __root__: List[BatchImportEvidenceToAssessmentControlError]


class ManualEvidenceList(BaseModel):
    __root__: Annotated[List[ManualEvidence], Field(max_items=50, min_items=1)]


class BatchImportEvidenceToAssessmentControlRequest(BaseModel):
    manualEvidence: ManualEvidenceList


class SourceKeyword(BaseModel):
    """
    The keyword to search for in CloudTrail logs, Config rules, Security Hub checks, and Amazon Web Services API names.
    """

    keywordInputType: Optional[KeywordInputType] = None
    keywordValue: Optional[KeywordValue] = None


class CreateAssessmentFrameworkControlSets(BaseModel):
    __root__: Annotated[List[CreateAssessmentFrameworkControlSet], Field(min_items=1)]


class CreateAssessmentFrameworkRequest(BaseModel):
    name: FrameworkName
    description: Optional[FrameworkDescription] = None
    complianceType: Optional[ComplianceType] = None
    controlSets: CreateAssessmentFrameworkControlSets
    tags: Optional[TagMap] = None


class CreateAssessmentRequest(BaseModel):
    name: AssessmentName
    description: Optional[AssessmentDescription] = None
    assessmentReportsDestination: AssessmentReportsDestination
    scope: Scope
    roles: Roles
    frameworkId: UUID
    tags: Optional[TagMap] = None


class Resources(BaseModel):
    __root__: List[Resource]


class Evidence(BaseModel):
    """
    A record that contains the information needed to demonstrate compliance with the requirements specified by a control. Examples of evidence include change activity triggered by a user, or a system configuration snapshot.
    """

    dataSource: Optional[String] = None
    evidenceAwsAccountId: Optional[AccountId] = None
    time: Optional[Timestamp] = None
    eventSource: Optional[AWSServiceName] = None
    eventName: Optional[EventName] = None
    evidenceByType: Optional[String] = None
    resourcesIncluded: Optional[Resources] = None
    attributes: Optional[EvidenceAttributes] = None
    iamId: Optional[IamArn] = None
    complianceCheck: Optional[String] = None
    awsOrganization: Optional[String] = None
    awsAccountId: Optional[AccountId] = None
    evidenceFolderId: Optional[UUID] = None
    id: Optional[UUID] = None
    assessmentReportSelection: Optional[String] = None


class EvidenceList(BaseModel):
    __root__: List[Evidence]


class URL(BaseModel):
    """
    A uniform resource locator, used as a unique identifier to locate a resource on the internet.
    """

    hyperlinkName: Optional[HyperlinkName] = None
    link: Optional[UrlLink] = None


class ServiceMetadataList(BaseModel):
    __root__: List[ServiceMetadata]


class Settings(BaseModel):
    """
    The settings object that holds all supported Audit Manager settings.
    """

    isAwsOrgEnabled: Optional[Boolean] = None
    snsTopic: Optional[SNSTopic] = None
    defaultAssessmentReportsDestination: Optional[AssessmentReportsDestination] = None
    defaultProcessOwners: Optional[Roles] = None
    kmsKey: Optional[KmsKey] = None


class ListAssessmentMetadata(BaseModel):
    __root__: List[AssessmentMetadataItem]


class Notifications(BaseModel):
    __root__: List[Notification]


class UpdateAssessmentFrameworkControlSets(BaseModel):
    __root__: List[UpdateAssessmentFrameworkControlSet]


class UpdateAssessmentFrameworkRequest(BaseModel):
    name: FrameworkName
    description: Optional[FrameworkDescription] = None
    complianceType: Optional[ComplianceType] = None
    controlSets: UpdateAssessmentFrameworkControlSets


class UpdateAssessmentRequest(BaseModel):
    assessmentName: Optional[AssessmentName] = None
    assessmentDescription: Optional[AssessmentDescription] = None
    scope: Scope
    assessmentReportsDestination: Optional[AssessmentReportsDestination] = None
    roles: Optional[Roles] = None


class UpdateSettingsRequest(BaseModel):
    snsTopic: Optional[SnsArn] = None
    defaultAssessmentReportsDestination: Optional[AssessmentReportsDestination] = None
    defaultProcessOwners: Optional[Roles] = None
    kmsKey: Optional[KmsKey] = None


class BatchCreateDelegationByAssessmentResponse(BaseModel):
    delegations: Optional[Delegations] = None
    errors: Optional[BatchCreateDelegationByAssessmentErrors] = None


class BatchImportEvidenceToAssessmentControlResponse(BaseModel):
    errors: Optional[BatchImportEvidenceToAssessmentControlErrors] = None


class CreateControlMappingSource(BaseModel):
    """
    Control mapping fields that represent the source for evidence collection, along with related parameters and metadata. This does not contain <code>mappingID</code>.
    """

    sourceName: Optional[SourceName] = None
    sourceDescription: Optional[SourceDescription] = None
    sourceSetUpOption: Optional[SourceSetUpOption] = None
    sourceType: Optional[SourceType] = None
    sourceKeyword: Optional[SourceKeyword] = None
    sourceFrequency: Optional[SourceFrequency] = None
    troubleshootingText: Optional[TroubleshootingText] = None


class GetAssessmentReportUrlResponse(BaseModel):
    preSignedUrl: Optional[URL] = None


class GetEvidenceResponse(BaseModel):
    evidence: Optional[Evidence] = None


class GetEvidenceByEvidenceFolderResponse(BaseModel):
    evidence: Optional[EvidenceList] = None
    nextToken: Optional[Token] = None


class GetServicesInScopeResponse(BaseModel):
    serviceMetadata: Optional[ServiceMetadataList] = None


class GetSettingsResponse(BaseModel):
    settings: Optional[Settings] = None


class ListAssessmentsResponse(BaseModel):
    assessmentMetadata: Optional[ListAssessmentMetadata] = None
    nextToken: Optional[Token] = None


class ListNotificationsResponse(BaseModel):
    notifications: Optional[Notifications] = None
    nextToken: Optional[Token] = None


class UpdateAssessmentControlResponse(BaseModel):
    control: Optional[AssessmentControl] = None


class UpdateAssessmentControlSetStatusResponse(BaseModel):
    controlSet: Optional[AssessmentControlSet] = None


class ControlMappingSource(BaseModel):
    """
    The data source that determines from where Audit Manager collects evidence for the control.
    """

    sourceId: Optional[UUID] = None
    sourceName: Optional[SourceName] = None
    sourceDescription: Optional[SourceDescription] = None
    sourceSetUpOption: Optional[SourceSetUpOption] = None
    sourceType: Optional[SourceType] = None
    sourceKeyword: Optional[SourceKeyword] = None
    sourceFrequency: Optional[SourceFrequency] = None
    troubleshootingText: Optional[TroubleshootingText] = None


class UpdateSettingsResponse(GetSettingsResponse):
    pass


class AssessmentMetadata1(BaseModel):
    """
    The metadata associated with the specified assessment.
    """

    name: Optional[AssessmentName] = None
    id: Optional[UUID] = None
    description: Optional[AssessmentDescription] = None
    complianceType: Optional[ComplianceType] = None
    status: Optional[AssessmentStatus] = None
    assessmentReportsDestination: Optional[AssessmentReportsDestination] = None
    scope: Optional[Scope] = None
    roles: Optional[Roles] = None
    delegations: Optional[Delegations] = None
    creationTime: Optional[Timestamp] = None
    lastUpdated: Optional[Timestamp] = None


class AssessmentFramework(BaseModel):
    """
    The file used to structure and automate Audit Manager assessments for a given compliance standard.
    """

    id: Optional[UUID] = None
    arn: Optional[AuditManagerArn] = None
    metadata: Optional[FrameworkMetadata] = None
    controlSets: Optional[AssessmentControlSets] = None


class Assessment(BaseModel):
    """
    An entity that defines the scope of audit evidence collected by Audit Manager. An Audit Manager assessment is an implementation of an Audit Manager framework.
    """

    arn: Optional[AuditManagerArn] = None
    awsAccount: Optional[AWSAccount] = None
    metadata: Optional[AssessmentMetadata1] = None
    framework: Optional[AssessmentFramework] = None
    tags: Optional[TagMap] = None


class ControlMappingSources(BaseModel):
    __root__: Annotated[List[ControlMappingSource], Field(min_items=1)]


class Control(BaseModel):
    """
    A control in Audit Manager.
    """

    arn: Optional[AuditManagerArn] = None
    id: Optional[UUID] = None
    type: Optional[FrameworkType] = None
    name: Optional[ControlName] = None
    description: Optional[ControlDescription] = None
    testingInformation: Optional[TestingInformation] = None
    actionPlanTitle: Optional[ActionPlanTitle] = None
    actionPlanInstructions: Optional[ActionPlanInstructions] = None
    controlSources: Optional[ControlSources] = None
    controlMappingSources: Optional[ControlMappingSources] = None
    createdAt: Optional[Timestamp] = None
    lastUpdatedAt: Optional[Timestamp] = None
    createdBy: Optional[CreatedBy1] = None
    lastUpdatedBy: Optional[LastUpdatedBy] = None
    tags: Optional[TagMap] = None


class Controls3(BaseModel):
    __root__: Annotated[List[Control], Field(min_items=1)]


class ControlSet1(BaseModel):
    """
    A set of controls in Audit Manager.
    """

    id: Optional[UUID] = None
    name: Optional[ControlSetName] = None
    controls: Optional[Controls3] = None


class ControlSets1(BaseModel):
    __root__: Annotated[List[ControlSet1], Field(min_items=1)]


class Framework(BaseModel):
    """
    The file used to structure and automate Audit Manager assessments for a given compliance standard.
    """

    arn: Optional[AuditManagerArn] = None
    id: Optional[UUID] = None
    name: Optional[FrameworkName] = None
    type: Optional[FrameworkType] = None
    complianceType: Optional[ComplianceType] = None
    description: Optional[FrameworkDescription] = None
    logo: Optional[Filename] = None
    controlSources: Optional[ControlSources] = None
    controlSets: Optional[ControlSets1] = None
    createdAt: Optional[Timestamp] = None
    lastUpdatedAt: Optional[Timestamp] = None
    createdBy: Optional[CreatedBy1] = None
    lastUpdatedBy: Optional[LastUpdatedBy] = None
    tags: Optional[TagMap] = None


class CreateControlMappingSources(BaseModel):
    __root__: Annotated[List[CreateControlMappingSource], Field(min_items=1)]


class CreateControlRequest(BaseModel):
    name: ControlName
    description: Optional[ControlDescription] = None
    testingInformation: Optional[TestingInformation] = None
    actionPlanTitle: Optional[ActionPlanTitle] = None
    actionPlanInstructions: Optional[ActionPlanInstructions] = None
    controlMappingSources: CreateControlMappingSources
    tags: Optional[TagMap] = None


class UpdateControlRequest(BaseModel):
    name: ControlName
    description: Optional[ControlDescription] = None
    testingInformation: Optional[TestingInformation] = None
    actionPlanTitle: Optional[ActionPlanTitle] = None
    actionPlanInstructions: Optional[ActionPlanInstructions] = None
    controlMappingSources: ControlMappingSources


class CreateAssessmentResponse(BaseModel):
    assessment: Optional[Assessment] = None


class CreateAssessmentFrameworkResponse(BaseModel):
    framework: Optional[Framework] = None


class CreateControlResponse(BaseModel):
    control: Optional[Control] = None


class GetAssessmentResponse(BaseModel):
    assessment: Optional[Assessment] = None
    userRole: Optional[Role] = None


class GetAssessmentFrameworkResponse(CreateAssessmentFrameworkResponse):
    pass


class GetControlResponse(CreateControlResponse):
    pass


class UpdateAssessmentResponse(CreateAssessmentResponse):
    pass


class UpdateAssessmentFrameworkResponse(CreateAssessmentFrameworkResponse):
    pass


class UpdateAssessmentStatusResponse(CreateAssessmentResponse):
    pass


class UpdateControlResponse(CreateControlResponse):
    pass
