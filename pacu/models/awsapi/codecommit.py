# generated by datamodel-codegen:
#   filename:  openapi.yaml
#   timestamp: 2021-12-31T02:46:26+00:00

from __future__ import annotations

from datetime import datetime
from enum import Enum
from typing import Annotated, Any, List, Optional

from pydantic import BaseModel, Extra, Field


class ApprovalRuleTemplateNameRequiredException(BaseModel):
    __root__: Any


class InvalidApprovalRuleTemplateNameException(
    ApprovalRuleTemplateNameRequiredException
):
    pass


class ApprovalRuleTemplateDoesNotExistException(
    ApprovalRuleTemplateNameRequiredException
):
    pass


class MaximumRuleTemplatesAssociatedWithRepositoryException(
    ApprovalRuleTemplateNameRequiredException
):
    pass


class RepositoryNameRequiredException(ApprovalRuleTemplateNameRequiredException):
    pass


class InvalidRepositoryNameException(ApprovalRuleTemplateNameRequiredException):
    pass


class RepositoryDoesNotExistException(ApprovalRuleTemplateNameRequiredException):
    pass


class EncryptionIntegrityChecksFailedException(
    ApprovalRuleTemplateNameRequiredException
):
    pass


class EncryptionKeyAccessDeniedException(ApprovalRuleTemplateNameRequiredException):
    pass


class EncryptionKeyDisabledException(ApprovalRuleTemplateNameRequiredException):
    pass


class EncryptionKeyNotFoundException(ApprovalRuleTemplateNameRequiredException):
    pass


class EncryptionKeyUnavailableException(ApprovalRuleTemplateNameRequiredException):
    pass


class RepositoryNamesRequiredException(ApprovalRuleTemplateNameRequiredException):
    pass


class MaximumRepositoryNamesExceededException(
    ApprovalRuleTemplateNameRequiredException
):
    pass


class MergeOptionRequiredException(ApprovalRuleTemplateNameRequiredException):
    pass


class InvalidMergeOptionException(ApprovalRuleTemplateNameRequiredException):
    pass


class InvalidContinuationTokenException(ApprovalRuleTemplateNameRequiredException):
    pass


class CommitRequiredException(ApprovalRuleTemplateNameRequiredException):
    pass


class CommitDoesNotExistException(ApprovalRuleTemplateNameRequiredException):
    pass


class InvalidCommitException(ApprovalRuleTemplateNameRequiredException):
    pass


class TipsDivergenceExceededException(ApprovalRuleTemplateNameRequiredException):
    pass


class InvalidMaxConflictFilesException(ApprovalRuleTemplateNameRequiredException):
    pass


class InvalidMaxMergeHunksException(ApprovalRuleTemplateNameRequiredException):
    pass


class InvalidConflictDetailLevelException(ApprovalRuleTemplateNameRequiredException):
    pass


class InvalidConflictResolutionStrategyException(
    ApprovalRuleTemplateNameRequiredException
):
    pass


class MaximumFileContentToLoadExceededException(
    ApprovalRuleTemplateNameRequiredException
):
    pass


class MaximumItemsToCompareExceededException(ApprovalRuleTemplateNameRequiredException):
    pass


class CommitIdsListRequiredException(ApprovalRuleTemplateNameRequiredException):
    pass


class CommitIdsLimitExceededException(ApprovalRuleTemplateNameRequiredException):
    pass


class ApprovalRuleTemplateNameAlreadyExistsException(
    ApprovalRuleTemplateNameRequiredException
):
    pass


class ApprovalRuleTemplateContentRequiredException(
    ApprovalRuleTemplateNameRequiredException
):
    pass


class InvalidApprovalRuleTemplateContentException(
    ApprovalRuleTemplateNameRequiredException
):
    pass


class InvalidApprovalRuleTemplateDescriptionException(
    ApprovalRuleTemplateNameRequiredException
):
    pass


class NumberOfRuleTemplatesExceededException(ApprovalRuleTemplateNameRequiredException):
    pass


class BranchNameRequiredException(ApprovalRuleTemplateNameRequiredException):
    pass


class BranchNameExistsException(ApprovalRuleTemplateNameRequiredException):
    pass


class InvalidBranchNameException(ApprovalRuleTemplateNameRequiredException):
    pass


class CommitIdRequiredException(ApprovalRuleTemplateNameRequiredException):
    pass


class InvalidCommitIdException(ApprovalRuleTemplateNameRequiredException):
    pass


class ParentCommitIdRequiredException(ApprovalRuleTemplateNameRequiredException):
    pass


class InvalidParentCommitIdException(ApprovalRuleTemplateNameRequiredException):
    pass


class ParentCommitDoesNotExistException(ApprovalRuleTemplateNameRequiredException):
    pass


class ParentCommitIdOutdatedException(ApprovalRuleTemplateNameRequiredException):
    pass


class BranchDoesNotExistException(ApprovalRuleTemplateNameRequiredException):
    pass


class BranchNameIsTagNameException(ApprovalRuleTemplateNameRequiredException):
    pass


class FileEntryRequiredException(ApprovalRuleTemplateNameRequiredException):
    pass


class MaximumFileEntriesExceededException(ApprovalRuleTemplateNameRequiredException):
    pass


class PutFileEntryConflictException(ApprovalRuleTemplateNameRequiredException):
    pass


class SourceFileOrContentRequiredException(ApprovalRuleTemplateNameRequiredException):
    pass


class FileContentAndSourceFileSpecifiedException(
    ApprovalRuleTemplateNameRequiredException
):
    pass


class PathRequiredException(ApprovalRuleTemplateNameRequiredException):
    pass


class InvalidPathException(ApprovalRuleTemplateNameRequiredException):
    pass


class SamePathRequestException(ApprovalRuleTemplateNameRequiredException):
    pass


class FileDoesNotExistException(ApprovalRuleTemplateNameRequiredException):
    pass


class FileContentSizeLimitExceededException(ApprovalRuleTemplateNameRequiredException):
    pass


class FolderContentSizeLimitExceededException(
    ApprovalRuleTemplateNameRequiredException
):
    pass


class InvalidDeletionParameterException(ApprovalRuleTemplateNameRequiredException):
    pass


class RestrictedSourceFileException(ApprovalRuleTemplateNameRequiredException):
    pass


class FileModeRequiredException(ApprovalRuleTemplateNameRequiredException):
    pass


class InvalidFileModeException(ApprovalRuleTemplateNameRequiredException):
    pass


class NameLengthExceededException(ApprovalRuleTemplateNameRequiredException):
    pass


class InvalidEmailException(ApprovalRuleTemplateNameRequiredException):
    pass


class CommitMessageLengthExceededException(ApprovalRuleTemplateNameRequiredException):
    pass


class NoChangeException(ApprovalRuleTemplateNameRequiredException):
    pass


class FileNameConflictsWithDirectoryNameException(
    ApprovalRuleTemplateNameRequiredException
):
    pass


class DirectoryNameConflictsWithFileNameException(
    ApprovalRuleTemplateNameRequiredException
):
    pass


class FilePathConflictsWithSubmodulePathException(
    ApprovalRuleTemplateNameRequiredException
):
    pass


class ClientRequestTokenRequiredException(ApprovalRuleTemplateNameRequiredException):
    pass


class InvalidClientRequestTokenException(ApprovalRuleTemplateNameRequiredException):
    pass


class IdempotencyParameterMismatchException(ApprovalRuleTemplateNameRequiredException):
    pass


class ReferenceNameRequiredException(ApprovalRuleTemplateNameRequiredException):
    pass


class InvalidReferenceNameException(ApprovalRuleTemplateNameRequiredException):
    pass


class ReferenceDoesNotExistException(ApprovalRuleTemplateNameRequiredException):
    pass


class ReferenceTypeNotSupportedException(ApprovalRuleTemplateNameRequiredException):
    pass


class TitleRequiredException(ApprovalRuleTemplateNameRequiredException):
    pass


class InvalidTitleException(ApprovalRuleTemplateNameRequiredException):
    pass


class InvalidDescriptionException(ApprovalRuleTemplateNameRequiredException):
    pass


class TargetsRequiredException(ApprovalRuleTemplateNameRequiredException):
    pass


class InvalidTargetsException(ApprovalRuleTemplateNameRequiredException):
    pass


class TargetRequiredException(ApprovalRuleTemplateNameRequiredException):
    pass


class InvalidTargetException(ApprovalRuleTemplateNameRequiredException):
    pass


class MultipleRepositoriesInPullRequestException(
    ApprovalRuleTemplateNameRequiredException
):
    pass


class MaximumOpenPullRequestsExceededException(
    ApprovalRuleTemplateNameRequiredException
):
    pass


class SourceAndDestinationAreSameException(ApprovalRuleTemplateNameRequiredException):
    pass


class ApprovalRuleNameRequiredException(ApprovalRuleTemplateNameRequiredException):
    pass


class InvalidApprovalRuleNameException(ApprovalRuleTemplateNameRequiredException):
    pass


class ApprovalRuleNameAlreadyExistsException(ApprovalRuleTemplateNameRequiredException):
    pass


class ApprovalRuleContentRequiredException(ApprovalRuleTemplateNameRequiredException):
    pass


class InvalidApprovalRuleContentException(ApprovalRuleTemplateNameRequiredException):
    pass


class NumberOfRulesExceededException(ApprovalRuleTemplateNameRequiredException):
    pass


class PullRequestDoesNotExistException(ApprovalRuleTemplateNameRequiredException):
    pass


class InvalidPullRequestIdException(ApprovalRuleTemplateNameRequiredException):
    pass


class PullRequestIdRequiredException(ApprovalRuleTemplateNameRequiredException):
    pass


class PullRequestAlreadyClosedException(ApprovalRuleTemplateNameRequiredException):
    pass


class RepositoryNameExistsException(ApprovalRuleTemplateNameRequiredException):
    pass


class InvalidRepositoryDescriptionException(ApprovalRuleTemplateNameRequiredException):
    pass


class RepositoryLimitExceededException(ApprovalRuleTemplateNameRequiredException):
    pass


class InvalidTagsMapException(ApprovalRuleTemplateNameRequiredException):
    pass


class TooManyTagsException(ApprovalRuleTemplateNameRequiredException):
    pass


class InvalidSystemTagUsageException(ApprovalRuleTemplateNameRequiredException):
    pass


class TagPolicyException(ApprovalRuleTemplateNameRequiredException):
    pass


class InvalidConflictResolutionException(ApprovalRuleTemplateNameRequiredException):
    pass


class ManualMergeRequiredException(ApprovalRuleTemplateNameRequiredException):
    pass


class MaximumConflictResolutionEntriesExceededException(
    ApprovalRuleTemplateNameRequiredException
):
    pass


class MultipleConflictResolutionEntriesException(
    ApprovalRuleTemplateNameRequiredException
):
    pass


class ReplacementTypeRequiredException(ApprovalRuleTemplateNameRequiredException):
    pass


class InvalidReplacementTypeException(ApprovalRuleTemplateNameRequiredException):
    pass


class ReplacementContentRequiredException(ApprovalRuleTemplateNameRequiredException):
    pass


class InvalidReplacementContentException(ApprovalRuleTemplateNameRequiredException):
    pass


class ConcurrentReferenceUpdateException(ApprovalRuleTemplateNameRequiredException):
    pass


class ApprovalRuleTemplateInUseException(ApprovalRuleTemplateNameRequiredException):
    pass


class DefaultBranchCannotBeDeletedException(ApprovalRuleTemplateNameRequiredException):
    pass


class CommentDoesNotExistException(ApprovalRuleTemplateNameRequiredException):
    pass


class CommentIdRequiredException(ApprovalRuleTemplateNameRequiredException):
    pass


class InvalidCommentIdException(ApprovalRuleTemplateNameRequiredException):
    pass


class CommentDeletedException(ApprovalRuleTemplateNameRequiredException):
    pass


class CannotDeleteApprovalRuleFromTemplateException(
    ApprovalRuleTemplateNameRequiredException
):
    pass


class InvalidPullRequestEventTypeException(ApprovalRuleTemplateNameRequiredException):
    pass


class InvalidActorArnException(ApprovalRuleTemplateNameRequiredException):
    pass


class ActorDoesNotExistException(ApprovalRuleTemplateNameRequiredException):
    pass


class InvalidMaxResultsException(ApprovalRuleTemplateNameRequiredException):
    pass


class InvalidRevisionIdException(ApprovalRuleTemplateNameRequiredException):
    pass


class RevisionIdRequiredException(ApprovalRuleTemplateNameRequiredException):
    pass


class RevisionNotCurrentException(ApprovalRuleTemplateNameRequiredException):
    pass


class BlobIdRequiredException(ApprovalRuleTemplateNameRequiredException):
    pass


class InvalidBlobIdException(ApprovalRuleTemplateNameRequiredException):
    pass


class BlobIdDoesNotExistException(ApprovalRuleTemplateNameRequiredException):
    pass


class FileTooLargeException(ApprovalRuleTemplateNameRequiredException):
    pass


class InvalidReactionUserArnException(ApprovalRuleTemplateNameRequiredException):
    pass


class RepositoryNotAssociatedWithPullRequestException(
    ApprovalRuleTemplateNameRequiredException
):
    pass


class CommitIdDoesNotExistException(ApprovalRuleTemplateNameRequiredException):
    pass


class PathDoesNotExistException(ApprovalRuleTemplateNameRequiredException):
    pass


class FolderDoesNotExistException(ApprovalRuleTemplateNameRequiredException):
    pass


class InvalidDestinationCommitSpecifierException(
    ApprovalRuleTemplateNameRequiredException
):
    pass


class InvalidSourceCommitSpecifierException(ApprovalRuleTemplateNameRequiredException):
    pass


class InvalidPullRequestStatusException(ApprovalRuleTemplateNameRequiredException):
    pass


class InvalidAuthorArnException(ApprovalRuleTemplateNameRequiredException):
    pass


class AuthorDoesNotExistException(ApprovalRuleTemplateNameRequiredException):
    pass


class InvalidSortByException(ApprovalRuleTemplateNameRequiredException):
    pass


class InvalidOrderException(ApprovalRuleTemplateNameRequiredException):
    pass


class ResourceArnRequiredException(ApprovalRuleTemplateNameRequiredException):
    pass


class InvalidResourceArnException(ApprovalRuleTemplateNameRequiredException):
    pass


class InvalidTargetBranchException(ApprovalRuleTemplateNameRequiredException):
    pass


class TipOfSourceReferenceIsDifferentException(
    ApprovalRuleTemplateNameRequiredException
):
    pass


class PullRequestApprovalRulesNotSatisfiedException(
    ApprovalRuleTemplateNameRequiredException
):
    pass


class InvalidOverrideStatusException(ApprovalRuleTemplateNameRequiredException):
    pass


class OverrideStatusRequiredException(ApprovalRuleTemplateNameRequiredException):
    pass


class OverrideAlreadySetException(ApprovalRuleTemplateNameRequiredException):
    pass


class CommentContentRequiredException(ApprovalRuleTemplateNameRequiredException):
    pass


class CommentContentSizeLimitExceededException(
    ApprovalRuleTemplateNameRequiredException
):
    pass


class InvalidFileLocationException(ApprovalRuleTemplateNameRequiredException):
    pass


class InvalidRelativeFileVersionEnumException(
    ApprovalRuleTemplateNameRequiredException
):
    pass


class InvalidFilePositionException(ApprovalRuleTemplateNameRequiredException):
    pass


class BeforeCommitIdAndAfterCommitIdAreSameException(
    ApprovalRuleTemplateNameRequiredException
):
    pass


class InvalidReactionValueException(ApprovalRuleTemplateNameRequiredException):
    pass


class ReactionValueRequiredException(ApprovalRuleTemplateNameRequiredException):
    pass


class ReactionLimitExceededException(ApprovalRuleTemplateNameRequiredException):
    pass


class FileContentRequiredException(ApprovalRuleTemplateNameRequiredException):
    pass


class SameFileContentException(ApprovalRuleTemplateNameRequiredException):
    pass


class RepositoryTriggersListRequiredException(
    ApprovalRuleTemplateNameRequiredException
):
    pass


class MaximumRepositoryTriggersExceededException(
    ApprovalRuleTemplateNameRequiredException
):
    pass


class InvalidRepositoryTriggerNameException(ApprovalRuleTemplateNameRequiredException):
    pass


class InvalidRepositoryTriggerDestinationArnException(
    ApprovalRuleTemplateNameRequiredException
):
    pass


class InvalidRepositoryTriggerRegionException(
    ApprovalRuleTemplateNameRequiredException
):
    pass


class InvalidRepositoryTriggerCustomDataException(
    ApprovalRuleTemplateNameRequiredException
):
    pass


class MaximumBranchesExceededException(ApprovalRuleTemplateNameRequiredException):
    pass


class InvalidRepositoryTriggerBranchNameException(
    ApprovalRuleTemplateNameRequiredException
):
    pass


class InvalidRepositoryTriggerEventsException(
    ApprovalRuleTemplateNameRequiredException
):
    pass


class RepositoryTriggerNameRequiredException(ApprovalRuleTemplateNameRequiredException):
    pass


class RepositoryTriggerDestinationArnRequiredException(
    ApprovalRuleTemplateNameRequiredException
):
    pass


class RepositoryTriggerBranchNameListRequiredException(
    ApprovalRuleTemplateNameRequiredException
):
    pass


class RepositoryTriggerEventsListRequiredException(
    ApprovalRuleTemplateNameRequiredException
):
    pass


class TagsMapRequiredException(ApprovalRuleTemplateNameRequiredException):
    pass


class TagKeysListRequiredException(ApprovalRuleTemplateNameRequiredException):
    pass


class InvalidTagKeysListException(ApprovalRuleTemplateNameRequiredException):
    pass


class InvalidRuleContentSha256Exception(ApprovalRuleTemplateNameRequiredException):
    pass


class CommentNotCreatedByCallerException(ApprovalRuleTemplateNameRequiredException):
    pass


class ApprovalRuleDoesNotExistException(ApprovalRuleTemplateNameRequiredException):
    pass


class CannotModifyApprovalRuleFromTemplateException(
    ApprovalRuleTemplateNameRequiredException
):
    pass


class InvalidApprovalStateException(ApprovalRuleTemplateNameRequiredException):
    pass


class ApprovalStateRequiredException(ApprovalRuleTemplateNameRequiredException):
    pass


class PullRequestCannotBeApprovedByAuthorException(
    ApprovalRuleTemplateNameRequiredException
):
    pass


class MaximumNumberOfApprovalsExceededException(
    ApprovalRuleTemplateNameRequiredException
):
    pass


class InvalidPullRequestStatusUpdateException(
    ApprovalRuleTemplateNameRequiredException
):
    pass


class PullRequestStatusRequiredException(ApprovalRuleTemplateNameRequiredException):
    pass


class AccountId(BaseModel):
    __root__: str


class AdditionalData(AccountId):
    pass


class Arn(AccountId):
    pass


class ApprovalState(Enum):
    APPROVE = 'APPROVE'
    REVOKE = 'REVOKE'


class Approval(BaseModel):
    """
    Returns information about a specific approval on a pull request.
    """

    userArn: Optional[Arn] = None
    approvalState: Optional[ApprovalState] = None


class ApprovalList(BaseModel):
    __root__: List[Approval]


class ApprovalRuleId(AccountId):
    pass


class ApprovalRuleName(BaseModel):
    __root__: Annotated[str, Field(max_length=100, min_length=1)]


class ApprovalRuleContent(BaseModel):
    __root__: Annotated[str, Field(max_length=3000, min_length=1)]


class RuleContentSha256(AccountId):
    pass


class LastModifiedDate(BaseModel):
    __root__: datetime


class CreationDate(LastModifiedDate):
    pass


class ApprovalRuleEventMetadata(BaseModel):
    """
    Returns information about an event for an approval rule.
    """

    approvalRuleName: Optional[ApprovalRuleName] = None
    approvalRuleId: Optional[ApprovalRuleId] = None
    approvalRuleContent: Optional[ApprovalRuleContent] = None


class RevisionId(AccountId):
    pass


class OverrideStatus(Enum):
    OVERRIDE = 'OVERRIDE'
    REVOKE = 'REVOKE'


class ApprovalRuleOverriddenEventMetadata(BaseModel):
    """
    Returns information about an override event for approval rules for a pull request.
    """

    revisionId: Optional[RevisionId] = None
    overrideStatus: Optional[OverrideStatus] = None


class ApprovalRuleTemplateId(AccountId):
    pass


class ApprovalRuleTemplateName(ApprovalRuleName):
    pass


class ApprovalRuleTemplateDescription(BaseModel):
    __root__: Annotated[str, Field(max_length=1000, min_length=0)]


class ApprovalRuleTemplateContent(ApprovalRuleContent):
    pass


class ApprovalRuleTemplate(BaseModel):
    """
    Returns information about an approval rule template.
    """

    approvalRuleTemplateId: Optional[ApprovalRuleTemplateId] = None
    approvalRuleTemplateName: Optional[ApprovalRuleTemplateName] = None
    approvalRuleTemplateDescription: Optional[ApprovalRuleTemplateDescription] = None
    approvalRuleTemplateContent: Optional[ApprovalRuleTemplateContent] = None
    ruleContentSha256: Optional[RuleContentSha256] = None
    lastModifiedDate: Optional[LastModifiedDate] = None
    creationDate: Optional[CreationDate] = None
    lastModifiedUser: Optional[Arn] = None


class ApprovalRuleTemplateNameList(BaseModel):
    __root__: List[ApprovalRuleTemplateName]


class ApprovalRulesNotSatisfiedList(BaseModel):
    __root__: List[ApprovalRuleName]


class ApprovalRulesSatisfiedList(ApprovalRulesNotSatisfiedList):
    pass


class ApprovalStateChangedEventMetadata(BaseModel):
    """
    Returns information about a change in the approval state for a pull request.
    """

    revisionId: Optional[RevisionId] = None
    approvalStatus: Optional[ApprovalState] = None


class Approved(BaseModel):
    __root__: bool


class RepositoryName(BaseModel):
    __root__: Annotated[str, Field(max_length=100, min_length=1, regex='[\\w\\.-]+')]


class ErrorCode(AccountId):
    pass


class ErrorMessage(AccountId):
    pass


class BatchAssociateApprovalRuleTemplateWithRepositoriesError(BaseModel):
    """
    Returns information about errors in a BatchAssociateApprovalRuleTemplateWithRepositories operation.
    """

    repositoryName: Optional[RepositoryName] = None
    errorCode: Optional[ErrorCode] = None
    errorMessage: Optional[ErrorMessage] = None


class BatchAssociateApprovalRuleTemplateWithRepositoriesErrorsList(BaseModel):
    __root__: List[BatchAssociateApprovalRuleTemplateWithRepositoriesError]


class RepositoryNameList(BaseModel):
    __root__: List[RepositoryName]


class Path(AccountId):
    pass


class ExceptionName(AccountId):
    pass


class Message(AccountId):
    pass


class BatchDescribeMergeConflictsError(BaseModel):
    """
    Returns information about errors in a BatchDescribeMergeConflicts operation.
    """

    filePath: Path
    exceptionName: ExceptionName
    message: Message


class BatchDescribeMergeConflictsErrors(BaseModel):
    __root__: List[BatchDescribeMergeConflictsError]


class CommitName(AccountId):
    pass


class MergeOptionTypeEnum(Enum):
    FAST_FORWARD_MERGE = 'FAST_FORWARD_MERGE'
    SQUASH_MERGE = 'SQUASH_MERGE'
    THREE_WAY_MERGE = 'THREE_WAY_MERGE'


class MaxResults(BaseModel):
    __root__: int


class FilePaths(BaseModel):
    __root__: List[Path]


class ConflictDetailLevelTypeEnum(Enum):
    FILE_LEVEL = 'FILE_LEVEL'
    LINE_LEVEL = 'LINE_LEVEL'


class ConflictResolutionStrategyTypeEnum(Enum):
    NONE = 'NONE'
    ACCEPT_SOURCE = 'ACCEPT_SOURCE'
    ACCEPT_DESTINATION = 'ACCEPT_DESTINATION'
    AUTOMERGE = 'AUTOMERGE'


class NextToken(AccountId):
    pass


class ObjectId(AccountId):
    pass


class BatchDisassociateApprovalRuleTemplateFromRepositoriesError(
    BatchAssociateApprovalRuleTemplateWithRepositoriesError
):
    """
    Returns information about errors in a BatchDisassociateApprovalRuleTemplateFromRepositories operation.
    """

    pass


class BatchDisassociateApprovalRuleTemplateFromRepositoriesErrorsList(BaseModel):
    __root__: List[BatchDisassociateApprovalRuleTemplateFromRepositoriesError]


class BatchGetCommitsError(BaseModel):
    """
    Returns information about errors in a BatchGetCommits operation.
    """

    commitId: Optional[ObjectId] = None
    errorCode: Optional[ErrorCode] = None
    errorMessage: Optional[ErrorMessage] = None


class BatchGetCommitsErrorsList(BaseModel):
    __root__: List[BatchGetCommitsError]


class CommitIdsInputList(BaseModel):
    __root__: List[ObjectId]


class RepositoryNotFoundList(RepositoryNameList):
    pass


class Mode(AccountId):
    pass


class BlobMetadata(BaseModel):
    """
    Returns information about a specific Git blob object.
    """

    blobId: Optional[ObjectId] = None
    path: Optional[Path] = None
    mode: Optional[Mode] = None


class BranchName(BaseModel):
    __root__: Annotated[str, Field(max_length=256, min_length=1)]


class CommitId(AccountId):
    pass


class BranchInfo(BaseModel):
    """
    Returns information about a branch.
    """

    branchName: Optional[BranchName] = None
    commitId: Optional[CommitId] = None


class BranchNameList(BaseModel):
    __root__: List[BranchName]


class ReactionValue(AccountId):
    pass


class CallerReactions(BaseModel):
    __root__: List[ReactionValue]


class CapitalBoolean(Approved):
    pass


class ChangeTypeEnum(Enum):
    A = 'A'
    M = 'M'
    D = 'D'


class ClientRequestToken(AccountId):
    pass


class CloneUrlHttp(AccountId):
    pass


class CloneUrlSsh(AccountId):
    pass


class CommentId(AccountId):
    pass


class Content(AccountId):
    pass


class IsCommentDeleted(Approved):
    pass


class ReactionCountsMap(BaseModel):
    pass

    class Config:
        extra = Extra.allow


class Comment(BaseModel):
    """
    Returns information about a specific comment.
    """

    commentId: Optional[CommentId] = None
    content: Optional[Content] = None
    inReplyTo: Optional[CommentId] = None
    creationDate: Optional[CreationDate] = None
    lastModifiedDate: Optional[LastModifiedDate] = None
    authorArn: Optional[Arn] = None
    deleted: Optional[IsCommentDeleted] = None
    clientRequestToken: Optional[ClientRequestToken] = None
    callerReactions: Optional[CallerReactions] = None
    reactionCounts: Optional[ReactionCountsMap] = None


class Comments(BaseModel):
    __root__: List[Comment]


class PullRequestId(AccountId):
    pass


class ParentList(CommitIdsInputList):
    pass


class NumberOfConflicts(MaxResults):
    pass


class IsBinaryFile(BaseModel):
    """
    Information about whether a file is binary or textual in a merge or pull request operation.
    """

    source: Optional[CapitalBoolean] = None
    destination: Optional[CapitalBoolean] = None
    base: Optional[CapitalBoolean] = None


class IsContentConflict(Approved):
    pass


class IsFileModeConflict(Approved):
    pass


class IsObjectTypeConflict(Approved):
    pass


class MergeOperations(BaseModel):
    """
    Information about the file operation conflicts in a merge operation.
    """

    source: Optional[ChangeTypeEnum] = None
    destination: Optional[ChangeTypeEnum] = None


class Count(MaxResults):
    pass


class Name(AccountId):
    pass


class Email(AccountId):
    pass


class KeepEmptyFolders(Approved):
    pass


class Title(BaseModel):
    __root__: Annotated[str, Field(max_length=150)]


class Description(BaseModel):
    __root__: Annotated[str, Field(max_length=10240)]


class RepositoryDescription(BaseModel):
    __root__: Annotated[str, Field(max_length=1000)]


class TagsMap(BaseModel):
    pass

    class Config:
        extra = Extra.allow


class Date(AccountId):
    pass


class DeleteFileEntry(BaseModel):
    """
    A file that is deleted as part of a commit.
    """

    filePath: Path


class RepositoryId(AccountId):
    pass


class PullRequestEventType(Enum):
    PULL_REQUEST_CREATED = 'PULL_REQUEST_CREATED'
    PULL_REQUEST_STATUS_CHANGED = 'PULL_REQUEST_STATUS_CHANGED'
    PULL_REQUEST_SOURCE_REFERENCE_UPDATED = 'PULL_REQUEST_SOURCE_REFERENCE_UPDATED'
    PULL_REQUEST_MERGE_STATE_CHANGED = 'PULL_REQUEST_MERGE_STATE_CHANGED'
    PULL_REQUEST_APPROVAL_RULE_CREATED = 'PULL_REQUEST_APPROVAL_RULE_CREATED'
    PULL_REQUEST_APPROVAL_RULE_UPDATED = 'PULL_REQUEST_APPROVAL_RULE_UPDATED'
    PULL_REQUEST_APPROVAL_RULE_DELETED = 'PULL_REQUEST_APPROVAL_RULE_DELETED'
    PULL_REQUEST_APPROVAL_RULE_OVERRIDDEN = 'PULL_REQUEST_APPROVAL_RULE_OVERRIDDEN'
    PULL_REQUEST_APPROVAL_STATE_CHANGED = 'PULL_REQUEST_APPROVAL_STATE_CHANGED'


class Difference(BaseModel):
    """
    Returns information about a set of differences for a commit specifier.
    """

    beforeBlob: Optional[BlobMetadata] = None
    afterBlob: Optional[BlobMetadata] = None
    changeType: Optional[ChangeTypeEnum] = None


class DifferenceList(BaseModel):
    __root__: List[Difference]


class Overridden(Approved):
    pass


class EventDate(LastModifiedDate):
    pass


class FileModeTypeEnum(Enum):
    EXECUTABLE = 'EXECUTABLE'
    NORMAL = 'NORMAL'
    SYMLINK = 'SYMLINK'


class File(BaseModel):
    """
    Returns information about a file in a repository.
    """

    blobId: Optional[ObjectId] = None
    absolutePath: Optional[Path] = None
    relativePath: Optional[Path] = None
    fileMode: Optional[FileModeTypeEnum] = None


class FileContent(BaseModel):
    __root__: Annotated[str, Field(max_length=6291456)]


class FileList(BaseModel):
    __root__: List[File]


class FileMetadata(BaseModel):
    """
    A file to be added, updated, or deleted as part of a commit.
    """

    absolutePath: Optional[Path] = None
    blobId: Optional[ObjectId] = None
    fileMode: Optional[FileModeTypeEnum] = None


class FileSize(MaxResults):
    pass


class Folder(BaseModel):
    """
    Returns information about a folder in a repository.
    """

    treeId: Optional[ObjectId] = None
    absolutePath: Optional[Path] = None
    relativePath: Optional[Path] = None


class FolderList(BaseModel):
    __root__: List[Folder]


class Blob(AccountId):
    pass


class Limit(MaxResults):
    pass


class ObjectSize(MaxResults):
    pass


class IsMergeable(Approved):
    pass


class MergeOptions(BaseModel):
    __root__: List[MergeOptionTypeEnum]


class RepositoryTriggersConfigurationId(AccountId):
    pass


class HunkContent(AccountId):
    pass


class IsHunkConflict(Approved):
    pass


class IsMerged(Approved):
    pass


class IsMove(Approved):
    pass


class LineNumber(MaxResults):
    pass


class PullRequestStatusEnum(Enum):
    OPEN = 'OPEN'
    CLOSED = 'CLOSED'


class PullRequestIdList(BaseModel):
    __root__: List[PullRequestId]


class SortByEnum(Enum):
    repositoryName = 'repositoryName'
    lastModifiedDate = 'lastModifiedDate'


class OrderEnum(Enum):
    ascending = 'ascending'
    descending = 'descending'


class ResourceArn(AccountId):
    pass


class Position(MaxResults):
    pass


class RelativeFileVersionEnum(Enum):
    BEFORE = 'BEFORE'
    AFTER = 'AFTER'


class MergeHunkDetail(BaseModel):
    """
    Information about the details of a merge hunk that contains a conflict in a merge or pull request operation.
    """

    startLine: Optional[LineNumber] = None
    endLine: Optional[LineNumber] = None
    hunkContent: Optional[HunkContent] = None


class MergeHunk(BaseModel):
    """
    Information about merge hunks in a merge or pull request operation.
    """

    isConflict: Optional[IsHunkConflict] = None
    source: Optional[MergeHunkDetail] = None
    destination: Optional[MergeHunkDetail] = None
    base: Optional[MergeHunkDetail] = None


class MergeMetadata(BaseModel):
    """
    Returns information about a merge or potential merge between a source reference and a destination reference in a pull request.
    """

    isMerged: Optional[IsMerged] = None
    mergedBy: Optional[Arn] = None
    mergeCommitId: Optional[CommitId] = None
    mergeOption: Optional[MergeOptionTypeEnum] = None


class ObjectTypeEnum(Enum):
    FILE = 'FILE'
    DIRECTORY = 'DIRECTORY'
    GIT_LINK = 'GIT_LINK'
    SYMBOLIC_LINK = 'SYMBOLIC_LINK'


class PullRequestCreatedEventMetadata(BaseModel):
    """
    Metadata about the pull request that is used when comparing the pull request source with its destination.
    """

    repositoryName: Optional[RepositoryName] = None
    sourceCommitId: Optional[CommitId] = None
    destinationCommitId: Optional[CommitId] = None
    mergeBase: Optional[CommitId] = None


class PullRequestStatusChangedEventMetadata(BaseModel):
    """
    Information about a change to the status of a pull request.
    """

    pullRequestStatus: Optional[PullRequestStatusEnum] = None


class PullRequestSourceReferenceUpdatedEventMetadata(BaseModel):
    """
    Information about an update to the source branch of a pull request.
    """

    repositoryName: Optional[RepositoryName] = None
    beforeCommitId: Optional[CommitId] = None
    afterCommitId: Optional[CommitId] = None
    mergeBase: Optional[CommitId] = None


class ReferenceName(AccountId):
    pass


class PullRequestTarget(BaseModel):
    """
    Returns information about a pull request target.
    """

    repositoryName: Optional[RepositoryName] = None
    sourceReference: Optional[ReferenceName] = None
    destinationReference: Optional[ReferenceName] = None
    destinationCommit: Optional[CommitId] = None
    sourceCommit: Optional[CommitId] = None
    mergeBase: Optional[CommitId] = None
    mergeMetadata: Optional[MergeMetadata] = None


class SourceFileSpecifier(BaseModel):
    """
    Information about a source file that is part of changes made in a commit.
    """

    filePath: Path
    isMove: Optional[IsMove] = None


class ReactionEmoji(AccountId):
    pass


class ReactionUsersList(BaseModel):
    __root__: List[Arn]


class ReactionShortCode(AccountId):
    pass


class ReactionUnicode(AccountId):
    pass


class ReplacementTypeEnum(Enum):
    KEEP_BASE = 'KEEP_BASE'
    KEEP_SOURCE = 'KEEP_SOURCE'
    KEEP_DESTINATION = 'KEEP_DESTINATION'
    USE_NEW_CONTENT = 'USE_NEW_CONTENT'


class RepositoryNameIdPair(BaseModel):
    """
    Information about a repository name and ID.
    """

    repositoryName: Optional[RepositoryName] = None
    repositoryId: Optional[RepositoryId] = None


class RepositoryTriggerName(AccountId):
    pass


class RepositoryTriggerCustomData(AccountId):
    pass


class RepositoryTriggerEventEnum(Enum):
    all = 'all'
    updateReference = 'updateReference'
    createReference = 'createReference'
    deleteReference = 'deleteReference'


class RepositoryTriggerExecutionFailureMessage(AccountId):
    pass


class RepositoryTriggerExecutionFailure(BaseModel):
    """
    A trigger failed to run.
    """

    trigger: Optional[RepositoryTriggerName] = None
    failureMessage: Optional[RepositoryTriggerExecutionFailureMessage] = None


class RepositoryTriggerExecutionFailureList(BaseModel):
    __root__: List[RepositoryTriggerExecutionFailure]


class RepositoryTriggerNameList(BaseModel):
    __root__: List[RepositoryTriggerName]


class SetFileModeEntry(BaseModel):
    """
    Information about the file mode changes.
    """

    filePath: Path
    fileMode: FileModeTypeEnum


class SubModule(BaseModel):
    """
    Returns information about a submodule reference in a repository folder.
    """

    commitId: Optional[ObjectId] = None
    absolutePath: Optional[Path] = None
    relativePath: Optional[Path] = None


class SymbolicLink(File):
    """
    Returns information about a symbolic link in a repository folder.
    """

    pass


class TagKey(BaseModel):
    __root__: Annotated[str, Field(max_length=128, min_length=1)]


class TagKeysList(BaseModel):
    __root__: List[TagKey]


class TagValue(BaseModel):
    __root__: Annotated[str, Field(max_length=256, min_length=0)]


class Target(BaseModel):
    """
    Returns information about a target for a pull request.
    """

    repositoryName: RepositoryName
    sourceReference: ReferenceName
    destinationReference: Optional[ReferenceName] = None


class AssociateApprovalRuleTemplateWithRepositoryInput(BaseModel):
    approvalRuleTemplateName: ApprovalRuleTemplateName
    repositoryName: RepositoryName


class BatchAssociateApprovalRuleTemplateWithRepositoriesOutput(BaseModel):
    associatedRepositoryNames: RepositoryNameList
    errors: BatchAssociateApprovalRuleTemplateWithRepositoriesErrorsList


class BatchAssociateApprovalRuleTemplateWithRepositoriesInput(BaseModel):
    approvalRuleTemplateName: ApprovalRuleTemplateName
    repositoryNames: RepositoryNameList


class BatchDescribeMergeConflictsInput(BaseModel):
    repositoryName: RepositoryName
    destinationCommitSpecifier: CommitName
    sourceCommitSpecifier: CommitName
    mergeOption: MergeOptionTypeEnum
    maxMergeHunks: Optional[MaxResults] = None
    maxConflictFiles: Optional[MaxResults] = None
    filePaths: Optional[FilePaths] = None
    conflictDetailLevel: Optional[ConflictDetailLevelTypeEnum] = None
    conflictResolutionStrategy: Optional[ConflictResolutionStrategyTypeEnum] = None
    nextToken: Optional[NextToken] = None


class BatchDisassociateApprovalRuleTemplateFromRepositoriesOutput(BaseModel):
    disassociatedRepositoryNames: RepositoryNameList
    errors: BatchDisassociateApprovalRuleTemplateFromRepositoriesErrorsList


class BatchDisassociateApprovalRuleTemplateFromRepositoriesInput(BaseModel):
    approvalRuleTemplateName: ApprovalRuleTemplateName
    repositoryNames: RepositoryNameList


class BatchGetCommitsInput(BaseModel):
    commitIds: CommitIdsInputList
    repositoryName: RepositoryName


class BatchGetRepositoriesInput(BaseModel):
    """
    Represents the input of a batch get repositories operation.
    """

    repositoryNames: RepositoryNameList


class CreateApprovalRuleTemplateOutput(BaseModel):
    approvalRuleTemplate: ApprovalRuleTemplate


class CreateApprovalRuleTemplateInput(BaseModel):
    approvalRuleTemplateName: ApprovalRuleTemplateName
    approvalRuleTemplateContent: ApprovalRuleTemplateContent
    approvalRuleTemplateDescription: Optional[ApprovalRuleTemplateDescription] = None


class CreateBranchInput(BaseModel):
    """
    Represents the input of a create branch operation.
    """

    repositoryName: RepositoryName
    branchName: BranchName
    commitId: CommitId


class CreatePullRequestApprovalRuleInput(BaseModel):
    pullRequestId: PullRequestId
    approvalRuleName: ApprovalRuleName
    approvalRuleContent: ApprovalRuleContent


class CreateRepositoryInput(BaseModel):
    """
    Represents the input of a create repository operation.
    """

    repositoryName: RepositoryName
    repositoryDescription: Optional[RepositoryDescription] = None
    tags: Optional[TagsMap] = None


class CreateUnreferencedMergeCommitOutput(BaseModel):
    commitId: Optional[ObjectId] = None
    treeId: Optional[ObjectId] = None


class DeleteApprovalRuleTemplateOutput(BaseModel):
    approvalRuleTemplateId: ApprovalRuleTemplateId


class DeleteApprovalRuleTemplateInput(BaseModel):
    approvalRuleTemplateName: ApprovalRuleTemplateName


class DeleteBranchOutput(BaseModel):
    """
    Represents the output of a delete branch operation.
    """

    deletedBranch: Optional[BranchInfo] = None


class DeleteBranchInput(BaseModel):
    """
    Represents the input of a delete branch operation.
    """

    repositoryName: RepositoryName
    branchName: BranchName


class DeleteCommentContentOutput(BaseModel):
    comment: Optional[Comment] = None


class DeleteCommentContentInput(BaseModel):
    commentId: CommentId


class DeleteFileOutput(BaseModel):
    commitId: ObjectId
    blobId: ObjectId
    treeId: ObjectId
    filePath: Path


class DeleteFileInput(BaseModel):
    repositoryName: RepositoryName
    branchName: BranchName
    filePath: Path
    parentCommitId: CommitId
    keepEmptyFolders: Optional[KeepEmptyFolders] = None
    commitMessage: Optional[Message] = None
    name: Optional[Name] = None
    email: Optional[Email] = None


class DeletePullRequestApprovalRuleOutput(BaseModel):
    approvalRuleId: ApprovalRuleId


class DeletePullRequestApprovalRuleInput(BaseModel):
    pullRequestId: PullRequestId
    approvalRuleName: ApprovalRuleName


class DeleteRepositoryOutput(BaseModel):
    """
    Represents the output of a delete repository operation.
    """

    repositoryId: Optional[RepositoryId] = None


class DeleteRepositoryInput(BaseModel):
    """
    Represents the input of a delete repository operation.
    """

    repositoryName: RepositoryName


class DescribeMergeConflictsInput(BaseModel):
    repositoryName: RepositoryName
    destinationCommitSpecifier: CommitName
    sourceCommitSpecifier: CommitName
    mergeOption: MergeOptionTypeEnum
    maxMergeHunks: Optional[MaxResults] = None
    filePath: Path
    conflictDetailLevel: Optional[ConflictDetailLevelTypeEnum] = None
    conflictResolutionStrategy: Optional[ConflictResolutionStrategyTypeEnum] = None
    nextToken: Optional[NextToken] = None


class DescribePullRequestEventsInput(BaseModel):
    pullRequestId: PullRequestId
    pullRequestEventType: Optional[PullRequestEventType] = None
    actorArn: Optional[Arn] = None
    nextToken: Optional[NextToken] = None
    maxResults: Optional[MaxResults] = None


class DisassociateApprovalRuleTemplateFromRepositoryInput(BaseModel):
    approvalRuleTemplateName: ApprovalRuleTemplateName
    repositoryName: RepositoryName


class EvaluatePullRequestApprovalRulesInput(BaseModel):
    pullRequestId: PullRequestId
    revisionId: RevisionId


class GetApprovalRuleTemplateOutput(CreateApprovalRuleTemplateOutput):
    pass


class GetApprovalRuleTemplateInput(BaseModel):
    approvalRuleTemplateName: ApprovalRuleTemplateName


class GetBlobOutput(BaseModel):
    """
    Represents the output of a get blob operation.
    """

    content: Blob


class GetBlobInput(BaseModel):
    """
    Represents the input of a get blob operation.
    """

    repositoryName: RepositoryName
    blobId: ObjectId


class GetBranchOutput(BaseModel):
    """
    Represents the output of a get branch operation.
    """

    branch: Optional[BranchInfo] = None


class GetBranchInput(BaseModel):
    """
    Represents the input of a get branch operation.
    """

    repositoryName: Optional[RepositoryName] = None
    branchName: Optional[BranchName] = None


class GetCommentOutput(DeleteCommentContentOutput):
    pass


class GetCommentInput(BaseModel):
    commentId: CommentId


class GetCommentReactionsInput(BaseModel):
    commentId: CommentId
    reactionUserArn: Optional[Arn] = None
    nextToken: Optional[NextToken] = None
    maxResults: Optional[MaxResults] = None


class GetCommentsForComparedCommitInput(BaseModel):
    repositoryName: RepositoryName
    beforeCommitId: Optional[CommitId] = None
    afterCommitId: CommitId
    nextToken: Optional[NextToken] = None
    maxResults: Optional[MaxResults] = None


class GetCommentsForPullRequestInput(BaseModel):
    pullRequestId: PullRequestId
    repositoryName: Optional[RepositoryName] = None
    beforeCommitId: Optional[CommitId] = None
    afterCommitId: Optional[CommitId] = None
    nextToken: Optional[NextToken] = None
    maxResults: Optional[MaxResults] = None


class GetCommitInput(BaseModel):
    """
    Represents the input of a get commit operation.
    """

    repositoryName: RepositoryName
    commitId: ObjectId


class GetDifferencesOutput(BaseModel):
    differences: Optional[DifferenceList] = None
    NextToken: Optional[NextToken] = None


class GetDifferencesInput(BaseModel):
    repositoryName: RepositoryName
    beforeCommitSpecifier: Optional[CommitName] = None
    afterCommitSpecifier: CommitName
    beforePath: Optional[Path] = None
    afterPath: Optional[Path] = None
    MaxResults: Optional[Limit] = None
    NextToken: Optional[NextToken] = None


class GetFileOutput(BaseModel):
    commitId: ObjectId
    blobId: ObjectId
    filePath: Path
    fileMode: FileModeTypeEnum
    fileSize: ObjectSize
    fileContent: FileContent


class GetFileInput(BaseModel):
    repositoryName: RepositoryName
    commitSpecifier: Optional[CommitName] = None
    filePath: Path


class GetFolderInput(BaseModel):
    repositoryName: RepositoryName
    commitSpecifier: Optional[CommitName] = None
    folderPath: Path


class GetMergeCommitOutput(BaseModel):
    sourceCommitId: Optional[ObjectId] = None
    destinationCommitId: Optional[ObjectId] = None
    baseCommitId: Optional[ObjectId] = None
    mergedCommitId: Optional[ObjectId] = None


class GetMergeCommitInput(BaseModel):
    repositoryName: RepositoryName
    sourceCommitSpecifier: CommitName
    destinationCommitSpecifier: CommitName
    conflictDetailLevel: Optional[ConflictDetailLevelTypeEnum] = None
    conflictResolutionStrategy: Optional[ConflictResolutionStrategyTypeEnum] = None


class GetMergeConflictsInput(BaseModel):
    repositoryName: RepositoryName
    destinationCommitSpecifier: CommitName
    sourceCommitSpecifier: CommitName
    mergeOption: MergeOptionTypeEnum
    conflictDetailLevel: Optional[ConflictDetailLevelTypeEnum] = None
    maxConflictFiles: Optional[MaxResults] = None
    conflictResolutionStrategy: Optional[ConflictResolutionStrategyTypeEnum] = None
    nextToken: Optional[NextToken] = None


class GetMergeOptionsOutput(BaseModel):
    mergeOptions: MergeOptions
    sourceCommitId: ObjectId
    destinationCommitId: ObjectId
    baseCommitId: ObjectId


class GetMergeOptionsInput(BaseModel):
    repositoryName: RepositoryName
    sourceCommitSpecifier: CommitName
    destinationCommitSpecifier: CommitName
    conflictDetailLevel: Optional[ConflictDetailLevelTypeEnum] = None
    conflictResolutionStrategy: Optional[ConflictResolutionStrategyTypeEnum] = None


class GetPullRequestInput(BaseModel):
    pullRequestId: PullRequestId


class GetPullRequestApprovalStatesOutput(BaseModel):
    approvals: Optional[ApprovalList] = None


class GetPullRequestApprovalStatesInput(BaseModel):
    pullRequestId: PullRequestId
    revisionId: RevisionId


class GetPullRequestOverrideStateOutput(BaseModel):
    overridden: Optional[Overridden] = None
    overrider: Optional[Arn] = None


class GetPullRequestOverrideStateInput(BaseModel):
    pullRequestId: PullRequestId
    revisionId: RevisionId


class GetRepositoryInput(BaseModel):
    """
    Represents the input of a get repository operation.
    """

    repositoryName: RepositoryName


class GetRepositoryTriggersInput(BaseModel):
    """
    Represents the input of a get repository triggers operation.
    """

    repositoryName: RepositoryName


class ListApprovalRuleTemplatesOutput(BaseModel):
    approvalRuleTemplateNames: Optional[ApprovalRuleTemplateNameList] = None
    nextToken: Optional[NextToken] = None


class ListApprovalRuleTemplatesInput(BaseModel):
    nextToken: Optional[NextToken] = None
    maxResults: Optional[MaxResults] = None


class ListAssociatedApprovalRuleTemplatesForRepositoryOutput(
    ListApprovalRuleTemplatesOutput
):
    pass


class ListAssociatedApprovalRuleTemplatesForRepositoryInput(BaseModel):
    repositoryName: RepositoryName
    nextToken: Optional[NextToken] = None
    maxResults: Optional[MaxResults] = None


class ListBranchesOutput(BaseModel):
    """
    Represents the output of a list branches operation.
    """

    branches: Optional[BranchNameList] = None
    nextToken: Optional[NextToken] = None


class ListBranchesInput(BaseModel):
    """
    Represents the input of a list branches operation.
    """

    repositoryName: RepositoryName
    nextToken: Optional[NextToken] = None


class ListPullRequestsOutput(BaseModel):
    pullRequestIds: PullRequestIdList
    nextToken: Optional[NextToken] = None


class ListPullRequestsInput(BaseModel):
    repositoryName: RepositoryName
    authorArn: Optional[Arn] = None
    pullRequestStatus: Optional[PullRequestStatusEnum] = None
    nextToken: Optional[NextToken] = None
    maxResults: Optional[MaxResults] = None


class ListRepositoriesInput(BaseModel):
    """
    Represents the input of a list repositories operation.
    """

    nextToken: Optional[NextToken] = None
    sortBy: Optional[SortByEnum] = None
    order: Optional[OrderEnum] = None


class ListRepositoriesForApprovalRuleTemplateOutput(BaseModel):
    repositoryNames: Optional[RepositoryNameList] = None
    nextToken: Optional[NextToken] = None


class ListRepositoriesForApprovalRuleTemplateInput(BaseModel):
    approvalRuleTemplateName: ApprovalRuleTemplateName
    nextToken: Optional[NextToken] = None
    maxResults: Optional[MaxResults] = None


class ListTagsForResourceOutput(BaseModel):
    tags: Optional[TagsMap] = None
    nextToken: Optional[NextToken] = None


class ListTagsForResourceInput(BaseModel):
    resourceArn: ResourceArn
    nextToken: Optional[NextToken] = None


class MergeBranchesByFastForwardOutput(CreateUnreferencedMergeCommitOutput):
    pass


class MergeBranchesByFastForwardInput(BaseModel):
    repositoryName: RepositoryName
    sourceCommitSpecifier: CommitName
    destinationCommitSpecifier: CommitName
    targetBranch: Optional[BranchName] = None


class MergeBranchesBySquashOutput(CreateUnreferencedMergeCommitOutput):
    pass


class MergeBranchesByThreeWayOutput(CreateUnreferencedMergeCommitOutput):
    pass


class MergePullRequestByFastForwardInput(BaseModel):
    pullRequestId: PullRequestId
    repositoryName: RepositoryName
    sourceCommitId: Optional[ObjectId] = None


class OverridePullRequestApprovalRulesInput(BaseModel):
    pullRequestId: PullRequestId
    revisionId: RevisionId
    overrideStatus: OverrideStatus


class PostCommentReplyOutput(DeleteCommentContentOutput):
    pass


class PostCommentReplyInput(BaseModel):
    inReplyTo: CommentId
    clientRequestToken: Optional[ClientRequestToken] = None
    content: Content


class PutCommentReactionInput(BaseModel):
    commentId: CommentId
    reactionValue: ReactionValue


class PutFileOutput(BaseModel):
    commitId: ObjectId
    blobId: ObjectId
    treeId: ObjectId


class PutFileInput(BaseModel):
    repositoryName: RepositoryName
    branchName: BranchName
    fileContent: FileContent
    filePath: Path
    fileMode: Optional[FileModeTypeEnum] = None
    parentCommitId: Optional[CommitId] = None
    commitMessage: Optional[Message] = None
    name: Optional[Name] = None
    email: Optional[Email] = None


class PutRepositoryTriggersOutput(BaseModel):
    """
    Represents the output of a put repository triggers operation.
    """

    configurationId: Optional[RepositoryTriggersConfigurationId] = None


class TagResourceInput(BaseModel):
    resourceArn: ResourceArn
    tags: TagsMap


class TestRepositoryTriggersOutput(BaseModel):
    """
    Represents the output of a test repository triggers operation.
    """

    successfulExecutions: Optional[RepositoryTriggerNameList] = None
    failedExecutions: Optional[RepositoryTriggerExecutionFailureList] = None


class UntagResourceInput(BaseModel):
    resourceArn: ResourceArn
    tagKeys: TagKeysList


class UpdateApprovalRuleTemplateContentOutput(CreateApprovalRuleTemplateOutput):
    pass


class UpdateApprovalRuleTemplateContentInput(BaseModel):
    approvalRuleTemplateName: ApprovalRuleTemplateName
    newRuleContent: ApprovalRuleTemplateContent
    existingRuleContentSha256: Optional[RuleContentSha256] = None


class UpdateApprovalRuleTemplateDescriptionOutput(CreateApprovalRuleTemplateOutput):
    pass


class UpdateApprovalRuleTemplateDescriptionInput(BaseModel):
    approvalRuleTemplateName: ApprovalRuleTemplateName
    approvalRuleTemplateDescription: ApprovalRuleTemplateDescription


class UpdateApprovalRuleTemplateNameOutput(CreateApprovalRuleTemplateOutput):
    pass


class UpdateApprovalRuleTemplateNameInput(BaseModel):
    oldApprovalRuleTemplateName: ApprovalRuleTemplateName
    newApprovalRuleTemplateName: ApprovalRuleTemplateName


class UpdateCommentOutput(DeleteCommentContentOutput):
    pass


class UpdateCommentInput(BaseModel):
    commentId: CommentId
    content: Content


class UpdateDefaultBranchInput(BaseModel):
    """
    Represents the input of an update default branch operation.
    """

    repositoryName: RepositoryName
    defaultBranchName: BranchName


class UpdatePullRequestApprovalRuleContentInput(BaseModel):
    pullRequestId: PullRequestId
    approvalRuleName: ApprovalRuleName
    existingRuleContentSha256: Optional[RuleContentSha256] = None
    newRuleContent: ApprovalRuleContent


class UpdatePullRequestApprovalStateInput(BaseModel):
    pullRequestId: PullRequestId
    revisionId: RevisionId
    approvalState: ApprovalState


class UpdatePullRequestDescriptionInput(BaseModel):
    pullRequestId: PullRequestId
    description: Description


class UpdatePullRequestStatusInput(BaseModel):
    pullRequestId: PullRequestId
    pullRequestStatus: PullRequestStatusEnum


class UpdatePullRequestTitleInput(BaseModel):
    pullRequestId: PullRequestId
    title: Title


class UpdateRepositoryDescriptionInput(BaseModel):
    """
    Represents the input of an update repository description operation.
    """

    repositoryName: RepositoryName
    repositoryDescription: Optional[RepositoryDescription] = None


class UpdateRepositoryNameInput(BaseModel):
    """
    Represents the input of an update repository description operation.
    """

    oldName: RepositoryName
    newName: RepositoryName


class OriginApprovalRuleTemplate(BaseModel):
    """
    Returns information about the template that created the approval rule for a pull request.
    """

    approvalRuleTemplateId: Optional[ApprovalRuleTemplateId] = None
    approvalRuleTemplateName: Optional[ApprovalRuleTemplateName] = None


class ApprovalRule(BaseModel):
    """
    Returns information about an approval rule.
    """

    approvalRuleId: Optional[ApprovalRuleId] = None
    approvalRuleName: Optional[ApprovalRuleName] = None
    approvalRuleContent: Optional[ApprovalRuleContent] = None
    ruleContentSha256: Optional[RuleContentSha256] = None
    lastModifiedDate: Optional[LastModifiedDate] = None
    creationDate: Optional[CreationDate] = None
    lastModifiedUser: Optional[Arn] = None
    originApprovalRuleTemplate: Optional[OriginApprovalRuleTemplate] = None


class ApprovalRulesList(BaseModel):
    __root__: List[ApprovalRule]


class Location(BaseModel):
    """
    Returns information about the location of a change or comment in the comparison between two commits or a pull request.
    """

    filePath: Optional[Path] = None
    filePosition: Optional[Position] = None
    relativeFileVersion: Optional[RelativeFileVersionEnum] = None


class CommentsForComparedCommit(BaseModel):
    """
    Returns information about comments on the comparison between two commits.
    """

    repositoryName: Optional[RepositoryName] = None
    beforeCommitId: Optional[CommitId] = None
    afterCommitId: Optional[CommitId] = None
    beforeBlobId: Optional[ObjectId] = None
    afterBlobId: Optional[ObjectId] = None
    location: Optional[Location] = None
    comments: Optional[Comments] = None


class CommentsForComparedCommitData(BaseModel):
    __root__: List[CommentsForComparedCommit]


class CommentsForPullRequest(BaseModel):
    """
    Returns information about comments on a pull request.
    """

    pullRequestId: Optional[PullRequestId] = None
    repositoryName: Optional[RepositoryName] = None
    beforeCommitId: Optional[CommitId] = None
    afterCommitId: Optional[CommitId] = None
    beforeBlobId: Optional[ObjectId] = None
    afterBlobId: Optional[ObjectId] = None
    location: Optional[Location] = None
    comments: Optional[Comments] = None


class CommentsForPullRequestData(BaseModel):
    __root__: List[CommentsForPullRequest]


class UserInfo(BaseModel):
    """
    Information about the user who made a specified commit.
    """

    name: Optional[Name] = None
    email: Optional[Email] = None
    date: Optional[Date] = None


class Commit(BaseModel):
    """
    Returns information about a specific commit.
    """

    commitId: Optional[ObjectId] = None
    treeId: Optional[ObjectId] = None
    parents: Optional[ParentList] = None
    message: Optional[Message] = None
    author: Optional[UserInfo] = None
    committer: Optional[UserInfo] = None
    additionalData: Optional[AdditionalData] = None


class MergeHunks(BaseModel):
    __root__: List[MergeHunk]


class FileSizes(BaseModel):
    """
    Information about the size of files in a merge or pull request.
    """

    source: Optional[FileSize] = None
    destination: Optional[FileSize] = None
    base: Optional[FileSize] = None


class FileModes(BaseModel):
    """
    Information about file modes in a merge or pull request.
    """

    source: Optional[FileModeTypeEnum] = None
    destination: Optional[FileModeTypeEnum] = None
    base: Optional[FileModeTypeEnum] = None


class ObjectTypes(BaseModel):
    """
    Information about the type of an object in a merge operation.
    """

    source: Optional[ObjectTypeEnum] = None
    destination: Optional[ObjectTypeEnum] = None
    base: Optional[ObjectTypeEnum] = None


class DeleteFileEntries(BaseModel):
    __root__: List[DeleteFileEntry]


class SetFileModeEntries(BaseModel):
    __root__: List[SetFileModeEntry]


class FilesMetadata(BaseModel):
    __root__: List[FileMetadata]


class TargetList(BaseModel):
    __root__: List[Target]


class RepositoryMetadata(BaseModel):
    """
    Information about a repository.
    """

    accountId: Optional[AccountId] = None
    repositoryId: Optional[RepositoryId] = None
    repositoryName: Optional[RepositoryName] = None
    repositoryDescription: Optional[RepositoryDescription] = None
    defaultBranch: Optional[BranchName] = None
    lastModifiedDate: Optional[LastModifiedDate] = None
    creationDate: Optional[CreationDate] = None
    cloneUrlHttp: Optional[CloneUrlHttp] = None
    cloneUrlSsh: Optional[CloneUrlSsh] = None
    Arn: Optional[Arn] = None


class Evaluation(BaseModel):
    """
    Returns information about the approval rules applied to a pull request and whether conditions have been met.
    """

    approved: Optional[Approved] = None
    overridden: Optional[Overridden] = None
    approvalRulesSatisfied: Optional[ApprovalRulesSatisfiedList] = None
    approvalRulesNotSatisfied: Optional[ApprovalRulesNotSatisfiedList] = None


class SymbolicLinkList(BaseModel):
    __root__: List[SymbolicLink]


class SubModuleList(BaseModel):
    __root__: List[SubModule]


class RepositoryNameIdPairList(BaseModel):
    __root__: List[RepositoryNameIdPair]


class PullRequestTargetList(BaseModel):
    __root__: List[PullRequestTarget]


class PullRequestMergedStateChangedEventMetadata(BaseModel):
    """
    Returns information about the change in the merge state for a pull request event.
    """

    repositoryName: Optional[RepositoryName] = None
    destinationReference: Optional[ReferenceName] = None
    mergeMetadata: Optional[MergeMetadata] = None


class PullRequestEvent(BaseModel):
    """
    Returns information about a pull request event.
    """

    pullRequestId: Optional[PullRequestId] = None
    eventDate: Optional[EventDate] = None
    pullRequestEventType: Optional[PullRequestEventType] = None
    actorArn: Optional[Arn] = None
    pullRequestCreatedEventMetadata: Optional[PullRequestCreatedEventMetadata] = None
    pullRequestStatusChangedEventMetadata: Optional[
        PullRequestStatusChangedEventMetadata
    ] = None
    pullRequestSourceReferenceUpdatedEventMetadata: Optional[
        PullRequestSourceReferenceUpdatedEventMetadata
    ] = None
    pullRequestMergedStateChangedEventMetadata: Optional[
        PullRequestMergedStateChangedEventMetadata
    ] = None
    approvalRuleEventMetadata: Optional[ApprovalRuleEventMetadata] = None
    approvalStateChangedEventMetadata: Optional[
        ApprovalStateChangedEventMetadata
    ] = None
    approvalRuleOverriddenEventMetadata: Optional[
        ApprovalRuleOverriddenEventMetadata
    ] = None


class PutFileEntry(BaseModel):
    """
    Information about a file added or updated as part of a commit.
    """

    filePath: Path
    fileMode: Optional[FileModeTypeEnum] = None
    fileContent: Optional[FileContent] = None
    sourceFile: Optional[SourceFileSpecifier] = None


class ReactionValueFormats(BaseModel):
    """
    Information about the values for reactions to a comment. AWS CodeCommit supports a limited set of reactions.
    """

    emoji: Optional[ReactionEmoji] = None
    shortCode: Optional[ReactionShortCode] = None
    unicode: Optional[ReactionUnicode] = None


class ReactionForComment(BaseModel):
    """
    Information about the reaction values provided by users on a comment.
    """

    reaction: Optional[ReactionValueFormats] = None
    reactionUsers: Optional[ReactionUsersList] = None
    reactionsFromDeletedUsersCount: Optional[Count] = None


class ReplaceContentEntry(BaseModel):
    """
    Information about a replacement content entry in the conflict of a merge or pull request operation.
    """

    filePath: Path
    replacementType: ReplacementTypeEnum
    content: Optional[FileContent] = None
    fileMode: Optional[FileModeTypeEnum] = None


class RepositoryTriggerEventList(BaseModel):
    __root__: List[RepositoryTriggerEventEnum]


class RepositoryTrigger(BaseModel):
    """
    Information about a trigger for a repository.
    """

    name: RepositoryTriggerName
    destinationArn: Arn
    customData: Optional[RepositoryTriggerCustomData] = None
    branches: Optional[BranchNameList] = None
    events: RepositoryTriggerEventList


class CreateCommitOutput(BaseModel):
    commitId: Optional[ObjectId] = None
    treeId: Optional[ObjectId] = None
    filesAdded: Optional[FilesMetadata] = None
    filesUpdated: Optional[FilesMetadata] = None
    filesDeleted: Optional[FilesMetadata] = None


class CreatePullRequestInput(BaseModel):
    title: Title
    description: Optional[Description] = None
    targets: TargetList
    clientRequestToken: Optional[ClientRequestToken] = None


class CreatePullRequestApprovalRuleOutput(BaseModel):
    approvalRule: ApprovalRule


class CreateRepositoryOutput(BaseModel):
    """
    Represents the output of a create repository operation.
    """

    repositoryMetadata: Optional[RepositoryMetadata] = None


class EvaluatePullRequestApprovalRulesOutput(BaseModel):
    evaluation: Evaluation


class GetCommentsForComparedCommitOutput(BaseModel):
    commentsForComparedCommitData: Optional[CommentsForComparedCommitData] = None
    nextToken: Optional[NextToken] = None


class GetCommentsForPullRequestOutput(BaseModel):
    commentsForPullRequestData: Optional[CommentsForPullRequestData] = None
    nextToken: Optional[NextToken] = None


class GetCommitOutput(BaseModel):
    """
    Represents the output of a get commit operation.
    """

    commit: Commit


class GetFolderOutput(BaseModel):
    commitId: ObjectId
    folderPath: Path
    treeId: Optional[ObjectId] = None
    subFolders: Optional[FolderList] = None
    files: Optional[FileList] = None
    symbolicLinks: Optional[SymbolicLinkList] = None
    subModules: Optional[SubModuleList] = None


class GetRepositoryOutput(CreateRepositoryOutput):
    """
    Represents the output of a get repository operation.
    """

    pass


class ListRepositoriesOutput(BaseModel):
    """
    Represents the output of a list repositories operation.
    """

    repositories: Optional[RepositoryNameIdPairList] = None
    nextToken: Optional[NextToken] = None


class PostCommentForComparedCommitOutput(BaseModel):
    repositoryName: Optional[RepositoryName] = None
    beforeCommitId: Optional[CommitId] = None
    afterCommitId: Optional[CommitId] = None
    beforeBlobId: Optional[ObjectId] = None
    afterBlobId: Optional[ObjectId] = None
    location: Optional[Location] = None
    comment: Optional[Comment] = None


class PostCommentForComparedCommitInput(BaseModel):
    repositoryName: RepositoryName
    beforeCommitId: Optional[CommitId] = None
    afterCommitId: CommitId
    location: Optional[Location] = None
    content: Content
    clientRequestToken: Optional[ClientRequestToken] = None


class PostCommentForPullRequestOutput(BaseModel):
    repositoryName: Optional[RepositoryName] = None
    pullRequestId: Optional[PullRequestId] = None
    beforeCommitId: Optional[CommitId] = None
    afterCommitId: Optional[CommitId] = None
    beforeBlobId: Optional[ObjectId] = None
    afterBlobId: Optional[ObjectId] = None
    location: Optional[Location] = None
    comment: Optional[Comment] = None


class PostCommentForPullRequestInput(BaseModel):
    pullRequestId: PullRequestId
    repositoryName: RepositoryName
    beforeCommitId: CommitId
    afterCommitId: CommitId
    location: Optional[Location] = None
    content: Content
    clientRequestToken: Optional[ClientRequestToken] = None


class UpdatePullRequestApprovalRuleContentOutput(CreatePullRequestApprovalRuleOutput):
    pass


class CommitObjectsList(BaseModel):
    __root__: List[Commit]


class RepositoryMetadataList(BaseModel):
    __root__: List[RepositoryMetadata]


class ConflictMetadata(BaseModel):
    """
    Information about the metadata for a conflict in a merge operation.
    """

    filePath: Optional[Path] = None
    fileSizes: Optional[FileSizes] = None
    fileModes: Optional[FileModes] = None
    objectTypes: Optional[ObjectTypes] = None
    numberOfConflicts: Optional[NumberOfConflicts] = None
    isBinaryFile: Optional[IsBinaryFile] = None
    contentConflict: Optional[IsContentConflict] = None
    fileModeConflict: Optional[IsFileModeConflict] = None
    objectTypeConflict: Optional[IsObjectTypeConflict] = None
    mergeOperations: Optional[MergeOperations] = None


class Conflict(BaseModel):
    """
    Information about conflicts in a merge operation.
    """

    conflictMetadata: Optional[ConflictMetadata] = None
    mergeHunks: Optional[MergeHunks] = None


class ConflictMetadataList(BaseModel):
    __root__: List[ConflictMetadata]


class ReplaceContentEntries(BaseModel):
    __root__: List[ReplaceContentEntry]


class ConflictResolution(BaseModel):
    """
    If AUTOMERGE is the conflict resolution strategy, a list of inputs to use when resolving conflicts during a merge.
    """

    replaceContents: Optional[ReplaceContentEntries] = None
    deleteFiles: Optional[DeleteFileEntries] = None
    setFileModes: Optional[SetFileModeEntries] = None


class PutFileEntries(BaseModel):
    __root__: List[PutFileEntry]


class PullRequest(BaseModel):
    """
    Returns information about a pull request.
    """

    pullRequestId: Optional[PullRequestId] = None
    title: Optional[Title] = None
    description: Optional[Description] = None
    lastActivityDate: Optional[LastModifiedDate] = None
    creationDate: Optional[CreationDate] = None
    pullRequestStatus: Optional[PullRequestStatusEnum] = None
    authorArn: Optional[Arn] = None
    pullRequestTargets: Optional[PullRequestTargetList] = None
    clientRequestToken: Optional[ClientRequestToken] = None
    revisionId: Optional[RevisionId] = None
    approvalRules: Optional[ApprovalRulesList] = None


class PullRequestEventList(BaseModel):
    __root__: List[PullRequestEvent]


class ReactionsForCommentList(BaseModel):
    __root__: List[ReactionForComment]


class RepositoryTriggersList(BaseModel):
    __root__: List[RepositoryTrigger]


class BatchGetCommitsOutput(BaseModel):
    commits: Optional[CommitObjectsList] = None
    errors: Optional[BatchGetCommitsErrorsList] = None


class BatchGetRepositoriesOutput(BaseModel):
    """
    Represents the output of a batch get repositories operation.
    """

    repositories: Optional[RepositoryMetadataList] = None
    repositoriesNotFound: Optional[RepositoryNotFoundList] = None


class CreateCommitInput(BaseModel):
    repositoryName: RepositoryName
    branchName: BranchName
    parentCommitId: Optional[CommitId] = None
    authorName: Optional[Name] = None
    email: Optional[Email] = None
    commitMessage: Optional[Message] = None
    keepEmptyFolders: Optional[KeepEmptyFolders] = None
    putFiles: Optional[PutFileEntries] = None
    deleteFiles: Optional[DeleteFileEntries] = None
    setFileModes: Optional[SetFileModeEntries] = None


class CreatePullRequestOutput(BaseModel):
    pullRequest: PullRequest


class CreateUnreferencedMergeCommitInput(BaseModel):
    repositoryName: RepositoryName
    sourceCommitSpecifier: CommitName
    destinationCommitSpecifier: CommitName
    mergeOption: MergeOptionTypeEnum
    conflictDetailLevel: Optional[ConflictDetailLevelTypeEnum] = None
    conflictResolutionStrategy: Optional[ConflictResolutionStrategyTypeEnum] = None
    authorName: Optional[Name] = None
    email: Optional[Email] = None
    commitMessage: Optional[Message] = None
    keepEmptyFolders: Optional[KeepEmptyFolders] = None
    conflictResolution: Optional[ConflictResolution] = None


class DescribeMergeConflictsOutput(BaseModel):
    conflictMetadata: ConflictMetadata
    mergeHunks: MergeHunks
    nextToken: Optional[NextToken] = None
    destinationCommitId: ObjectId
    sourceCommitId: ObjectId
    baseCommitId: Optional[ObjectId] = None


class DescribePullRequestEventsOutput(BaseModel):
    pullRequestEvents: PullRequestEventList
    nextToken: Optional[NextToken] = None


class GetCommentReactionsOutput(BaseModel):
    reactionsForComment: ReactionsForCommentList
    nextToken: Optional[NextToken] = None


class GetMergeConflictsOutput(BaseModel):
    mergeable: IsMergeable
    destinationCommitId: ObjectId
    sourceCommitId: ObjectId
    baseCommitId: Optional[ObjectId] = None
    conflictMetadataList: ConflictMetadataList
    nextToken: Optional[NextToken] = None


class GetPullRequestOutput(CreatePullRequestOutput):
    pass


class GetRepositoryTriggersOutput(BaseModel):
    """
    Represents the output of a get repository triggers operation.
    """

    configurationId: Optional[RepositoryTriggersConfigurationId] = None
    triggers: Optional[RepositoryTriggersList] = None


class MergeBranchesBySquashInput(BaseModel):
    repositoryName: RepositoryName
    sourceCommitSpecifier: CommitName
    destinationCommitSpecifier: CommitName
    targetBranch: Optional[BranchName] = None
    conflictDetailLevel: Optional[ConflictDetailLevelTypeEnum] = None
    conflictResolutionStrategy: Optional[ConflictResolutionStrategyTypeEnum] = None
    authorName: Optional[Name] = None
    email: Optional[Email] = None
    commitMessage: Optional[Message] = None
    keepEmptyFolders: Optional[KeepEmptyFolders] = None
    conflictResolution: Optional[ConflictResolution] = None


class MergeBranchesByThreeWayInput(BaseModel):
    repositoryName: RepositoryName
    sourceCommitSpecifier: CommitName
    destinationCommitSpecifier: CommitName
    targetBranch: Optional[BranchName] = None
    conflictDetailLevel: Optional[ConflictDetailLevelTypeEnum] = None
    conflictResolutionStrategy: Optional[ConflictResolutionStrategyTypeEnum] = None
    authorName: Optional[Name] = None
    email: Optional[Email] = None
    commitMessage: Optional[Message] = None
    keepEmptyFolders: Optional[KeepEmptyFolders] = None
    conflictResolution: Optional[ConflictResolution] = None


class MergePullRequestByFastForwardOutput(BaseModel):
    pullRequest: Optional[PullRequest] = None


class MergePullRequestBySquashOutput(MergePullRequestByFastForwardOutput):
    pass


class MergePullRequestBySquashInput(BaseModel):
    pullRequestId: PullRequestId
    repositoryName: RepositoryName
    sourceCommitId: Optional[ObjectId] = None
    conflictDetailLevel: Optional[ConflictDetailLevelTypeEnum] = None
    conflictResolutionStrategy: Optional[ConflictResolutionStrategyTypeEnum] = None
    commitMessage: Optional[Message] = None
    authorName: Optional[Name] = None
    email: Optional[Email] = None
    keepEmptyFolders: Optional[KeepEmptyFolders] = None
    conflictResolution: Optional[ConflictResolution] = None


class MergePullRequestByThreeWayOutput(MergePullRequestByFastForwardOutput):
    pass


class MergePullRequestByThreeWayInput(BaseModel):
    pullRequestId: PullRequestId
    repositoryName: RepositoryName
    sourceCommitId: Optional[ObjectId] = None
    conflictDetailLevel: Optional[ConflictDetailLevelTypeEnum] = None
    conflictResolutionStrategy: Optional[ConflictResolutionStrategyTypeEnum] = None
    commitMessage: Optional[Message] = None
    authorName: Optional[Name] = None
    email: Optional[Email] = None
    keepEmptyFolders: Optional[KeepEmptyFolders] = None
    conflictResolution: Optional[ConflictResolution] = None


class PutRepositoryTriggersInput(BaseModel):
    """
    Represents the input of a put repository triggers operation.
    """

    repositoryName: RepositoryName
    triggers: RepositoryTriggersList


class TestRepositoryTriggersInput(BaseModel):
    """
    Represents the input of a test repository triggers operation.
    """

    repositoryName: RepositoryName
    triggers: RepositoryTriggersList


class UpdatePullRequestDescriptionOutput(CreatePullRequestOutput):
    pass


class UpdatePullRequestStatusOutput(CreatePullRequestOutput):
    pass


class UpdatePullRequestTitleOutput(CreatePullRequestOutput):
    pass


class Conflicts(BaseModel):
    __root__: List[Conflict]


class BatchDescribeMergeConflictsOutput(BaseModel):
    conflicts: Conflicts
    nextToken: Optional[NextToken] = None
    errors: Optional[BatchDescribeMergeConflictsErrors] = None
    destinationCommitId: ObjectId
    sourceCommitId: ObjectId
    baseCommitId: Optional[ObjectId] = None
