# generated by datamodel-codegen:
#   filename:  openapi.yaml
#   timestamp: 2021-12-31T02:57:18+00:00

from __future__ import annotations

from enum import Enum
from typing import Annotated, Any, List, Optional

from pydantic import BaseModel, Extra, Field, SecretStr


class AccessDeniedException(BaseModel):
    __root__: Any


class ResourceNotFoundException(AccessDeniedException):
    pass


class ValidationException(AccessDeniedException):
    pass


class ThrottlingException(AccessDeniedException):
    pass


class InternalServerException(AccessDeniedException):
    pass


class ConflictException(AccessDeniedException):
    pass


class StringMap(BaseModel):
    pass

    class Config:
        extra = Extra.allow


class NonEmptyString(BaseModel):
    __root__: Annotated[str, Field(min_length=1)]


class String(BaseModel):
    __root__: str


class DependencyFailedException(AccessDeniedException):
    pass


class BadGatewayException(AccessDeniedException):
    pass


class ActiveContextName(BaseModel):
    __root__: Annotated[
        str, Field(max_length=100, min_length=1, regex='^([A-Za-z]_?)+$')
    ]


class ActiveContextParametersMap(BaseModel):
    pass

    class Config:
        extra = Extra.allow


class Text(BaseModel):
    __root__: Annotated[SecretStr, Field(max_length=1024, min_length=1)]


class ActiveContextTimeToLiveInSeconds(BaseModel):
    __root__: Annotated[int, Field(ge=5.0, le=86400.0)]


class ActiveContextTurnsToLive(BaseModel):
    __root__: Annotated[int, Field(ge=1.0, le=20.0)]


class AttachmentTitle(BaseModel):
    __root__: Annotated[str, Field(max_length=250, min_length=1)]


class AttachmentUrl(AttachmentTitle):
    pass


class BlobStream(String):
    pass


class BotAliasIdentifier(String):
    pass


class BotIdentifier(BaseModel):
    __root__: Annotated[
        str, Field(max_length=10, min_length=10, regex='^[0-9a-zA-Z]+$')
    ]


class ButtonText(BaseModel):
    __root__: Annotated[str, Field(max_length=50, min_length=1)]


class ButtonValue(ButtonText):
    pass


class Button(BaseModel):
    """
    A button that appears on a response card show to the user.
    """

    text: ButtonText
    value: ButtonValue


class ButtonsList(BaseModel):
    __root__: Annotated[List[Button], Field(max_items=5, min_items=0)]


class Double(BaseModel):
    __root__: float


class ConfidenceScore(BaseModel):
    """
    Provides a score that indicates the confidence that Amazon Lex V2 has that an intent is the one that satisfies the user's intent.
    """

    score: Optional[Double] = None


class ConfirmationState(Enum):
    Confirmed = 'Confirmed'
    Denied = 'Denied'
    None_ = 'None'


class LocaleId(NonEmptyString):
    pass


class SessionId(BaseModel):
    __root__: Annotated[
        str, Field(max_length=100, min_length=2, regex='[0-9a-zA-Z._:-]+')
    ]


class DeleteSessionRequest(BaseModel):
    pass


class DialogActionType(Enum):
    Close = 'Close'
    ConfirmIntent = 'ConfirmIntent'
    Delegate = 'Delegate'
    ElicitIntent = 'ElicitIntent'
    ElicitSlot = 'ElicitSlot'


class GetSessionRequest(BaseModel):
    pass


class ImageResponseCard(BaseModel):
    """
    <p>A card that is shown to the user by a messaging platform. You define the contents of the card, the card is displayed by the platform. </p> <p>When you use a response card, the response from the user is constrained to the text associated with a button on the card.</p>
    """

    title: AttachmentTitle
    subtitle: Optional[AttachmentTitle] = None
    imageUrl: Optional[AttachmentUrl] = None
    buttons: Optional[ButtonsList] = None


class Slots(BaseModel):
    pass

    class Config:
        extra = Extra.allow


class IntentState(Enum):
    Failed = 'Failed'
    Fulfilled = 'Fulfilled'
    InProgress = 'InProgress'
    ReadyForFulfillment = 'ReadyForFulfillment'
    Waiting = 'Waiting'


class MessageContentType(Enum):
    CustomPayload = 'CustomPayload'
    ImageResponseCard = 'ImageResponseCard'
    PlainText = 'PlainText'
    SSML = 'SSML'


class ParameterName(BaseModel):
    __root__: Annotated[str, Field(max_length=100, min_length=1)]


class SensitiveNonEmptyString(BaseModel):
    __root__: SecretStr


class RecognizeUtteranceRequest(BaseModel):
    inputStream: Optional[BlobStream] = None


class SentimentType(Enum):
    MIXED = 'MIXED'
    NEGATIVE = 'NEGATIVE'
    NEUTRAL = 'NEUTRAL'
    POSITIVE = 'POSITIVE'


class SentimentScore(BaseModel):
    """
    The individual sentiment responses for the utterance.
    """

    positive: Optional[Double] = None
    negative: Optional[Double] = None
    neutral: Optional[Double] = None
    mixed: Optional[Double] = None


class Shape(Enum):
    Scalar = 'Scalar'
    List = 'List'


class StringList(BaseModel):
    __root__: List[NonEmptyString]


class DeleteSessionResponse(BaseModel):
    botId: Optional[BotIdentifier] = None
    botAliasId: Optional[BotAliasIdentifier] = None
    localeId: Optional[LocaleId] = None
    sessionId: Optional[SessionId] = None


class PutSessionResponse(BaseModel):
    audioStream: Optional[BlobStream] = None


class Message(BaseModel):
    """
    Container for text that is returned to the customer..
    """

    content: Optional[Text] = None
    contentType: MessageContentType
    imageResponseCard: Optional[ImageResponseCard] = None


class DialogAction(BaseModel):
    """
    The next action that Amazon Lex V2 should take.
    """

    type: DialogActionType
    slotToElicit: Optional[NonEmptyString] = None


class Intent(BaseModel):
    """
    The current intent that Amazon Lex V2 is attempting to fulfill.
    """

    name: NonEmptyString
    slots: Optional[Slots] = None
    state: Optional[IntentState] = None
    confirmationState: Optional[ConfirmationState] = None


class RecognizeUtteranceResponse(PutSessionResponse):
    pass


class ActiveContextTimeToLive(BaseModel):
    """
    The time that a context is active. You can specify the time to live in seconds or in conversation turns.
    """

    timeToLiveInSeconds: ActiveContextTimeToLiveInSeconds
    turnsToLive: ActiveContextTurnsToLive


class ActiveContext(BaseModel):
    """
    <p>Contains information about the contexts that a user is using in a session. You can configure Amazon Lex V2 to set a context when an intent is fulfilled, or you can set a context using the , , or operations.</p> <p>Use a context to indicate to Amazon Lex V2 intents that should be used as follow-up intents. For example, if the active context is <code>order-fulfilled</code>, only intents that have <code>order-fulfilled</code> configured as a trigger are considered for follow up.</p>
    """

    name: ActiveContextName
    timeToLive: ActiveContextTimeToLive
    contextAttributes: ActiveContextParametersMap


class Messages(BaseModel):
    __root__: Annotated[List[Message], Field(max_items=10)]


class SentimentResponse(BaseModel):
    """
    <p>Provides information about the sentiment expressed in a user's response in a conversation. Sentiments are determined using Amazon Comprehend. Sentiments are only returned if they are enabled for the bot.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/comprehend/latest/dg/how-sentiment.html"> Determine Sentiment </a> in the <i>Amazon Comprehend developer guide</i>.</p>
    """

    sentiment: Optional[SentimentType] = None
    sentimentScore: Optional[SentimentScore] = None


class Interpretation(BaseModel):
    """
    An intent that Amazon Lex V2 determined might satisfy the user's utterance. The intents are ordered by the confidence score.
    """

    nluConfidence: Optional[ConfidenceScore] = None
    sentimentResponse: Optional[SentimentResponse] = None
    intent: Optional[Intent] = None


class Value1(BaseModel):
    """
    The value of a slot.
    """

    originalValue: Optional[NonEmptyString] = None
    interpretedValue: NonEmptyString
    resolvedValues: Optional[StringList] = None


class ActiveContextsList(BaseModel):
    __root__: Annotated[List[ActiveContext], Field(max_items=20, min_items=0)]


class Interpretations(BaseModel):
    __root__: Annotated[List[Interpretation], Field(max_items=5)]


class SessionState(BaseModel):
    """
    The state of the user's session with Amazon Lex V2.
    """

    dialogAction: Optional[DialogAction] = None
    intent: Optional[Intent] = None
    activeContexts: Optional[ActiveContextsList] = None
    sessionAttributes: Optional[StringMap] = None
    originatingRequestId: Optional[NonEmptyString] = None


class PutSessionRequest(BaseModel):
    messages: Optional[Messages] = None
    sessionState: SessionState
    requestAttributes: Optional[StringMap] = None


class RecognizeTextRequest(BaseModel):
    text: Text
    sessionState: Optional[SessionState] = None
    requestAttributes: Optional[StringMap] = None


class GetSessionResponse(BaseModel):
    sessionId: Optional[NonEmptyString] = None
    messages: Optional[Messages] = None
    interpretations: Optional[Interpretations] = None
    sessionState: Optional[SessionState] = None


class RecognizeTextResponse(BaseModel):
    messages: Optional[Messages] = None
    sessionState: Optional[SessionState] = None
    interpretations: Optional[Interpretations] = None
    requestAttributes: Optional[StringMap] = None
    sessionId: Optional[SessionId] = None


class Values(BaseModel):
    __root__: List[Slot]


class Slot(BaseModel):
    """
    A value that Amazon Lex V2 uses to fulfill an intent.
    """

    value: Optional[Value1] = None
    values: Optional[Values] = None


Values.update_forward_refs()
