# generated by datamodel-codegen:
#   filename:  openapi.yaml
#   timestamp: 2021-12-31T02:47:00+00:00

from __future__ import annotations

from datetime import datetime
from enum import Enum
from typing import Annotated, Any, List, Optional

from pydantic import BaseModel, Extra, Field


class ValidationException(BaseModel):
    __root__: Any


class NoSuchConfigurationAggregatorException(ValidationException):
    pass


class NoAvailableConfigurationRecorderException(ValidationException):
    pass


class InvalidParameterValueException(ValidationException):
    pass


class NoSuchConfigRuleException(ValidationException):
    pass


class ResourceInUseException(ValidationException):
    pass


class NoSuchConfigurationRecorderException(ValidationException):
    pass


class NoSuchConformancePackException(ValidationException):
    pass


class NoSuchDeliveryChannelException(ValidationException):
    pass


class LastDeliveryChannelDeleteFailedException(ValidationException):
    pass


class DeleteEvaluationResultsResponse(BaseModel):
    """
    The output when you delete the evaluation results for the specified Config rule.
    """

    pass


class NoSuchOrganizationConfigRuleException(ValidationException):
    pass


class OrganizationAccessDeniedException(ValidationException):
    pass


class NoSuchOrganizationConformancePackException(ValidationException):
    pass


class DeleteRemediationConfigurationResponse(DeleteEvaluationResultsResponse):
    pass


class NoSuchRemediationConfigurationException(ValidationException):
    pass


class RemediationInProgressException(ValidationException):
    pass


class InsufficientPermissionsException(ValidationException):
    pass


class NoSuchRemediationExceptionException(ValidationException):
    pass


class NoRunningConfigurationRecorderException(ValidationException):
    pass


class NoSuchRetentionConfigurationException(ValidationException):
    pass


class DeleteStoredQueryResponse(DeleteEvaluationResultsResponse):
    pass


class ResourceNotFoundException(ValidationException):
    pass


class InvalidLimitException(ValidationException):
    pass


class InvalidNextTokenException(ValidationException):
    pass


class NoSuchConfigRuleInConformancePackException(ValidationException):
    pass


class OversizedConfigurationItemException(ValidationException):
    pass


class ResourceNotDiscoveredException(ValidationException):
    pass


class InvalidTimeRangeException(ValidationException):
    pass


class MaxNumberOfConfigRulesExceededException(ValidationException):
    pass


class LimitExceededException(ValidationException):
    pass


class InvalidRoleException(ValidationException):
    pass


class NoAvailableOrganizationException(ValidationException):
    pass


class OrganizationAllFeaturesNotEnabledException(ValidationException):
    pass


class MaxNumberOfConfigurationRecordersExceededException(ValidationException):
    pass


class InvalidConfigurationRecorderNameException(ValidationException):
    pass


class InvalidRecordingGroupException(ValidationException):
    pass


class ConformancePackTemplateValidationException(ValidationException):
    pass


class MaxNumberOfConformancePacksExceededException(ValidationException):
    pass


class MaxNumberOfDeliveryChannelsExceededException(ValidationException):
    pass


class InvalidDeliveryChannelNameException(ValidationException):
    pass


class NoSuchBucketException(ValidationException):
    pass


class InvalidS3KeyPrefixException(ValidationException):
    pass


class InvalidS3KmsKeyArnException(ValidationException):
    pass


class InvalidSNSTopicARNException(ValidationException):
    pass


class InsufficientDeliveryPolicyException(ValidationException):
    pass


class InvalidResultTokenException(ValidationException):
    pass


class PutExternalEvaluationResponse(DeleteEvaluationResultsResponse):
    pass


class MaxNumberOfOrganizationConfigRulesExceededException(ValidationException):
    pass


class MaxNumberOfOrganizationConformancePacksExceededException(ValidationException):
    pass


class OrganizationConformancePackTemplateValidationException(ValidationException):
    pass


class MaxActiveResourcesExceededException(ValidationException):
    pass


class MaxNumberOfRetentionConfigurationsExceededException(ValidationException):
    pass


class TooManyTagsException(ValidationException):
    pass


class ResourceConcurrentModificationException(ValidationException):
    pass


class InvalidExpressionException(ValidationException):
    pass


class StartConfigRulesEvaluationResponse(DeleteEvaluationResultsResponse):
    """
    The output when you start the evaluation for the specified Config rule.
    """

    pass


class NoAvailableDeliveryChannelException(ValidationException):
    pass


class ARN(BaseModel):
    __root__: str


class Boolean(BaseModel):
    __root__: bool


class AccountId(BaseModel):
    __root__: Annotated[str, Field(regex='\\d{12}')]


class ConfigRuleName(BaseModel):
    __root__: Annotated[str, Field(max_length=128, min_length=1, regex='.*\\S.*')]


class AwsRegion(BaseModel):
    __root__: Annotated[str, Field(max_length=64, min_length=1)]


class ConformancePackName(BaseModel):
    __root__: Annotated[
        str, Field(max_length=256, min_length=1, regex='[a-zA-Z][-a-zA-Z0-9]*')
    ]


class StringWithCharLimit256(BaseModel):
    __root__: Annotated[str, Field(max_length=256, min_length=1)]


class ConformancePackComplianceType(Enum):
    COMPLIANT = 'COMPLIANT'
    NON_COMPLIANT = 'NON_COMPLIANT'
    INSUFFICIENT_DATA = 'INSUFFICIENT_DATA'


class Integer(BaseModel):
    __root__: int


class AggregateConformancePackComplianceCount(BaseModel):
    """
    The number of conformance packs that are compliant and noncompliant.
    """

    CompliantConformancePackCount: Optional[Integer] = None
    NonCompliantConformancePackCount: Optional[Integer] = None


class AggregateConformancePackComplianceFilters(BaseModel):
    """
    Filters the conformance packs based on an account ID, region, compliance type, and the name of the conformance pack.
    """

    ConformancePackName: Optional[ConformancePackName] = None
    ComplianceType: Optional[ConformancePackComplianceType] = None
    AccountId: Optional[AccountId] = None
    AwsRegion: Optional[AwsRegion] = None


class AggregateConformancePackComplianceSummary(BaseModel):
    """
    Provides a summary of compliance based on either account ID or region.
    """

    ComplianceSummary: Optional[AggregateConformancePackComplianceCount] = None
    GroupName: Optional[StringWithCharLimit256] = None


class AggregateConformancePackComplianceSummaryFilters(BaseModel):
    """
    Filters the results based on account ID and region.
    """

    AccountId: Optional[AccountId] = None
    AwsRegion: Optional[AwsRegion] = None


class AggregateConformancePackComplianceSummaryGroupKey(Enum):
    ACCOUNT_ID = 'ACCOUNT_ID'
    AWS_REGION = 'AWS_REGION'


class AggregateConformancePackComplianceSummaryList(BaseModel):
    __root__: List[AggregateConformancePackComplianceSummary]


class ComplianceType(Enum):
    COMPLIANT = 'COMPLIANT'
    NON_COMPLIANT = 'NON_COMPLIANT'
    NOT_APPLICABLE = 'NOT_APPLICABLE'
    INSUFFICIENT_DATA = 'INSUFFICIENT_DATA'


class Date(BaseModel):
    __root__: datetime


class ResourceId(BaseModel):
    __root__: Annotated[str, Field(max_length=768, min_length=1)]


class ResourceType(Enum):
    AWS__EC2__CustomerGateway = 'AWS::EC2::CustomerGateway'
    AWS__EC2__EIP = 'AWS::EC2::EIP'
    AWS__EC2__Host = 'AWS::EC2::Host'
    AWS__EC2__Instance = 'AWS::EC2::Instance'
    AWS__EC2__InternetGateway = 'AWS::EC2::InternetGateway'
    AWS__EC2__NetworkAcl = 'AWS::EC2::NetworkAcl'
    AWS__EC2__NetworkInterface = 'AWS::EC2::NetworkInterface'
    AWS__EC2__RouteTable = 'AWS::EC2::RouteTable'
    AWS__EC2__SecurityGroup = 'AWS::EC2::SecurityGroup'
    AWS__EC2__Subnet = 'AWS::EC2::Subnet'
    AWS__CloudTrail__Trail = 'AWS::CloudTrail::Trail'
    AWS__EC2__Volume = 'AWS::EC2::Volume'
    AWS__EC2__VPC = 'AWS::EC2::VPC'
    AWS__EC2__VPNConnection = 'AWS::EC2::VPNConnection'
    AWS__EC2__VPNGateway = 'AWS::EC2::VPNGateway'
    AWS__EC2__RegisteredHAInstance = 'AWS::EC2::RegisteredHAInstance'
    AWS__EC2__NatGateway = 'AWS::EC2::NatGateway'
    AWS__EC2__EgressOnlyInternetGateway = 'AWS::EC2::EgressOnlyInternetGateway'
    AWS__EC2__VPCEndpoint = 'AWS::EC2::VPCEndpoint'
    AWS__EC2__VPCEndpointService = 'AWS::EC2::VPCEndpointService'
    AWS__EC2__FlowLog = 'AWS::EC2::FlowLog'
    AWS__EC2__VPCPeeringConnection = 'AWS::EC2::VPCPeeringConnection'
    AWS__Elasticsearch__Domain = 'AWS::Elasticsearch::Domain'
    AWS__IAM__Group = 'AWS::IAM::Group'
    AWS__IAM__Policy = 'AWS::IAM::Policy'
    AWS__IAM__Role = 'AWS::IAM::Role'
    AWS__IAM__User = 'AWS::IAM::User'
    AWS__ElasticLoadBalancingV2__LoadBalancer = (
        'AWS::ElasticLoadBalancingV2::LoadBalancer'
    )
    AWS__ACM__Certificate = 'AWS::ACM::Certificate'
    AWS__RDS__DBInstance = 'AWS::RDS::DBInstance'
    AWS__RDS__DBSubnetGroup = 'AWS::RDS::DBSubnetGroup'
    AWS__RDS__DBSecurityGroup = 'AWS::RDS::DBSecurityGroup'
    AWS__RDS__DBSnapshot = 'AWS::RDS::DBSnapshot'
    AWS__RDS__DBCluster = 'AWS::RDS::DBCluster'
    AWS__RDS__DBClusterSnapshot = 'AWS::RDS::DBClusterSnapshot'
    AWS__RDS__EventSubscription = 'AWS::RDS::EventSubscription'
    AWS__S3__Bucket = 'AWS::S3::Bucket'
    AWS__S3__AccountPublicAccessBlock = 'AWS::S3::AccountPublicAccessBlock'
    AWS__Redshift__Cluster = 'AWS::Redshift::Cluster'
    AWS__Redshift__ClusterSnapshot = 'AWS::Redshift::ClusterSnapshot'
    AWS__Redshift__ClusterParameterGroup = 'AWS::Redshift::ClusterParameterGroup'
    AWS__Redshift__ClusterSecurityGroup = 'AWS::Redshift::ClusterSecurityGroup'
    AWS__Redshift__ClusterSubnetGroup = 'AWS::Redshift::ClusterSubnetGroup'
    AWS__Redshift__EventSubscription = 'AWS::Redshift::EventSubscription'
    AWS__SSM__ManagedInstanceInventory = 'AWS::SSM::ManagedInstanceInventory'
    AWS__CloudWatch__Alarm = 'AWS::CloudWatch::Alarm'
    AWS__CloudFormation__Stack = 'AWS::CloudFormation::Stack'
    AWS__ElasticLoadBalancing__LoadBalancer = 'AWS::ElasticLoadBalancing::LoadBalancer'
    AWS__AutoScaling__AutoScalingGroup = 'AWS::AutoScaling::AutoScalingGroup'
    AWS__AutoScaling__LaunchConfiguration = 'AWS::AutoScaling::LaunchConfiguration'
    AWS__AutoScaling__ScalingPolicy = 'AWS::AutoScaling::ScalingPolicy'
    AWS__AutoScaling__ScheduledAction = 'AWS::AutoScaling::ScheduledAction'
    AWS__DynamoDB__Table = 'AWS::DynamoDB::Table'
    AWS__CodeBuild__Project = 'AWS::CodeBuild::Project'
    AWS__WAF__RateBasedRule = 'AWS::WAF::RateBasedRule'
    AWS__WAF__Rule = 'AWS::WAF::Rule'
    AWS__WAF__RuleGroup = 'AWS::WAF::RuleGroup'
    AWS__WAF__WebACL = 'AWS::WAF::WebACL'
    AWS__WAFRegional__RateBasedRule = 'AWS::WAFRegional::RateBasedRule'
    AWS__WAFRegional__Rule = 'AWS::WAFRegional::Rule'
    AWS__WAFRegional__RuleGroup = 'AWS::WAFRegional::RuleGroup'
    AWS__WAFRegional__WebACL = 'AWS::WAFRegional::WebACL'
    AWS__CloudFront__Distribution = 'AWS::CloudFront::Distribution'
    AWS__CloudFront__StreamingDistribution = 'AWS::CloudFront::StreamingDistribution'
    AWS__Lambda__Function = 'AWS::Lambda::Function'
    AWS__NetworkFirewall__Firewall = 'AWS::NetworkFirewall::Firewall'
    AWS__NetworkFirewall__FirewallPolicy = 'AWS::NetworkFirewall::FirewallPolicy'
    AWS__NetworkFirewall__RuleGroup = 'AWS::NetworkFirewall::RuleGroup'
    AWS__ElasticBeanstalk__Application = 'AWS::ElasticBeanstalk::Application'
    AWS__ElasticBeanstalk__ApplicationVersion = (
        'AWS::ElasticBeanstalk::ApplicationVersion'
    )
    AWS__ElasticBeanstalk__Environment = 'AWS::ElasticBeanstalk::Environment'
    AWS__WAFv2__WebACL = 'AWS::WAFv2::WebACL'
    AWS__WAFv2__RuleGroup = 'AWS::WAFv2::RuleGroup'
    AWS__WAFv2__IPSet = 'AWS::WAFv2::IPSet'
    AWS__WAFv2__RegexPatternSet = 'AWS::WAFv2::RegexPatternSet'
    AWS__WAFv2__ManagedRuleSet = 'AWS::WAFv2::ManagedRuleSet'
    AWS__XRay__EncryptionConfig = 'AWS::XRay::EncryptionConfig'
    AWS__SSM__AssociationCompliance = 'AWS::SSM::AssociationCompliance'
    AWS__SSM__PatchCompliance = 'AWS::SSM::PatchCompliance'
    AWS__Shield__Protection = 'AWS::Shield::Protection'
    AWS__ShieldRegional__Protection = 'AWS::ShieldRegional::Protection'
    AWS__Config__ConformancePackCompliance = 'AWS::Config::ConformancePackCompliance'
    AWS__Config__ResourceCompliance = 'AWS::Config::ResourceCompliance'
    AWS__ApiGateway__Stage = 'AWS::ApiGateway::Stage'
    AWS__ApiGateway__RestApi = 'AWS::ApiGateway::RestApi'
    AWS__ApiGatewayV2__Stage = 'AWS::ApiGatewayV2::Stage'
    AWS__ApiGatewayV2__Api = 'AWS::ApiGatewayV2::Api'
    AWS__CodePipeline__Pipeline = 'AWS::CodePipeline::Pipeline'
    AWS__ServiceCatalog__CloudFormationProvisionedProduct = (
        'AWS::ServiceCatalog::CloudFormationProvisionedProduct'
    )
    AWS__ServiceCatalog__CloudFormationProduct = (
        'AWS::ServiceCatalog::CloudFormationProduct'
    )
    AWS__ServiceCatalog__Portfolio = 'AWS::ServiceCatalog::Portfolio'
    AWS__SQS__Queue = 'AWS::SQS::Queue'
    AWS__KMS__Key = 'AWS::KMS::Key'
    AWS__QLDB__Ledger = 'AWS::QLDB::Ledger'
    AWS__SecretsManager__Secret = 'AWS::SecretsManager::Secret'
    AWS__SNS__Topic = 'AWS::SNS::Topic'
    AWS__SSM__FileData = 'AWS::SSM::FileData'
    AWS__Backup__BackupPlan = 'AWS::Backup::BackupPlan'
    AWS__Backup__BackupSelection = 'AWS::Backup::BackupSelection'
    AWS__Backup__BackupVault = 'AWS::Backup::BackupVault'
    AWS__Backup__RecoveryPoint = 'AWS::Backup::RecoveryPoint'
    AWS__ECR__Repository = 'AWS::ECR::Repository'
    AWS__ECS__Cluster = 'AWS::ECS::Cluster'
    AWS__ECS__Service = 'AWS::ECS::Service'
    AWS__ECS__TaskDefinition = 'AWS::ECS::TaskDefinition'
    AWS__EFS__AccessPoint = 'AWS::EFS::AccessPoint'
    AWS__EFS__FileSystem = 'AWS::EFS::FileSystem'
    AWS__EKS__Cluster = 'AWS::EKS::Cluster'


class ResourceName(ARN):
    pass


class AggregateResourceIdentifier(BaseModel):
    """
    The details that identify a resource that is collected by Config aggregator, including the resource type, ID, (if available) the custom resource name, the source account, and source region.
    """

    SourceAccountId: AccountId
    SourceRegion: AwsRegion
    ResourceId: ResourceId
    ResourceType: ResourceType
    ResourceName: Optional[ResourceName] = None


class String(ARN):
    pass


class AggregatedSourceType(Enum):
    ACCOUNT = 'ACCOUNT'
    ORGANIZATION = 'ORGANIZATION'


class AggregatedSourceStatusType(Enum):
    FAILED = 'FAILED'
    SUCCEEDED = 'SUCCEEDED'
    OUTDATED = 'OUTDATED'


class AggregatedSourceStatus(BaseModel):
    """
    The current sync status between the source and the aggregator account.
    """

    SourceId: Optional[String] = None
    SourceType: Optional[AggregatedSourceType] = None
    AwsRegion: Optional[AwsRegion] = None
    LastUpdateStatus: Optional[AggregatedSourceStatusType] = None
    LastUpdateTime: Optional[Date] = None
    LastErrorCode: Optional[String] = None
    LastErrorMessage: Optional[String] = None


class AggregatedSourceStatusList(BaseModel):
    __root__: List[AggregatedSourceStatus]


class AggregatedSourceStatusTypeList(BaseModel):
    __root__: Annotated[List[AggregatedSourceStatusType], Field(min_items=1)]


class AggregationAuthorization(BaseModel):
    """
    An object that represents the authorizations granted to aggregator accounts and regions.
    """

    AggregationAuthorizationArn: Optional[String] = None
    AuthorizedAccountId: Optional[AccountId] = None
    AuthorizedAwsRegion: Optional[AwsRegion] = None
    CreationTime: Optional[Date] = None


class AggregationAuthorizationList(BaseModel):
    __root__: List[AggregationAuthorization]


class AllSupported(Boolean):
    pass


class AmazonResourceName(BaseModel):
    __root__: Annotated[str, Field(max_length=1000, min_length=1)]


class Annotation1(BaseModel):
    __root__: Annotated[str, Field(max_length=256, min_length=0)]


class AutoRemediationAttemptSeconds(BaseModel):
    __root__: Annotated[int, Field(ge=1.0, le=2678000.0)]


class AutoRemediationAttempts(BaseModel):
    __root__: Annotated[int, Field(ge=1.0, le=25.0)]


class AvailabilityZone(ARN):
    pass


class Version(ARN):
    pass


class ConfigurationItemCaptureTime(Date):
    pass


class ConfigurationItemStatus(Enum):
    OK = 'OK'
    ResourceDiscovered = 'ResourceDiscovered'
    ResourceNotRecorded = 'ResourceNotRecorded'
    ResourceDeleted = 'ResourceDeleted'
    ResourceDeletedNotRecorded = 'ResourceDeletedNotRecorded'


class ConfigurationStateId(ARN):
    pass


class ResourceCreationTime(Date):
    pass


class Configuration(ARN):
    pass


class SupplementaryConfiguration(BaseModel):
    pass

    class Config:
        extra = Extra.allow


class BaseConfigurationItem(BaseModel):
    """
    The detailed configuration of a specified resource.
    """

    version: Optional[Version] = None
    accountId: Optional[AccountId] = None
    configurationItemCaptureTime: Optional[ConfigurationItemCaptureTime] = None
    configurationItemStatus: Optional[ConfigurationItemStatus] = None
    configurationStateId: Optional[ConfigurationStateId] = None
    arn: Optional[ARN] = None
    resourceType: Optional[ResourceType] = None
    resourceId: Optional[ResourceId] = None
    resourceName: Optional[ResourceName] = None
    awsRegion: Optional[AwsRegion] = None
    availabilityZone: Optional[AvailabilityZone] = None
    resourceCreationTime: Optional[ResourceCreationTime] = None
    configuration: Optional[Configuration] = None
    supplementaryConfiguration: Optional[SupplementaryConfiguration] = None


class BaseConfigurationItems(BaseModel):
    __root__: List[BaseConfigurationItem]


class BaseResourceId(ResourceId):
    pass


class ConfigurationAggregatorName(BaseModel):
    __root__: Annotated[str, Field(max_length=256, min_length=1, regex='[\\w\\-]+')]


class ResourceIdentifiersList(BaseModel):
    __root__: Annotated[
        List[AggregateResourceIdentifier], Field(max_items=100, min_items=1)
    ]


class UnprocessedResourceIdentifierList(BaseModel):
    __root__: List[AggregateResourceIdentifier]


class ChannelName(StringWithCharLimit256):
    pass


class ChronologicalOrder(Enum):
    Reverse = 'Reverse'
    Forward = 'Forward'


class ComplianceContributorCount(BaseModel):
    """
    The number of Amazon Web Services resources or Config rules responsible for the current compliance of the item, up to a maximum number.
    """

    CappedCount: Optional[Integer] = None
    CapExceeded: Optional[Boolean] = None


class StringWithCharLimit64(AwsRegion):
    pass


class ComplianceResourceTypes(BaseModel):
    __root__: Annotated[List[StringWithCharLimit256], Field(max_items=100, min_items=0)]


class ComplianceTypes(BaseModel):
    __root__: Annotated[List[ComplianceType], Field(max_items=3, min_items=0)]


class DeliveryStatus(Enum):
    Success = 'Success'
    Failure = 'Failure'
    Not_Applicable = 'Not_Applicable'


class ConfigExportDeliveryInfo(BaseModel):
    """
    Provides status of the delivery of the snapshot or the configuration history to the specified Amazon S3 bucket. Also provides the status of notifications about the Amazon S3 delivery to the specified Amazon SNS topic.
    """

    lastStatus: Optional[DeliveryStatus] = None
    lastErrorCode: Optional[String] = None
    lastErrorMessage: Optional[String] = None
    lastAttemptTime: Optional[Date] = None
    lastSuccessfulTime: Optional[Date] = None
    nextDeliveryTime: Optional[Date] = None


class EmptiableStringWithCharLimit256(Annotation1):
    pass


class StringWithCharLimit1024(BaseModel):
    __root__: Annotated[str, Field(max_length=1024, min_length=1)]


class MaximumExecutionFrequency(Enum):
    One_Hour = 'One_Hour'
    Three_Hours = 'Three_Hours'
    Six_Hours = 'Six_Hours'
    Twelve_Hours = 'Twelve_Hours'
    TwentyFour_Hours = 'TwentyFour_Hours'


class ConfigRuleState(Enum):
    ACTIVE = 'ACTIVE'
    DELETING = 'DELETING'
    DELETING_RESULTS = 'DELETING_RESULTS'
    EVALUATING = 'EVALUATING'


class ConfigRuleComplianceFilters(BaseModel):
    """
    Filters the compliance results based on account ID, region, compliance type, and rule name.
    """

    ConfigRuleName: Optional[ConfigRuleName] = None
    ComplianceType: Optional[ComplianceType] = None
    AccountId: Optional[AccountId] = None
    AwsRegion: Optional[AwsRegion] = None


class ConfigRuleComplianceSummaryFilters(
    AggregateConformancePackComplianceSummaryFilters
):
    """
    Filters the results based on the account IDs and regions.
    """

    pass


class ConfigRuleEvaluationStatus(BaseModel):
    """
    <p>Status information for your Config managed rules. The status includes information such as the last time the rule ran, the last time it failed, and the related error for the last failure.</p> <p>This action does not return status information about custom Config rules.</p>
    """

    ConfigRuleName: Optional[ConfigRuleName] = None
    ConfigRuleArn: Optional[String] = None
    ConfigRuleId: Optional[String] = None
    LastSuccessfulInvocationTime: Optional[Date] = None
    LastFailedInvocationTime: Optional[Date] = None
    LastSuccessfulEvaluationTime: Optional[Date] = None
    LastFailedEvaluationTime: Optional[Date] = None
    FirstActivatedTime: Optional[Date] = None
    LastDeactivatedTime: Optional[Date] = None
    LastErrorCode: Optional[String] = None
    LastErrorMessage: Optional[String] = None
    FirstEvaluationStarted: Optional[Boolean] = None


class ConfigRuleEvaluationStatusList(BaseModel):
    __root__: List[ConfigRuleEvaluationStatus]


class ConfigRuleNames(BaseModel):
    __root__: Annotated[List[ConfigRuleName], Field(max_items=25, min_items=0)]


class ConfigSnapshotDeliveryProperties(BaseModel):
    """
    <p>Provides options for how often Config delivers configuration snapshots to the Amazon S3 bucket in your delivery channel.</p> <p>The frequency for a rule that triggers evaluations for your resources when Config delivers the configuration snapshot is set by one of two values, depending on which is less frequent:</p> <ul> <li> <p>The value for the <code>deliveryFrequency</code> parameter within the delivery channel configuration, which sets how often Config delivers configuration snapshots. This value also sets how often Config invokes evaluations for Config rules.</p> </li> <li> <p>The value for the <code>MaximumExecutionFrequency</code> parameter, which sets the maximum frequency with which Config invokes evaluations for the rule. For more information, see <a>ConfigRule</a>.</p> </li> </ul> <p>If the <code>deliveryFrequency</code> value is less frequent than the <code>MaximumExecutionFrequency</code> value for a rule, Config invokes the rule only as often as the <code>deliveryFrequency</code> value.</p> <ol> <li> <p>For example, you want your rule to run evaluations when Config delivers the configuration snapshot.</p> </li> <li> <p>You specify the <code>MaximumExecutionFrequency</code> value for <code>Six_Hours</code>. </p> </li> <li> <p>You then specify the delivery channel <code>deliveryFrequency</code> value for <code>TwentyFour_Hours</code>.</p> </li> <li> <p>Because the value for <code>deliveryFrequency</code> is less frequent than <code>MaximumExecutionFrequency</code>, Config invokes evaluations for the rule every 24 hours. </p> </li> </ol> <p>You should set the <code>MaximumExecutionFrequency</code> value to be at least as frequent as the <code>deliveryFrequency</code> value. You can view the <code>deliveryFrequency</code> value by using the <code>DescribeDeliveryChannnels</code> action.</p> <p>To update the <code>deliveryFrequency</code> with which Config delivers your configuration snapshots, use the <code>PutDeliveryChannel</code> action.</p>
    """

    deliveryFrequency: Optional[MaximumExecutionFrequency] = None


class ConfigStreamDeliveryInfo(BaseModel):
    """
    A list that contains the status of the delivery of the configuration stream notification to the Amazon SNS topic.
    """

    lastStatus: Optional[DeliveryStatus] = None
    lastErrorCode: Optional[String] = None
    lastErrorMessage: Optional[String] = None
    lastStatusChangeTime: Optional[Date] = None


class ConfigurationAggregatorArn(BaseModel):
    __root__: Annotated[
        str,
        Field(
            regex='arn:aws[a-z\\-]*:config:[a-z\\-\\d]+:\\d+:config-aggregator/config-aggregator-[a-z\\d]+'
        ),
    ]


class ConfigurationAggregatorNameList(BaseModel):
    __root__: Annotated[
        List[ConfigurationAggregatorName], Field(max_items=10, min_items=0)
    ]


class ConfigurationItemMD5Hash(ARN):
    pass


class Tags(BaseModel):
    pass

    class Config:
        extra = Extra.allow


class RecorderName(StringWithCharLimit256):
    pass


class ConfigurationRecorderNameList(BaseModel):
    __root__: List[RecorderName]


class RecorderStatus(Enum):
    Pending = 'Pending'
    Success = 'Success'
    Failure = 'Failure'


class ConfigurationRecorderStatus(BaseModel):
    """
    The current status of the configuration recorder.
    """

    name: Optional[String] = None
    lastStartTime: Optional[Date] = None
    lastStopTime: Optional[Date] = None
    recording: Optional[Boolean] = None
    lastStatus: Optional[RecorderStatus] = None
    lastErrorCode: Optional[String] = None
    lastErrorMessage: Optional[String] = None
    lastStatusChangeTime: Optional[Date] = None


class ConfigurationRecorderStatusList(BaseModel):
    __root__: List[ConfigurationRecorderStatus]


class ConformancePackArn(BaseModel):
    __root__: Annotated[str, Field(max_length=2048, min_length=1)]


class ConformancePackConfigRuleNames(BaseModel):
    __root__: Annotated[List[StringWithCharLimit64], Field(max_items=10, min_items=0)]


class ConformancePackComplianceFilters(BaseModel):
    """
    Filters the conformance pack by compliance types and Config rule names.
    """

    ConfigRuleNames: Optional[ConformancePackConfigRuleNames] = None
    ComplianceType: Optional[ConformancePackComplianceType] = None


class ConformancePackComplianceResourceIds(BaseModel):
    __root__: Annotated[List[StringWithCharLimit256], Field(max_items=5, min_items=0)]


class ConformancePackComplianceSummary(BaseModel):
    """
    Summary includes the name and status of the conformance pack.
    """

    ConformancePackName: ConformancePackName
    ConformancePackComplianceStatus: ConformancePackComplianceType


class ConformancePackComplianceSummaryList(BaseModel):
    __root__: Annotated[
        List[ConformancePackComplianceSummary], Field(max_items=5, min_items=1)
    ]


class ConformancePackId(StringWithCharLimit1024):
    pass


class DeliveryS3Bucket(BaseModel):
    __root__: Annotated[str, Field(max_length=63, min_length=0)]


class DeliveryS3KeyPrefix(BaseModel):
    __root__: Annotated[str, Field(max_length=1024, min_length=0)]


class ConformancePackEvaluationFilters(BaseModel):
    """
    Filters a conformance pack by Config rule names, compliance types, Amazon Web Services resource types, and resource IDs.
    """

    ConfigRuleNames: Optional[ConformancePackConfigRuleNames] = None
    ComplianceType: Optional[ConformancePackComplianceType] = None
    ResourceType: Optional[StringWithCharLimit256] = None
    ResourceIds: Optional[ConformancePackComplianceResourceIds] = None


class ParameterName(BaseModel):
    __root__: Annotated[str, Field(max_length=255, min_length=0)]


class ParameterValue(BaseModel):
    __root__: Annotated[str, Field(max_length=4096, min_length=0)]


class ConformancePackInputParameter(BaseModel):
    """
    Input parameters in the form of key-value pairs for the conformance pack, both of which you define. Keys can have a maximum character length of 255 characters, and values can have a maximum length of 4096 characters.
    """

    ParameterName: ParameterName
    ParameterValue: ParameterValue


class ConformancePackNamesList(BaseModel):
    __root__: Annotated[List[ConformancePackName], Field(max_items=25, min_items=0)]


class ConformancePackNamesToSummarizeList(BaseModel):
    __root__: Annotated[List[ConformancePackName], Field(max_items=5, min_items=1)]


class ConformancePackState(Enum):
    CREATE_IN_PROGRESS = 'CREATE_IN_PROGRESS'
    CREATE_COMPLETE = 'CREATE_COMPLETE'
    CREATE_FAILED = 'CREATE_FAILED'
    DELETE_IN_PROGRESS = 'DELETE_IN_PROGRESS'
    DELETE_FAILED = 'DELETE_FAILED'


class StackArn(ConformancePackArn):
    pass


class ConformancePackStatusReason(BaseModel):
    __root__: Annotated[str, Field(max_length=2000, min_length=0)]


class ConformancePackStatusDetail(BaseModel):
    """
    Status details of a conformance pack.
    """

    ConformancePackName: ConformancePackName
    ConformancePackId: ConformancePackId
    ConformancePackArn: ConformancePackArn
    ConformancePackState: ConformancePackState
    StackArn: StackArn
    ConformancePackStatusReason: Optional[ConformancePackStatusReason] = None
    LastUpdateRequestedTime: Date
    LastUpdateCompletedTime: Optional[Date] = None


class ConformancePackStatusDetailsList(BaseModel):
    __root__: Annotated[
        List[ConformancePackStatusDetail], Field(max_items=25, min_items=0)
    ]


class StringWithCharLimit128(BaseModel):
    __root__: Annotated[str, Field(max_length=128, min_length=1)]


class CosmosPageLimit(BaseModel):
    __root__: Annotated[int, Field(ge=0.0, le=100.0)]


class OrganizationConfigRuleName(BaseModel):
    __root__: Annotated[str, Field(max_length=64, min_length=1, regex='.*\\S.*')]


class OrganizationConformancePackName(BaseModel):
    __root__: Annotated[
        str, Field(max_length=128, min_length=1, regex='[a-zA-Z][-a-zA-Z0-9]*')
    ]


class ResourceTypeString(BaseModel):
    __root__: Annotated[str, Field(max_length=196, min_length=1)]


class RetentionConfigurationName(ConfigurationAggregatorName):
    pass


class QueryName(BaseModel):
    __root__: Annotated[
        str, Field(max_length=64, min_length=1, regex='^[a-zA-Z0-9-_]+$')
    ]


class DeliveryChannel(BaseModel):
    """
    The channel through which Config delivers notifications and updated configuration states.
    """

    name: Optional[ChannelName] = None
    s3BucketName: Optional[String] = None
    s3KeyPrefix: Optional[String] = None
    s3KmsKeyArn: Optional[String] = None
    snsTopicARN: Optional[String] = None
    configSnapshotDeliveryProperties: Optional[ConfigSnapshotDeliveryProperties] = None


class DeliveryChannelList(BaseModel):
    __root__: List[DeliveryChannel]


class DeliveryChannelNameList(BaseModel):
    __root__: List[ChannelName]


class DeliveryChannelStatus(BaseModel):
    """
    <p>The status of a specified delivery channel.</p> <p>Valid values: <code>Success</code> | <code>Failure</code> </p>
    """

    name: Optional[String] = None
    configSnapshotDeliveryInfo: Optional[ConfigExportDeliveryInfo] = None
    configHistoryDeliveryInfo: Optional[ConfigExportDeliveryInfo] = None
    configStreamDeliveryInfo: Optional[ConfigStreamDeliveryInfo] = None


class DeliveryChannelStatusList(BaseModel):
    __root__: List[DeliveryChannelStatus]


class GroupByAPILimit(BaseModel):
    __root__: Annotated[int, Field(ge=0.0, le=1000.0)]


class NextToken(ARN):
    pass


class Limit(CosmosPageLimit):
    pass


class RuleLimit(BaseModel):
    __root__: Annotated[int, Field(ge=0.0, le=50.0)]


class DescribeConformancePackComplianceLimit(GroupByAPILimit):
    pass


class PageSizeLimit(BaseModel):
    __root__: Annotated[int, Field(ge=0.0, le=20.0)]


class OrganizationConfigRuleNames(BaseModel):
    __root__: Annotated[List[StringWithCharLimit64], Field(max_items=25, min_items=0)]


class OrganizationConformancePackNames(BaseModel):
    __root__: Annotated[
        List[OrganizationConformancePackName], Field(max_items=25, min_items=0)
    ]


class DescribePendingAggregationRequestsLimit(PageSizeLimit):
    pass


class RetentionConfigurationNameList(BaseModel):
    __root__: Annotated[
        List[RetentionConfigurationName], Field(max_items=1, min_items=0)
    ]


class DiscoveredResourceIdentifierList(UnprocessedResourceIdentifierList):
    pass


class EarlierTime(Date):
    pass


class OrderingTimestamp1(Date):
    pass


class Evaluation(BaseModel):
    """
    Identifies an Amazon Web Services resource and indicates whether it complies with the Config rule that it was evaluated against.
    """

    ComplianceResourceType: StringWithCharLimit256
    ComplianceResourceId: BaseResourceId
    ComplianceType: ComplianceType
    Annotation: Optional[StringWithCharLimit256] = None
    OrderingTimestamp: OrderingTimestamp1


class EvaluationResultQualifier(BaseModel):
    """
    Identifies an Config rule that evaluated an Amazon Web Services resource, and provides the type and ID of the resource that the rule evaluated.
    """

    ConfigRuleName: Optional[ConfigRuleName] = None
    ResourceType: Optional[StringWithCharLimit256] = None
    ResourceId: Optional[BaseResourceId] = None


class Evaluations(BaseModel):
    __root__: Annotated[List[Evaluation], Field(max_items=100, min_items=0)]


class EventSource(Enum):
    aws_config = 'aws.config'


class ExcludedAccounts(BaseModel):
    __root__: Annotated[List[AccountId], Field(max_items=1000, min_items=0)]


class Expression(BaseModel):
    __root__: Annotated[str, Field(max_length=4096, min_length=1)]


class ExternalEvaluation(Evaluation):
    """
    Identifies an Amazon Web Services resource and indicates whether it complies with the Config rule that it was evaluated against.
    """

    pass


class FieldName(ARN):
    pass


class FieldInfo(BaseModel):
    """
    Details about the fields such as name of the field.
    """

    Name: Optional[FieldName] = None


class FieldInfoList(BaseModel):
    __root__: List[FieldInfo]


class ResourceCountFilters(BaseModel):
    """
    Filters the resource count based on account ID, region, and resource type.
    """

    ResourceType: Optional[ResourceType] = None
    AccountId: Optional[AccountId] = None
    Region: Optional[AwsRegion] = None


class ResourceCountGroupKey(Enum):
    RESOURCE_TYPE = 'RESOURCE_TYPE'
    ACCOUNT_ID = 'ACCOUNT_ID'
    AWS_REGION = 'AWS_REGION'


class Long(Integer):
    pass


class ResourceTypes(BaseModel):
    __root__: Annotated[List[StringWithCharLimit256], Field(max_items=20, min_items=0)]


class GetConformancePackComplianceDetailsLimit(CosmosPageLimit):
    pass


class LaterTime(Date):
    pass


class GroupedResourceCount(BaseModel):
    """
    The count of resources that are grouped by the group name.
    """

    GroupName: StringWithCharLimit256
    ResourceCount: Long


class IncludeGlobalResourceTypes(Boolean):
    pass


class ResourceFilters(BaseModel):
    """
    Filters the results by resource account ID, region, resource ID, and resource name.
    """

    AccountId: Optional[AccountId] = None
    ResourceId: Optional[ResourceId] = None
    ResourceName: Optional[ResourceName] = None
    Region: Optional[AwsRegion] = None


class ResourceIdList(BaseModel):
    __root__: List[ResourceId]


class MemberAccountRuleStatus(Enum):
    CREATE_SUCCESSFUL = 'CREATE_SUCCESSFUL'
    CREATE_IN_PROGRESS = 'CREATE_IN_PROGRESS'
    CREATE_FAILED = 'CREATE_FAILED'
    DELETE_SUCCESSFUL = 'DELETE_SUCCESSFUL'
    DELETE_FAILED = 'DELETE_FAILED'
    DELETE_IN_PROGRESS = 'DELETE_IN_PROGRESS'
    UPDATE_SUCCESSFUL = 'UPDATE_SUCCESSFUL'
    UPDATE_IN_PROGRESS = 'UPDATE_IN_PROGRESS'
    UPDATE_FAILED = 'UPDATE_FAILED'


class MemberAccountStatus(BaseModel):
    """
    Organization config rule creation or deletion status in each member account. This includes the name of the rule, the status, error code and error message when the rule creation or deletion failed.
    """

    AccountId: AccountId
    ConfigRuleName: StringWithCharLimit64
    MemberAccountRuleStatus: MemberAccountRuleStatus
    ErrorCode: Optional[String] = None
    ErrorMessage: Optional[String] = None
    LastUpdateTime: Optional[Date] = None


class MessageType(Enum):
    ConfigurationItemChangeNotification = 'ConfigurationItemChangeNotification'
    ConfigurationSnapshotDeliveryCompleted = 'ConfigurationSnapshotDeliveryCompleted'
    ScheduledNotification = 'ScheduledNotification'
    OversizedConfigurationItemChangeNotification = (
        'OversizedConfigurationItemChangeNotification'
    )


class Name5(ARN):
    pass


class OrganizationConfigRuleStatus(BaseModel):
    """
    Returns the status for an organization config rule in an organization.
    """

    OrganizationConfigRuleName: OrganizationConfigRuleName
    OrganizationRuleStatus: MemberAccountRuleStatus
    ErrorCode: Optional[String] = None
    ErrorMessage: Optional[String] = None
    LastUpdateTime: Optional[Date] = None


class OrganizationConfigRuleTriggerType(Enum):
    ConfigurationItemChangeNotification = 'ConfigurationItemChangeNotification'
    OversizedConfigurationItemChangeNotification = (
        'OversizedConfigurationItemChangeNotification'
    )
    ScheduledNotification = 'ScheduledNotification'


class OrganizationConfigRuleTriggerTypes(BaseModel):
    __root__: List[OrganizationConfigRuleTriggerType]


class OrganizationConformancePackDetailedStatus(BaseModel):
    """
    Organization conformance pack creation or deletion status in each member account. This includes the name of the conformance pack, the status, error code and error message when the conformance pack creation or deletion failed.
    """

    AccountId: AccountId
    ConformancePackName: StringWithCharLimit256
    Status: MemberAccountRuleStatus
    ErrorCode: Optional[String] = None
    ErrorMessage: Optional[String] = None
    LastUpdateTime: Optional[Date] = None


class OrganizationConformancePackStatus(BaseModel):
    """
    Returns the status for an organization conformance pack in an organization.
    """

    OrganizationConformancePackName: OrganizationConformancePackName
    Status: MemberAccountRuleStatus
    ErrorCode: Optional[String] = None
    ErrorMessage: Optional[String] = None
    LastUpdateTime: Optional[Date] = None


class StringWithCharLimit256Min0(Annotation1):
    pass


class StringWithCharLimit2048(ConformancePackArn):
    pass


class ResourceTypesScope(ComplianceResourceTypes):
    pass


class StringWithCharLimit768(ResourceId):
    pass


class Owner(Enum):
    CUSTOM_LAMBDA = 'CUSTOM_LAMBDA'
    AWS = 'AWS'


class PendingAggregationRequest(BaseModel):
    """
    An object that represents the account ID and region of an aggregator account that is requesting authorization but is not yet authorized.
    """

    RequesterAccountId: Optional[AccountId] = None
    RequesterAwsRegion: Optional[AwsRegion] = None


class Percentage(BaseModel):
    __root__: Annotated[int, Field(ge=1.0, le=100.0)]


class TemplateS3Uri(BaseModel):
    __root__: Annotated[str, Field(max_length=1024, min_length=1, regex='s3://.*')]


class TemplateBody(BaseModel):
    __root__: Annotated[str, Field(max_length=51200, min_length=1)]


class SchemaVersionId(BaseModel):
    __root__: Annotated[str, Field(max_length=128, min_length=1, regex='[A-Za-z0-9-]+')]


class RetentionPeriodInDays(BaseModel):
    __root__: Annotated[int, Field(ge=30.0, le=2557.0)]


class RetentionConfiguration(BaseModel):
    """
    An object with the name of the retention configuration and the retention period in days. The object stores the configuration for data retention in Config.
    """

    Name: RetentionConfigurationName
    RetentionPeriodInDays: RetentionPeriodInDays


class QueryArn(BaseModel):
    __root__: Annotated[
        str,
        Field(
            max_length=500,
            min_length=1,
            regex='^arn:aws[a-z\\-]*:config:[a-z\\-\\d]+:\\d+:stored-query/[a-zA-Z0-9-_]+/query-[a-zA-Z\\d-_/]+$',
        ),
    ]


class QueryDescription(BaseModel):
    __root__: Annotated[str, Field(max_length=256, min_length=0, regex='[\\s\\S]*')]


class QueryExpression(BaseModel):
    __root__: Annotated[str, Field(max_length=4096, min_length=1, regex='[\\s\\S]*')]


class QueryId(BaseModel):
    __root__: Annotated[str, Field(max_length=36, min_length=1, regex='^\\S+$')]


class QueryInfo(BaseModel):
    """
    Details about the query.
    """

    SelectFields: Optional[FieldInfoList] = None


class ResourceTypeList(BaseModel):
    __root__: List[ResourceType]


class ReevaluateConfigRuleNames(BaseModel):
    __root__: Annotated[List[ConfigRuleName], Field(max_items=25, min_items=1)]


class RelatedEvent(ARN):
    pass


class RelationshipName(ARN):
    pass


class Relationship(BaseModel):
    """
    The relationship of the related resource to the main resource.
    """

    resourceType: Optional[ResourceType] = None
    resourceId: Optional[ResourceId] = None
    resourceName: Optional[ResourceName] = None
    relationshipName: Optional[RelationshipName] = None


class RemediationTargetType(Enum):
    SSM_DOCUMENT = 'SSM_DOCUMENT'


class RemediationParameters(BaseModel):
    pass

    class Config:
        extra = Extra.allow


class RemediationException(BaseModel):
    """
    An object that represents the details about the remediation exception. The details include the rule name, an explanation of an exception, the time when the exception will be deleted, the resource ID, and resource type.
    """

    ConfigRuleName: ConfigRuleName
    ResourceType: StringWithCharLimit256
    ResourceId: StringWithCharLimit1024
    Message: Optional[StringWithCharLimit1024] = None
    ExpirationTime: Optional[Date] = None


class RemediationExceptionResourceKey(BaseModel):
    """
    The details that identify a resource within Config, including the resource type and resource ID.
    """

    ResourceType: Optional[StringWithCharLimit256] = None
    ResourceId: Optional[StringWithCharLimit1024] = None


class RemediationExecutionState(Enum):
    QUEUED = 'QUEUED'
    IN_PROGRESS = 'IN_PROGRESS'
    SUCCEEDED = 'SUCCEEDED'
    FAILED = 'FAILED'


class ResourceKey(BaseModel):
    """
    The details that identify a resource within Config, including the resource type and resource ID.
    """

    resourceType: ResourceType
    resourceId: ResourceId


class RemediationExecutionStepState(Enum):
    SUCCEEDED = 'SUCCEEDED'
    PENDING = 'PENDING'
    FAILED = 'FAILED'


class RemediationExecutionStep(BaseModel):
    """
    Name of the step from the SSM document.
    """

    Name: Optional[String] = None
    State: Optional[RemediationExecutionStepState] = None
    ErrorMessage: Optional[String] = None
    StartTime: Optional[Date] = None
    StopTime: Optional[Date] = None


class ResourceCount(BaseModel):
    """
    An object that contains the resource type and the number of resources.
    """

    resourceType: Optional[ResourceType] = None
    count: Optional[Long] = None


class ResourceDeletionTime(Date):
    pass


class ResourceIdentifier(BaseModel):
    """
    The details that identify a resource that is discovered by Config, including the resource type, ID, and (if available) the custom resource name.
    """

    resourceType: Optional[ResourceType] = None
    resourceId: Optional[ResourceId] = None
    resourceName: Optional[ResourceName] = None
    resourceDeletionTime: Optional[ResourceDeletionTime] = None


class ResourceValueType(Enum):
    RESOURCE_ID = 'RESOURCE_ID'


class Results(BaseModel):
    __root__: List[String]


class SourceDetail(BaseModel):
    """
    Provides the source and the message types that trigger Config to evaluate your Amazon Web Services resources against a rule. It also provides the frequency with which you want Config to run evaluations for the rule if the trigger type is periodic. You can specify the parameter values for <code>SourceDetail</code> only for custom rules.
    """

    EventSource: Optional[EventSource] = None
    MessageType: Optional[MessageType] = None
    MaximumExecutionFrequency: Optional[MaximumExecutionFrequency] = None


class StaticParameterValues(BaseModel):
    __root__: Annotated[List[StringWithCharLimit256], Field(max_items=25, min_items=0)]


class StoredQueryMetadata(BaseModel):
    """
    Returns details of a specific query.
    """

    QueryId: QueryId
    QueryArn: QueryArn
    QueryName: QueryName
    Description: Optional[QueryDescription] = None


class SupplementaryConfigurationValue(ARN):
    pass


class SupplementaryConfigurationName(ARN):
    pass


class TagKey1(StringWithCharLimit128):
    pass


class TagValue1(Annotation1):
    pass


class Tag(BaseModel):
    """
    The tags for the resource. The metadata that you apply to a resource to help you categorize and organize them. Each tag consists of a key and an optional value, both of which you define. Tag keys can have a maximum character length of 128 characters, and tag values can have a maximum length of 256 characters.
    """

    Key: Optional[TagKey1] = None
    Value: Optional[TagValue1] = None


class TagKeyList(BaseModel):
    __root__: Annotated[List[TagKey1], Field(max_items=50, min_items=1)]


class Value(ARN):
    pass


class BatchGetAggregateResourceConfigResponse(BaseModel):
    BaseConfigurationItems: Optional[BaseConfigurationItems] = None
    UnprocessedResourceIdentifiers: Optional[UnprocessedResourceIdentifierList] = None


class BatchGetAggregateResourceConfigRequest(BaseModel):
    ConfigurationAggregatorName: ConfigurationAggregatorName
    ResourceIdentifiers: ResourceIdentifiersList


class DeleteAggregationAuthorizationRequest(BaseModel):
    AuthorizedAccountId: AccountId
    AuthorizedAwsRegion: AwsRegion


class DeleteConfigRuleRequest(BaseModel):
    """
    <p/>
    """

    ConfigRuleName: ConfigRuleName


class DeleteConfigurationAggregatorRequest(BaseModel):
    ConfigurationAggregatorName: ConfigurationAggregatorName


class DeleteConfigurationRecorderRequest(BaseModel):
    """
    The request object for the <code>DeleteConfigurationRecorder</code> action.
    """

    ConfigurationRecorderName: RecorderName


class DeleteConformancePackRequest(BaseModel):
    ConformancePackName: ConformancePackName


class DeleteDeliveryChannelRequest(BaseModel):
    """
    The input for the <a>DeleteDeliveryChannel</a> action. The action accepts the following data, in JSON format.
    """

    DeliveryChannelName: ChannelName


class DeleteEvaluationResultsRequest(BaseModel):
    """
    <p/>
    """

    ConfigRuleName: StringWithCharLimit64


class DeleteOrganizationConfigRuleRequest(BaseModel):
    OrganizationConfigRuleName: OrganizationConfigRuleName


class DeleteOrganizationConformancePackRequest(BaseModel):
    OrganizationConformancePackName: OrganizationConformancePackName


class DeletePendingAggregationRequestRequest(BaseModel):
    RequesterAccountId: AccountId
    RequesterAwsRegion: AwsRegion


class DeleteRemediationConfigurationRequest(BaseModel):
    ConfigRuleName: ConfigRuleName
    ResourceType: Optional[String] = None


class DeleteResourceConfigRequest(BaseModel):
    ResourceType: ResourceTypeString
    ResourceId: ResourceId


class DeleteRetentionConfigurationRequest(BaseModel):
    RetentionConfigurationName: RetentionConfigurationName


class DeleteStoredQueryRequest(BaseModel):
    QueryName: QueryName


class DeliverConfigSnapshotResponse(BaseModel):
    """
    The output for the <a>DeliverConfigSnapshot</a> action, in JSON format.
    """

    configSnapshotId: Optional[String] = None


class DeliverConfigSnapshotRequest(BaseModel):
    """
    The input for the <a>DeliverConfigSnapshot</a> action.
    """

    deliveryChannelName: ChannelName


class DescribeAggregateComplianceByConfigRulesRequest(BaseModel):
    ConfigurationAggregatorName: ConfigurationAggregatorName
    Filters: Optional[ConfigRuleComplianceFilters] = None
    Limit: Optional[GroupByAPILimit] = None
    NextToken: Optional[NextToken] = None


class DescribeAggregateComplianceByConformancePacksRequest(BaseModel):
    ConfigurationAggregatorName: ConfigurationAggregatorName
    Filters: Optional[AggregateConformancePackComplianceFilters] = None
    Limit: Optional[Limit] = None
    NextToken: Optional[NextToken] = None


class DescribeAggregationAuthorizationsResponse(BaseModel):
    AggregationAuthorizations: Optional[AggregationAuthorizationList] = None
    NextToken: Optional[String] = None


class DescribeAggregationAuthorizationsRequest(BaseModel):
    Limit: Optional[Limit] = None
    NextToken: Optional[String] = None


class DescribeComplianceByConfigRuleRequest(BaseModel):
    """
    <p/>
    """

    ConfigRuleNames: Optional[ConfigRuleNames] = None
    ComplianceTypes: Optional[ComplianceTypes] = None
    NextToken: Optional[String] = None


class DescribeComplianceByResourceRequest(BaseModel):
    """
    <p/>
    """

    ResourceType: Optional[StringWithCharLimit256] = None
    ResourceId: Optional[BaseResourceId] = None
    ComplianceTypes: Optional[ComplianceTypes] = None
    Limit: Optional[Limit] = None
    NextToken: Optional[NextToken] = None


class DescribeConfigRuleEvaluationStatusResponse(BaseModel):
    """
    <p/>
    """

    ConfigRulesEvaluationStatus: Optional[ConfigRuleEvaluationStatusList] = None
    NextToken: Optional[String] = None


class DescribeConfigRuleEvaluationStatusRequest(BaseModel):
    """
    <p/>
    """

    ConfigRuleNames: Optional[ConfigRuleNames] = None
    NextToken: Optional[String] = None
    Limit: Optional[RuleLimit] = None


class DescribeConfigRulesRequest(BaseModel):
    """
    <p/>
    """

    ConfigRuleNames: Optional[ConfigRuleNames] = None
    NextToken: Optional[String] = None


class DescribeConfigurationAggregatorSourcesStatusResponse(BaseModel):
    AggregatedSourceStatusList: Optional[AggregatedSourceStatusList] = None
    NextToken: Optional[String] = None


class DescribeConfigurationAggregatorSourcesStatusRequest(BaseModel):
    ConfigurationAggregatorName: ConfigurationAggregatorName
    UpdateStatus: Optional[AggregatedSourceStatusTypeList] = None
    NextToken: Optional[String] = None
    Limit: Optional[Limit] = None


class DescribeConfigurationAggregatorsRequest(BaseModel):
    ConfigurationAggregatorNames: Optional[ConfigurationAggregatorNameList] = None
    NextToken: Optional[String] = None
    Limit: Optional[Limit] = None


class DescribeConfigurationRecorderStatusResponse(BaseModel):
    """
    The output for the <a>DescribeConfigurationRecorderStatus</a> action, in JSON format.
    """

    ConfigurationRecordersStatus: Optional[ConfigurationRecorderStatusList] = None


class DescribeConfigurationRecorderStatusRequest(BaseModel):
    """
    The input for the <a>DescribeConfigurationRecorderStatus</a> action.
    """

    ConfigurationRecorderNames: Optional[ConfigurationRecorderNameList] = None


class DescribeConfigurationRecordersRequest(BaseModel):
    """
    The input for the <a>DescribeConfigurationRecorders</a> action.
    """

    ConfigurationRecorderNames: Optional[ConfigurationRecorderNameList] = None


class DescribeConformancePackComplianceRequest(BaseModel):
    ConformancePackName: ConformancePackName
    Filters: Optional[ConformancePackComplianceFilters] = None
    Limit: Optional[DescribeConformancePackComplianceLimit] = None
    NextToken: Optional[NextToken] = None


class DescribeConformancePackStatusResponse(BaseModel):
    ConformancePackStatusDetails: Optional[ConformancePackStatusDetailsList] = None
    NextToken: Optional[NextToken] = None


class DescribeConformancePackStatusRequest(BaseModel):
    ConformancePackNames: Optional[ConformancePackNamesList] = None
    Limit: Optional[PageSizeLimit] = None
    NextToken: Optional[NextToken] = None


class DescribeConformancePacksRequest(BaseModel):
    ConformancePackNames: Optional[ConformancePackNamesList] = None
    Limit: Optional[PageSizeLimit] = None
    NextToken: Optional[NextToken] = None


class DescribeDeliveryChannelStatusResponse(BaseModel):
    """
    The output for the <a>DescribeDeliveryChannelStatus</a> action.
    """

    DeliveryChannelsStatus: Optional[DeliveryChannelStatusList] = None


class DescribeDeliveryChannelStatusRequest(BaseModel):
    """
    The input for the <a>DeliveryChannelStatus</a> action.
    """

    DeliveryChannelNames: Optional[DeliveryChannelNameList] = None


class DescribeDeliveryChannelsResponse(BaseModel):
    """
    The output for the <a>DescribeDeliveryChannels</a> action.
    """

    DeliveryChannels: Optional[DeliveryChannelList] = None


class DescribeDeliveryChannelsRequest(BaseModel):
    """
    The input for the <a>DescribeDeliveryChannels</a> action.
    """

    DeliveryChannelNames: Optional[DeliveryChannelNameList] = None


class DescribeOrganizationConfigRuleStatusesRequest(BaseModel):
    OrganizationConfigRuleNames: Optional[OrganizationConfigRuleNames] = None
    Limit: Optional[CosmosPageLimit] = None
    NextToken: Optional[String] = None


class DescribeOrganizationConfigRulesRequest(BaseModel):
    OrganizationConfigRuleNames: Optional[OrganizationConfigRuleNames] = None
    Limit: Optional[CosmosPageLimit] = None
    NextToken: Optional[String] = None


class DescribeOrganizationConformancePackStatusesRequest(BaseModel):
    OrganizationConformancePackNames: Optional[OrganizationConformancePackNames] = None
    Limit: Optional[CosmosPageLimit] = None
    NextToken: Optional[String] = None


class DescribeOrganizationConformancePacksRequest(BaseModel):
    OrganizationConformancePackNames: Optional[OrganizationConformancePackNames] = None
    Limit: Optional[CosmosPageLimit] = None
    NextToken: Optional[String] = None


class DescribePendingAggregationRequestsRequest(BaseModel):
    Limit: Optional[DescribePendingAggregationRequestsLimit] = None
    NextToken: Optional[String] = None


class DescribeRemediationConfigurationsRequest(BaseModel):
    ConfigRuleNames: ConfigRuleNames


class DescribeRetentionConfigurationsRequest(BaseModel):
    RetentionConfigurationNames: Optional[RetentionConfigurationNameList] = None
    NextToken: Optional[NextToken] = None


class GetAggregateComplianceDetailsByConfigRuleRequest(BaseModel):
    ConfigurationAggregatorName: ConfigurationAggregatorName
    ConfigRuleName: ConfigRuleName
    AccountId: AccountId
    AwsRegion: AwsRegion
    ComplianceType: Optional[ComplianceType] = None
    Limit: Optional[Limit] = None
    NextToken: Optional[NextToken] = None


class GetAggregateConfigRuleComplianceSummaryRequest(BaseModel):
    ConfigurationAggregatorName: ConfigurationAggregatorName
    Filters: Optional[ConfigRuleComplianceSummaryFilters] = None
    GroupByKey: Optional[AggregateConformancePackComplianceSummaryGroupKey] = None
    Limit: Optional[GroupByAPILimit] = None
    NextToken: Optional[NextToken] = None


class GetAggregateConformancePackComplianceSummaryResponse(BaseModel):
    AggregateConformancePackComplianceSummaries: Optional[
        AggregateConformancePackComplianceSummaryList
    ] = None
    GroupByKey: Optional[StringWithCharLimit256] = None
    NextToken: Optional[NextToken] = None


class GetAggregateConformancePackComplianceSummaryRequest(BaseModel):
    ConfigurationAggregatorName: ConfigurationAggregatorName
    Filters: Optional[AggregateConformancePackComplianceSummaryFilters] = None
    GroupByKey: Optional[AggregateConformancePackComplianceSummaryGroupKey] = None
    Limit: Optional[Limit] = None
    NextToken: Optional[NextToken] = None


class GetAggregateDiscoveredResourceCountsRequest(BaseModel):
    ConfigurationAggregatorName: ConfigurationAggregatorName
    Filters: Optional[ResourceCountFilters] = None
    GroupByKey: Optional[ResourceCountGroupKey] = None
    Limit: Optional[GroupByAPILimit] = None
    NextToken: Optional[NextToken] = None


class GetAggregateResourceConfigRequest(BaseModel):
    ConfigurationAggregatorName: ConfigurationAggregatorName
    ResourceIdentifier: AggregateResourceIdentifier


class GetComplianceDetailsByConfigRuleRequest(BaseModel):
    """
    <p/>
    """

    ConfigRuleName: StringWithCharLimit64
    ComplianceTypes: Optional[ComplianceTypes] = None
    Limit: Optional[Limit] = None
    NextToken: Optional[NextToken] = None


class GetComplianceDetailsByResourceRequest(BaseModel):
    """
    <p/>
    """

    ResourceType: StringWithCharLimit256
    ResourceId: BaseResourceId
    ComplianceTypes: Optional[ComplianceTypes] = None
    NextToken: Optional[String] = None


class GetComplianceSummaryByResourceTypeRequest(BaseModel):
    """
    <p/>
    """

    ResourceTypes: Optional[ResourceTypes] = None


class GetConformancePackComplianceDetailsRequest(BaseModel):
    ConformancePackName: ConformancePackName
    Filters: Optional[ConformancePackEvaluationFilters] = None
    Limit: Optional[GetConformancePackComplianceDetailsLimit] = None
    NextToken: Optional[NextToken] = None


class GetConformancePackComplianceSummaryResponse(BaseModel):
    ConformancePackComplianceSummaryList: Optional[
        ConformancePackComplianceSummaryList
    ] = None
    NextToken: Optional[NextToken] = None


class GetConformancePackComplianceSummaryRequest(BaseModel):
    ConformancePackNames: ConformancePackNamesToSummarizeList
    Limit: Optional[PageSizeLimit] = None
    NextToken: Optional[NextToken] = None


class GetDiscoveredResourceCountsRequest(BaseModel):
    resourceTypes: Optional[ResourceTypes] = None
    limit: Optional[Limit] = None
    nextToken: Optional[NextToken] = None


class GetResourceConfigHistoryRequest(BaseModel):
    """
    The input for the <a>GetResourceConfigHistory</a> action.
    """

    resourceType: ResourceType
    resourceId: ResourceId
    laterTime: Optional[LaterTime] = None
    earlierTime: Optional[EarlierTime] = None
    chronologicalOrder: Optional[ChronologicalOrder] = None
    limit: Optional[Limit] = None
    nextToken: Optional[NextToken] = None


class GetStoredQueryRequest(BaseModel):
    QueryName: QueryName


class ListAggregateDiscoveredResourcesResponse(BaseModel):
    ResourceIdentifiers: Optional[DiscoveredResourceIdentifierList] = None
    NextToken: Optional[NextToken] = None


class ListAggregateDiscoveredResourcesRequest(BaseModel):
    ConfigurationAggregatorName: ConfigurationAggregatorName
    ResourceType: ResourceType
    Filters: Optional[ResourceFilters] = None
    Limit: Optional[Limit] = None
    NextToken: Optional[NextToken] = None


class ListDiscoveredResourcesRequest(BaseModel):
    """
    <p/>
    """

    resourceType: ResourceType
    resourceIds: Optional[ResourceIdList] = None
    resourceName: Optional[ResourceName] = None
    limit: Optional[Limit] = None
    includeDeletedResources: Optional[Boolean] = None
    nextToken: Optional[NextToken] = None


class ListStoredQueriesRequest(BaseModel):
    NextToken: Optional[String] = None
    MaxResults: Optional[Limit] = None


class ListTagsForResourceRequest(BaseModel):
    ResourceArn: AmazonResourceName
    Limit: Optional[Limit] = None
    NextToken: Optional[NextToken] = None


class PutAggregationAuthorizationResponse(BaseModel):
    AggregationAuthorization: Optional[AggregationAuthorization] = None


class PutConformancePackResponse(BaseModel):
    ConformancePackArn: Optional[ConformancePackArn] = None


class PutDeliveryChannelRequest(BaseModel):
    """
    The input for the <a>PutDeliveryChannel</a> action.
    """

    DeliveryChannel: DeliveryChannel


class PutEvaluationsResponse(BaseModel):
    """
    <p/>
    """

    FailedEvaluations: Optional[Evaluations] = None


class PutEvaluationsRequest(BaseModel):
    """
    <p/>
    """

    Evaluations: Optional[Evaluations] = None
    ResultToken: String
    TestMode: Optional[Boolean] = None


class PutExternalEvaluationRequest(BaseModel):
    ConfigRuleName: ConfigRuleName
    ExternalEvaluation: ExternalEvaluation


class PutOrganizationConfigRuleResponse(BaseModel):
    OrganizationConfigRuleArn: Optional[StringWithCharLimit256] = None


class PutOrganizationConformancePackResponse(BaseModel):
    OrganizationConformancePackArn: Optional[StringWithCharLimit256] = None


class PutResourceConfigRequest(BaseModel):
    ResourceType: ResourceTypeString
    SchemaVersionId: SchemaVersionId
    ResourceId: ResourceId
    ResourceName: Optional[ResourceName] = None
    Configuration: Configuration
    Tags: Optional[Tags] = None


class PutRetentionConfigurationResponse(BaseModel):
    RetentionConfiguration: Optional[RetentionConfiguration] = None


class PutRetentionConfigurationRequest(BaseModel):
    RetentionPeriodInDays: RetentionPeriodInDays


class PutStoredQueryResponse(BaseModel):
    QueryArn: Optional[QueryArn] = None


class SelectAggregateResourceConfigResponse(BaseModel):
    Results: Optional[Results] = None
    QueryInfo: Optional[QueryInfo] = None
    NextToken: Optional[NextToken] = None


class SelectAggregateResourceConfigRequest(BaseModel):
    Expression: Expression
    ConfigurationAggregatorName: ConfigurationAggregatorName
    Limit: Optional[Limit] = None
    MaxResults: Optional[Limit] = None
    NextToken: Optional[NextToken] = None


class SelectResourceConfigResponse(SelectAggregateResourceConfigResponse):
    pass


class SelectResourceConfigRequest(BaseModel):
    Expression: Expression
    Limit: Optional[Limit] = None
    NextToken: Optional[NextToken] = None


class StartConfigRulesEvaluationRequest(BaseModel):
    """
    <p/>
    """

    ConfigRuleNames: Optional[ReevaluateConfigRuleNames] = None


class StartConfigurationRecorderRequest(BaseModel):
    """
    The input for the <a>StartConfigurationRecorder</a> action.
    """

    ConfigurationRecorderName: RecorderName


class StopConfigurationRecorderRequest(BaseModel):
    """
    The input for the <a>StopConfigurationRecorder</a> action.
    """

    ConfigurationRecorderName: RecorderName


class UntagResourceRequest(BaseModel):
    ResourceArn: AmazonResourceName
    TagKeys: TagKeyList


class AccountAggregationSourceAccountList(BaseModel):
    __root__: Annotated[List[AccountId], Field(min_items=1)]


class AggregatorRegionList(BaseModel):
    __root__: Annotated[List[String], Field(min_items=1)]


class AccountAggregationSource(BaseModel):
    """
    A collection of accounts and regions.
    """

    AccountIds: AccountAggregationSourceAccountList
    AllAwsRegions: Optional[Boolean] = None
    AwsRegions: Optional[AggregatorRegionList] = None


class AccountAggregationSourceList(BaseModel):
    __root__: Annotated[List[AccountAggregationSource], Field(max_items=1, min_items=0)]


class Compliance(BaseModel):
    """
    Indicates whether an Amazon Web Services resource or Config rule is compliant and provides the number of contributors that affect the compliance.
    """

    ComplianceType: Optional[ComplianceType] = None
    ComplianceContributorCount: Optional[ComplianceContributorCount] = None


class AggregateComplianceByConfigRule(BaseModel):
    """
    <p>Indicates whether an Config rule is compliant based on account ID, region, compliance, and rule name.</p> <p>A rule is compliant if all of the resources that the rule evaluated comply with it. It is noncompliant if any of these resources do not comply.</p>
    """

    ConfigRuleName: Optional[ConfigRuleName] = None
    Compliance: Optional[Compliance] = None
    AccountId: Optional[AccountId] = None
    AwsRegion: Optional[AwsRegion] = None


class AggregateComplianceByConfigRuleList(BaseModel):
    __root__: List[AggregateComplianceByConfigRule]


class AggregateConformancePackCompliance(BaseModel):
    """
    <p>Provides the number of compliant and noncompliant rules within a conformance pack. Also provides the compliance status of the conformance pack and the total rule count which includes compliant rules, noncompliant rules, and rules that cannot be evaluated due to insufficient data.</p> <p>A conformance pack is compliant if all of the rules in a conformance packs are compliant. It is noncompliant if any of the rules are not compliant. The compliance status of a conformance pack is INSUFFICIENT_DATA only if all rules within a conformance pack cannot be evaluated due to insufficient data. If some of the rules in a conformance pack are compliant but the compliance status of other rules in that same conformance pack is INSUFFICIENT_DATA, the conformance pack shows compliant.</p>
    """

    ComplianceType: Optional[ConformancePackComplianceType] = None
    CompliantRuleCount: Optional[Integer] = None
    NonCompliantRuleCount: Optional[Integer] = None
    TotalRuleCount: Optional[Integer] = None


class AggregateComplianceByConformancePack(BaseModel):
    """
    <p>Provides aggregate compliance of the conformance pack. Indicates whether a conformance pack is compliant based on the name of the conformance pack, account ID, and region.</p> <p>A conformance pack is compliant if all of the rules in a conformance packs are compliant. It is noncompliant if any of the rules are not compliant. The compliance status of a conformance pack is INSUFFICIENT_DATA only if all rules within a conformance pack cannot be evaluated due to insufficient data. If some of the rules in a conformance pack are compliant but the compliance status of other rules in that same conformance pack is INSUFFICIENT_DATA, the conformance pack shows compliant.</p>
    """

    ConformancePackName: Optional[ConformancePackName] = None
    Compliance: Optional[AggregateConformancePackCompliance] = None
    AccountId: Optional[AccountId] = None
    AwsRegion: Optional[AwsRegion] = None


class AggregateComplianceByConformancePackList(BaseModel):
    __root__: List[AggregateComplianceByConformancePack]


class ComplianceSummary(BaseModel):
    """
    The number of Config rules or Amazon Web Services resources that are compliant and noncompliant.
    """

    CompliantResourceCount: Optional[ComplianceContributorCount] = None
    NonCompliantResourceCount: Optional[ComplianceContributorCount] = None
    ComplianceSummaryTimestamp: Optional[Date] = None


class AggregateComplianceCount(BaseModel):
    """
    Returns the number of compliant and noncompliant rules for one or more accounts and regions in an aggregator.
    """

    GroupName: Optional[StringWithCharLimit256] = None
    ComplianceSummary: Optional[ComplianceSummary] = None


class AggregateComplianceCountList(BaseModel):
    __root__: List[AggregateComplianceCount]


class EvaluationResultIdentifier(BaseModel):
    """
    Uniquely identifies an evaluation result.
    """

    EvaluationResultQualifier: Optional[EvaluationResultQualifier] = None
    OrderingTimestamp: Optional[Date] = None


class AggregateEvaluationResult(BaseModel):
    """
    The details of an Config evaluation for an account ID and region in an aggregator. Provides the Amazon Web Services resource that was evaluated, the compliance of the resource, related time stamps, and supplementary information.
    """

    EvaluationResultIdentifier: Optional[EvaluationResultIdentifier] = None
    ComplianceType: Optional[ComplianceType] = None
    ResultRecordedTime: Optional[Date] = None
    ConfigRuleInvokedTime: Optional[Date] = None
    Annotation: Optional[StringWithCharLimit256] = None
    AccountId: Optional[AccountId] = None
    AwsRegion: Optional[AwsRegion] = None


class AggregateEvaluationResultList(BaseModel):
    __root__: List[AggregateEvaluationResult]


class ResourceKeys(BaseModel):
    __root__: Annotated[List[ResourceKey], Field(max_items=100, min_items=1)]


class ComplianceByConfigRule(BaseModel):
    """
    Indicates whether an Config rule is compliant. A rule is compliant if all of the resources that the rule evaluated comply with it. A rule is noncompliant if any of these resources do not comply.
    """

    ConfigRuleName: Optional[StringWithCharLimit64] = None
    Compliance: Optional[Compliance] = None


class ComplianceByConfigRules(BaseModel):
    __root__: List[ComplianceByConfigRule]


class ComplianceByResource(BaseModel):
    """
    Indicates whether an Amazon Web Services resource that is evaluated according to one or more Config rules is compliant. A resource is compliant if it complies with all of the rules that evaluate it. A resource is noncompliant if it does not comply with one or more of these rules.
    """

    ResourceType: Optional[StringWithCharLimit256] = None
    ResourceId: Optional[BaseResourceId] = None
    Compliance: Optional[Compliance] = None


class ComplianceByResources(BaseModel):
    __root__: List[ComplianceByResource]


class ComplianceSummaryByResourceType(BaseModel):
    """
    The number of Amazon Web Services resources of a specific type that are compliant or noncompliant, up to a maximum of 100 for each.
    """

    ResourceType: Optional[StringWithCharLimit256] = None
    ComplianceSummary: Optional[ComplianceSummary] = None


class ComplianceSummariesByResourceType(BaseModel):
    __root__: List[ComplianceSummaryByResourceType]


class Scope(BaseModel):
    """
    Defines which resources trigger an evaluation for an Config rule. The scope can include one or more resource types, a combination of a tag key and value, or a combination of one resource type and one resource ID. Specify a scope to constrain which resources trigger an evaluation for a rule. Otherwise, evaluations for the rule are triggered when any resource in your recording group changes in configuration.
    """

    ComplianceResourceTypes: Optional[ComplianceResourceTypes] = None
    TagKey: Optional[StringWithCharLimit128] = None
    TagValue: Optional[StringWithCharLimit256] = None
    ComplianceResourceId: Optional[BaseResourceId] = None


class OrganizationAggregationSource(BaseModel):
    """
    This object contains regions to set up the aggregator and an IAM role to retrieve organization details.
    """

    RoleArn: String
    AwsRegions: Optional[AggregatorRegionList] = None
    AllAwsRegions: Optional[Boolean] = None


class ConfigurationAggregator(BaseModel):
    """
    The details about the configuration aggregator, including information about source accounts, regions, and metadata of the aggregator.
    """

    ConfigurationAggregatorName: Optional[ConfigurationAggregatorName] = None
    ConfigurationAggregatorArn: Optional[ConfigurationAggregatorArn] = None
    AccountAggregationSources: Optional[AccountAggregationSourceList] = None
    OrganizationAggregationSource: Optional[OrganizationAggregationSource] = None
    CreationTime: Optional[Date] = None
    LastUpdatedTime: Optional[Date] = None
    CreatedBy: Optional[StringWithCharLimit256] = None


class ConfigurationAggregatorList(BaseModel):
    __root__: List[ConfigurationAggregator]


class RelatedEventList(BaseModel):
    __root__: List[RelatedEvent]


class RelationshipList(BaseModel):
    __root__: List[Relationship]


class ConfigurationItem(BaseModel):
    """
    A list that contains detailed configurations of a specified resource.
    """

    version: Optional[Version] = None
    accountId: Optional[AccountId] = None
    configurationItemCaptureTime: Optional[ConfigurationItemCaptureTime] = None
    configurationItemStatus: Optional[ConfigurationItemStatus] = None
    configurationStateId: Optional[ConfigurationStateId] = None
    configurationItemMD5Hash: Optional[ConfigurationItemMD5Hash] = None
    arn: Optional[ARN] = None
    resourceType: Optional[ResourceType] = None
    resourceId: Optional[ResourceId] = None
    resourceName: Optional[ResourceName] = None
    awsRegion: Optional[AwsRegion] = None
    availabilityZone: Optional[AvailabilityZone] = None
    resourceCreationTime: Optional[ResourceCreationTime] = None
    tags: Optional[Tags] = None
    relatedEvents: Optional[RelatedEventList] = None
    relationships: Optional[RelationshipList] = None
    configuration: Optional[Configuration] = None
    supplementaryConfiguration: Optional[SupplementaryConfiguration] = None


class ConfigurationItemList(BaseModel):
    __root__: List[ConfigurationItem]


class RecordingGroup(BaseModel):
    """
    <p>Specifies the types of Amazon Web Services resource for which Config records configuration changes.</p> <p>In the recording group, you specify whether all supported types or specific types of resources are recorded.</p> <p>By default, Config records configuration changes for all supported types of regional resources that Config discovers in the region in which it is running. Regional resources are tied to a region and can be used only in that region. Examples of regional resources are EC2 instances and EBS volumes.</p> <p>You can also have Config record configuration changes for supported types of global resources (for example, IAM resources). Global resources are not tied to an individual region and can be used in all regions.</p> <important> <p>The configuration details for any global resource are the same in all regions. If you customize Config in multiple regions to record global resources, it will create multiple configuration items each time a global resource changes: one configuration item for each region. These configuration items will contain identical data. To prevent duplicate configuration items, you should consider customizing Config in only one region to record global resources, unless you want the configuration items to be available in multiple regions.</p> </important> <p>If you don't want Config to record all resources, you can specify which types of resources it will record with the <code>resourceTypes</code> parameter.</p> <p>For a list of supported resource types, see <a href="https://docs.aws.amazon.com/config/latest/developerguide/resource-config-reference.html#supported-resources">Supported Resource Types</a>.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/config/latest/developerguide/select-resources.html">Selecting Which Resources Config Records</a>.</p>
    """

    allSupported: Optional[AllSupported] = None
    includeGlobalResourceTypes: Optional[IncludeGlobalResourceTypes] = None
    resourceTypes: Optional[ResourceTypeList] = None


class ConfigurationRecorder(BaseModel):
    """
    An object that represents the recording of configuration changes of an Amazon Web Services resource.
    """

    name: Optional[RecorderName] = None
    roleARN: Optional[String] = None
    recordingGroup: Optional[RecordingGroup] = None


class ConfigurationRecorderList(BaseModel):
    __root__: List[ConfigurationRecorder]


class ConformancePackInputParameters(BaseModel):
    __root__: Annotated[
        List[ConformancePackInputParameter], Field(max_items=60, min_items=0)
    ]


class ConformancePackDetail(BaseModel):
    """
    Returns details of a conformance pack. A conformance pack is a collection of Config rules and remediation actions that can be easily deployed in an account and a region.
    """

    ConformancePackName: ConformancePackName
    ConformancePackArn: ConformancePackArn
    ConformancePackId: ConformancePackId
    DeliveryS3Bucket: Optional[DeliveryS3Bucket] = None
    DeliveryS3KeyPrefix: Optional[DeliveryS3KeyPrefix] = None
    ConformancePackInputParameters: Optional[ConformancePackInputParameters] = None
    LastUpdateRequestedTime: Optional[Date] = None
    CreatedBy: Optional[StringWithCharLimit256] = None


class ConformancePackDetailList(BaseModel):
    __root__: Annotated[List[ConformancePackDetail], Field(max_items=25, min_items=0)]


class ConformancePackEvaluationResult(BaseModel):
    """
    The details of a conformance pack evaluation. Provides Config rule and Amazon Web Services resource type that was evaluated, the compliance of the conformance pack, related time stamps, and supplementary information.
    """

    ComplianceType: ConformancePackComplianceType
    EvaluationResultIdentifier: EvaluationResultIdentifier
    ConfigRuleInvokedTime: Date
    ResultRecordedTime: Date
    Annotation: Optional[Annotation1] = None


class ControlsList(BaseModel):
    __root__: Annotated[List[StringWithCharLimit128], Field(max_items=20, min_items=0)]


class ConformancePackRuleCompliance(BaseModel):
    """
    Compliance information of one or more Config rules within a conformance pack. You can filter using Config rule names and compliance types.
    """

    ConfigRuleName: Optional[ConfigRuleName] = None
    ComplianceType: Optional[ConformancePackComplianceType] = None
    Controls: Optional[ControlsList] = None


class ConformancePackRuleComplianceList(BaseModel):
    __root__: Annotated[
        List[ConformancePackRuleCompliance], Field(max_items=1000, min_items=0)
    ]


class ConformancePackRuleEvaluationResultsList(BaseModel):
    __root__: Annotated[
        List[ConformancePackEvaluationResult], Field(max_items=100, min_items=0)
    ]


class RemediationExceptionResourceKeys(BaseModel):
    __root__: Annotated[
        List[RemediationExceptionResourceKey], Field(max_items=100, min_items=1)
    ]


class OrganizationConfigRuleStatuses(BaseModel):
    __root__: List[OrganizationConfigRuleStatus]


class OrganizationConformancePackStatuses(BaseModel):
    __root__: List[OrganizationConformancePackStatus]


class PendingAggregationRequestList(BaseModel):
    __root__: List[PendingAggregationRequest]


class RemediationExceptions(BaseModel):
    __root__: Annotated[List[RemediationException], Field(max_items=25, min_items=0)]


class RetentionConfigurationList(BaseModel):
    __root__: List[RetentionConfiguration]


class EvaluationResult(BaseModel):
    """
    The details of an Config evaluation. Provides the Amazon Web Services resource that was evaluated, the compliance of the resource, related time stamps, and supplementary information.
    """

    EvaluationResultIdentifier: Optional[EvaluationResultIdentifier] = None
    ComplianceType: Optional[ComplianceType] = None
    ResultRecordedTime: Optional[Date] = None
    ConfigRuleInvokedTime: Optional[Date] = None
    Annotation: Optional[StringWithCharLimit256] = None
    ResultToken: Optional[String] = None


class EvaluationResults(BaseModel):
    __root__: List[EvaluationResult]


class SsmControls(BaseModel):
    """
    Amazon Web Services Systems Manager (SSM) specific remediation controls.
    """

    ConcurrentExecutionRatePercentage: Optional[Percentage] = None
    ErrorPercentage: Optional[Percentage] = None


class ExecutionControls(BaseModel):
    """
    The controls that Config uses for executing remediations.
    """

    SsmControls: Optional[SsmControls] = None


class FailedDeleteRemediationExceptionsBatch(BaseModel):
    """
    List of each of the failed delete remediation exceptions with specific reasons.
    """

    FailureMessage: Optional[String] = None
    FailedItems: Optional[RemediationExceptionResourceKeys] = None


class FailedRemediationExceptionBatch(BaseModel):
    """
    List of each of the failed remediation exceptions with specific reasons.
    """

    FailureMessage: Optional[String] = None
    FailedItems: Optional[RemediationExceptions] = None


class FailedRemediationExceptionBatches(BaseModel):
    __root__: List[FailedRemediationExceptionBatch]


class GroupedResourceCountList(BaseModel):
    __root__: List[GroupedResourceCount]


class ResourceCounts(BaseModel):
    __root__: List[ResourceCount]


class StatusDetailFilters(BaseModel):
    """
    Status filter object to filter results based on specific member account ID or status type for an organization config rule.
    """

    AccountId: Optional[AccountId] = None
    MemberAccountRuleStatus: Optional[MemberAccountRuleStatus] = None


class OrganizationConfigRuleDetailedStatus(BaseModel):
    __root__: List[MemberAccountStatus]


class OrganizationResourceDetailedStatusFilters(BaseModel):
    """
    Status filter object to filter results based on specific member account ID or status type for an organization conformance pack.
    """

    AccountId: Optional[AccountId] = None
    Status: Optional[MemberAccountRuleStatus] = None


class OrganizationConformancePackDetailedStatuses(BaseModel):
    __root__: List[OrganizationConformancePackDetailedStatus]


class StoredQuery(BaseModel):
    """
    Provides the details of a stored query.
    """

    QueryId: Optional[QueryId] = None
    QueryArn: Optional[QueryArn] = None
    QueryName: QueryName
    Description: Optional[QueryDescription] = None
    Expression: Optional[QueryExpression] = None


class ResourceIdentifierList(BaseModel):
    __root__: List[ResourceIdentifier]


class StoredQueryMetadataList(BaseModel):
    __root__: List[StoredQueryMetadata]


class TagList(BaseModel):
    __root__: Annotated[List[Tag], Field(max_items=50, min_items=1)]


class OrganizationManagedRuleMetadata(BaseModel):
    """
    An object that specifies organization managed rule metadata such as resource type and ID of Amazon Web Services resource along with the rule identifier. It also provides the frequency with which you want Config to run evaluations for the rule if the trigger type is periodic.
    """

    Description: Optional[StringWithCharLimit256Min0] = None
    RuleIdentifier: StringWithCharLimit256
    InputParameters: Optional[StringWithCharLimit2048] = None
    MaximumExecutionFrequency: Optional[MaximumExecutionFrequency] = None
    ResourceTypesScope: Optional[ResourceTypesScope] = None
    ResourceIdScope: Optional[StringWithCharLimit768] = None
    TagKeyScope: Optional[StringWithCharLimit128] = None
    TagValueScope: Optional[StringWithCharLimit256] = None


class OrganizationCustomRuleMetadata(BaseModel):
    """
    An object that specifies organization custom rule metadata such as resource type, resource ID of Amazon Web Services resource, Lambda function ARN, and organization trigger types that trigger Config to evaluate your Amazon Web Services resources against a rule. It also provides the frequency with which you want Config to run evaluations for the rule if the trigger type is periodic.
    """

    Description: Optional[StringWithCharLimit256Min0] = None
    LambdaFunctionArn: StringWithCharLimit256
    OrganizationConfigRuleTriggerTypes: OrganizationConfigRuleTriggerTypes
    InputParameters: Optional[StringWithCharLimit2048] = None
    MaximumExecutionFrequency: Optional[MaximumExecutionFrequency] = None
    ResourceTypesScope: Optional[ResourceTypesScope] = None
    ResourceIdScope: Optional[StringWithCharLimit768] = None
    TagKeyScope: Optional[StringWithCharLimit128] = None
    TagValueScope: Optional[StringWithCharLimit256] = None


class OrganizationConfigRule(BaseModel):
    """
    An organization config rule that has information about config rules that Config creates in member accounts.
    """

    OrganizationConfigRuleName: OrganizationConfigRuleName
    OrganizationConfigRuleArn: StringWithCharLimit256
    OrganizationManagedRuleMetadata: Optional[OrganizationManagedRuleMetadata] = None
    OrganizationCustomRuleMetadata: Optional[OrganizationCustomRuleMetadata] = None
    ExcludedAccounts: Optional[ExcludedAccounts] = None
    LastUpdateTime: Optional[Date] = None


class OrganizationConformancePack(BaseModel):
    """
    An organization conformance pack that has information about conformance packs that Config creates in member accounts.
    """

    OrganizationConformancePackName: OrganizationConformancePackName
    OrganizationConformancePackArn: StringWithCharLimit256
    DeliveryS3Bucket: Optional[DeliveryS3Bucket] = None
    DeliveryS3KeyPrefix: Optional[DeliveryS3KeyPrefix] = None
    ConformancePackInputParameters: Optional[ConformancePackInputParameters] = None
    ExcludedAccounts: Optional[ExcludedAccounts] = None
    LastUpdateTime: Date


class TagsList(BaseModel):
    __root__: Annotated[List[Tag], Field(max_items=50, min_items=0)]


class RemediationConfiguration(BaseModel):
    """
    An object that represents the details about the remediation configuration that includes the remediation action, parameters, and data to execute the action.
    """

    ConfigRuleName: ConfigRuleName
    TargetType: RemediationTargetType
    TargetId: StringWithCharLimit256
    TargetVersion: Optional[String] = None
    Parameters: Optional[RemediationParameters] = None
    ResourceType: Optional[String] = None
    Automatic: Optional[Boolean] = None
    ExecutionControls: Optional[ExecutionControls] = None
    MaximumAutomaticAttempts: Optional[AutoRemediationAttempts] = None
    RetryAttemptSeconds: Optional[AutoRemediationAttemptSeconds] = None
    Arn: Optional[StringWithCharLimit1024] = None
    CreatedByService: Optional[StringWithCharLimit1024] = None


class RemediationExecutionSteps(BaseModel):
    __root__: List[RemediationExecutionStep]


class RemediationExecutionStatus(BaseModel):
    """
    Provides details of the current status of the invoked remediation action for that resource.
    """

    ResourceKey: Optional[ResourceKey] = None
    State: Optional[RemediationExecutionState] = None
    StepDetails: Optional[RemediationExecutionSteps] = None
    InvocationTime: Optional[Date] = None
    LastUpdatedTime: Optional[Date] = None


class ResourceValue(BaseModel):
    """
    The dynamic value of the resource.
    """

    Value: ResourceValueType


class StaticValue(BaseModel):
    """
    The static value of the resource.
    """

    Values: StaticParameterValues


class RemediationParameterValue(BaseModel):
    """
    The value is either a dynamic (resource) value or a static value. You must select either a dynamic value or a static value.
    """

    ResourceValue: Optional[ResourceValue] = None
    StaticValue: Optional[StaticValue] = None


class SourceDetails(BaseModel):
    __root__: Annotated[List[SourceDetail], Field(max_items=25, min_items=0)]


class BatchGetResourceConfigResponse(BaseModel):
    baseConfigurationItems: Optional[BaseConfigurationItems] = None
    unprocessedResourceKeys: Optional[ResourceKeys] = None


class BatchGetResourceConfigRequest(BaseModel):
    resourceKeys: ResourceKeys


class DeleteRemediationExceptionsRequest(BaseModel):
    ConfigRuleName: ConfigRuleName
    ResourceKeys: RemediationExceptionResourceKeys


class DescribeAggregateComplianceByConfigRulesResponse(BaseModel):
    AggregateComplianceByConfigRules: Optional[
        AggregateComplianceByConfigRuleList
    ] = None
    NextToken: Optional[NextToken] = None


class DescribeAggregateComplianceByConformancePacksResponse(BaseModel):
    AggregateComplianceByConformancePacks: Optional[
        AggregateComplianceByConformancePackList
    ] = None
    NextToken: Optional[NextToken] = None


class DescribeComplianceByConfigRuleResponse(BaseModel):
    """
    <p/>
    """

    ComplianceByConfigRules: Optional[ComplianceByConfigRules] = None
    NextToken: Optional[String] = None


class DescribeComplianceByResourceResponse(BaseModel):
    """
    <p/>
    """

    ComplianceByResources: Optional[ComplianceByResources] = None
    NextToken: Optional[NextToken] = None


class DescribeConfigurationAggregatorsResponse(BaseModel):
    ConfigurationAggregators: Optional[ConfigurationAggregatorList] = None
    NextToken: Optional[String] = None


class DescribeConfigurationRecordersResponse(BaseModel):
    """
    The output for the <a>DescribeConfigurationRecorders</a> action.
    """

    ConfigurationRecorders: Optional[ConfigurationRecorderList] = None


class DescribeConformancePackComplianceResponse(BaseModel):
    ConformancePackName: ConformancePackName
    ConformancePackRuleComplianceList: ConformancePackRuleComplianceList
    NextToken: Optional[NextToken] = None


class DescribeConformancePacksResponse(BaseModel):
    ConformancePackDetails: Optional[ConformancePackDetailList] = None
    NextToken: Optional[NextToken] = None


class DescribeOrganizationConfigRuleStatusesResponse(BaseModel):
    OrganizationConfigRuleStatuses: Optional[OrganizationConfigRuleStatuses] = None
    NextToken: Optional[String] = None


class DescribeOrganizationConformancePackStatusesResponse(BaseModel):
    OrganizationConformancePackStatuses: Optional[
        OrganizationConformancePackStatuses
    ] = None
    NextToken: Optional[String] = None


class DescribePendingAggregationRequestsResponse(BaseModel):
    PendingAggregationRequests: Optional[PendingAggregationRequestList] = None
    NextToken: Optional[String] = None


class DescribeRemediationExceptionsResponse(BaseModel):
    RemediationExceptions: Optional[RemediationExceptions] = None
    NextToken: Optional[String] = None


class DescribeRemediationExceptionsRequest(BaseModel):
    ConfigRuleName: ConfigRuleName
    ResourceKeys: Optional[RemediationExceptionResourceKeys] = None
    Limit: Optional[Limit] = None
    NextToken: Optional[String] = None


class DescribeRemediationExecutionStatusRequest(BaseModel):
    ConfigRuleName: ConfigRuleName
    ResourceKeys: Optional[ResourceKeys] = None
    Limit: Optional[Limit] = None
    NextToken: Optional[String] = None


class DescribeRetentionConfigurationsResponse(BaseModel):
    RetentionConfigurations: Optional[RetentionConfigurationList] = None
    NextToken: Optional[NextToken] = None


class GetAggregateComplianceDetailsByConfigRuleResponse(BaseModel):
    AggregateEvaluationResults: Optional[AggregateEvaluationResultList] = None
    NextToken: Optional[NextToken] = None


class GetAggregateConfigRuleComplianceSummaryResponse(BaseModel):
    GroupByKey: Optional[StringWithCharLimit256] = None
    AggregateComplianceCounts: Optional[AggregateComplianceCountList] = None
    NextToken: Optional[NextToken] = None


class GetAggregateDiscoveredResourceCountsResponse(BaseModel):
    TotalDiscoveredResources: Long
    GroupByKey: Optional[StringWithCharLimit256] = None
    GroupedResourceCounts: Optional[GroupedResourceCountList] = None
    NextToken: Optional[NextToken] = None


class GetAggregateResourceConfigResponse(BaseModel):
    ConfigurationItem: Optional[ConfigurationItem] = None


class GetComplianceDetailsByConfigRuleResponse(BaseModel):
    """
    <p/>
    """

    EvaluationResults: Optional[EvaluationResults] = None
    NextToken: Optional[NextToken] = None


class GetComplianceDetailsByResourceResponse(BaseModel):
    """
    <p/>
    """

    EvaluationResults: Optional[EvaluationResults] = None
    NextToken: Optional[String] = None


class GetComplianceSummaryByConfigRuleResponse(BaseModel):
    """
    <p/>
    """

    ComplianceSummary: Optional[ComplianceSummary] = None


class GetComplianceSummaryByResourceTypeResponse(BaseModel):
    """
    <p/>
    """

    ComplianceSummariesByResourceType: Optional[
        ComplianceSummariesByResourceType
    ] = None


class GetConformancePackComplianceDetailsResponse(BaseModel):
    ConformancePackName: ConformancePackName
    ConformancePackRuleEvaluationResults: Optional[
        ConformancePackRuleEvaluationResultsList
    ] = None
    NextToken: Optional[NextToken] = None


class GetDiscoveredResourceCountsResponse(BaseModel):
    totalDiscoveredResources: Optional[Long] = None
    resourceCounts: Optional[ResourceCounts] = None
    nextToken: Optional[NextToken] = None


class GetOrganizationConfigRuleDetailedStatusResponse(BaseModel):
    OrganizationConfigRuleDetailedStatus: Optional[
        OrganizationConfigRuleDetailedStatus
    ] = None
    NextToken: Optional[String] = None


class GetOrganizationConfigRuleDetailedStatusRequest(BaseModel):
    OrganizationConfigRuleName: OrganizationConfigRuleName
    Filters: Optional[StatusDetailFilters] = None
    Limit: Optional[CosmosPageLimit] = None
    NextToken: Optional[String] = None


class GetOrganizationConformancePackDetailedStatusResponse(BaseModel):
    OrganizationConformancePackDetailedStatuses: Optional[
        OrganizationConformancePackDetailedStatuses
    ] = None
    NextToken: Optional[String] = None


class GetOrganizationConformancePackDetailedStatusRequest(BaseModel):
    OrganizationConformancePackName: OrganizationConformancePackName
    Filters: Optional[OrganizationResourceDetailedStatusFilters] = None
    Limit: Optional[CosmosPageLimit] = None
    NextToken: Optional[String] = None


class GetResourceConfigHistoryResponse(BaseModel):
    """
    The output for the <a>GetResourceConfigHistory</a> action.
    """

    configurationItems: Optional[ConfigurationItemList] = None
    nextToken: Optional[NextToken] = None


class GetStoredQueryResponse(BaseModel):
    StoredQuery: Optional[StoredQuery] = None


class ListDiscoveredResourcesResponse(BaseModel):
    """
    <p/>
    """

    resourceIdentifiers: Optional[ResourceIdentifierList] = None
    nextToken: Optional[NextToken] = None


class ListStoredQueriesResponse(BaseModel):
    StoredQueryMetadata: Optional[StoredQueryMetadataList] = None
    NextToken: Optional[String] = None


class ListTagsForResourceResponse(BaseModel):
    Tags: Optional[TagList] = None
    NextToken: Optional[NextToken] = None


class PutAggregationAuthorizationRequest(BaseModel):
    AuthorizedAccountId: AccountId
    AuthorizedAwsRegion: AwsRegion
    Tags: Optional[TagsList] = None


class PutConfigurationAggregatorResponse(BaseModel):
    ConfigurationAggregator: Optional[ConfigurationAggregator] = None


class PutConfigurationAggregatorRequest(BaseModel):
    ConfigurationAggregatorName: ConfigurationAggregatorName
    AccountAggregationSources: Optional[AccountAggregationSourceList] = None
    OrganizationAggregationSource: Optional[OrganizationAggregationSource] = None
    Tags: Optional[TagsList] = None


class PutConfigurationRecorderRequest(BaseModel):
    """
    The input for the <a>PutConfigurationRecorder</a> action.
    """

    ConfigurationRecorder: ConfigurationRecorder


class PutConformancePackRequest(BaseModel):
    ConformancePackName: ConformancePackName
    TemplateS3Uri: Optional[TemplateS3Uri] = None
    TemplateBody: Optional[TemplateBody] = None
    DeliveryS3Bucket: Optional[DeliveryS3Bucket] = None
    DeliveryS3KeyPrefix: Optional[DeliveryS3KeyPrefix] = None
    ConformancePackInputParameters: Optional[ConformancePackInputParameters] = None


class PutOrganizationConfigRuleRequest(BaseModel):
    OrganizationConfigRuleName: OrganizationConfigRuleName
    OrganizationManagedRuleMetadata: Optional[OrganizationManagedRuleMetadata] = None
    OrganizationCustomRuleMetadata: Optional[OrganizationCustomRuleMetadata] = None
    ExcludedAccounts: Optional[ExcludedAccounts] = None


class PutOrganizationConformancePackRequest(BaseModel):
    OrganizationConformancePackName: OrganizationConformancePackName
    TemplateS3Uri: Optional[TemplateS3Uri] = None
    TemplateBody: Optional[TemplateBody] = None
    DeliveryS3Bucket: Optional[DeliveryS3Bucket] = None
    DeliveryS3KeyPrefix: Optional[DeliveryS3KeyPrefix] = None
    ConformancePackInputParameters: Optional[ConformancePackInputParameters] = None
    ExcludedAccounts: Optional[ExcludedAccounts] = None


class PutRemediationExceptionsResponse(BaseModel):
    FailedBatches: Optional[FailedRemediationExceptionBatches] = None


class PutRemediationExceptionsRequest(BaseModel):
    ConfigRuleName: ConfigRuleName
    ResourceKeys: RemediationExceptionResourceKeys
    Message: Optional[StringWithCharLimit1024] = None
    ExpirationTime: Optional[Date] = None


class PutStoredQueryRequest(BaseModel):
    StoredQuery: StoredQuery
    Tags: Optional[TagsList] = None


class StartRemediationExecutionResponse(BaseModel):
    FailureMessage: Optional[String] = None
    FailedItems: Optional[ResourceKeys] = None


class StartRemediationExecutionRequest(BaseModel):
    ConfigRuleName: ConfigRuleName
    ResourceKeys: ResourceKeys


class TagResourceRequest(BaseModel):
    ResourceArn: AmazonResourceName
    Tags: TagList


class Source(BaseModel):
    """
    Provides the Config rule owner (Amazon Web Services or customer), the rule identifier, and the events that trigger the evaluation of your Amazon Web Services resources.
    """

    Owner: Owner
    SourceIdentifier: StringWithCharLimit256
    SourceDetails: Optional[SourceDetails] = None


class ConfigRule(BaseModel):
    """
    <p>An Config rule represents an Lambda function that you create for a custom rule or a predefined function for an Config managed rule. The function evaluates configuration items to assess whether your Amazon Web Services resources comply with your desired configurations. This function can run when Config detects a configuration change to an Amazon Web Services resource and at a periodic frequency that you choose (for example, every 24 hours).</p> <note> <p>You can use the Amazon Web Services CLI and Amazon Web Services SDKs if you want to create a rule that triggers evaluations for your resources when Config delivers the configuration snapshot. For more information, see <a>ConfigSnapshotDeliveryProperties</a>.</p> </note> <p>For more information about developing and using Config rules, see <a href="https://docs.aws.amazon.com/config/latest/developerguide/evaluate-config.html">Evaluating Amazon Web Services resource Configurations with Config</a> in the <i>Config Developer Guide</i>.</p>
    """

    ConfigRuleName: Optional[ConfigRuleName] = None
    ConfigRuleArn: Optional[StringWithCharLimit256] = None
    ConfigRuleId: Optional[StringWithCharLimit64] = None
    Description: Optional[EmptiableStringWithCharLimit256] = None
    Scope: Optional[Scope] = None
    Source: Source
    InputParameters: Optional[StringWithCharLimit1024] = None
    MaximumExecutionFrequency: Optional[MaximumExecutionFrequency] = None
    ConfigRuleState: Optional[ConfigRuleState] = None
    CreatedBy: Optional[StringWithCharLimit256] = None


class ConfigRules(BaseModel):
    __root__: List[ConfigRule]


class FailedDeleteRemediationExceptionsBatches(BaseModel):
    __root__: List[FailedDeleteRemediationExceptionsBatch]


class OrganizationConfigRules(BaseModel):
    __root__: List[OrganizationConfigRule]


class OrganizationConformancePacks(BaseModel):
    __root__: List[OrganizationConformancePack]


class RemediationConfigurations(BaseModel):
    __root__: Annotated[
        List[RemediationConfiguration], Field(max_items=25, min_items=0)
    ]


class RemediationExecutionStatuses(BaseModel):
    __root__: List[RemediationExecutionStatus]


class FailedRemediationBatch(BaseModel):
    """
    List of each of the failed remediations with specific reasons.
    """

    FailureMessage: Optional[String] = None
    FailedItems: Optional[RemediationConfigurations] = None


class FailedRemediationBatches(BaseModel):
    __root__: List[FailedRemediationBatch]


class DeleteRemediationExceptionsResponse(BaseModel):
    FailedBatches: Optional[FailedDeleteRemediationExceptionsBatches] = None


class DescribeConfigRulesResponse(BaseModel):
    """
    <p/>
    """

    ConfigRules: Optional[ConfigRules] = None
    NextToken: Optional[String] = None


class DescribeOrganizationConfigRulesResponse(BaseModel):
    OrganizationConfigRules: Optional[OrganizationConfigRules] = None
    NextToken: Optional[String] = None


class DescribeOrganizationConformancePacksResponse(BaseModel):
    OrganizationConformancePacks: Optional[OrganizationConformancePacks] = None
    NextToken: Optional[String] = None


class DescribeRemediationConfigurationsResponse(BaseModel):
    RemediationConfigurations: Optional[RemediationConfigurations] = None


class DescribeRemediationExecutionStatusResponse(BaseModel):
    RemediationExecutionStatuses: Optional[RemediationExecutionStatuses] = None
    NextToken: Optional[String] = None


class PutConfigRuleRequest(BaseModel):
    ConfigRule: ConfigRule
    Tags: Optional[TagsList] = None


class PutRemediationConfigurationsResponse(BaseModel):
    FailedBatches: Optional[FailedRemediationBatches] = None


class PutRemediationConfigurationsRequest(BaseModel):
    RemediationConfigurations: RemediationConfigurations
