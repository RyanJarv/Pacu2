# generated by datamodel-codegen:
#   filename:  openapi.yaml
#   timestamp: 2021-12-31T02:47:16+00:00

from __future__ import annotations

from datetime import datetime
from enum import Enum
from typing import Annotated, Any, List, Optional

from pydantic import BaseModel, Extra, Field


class ActivatePipelineOutput(BaseModel):
    """
    Contains the output of ActivatePipeline.
    """

    pass


class PipelineNotFoundException(BaseModel):
    __root__: Any


class PipelineDeletedException(PipelineNotFoundException):
    pass


class InternalServiceError(PipelineNotFoundException):
    pass


class InvalidRequestException(PipelineNotFoundException):
    pass


class AddTagsOutput(ActivatePipelineOutput):
    """
    Contains the output of AddTags.
    """

    pass


class DeactivatePipelineOutput(ActivatePipelineOutput):
    """
    Contains the output of DeactivatePipeline.
    """

    pass


class TaskNotFoundException(PipelineNotFoundException):
    pass


class RemoveTagsOutput(ActivatePipelineOutput):
    """
    Contains the output of RemoveTags.
    """

    pass


class SetTaskStatusOutput(ActivatePipelineOutput):
    """
    Contains the output of SetTaskStatus.
    """

    pass


class Id(BaseModel):
    __root__: Annotated[str, Field(max_length=1024, min_length=1)]


class Timestamp(BaseModel):
    __root__: datetime


class String(BaseModel):
    __root__: Annotated[str, Field(max_length=1024, min_length=0)]


class CancelActive(BaseModel):
    __root__: bool


class IdList(BaseModel):
    __root__: List[Id]


class Boolean(CancelActive):
    pass


class LongString(BaseModel):
    __root__: Annotated[str, Field(max_length=20971520, min_length=0)]


class FieldNameString(BaseModel):
    __root__: Annotated[str, Field(max_length=256, min_length=1)]


class FieldStringValue(BaseModel):
    __root__: Annotated[str, Field(max_length=10240, min_length=0)]


class FieldModel(BaseModel):
    """
    A key-value pair that describes a property of a pipeline object. The value is specified as either a string value (<code>StringValue</code>) or a reference to another object (<code>RefValue</code>) but not as both.
    """

    key: FieldNameString
    stringValue: Optional[FieldStringValue] = None
    refValue: Optional[FieldNameString] = None


class InstanceIdentity(BaseModel):
    """
    <p><p>Identity information for the EC2 instance that is hosting the task runner. You can get this value by calling a metadata URI from the EC2 instance. For more information, see <a href="http://docs.aws.amazon.com/AWSEC2/latest/UserGuide/AESDG-chapter-instancedata.html">Instance Metadata</a> in the <i>Amazon Elastic Compute Cloud User Guide.</i> Passing in this value proves that your task runner is running on an EC2 instance, and ensures the proper AWS Data Pipeline service charges are applied to your pipeline.</p></p>
    """

    document: Optional[String] = None
    signature: Optional[String] = None


class OperatorType(Enum):
    EQ = 'EQ'
    REF_EQ = 'REF_EQ'
    LE = 'LE'
    GE = 'GE'
    BETWEEN = 'BETWEEN'


class StringList(BaseModel):
    __root__: List[String]


class Operator(BaseModel):
    """
    Contains a logical operation for comparing the value of a field with a specified value.
    """

    type: Optional[OperatorType] = None
    values: Optional[StringList] = None


class AttributeNameString(FieldNameString):
    pass


class AttributeValueString(FieldStringValue):
    pass


class ParameterAttribute(BaseModel):
    """
    The attributes allowed or specified with a parameter object.
    """

    key: AttributeNameString
    stringValue: AttributeValueString


class ParameterAttributeList(BaseModel):
    __root__: List[ParameterAttribute]


class ParameterObject(BaseModel):
    """
    Contains information about a parameter object.
    """

    id: FieldNameString
    attributes: ParameterAttributeList


class ParameterValue(BaseModel):
    """
    A value or list of parameter values.
    """

    id: FieldNameString
    stringValue: FieldStringValue


class FieldList(BaseModel):
    __root__: List[FieldModel]


class PipelineIdName(BaseModel):
    """
    Contains the name and identifier of a pipeline.
    """

    id: Optional[Id] = None
    name: Optional[Id] = None


class PipelineObject(BaseModel):
    """
    Contains information about a pipeline object. This can be a logical, physical, or physical attempt pipeline object. The complete set of components of a pipeline defines the pipeline.
    """

    id: Id
    name: Id
    fields: FieldList


class PipelineObjectMap(BaseModel):
    pass

    class Config:
        extra = Extra.allow


class Int(BaseModel):
    __root__: int


class TaskId(BaseModel):
    __root__: Annotated[str, Field(max_length=2048, min_length=1)]


class Selector(BaseModel):
    """
    A comparision that is used to determine whether a query should return this object.
    """

    fieldName: Optional[String] = None
    operator: Optional[Operator] = None


class TaskStatus(Enum):
    FINISHED = 'FINISHED'
    FAILED = 'FAILED'
    FALSE = 'FALSE'


class ErrorMessage(BaseModel):
    __root__: str


class TagKey(BaseModel):
    __root__: Annotated[str, Field(max_length=128, min_length=1)]


class TagValue(BaseModel):
    __root__: Annotated[str, Field(max_length=256, min_length=0)]


class Tag(BaseModel):
    """
    Tags are key/value pairs defined by a user and associated with a pipeline to control access. AWS Data Pipeline allows you to associate ten tags per pipeline. For more information, see <a href="http://docs.aws.amazon.com/datapipeline/latest/DeveloperGuide/dp-control-access.html">Controlling User Access to Pipelines</a> in the <i>AWS Data Pipeline Developer Guide</i>.
    """

    key: TagKey
    value: TagValue


class ValidationMessage(BaseModel):
    __root__: Annotated[str, Field(max_length=10000, min_length=0)]


class CreatePipelineOutput(BaseModel):
    """
    Contains the output of CreatePipeline.
    """

    pipelineId: Id


class DeactivatePipelineInput(BaseModel):
    """
    Contains the parameters for DeactivatePipeline.
    """

    pipelineId: Id
    cancelActive: Optional[CancelActive] = None


class DeletePipelineInput(BaseModel):
    """
    Contains the parameters for DeletePipeline.
    """

    pipelineId: Id


class DescribeObjectsInput(BaseModel):
    """
    Contains the parameters for DescribeObjects.
    """

    pipelineId: Id
    objectIds: IdList
    evaluateExpressions: Optional[Boolean] = None
    marker: Optional[String] = None


class DescribePipelinesInput(BaseModel):
    """
    Contains the parameters for DescribePipelines.
    """

    pipelineIds: IdList


class EvaluateExpressionOutput(BaseModel):
    """
    Contains the output of EvaluateExpression.
    """

    evaluatedExpression: LongString


class EvaluateExpressionInput(BaseModel):
    """
    Contains the parameters for EvaluateExpression.
    """

    pipelineId: Id
    objectId: Id
    expression: LongString


class GetPipelineDefinitionInput(BaseModel):
    """
    Contains the parameters for GetPipelineDefinition.
    """

    pipelineId: Id
    version: Optional[String] = None


class ListPipelinesInput(BaseModel):
    """
    Contains the parameters for ListPipelines.
    """

    marker: Optional[String] = None


class PollForTaskInput(BaseModel):
    """
    Contains the parameters for PollForTask.
    """

    workerGroup: String
    hostname: Optional[Id] = None
    instanceIdentity: Optional[InstanceIdentity] = None


class QueryObjectsOutput(BaseModel):
    """
    Contains the output of QueryObjects.
    """

    ids: Optional[IdList] = None
    marker: Optional[String] = None
    hasMoreResults: Optional[Boolean] = None


class RemoveTagsInput(BaseModel):
    """
    Contains the parameters for RemoveTags.
    """

    pipelineId: Id
    tagKeys: StringList


class ReportTaskProgressOutput(BaseModel):
    """
    Contains the output of ReportTaskProgress.
    """

    canceled: Boolean


class ReportTaskProgressInput(BaseModel):
    """
    Contains the parameters for ReportTaskProgress.
    """

    taskId: TaskId
    fields: Optional[FieldList] = None


class ReportTaskRunnerHeartbeatOutput(BaseModel):
    """
    Contains the output of ReportTaskRunnerHeartbeat.
    """

    terminate: Boolean


class ReportTaskRunnerHeartbeatInput(BaseModel):
    """
    Contains the parameters for ReportTaskRunnerHeartbeat.
    """

    taskrunnerId: Id
    workerGroup: Optional[String] = None
    hostname: Optional[Id] = None


class SetStatusInput(BaseModel):
    """
    Contains the parameters for SetStatus.
    """

    pipelineId: Id
    objectIds: IdList
    status: String


class SetTaskStatusInput(BaseModel):
    """
    Contains the parameters for SetTaskStatus.
    """

    taskId: TaskId
    taskStatus: TaskStatus
    errorId: Optional[String] = None
    errorMessage: Optional[ErrorMessage] = None
    errorStackTrace: Optional[String] = None


class ParameterValueList(BaseModel):
    __root__: List[ParameterValue]


class TagList(BaseModel):
    __root__: Annotated[List[Tag], Field(max_items=10, min_items=0)]


class PipelineObjectList(BaseModel):
    __root__: List[PipelineObject]


class ParameterObjectList(BaseModel):
    __root__: List[ParameterObject]


class PipelineList(BaseModel):
    __root__: List[PipelineIdName]


class PipelineDescription(BaseModel):
    """
    Contains pipeline metadata.
    """

    pipelineId: Id
    name: Id
    fields: FieldList
    description: Optional[String] = None
    tags: Optional[TagList] = None


class TaskObject(BaseModel):
    """
    Contains information about a pipeline task that is assigned to a task runner.
    """

    taskId: Optional[TaskId] = None
    pipelineId: Optional[Id] = None
    attemptId: Optional[Id] = None
    objects: Optional[PipelineObjectMap] = None


class SelectorList(BaseModel):
    """
    The list of Selectors that define queries on individual fields.
    """

    __root__: Annotated[
        List[Selector],
        Field(
            description='The list of Selectors that define queries on individual fields.'
        ),
    ]


class Query(BaseModel):
    """
    Defines the query to run against an object.
    """

    selectors: Optional[SelectorList] = None


class ValidationMessages(BaseModel):
    __root__: List[ValidationMessage]


class ValidationError(BaseModel):
    """
    Defines a validation error. Validation errors prevent pipeline activation. The set of validation errors that can be returned are defined by AWS Data Pipeline.
    """

    id: Optional[Id] = None
    errors: Optional[ValidationMessages] = None


class ValidationWarning(BaseModel):
    """
    Defines a validation warning. Validation warnings do not prevent pipeline activation. The set of validation warnings that can be returned are defined by AWS Data Pipeline.
    """

    id: Optional[Id] = None
    warnings: Optional[ValidationMessages] = None


class ActivatePipelineInput(BaseModel):
    """
    Contains the parameters for ActivatePipeline.
    """

    pipelineId: Id
    parameterValues: Optional[ParameterValueList] = None
    startTimestamp: Optional[Timestamp] = None


class AddTagsInput(BaseModel):
    """
    Contains the parameters for AddTags.
    """

    pipelineId: Id
    tags: TagList


class CreatePipelineInput(BaseModel):
    """
    Contains the parameters for CreatePipeline.
    """

    name: Id
    uniqueId: Id
    description: Optional[String] = None
    tags: Optional[TagList] = None


class DescribeObjectsOutput(BaseModel):
    """
    Contains the output of DescribeObjects.
    """

    pipelineObjects: PipelineObjectList
    marker: Optional[String] = None
    hasMoreResults: Optional[Boolean] = None


class GetPipelineDefinitionOutput(BaseModel):
    """
    Contains the output of GetPipelineDefinition.
    """

    pipelineObjects: Optional[PipelineObjectList] = None
    parameterObjects: Optional[ParameterObjectList] = None
    parameterValues: Optional[ParameterValueList] = None


class ListPipelinesOutput(BaseModel):
    """
    Contains the output of ListPipelines.
    """

    pipelineIdList: PipelineList
    marker: Optional[String] = None
    hasMoreResults: Optional[Boolean] = None


class PollForTaskOutput(BaseModel):
    """
    Contains the output of PollForTask.
    """

    taskObject: Optional[TaskObject] = None


class PutPipelineDefinitionInput(BaseModel):
    """
    Contains the parameters for PutPipelineDefinition.
    """

    pipelineId: Id
    pipelineObjects: PipelineObjectList
    parameterObjects: Optional[ParameterObjectList] = None
    parameterValues: Optional[ParameterValueList] = None


class QueryObjectsInput(BaseModel):
    """
    Contains the parameters for QueryObjects.
    """

    pipelineId: Id
    query: Optional[Query] = None
    sphere: String
    marker: Optional[String] = None
    limit: Optional[Int] = None


class ValidatePipelineDefinitionInput(BaseModel):
    """
    Contains the parameters for ValidatePipelineDefinition.
    """

    pipelineId: Id
    pipelineObjects: PipelineObjectList
    parameterObjects: Optional[ParameterObjectList] = None
    parameterValues: Optional[ParameterValueList] = None


class PipelineDescriptionList(BaseModel):
    __root__: List[PipelineDescription]


class ValidationErrors(BaseModel):
    __root__: List[ValidationError]


class ValidationWarnings(BaseModel):
    __root__: List[ValidationWarning]


class DescribePipelinesOutput(BaseModel):
    """
    Contains the output of DescribePipelines.
    """

    pipelineDescriptionList: PipelineDescriptionList


class PutPipelineDefinitionOutput(BaseModel):
    """
    Contains the output of PutPipelineDefinition.
    """

    validationErrors: Optional[ValidationErrors] = None
    validationWarnings: Optional[ValidationWarnings] = None
    errored: Boolean


class ValidatePipelineDefinitionOutput(PutPipelineDefinitionOutput):
    """
    Contains the output of ValidatePipelineDefinition.
    """

    pass
