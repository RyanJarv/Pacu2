# generated by datamodel-codegen:
#   filename:  openapi.yaml
#   timestamp: 2021-12-31T02:53:47+00:00

from __future__ import annotations

from datetime import datetime
from typing import Annotated, Any, List, Optional

from pydantic import BaseModel, Field


class InvalidInputException(BaseModel):
    __root__: Any


class ResourceNotFoundException(InvalidInputException):
    pass


class ResourceInUseException(InvalidInputException):
    pass


class Arn(BaseModel):
    __root__: Annotated[
        str, Field(max_length=256, regex='arn:([a-z\\d-]+):personalize:.*:.*:.+')
    ]


class Date(BaseModel):
    __root__: datetime


class StringType(BaseModel):
    __root__: Annotated[str, Field(max_length=256, min_length=1)]


class FloatType(BaseModel):
    __root__: float


class ItemId(StringType):
    pass


class RecommendationId(BaseModel):
    __root__: Annotated[str, Field(max_length=40, min_length=1)]


class Impression(BaseModel):
    __root__: Annotated[List[ItemId], Field(max_items=25, min_items=1)]


class EventPropertiesJSON(BaseModel):
    __root__: Annotated[str, Field(max_length=1024, min_length=1)]


class ItemProperties(BaseModel):
    __root__: Annotated[str, Field(max_length=24262, min_length=1)]


class UserId1(StringType):
    pass


class UserProperties(BaseModel):
    __root__: Annotated[str, Field(max_length=4096, min_length=1)]


class Event(BaseModel):
    """
    Represents user interaction event information sent using the <code>PutEvents</code> API.
    """

    eventId: Optional[StringType] = None
    eventType: StringType
    eventValue: Optional[FloatType] = None
    itemId: Optional[ItemId] = None
    properties: Annotated[
        Optional[Any],
        Field(
            description='<p>A string map of event-specific data that you might choose to record. For example, if a user rates a movie on your site, other than movie ID (<code>itemId</code>) and rating (<code>eventValue</code>) , you might also send the number of movie ratings made by the user.</p> <p>Each item in the map consists of a key-value pair. For example,</p> <p> <code>{"numberOfRatings": "12"}</code> </p> <p>The keys use camel case names that match the fields in the Interactions schema. In the above example, the <code>numberOfRatings</code> would match the \'NUMBER_OF_RATINGS\' field defined in the Interactions schema.</p>'
        ),
    ] = None
    sentAt: Date
    recommendationId: Optional[RecommendationId] = None
    impression: Optional[Impression] = None


class Item(BaseModel):
    """
    Represents item metadata added to an Items dataset using the <code>PutItems</code> API. For more information see <a href="https://docs.aws.amazon.com/personalize/latest/dg/importing-items.html">Importing Items Incrementally</a>.
    """

    itemId: StringType
    properties: Annotated[
        Optional[Any],
        Field(
            description='<p>A string map of item-specific metadata. Each element in the map consists of a key-value pair. For example, <code>{"numberOfRatings": "12"}</code>.</p> <p>The keys use camel case names that match the fields in the schema for the Items dataset. In the previous example, the <code>numberOfRatings</code> matches the \'NUMBER_OF_RATINGS\' field defined in the Items schema. For categorical string data, to include multiple categories for a single item, separate each category with a pipe separator (<code>|</code>). For example, <code>\\"Horror|Action\\"</code>.</p>'
        ),
    ] = None


class User(BaseModel):
    """
    Represents user metadata added to a Users dataset using the <code>PutUsers</code> API. For more information see <a href="https://docs.aws.amazon.com/personalize/latest/dg/importing-users.html">Importing Users Incrementally</a>.
    """

    userId: StringType
    properties: Annotated[
        Optional[Any],
        Field(
            description='<p>A string map of user-specific metadata. Each element in the map consists of a key-value pair. For example, <code>{"numberOfVideosWatched": "45"}</code>.</p> <p>The keys use camel case names that match the fields in the schema for the Users dataset. In the previous example, the <code>numberOfVideosWatched</code> matches the \'NUMBER_OF_VIDEOS_WATCHED\' field defined in the Users schema. For categorical string data, to include multiple categories for a single user, separate each category with a pipe separator (<code>|</code>). For example, <code>\\"Member|Frequent shopper\\"</code>.</p>'
        ),
    ] = None


class EventList(BaseModel):
    __root__: Annotated[List[Event], Field(max_items=10, min_items=1)]


class ItemList(BaseModel):
    __root__: Annotated[List[Item], Field(max_items=10, min_items=1)]


class PutEventsRequest(BaseModel):
    trackingId: StringType
    userId: Optional[UserId1] = None
    sessionId: StringType
    eventList: EventList


class PutItemsRequest(BaseModel):
    datasetArn: Arn
    items: ItemList


class UserList(BaseModel):
    __root__: Annotated[List[User], Field(max_items=10, min_items=1)]


class PutUsersRequest(BaseModel):
    datasetArn: Arn
    users: UserList
