# generated by datamodel-codegen:
#   filename:  openapi.yaml
#   timestamp: 2021-12-31T02:45:01+00:00

from __future__ import annotations

from datetime import datetime
from enum import Enum
from typing import Annotated, Any, List, Optional

from pydantic import BaseModel, Extra, Field, SecretStr


class ValidationException(BaseModel):
    __root__: Any


class ConflictException(ValidationException):
    pass


class ServiceQuotaExceededException(ValidationException):
    pass


class ConnectorAuthenticationException(ValidationException):
    pass


class InternalServerException(ValidationException):
    pass


class TriggerType(Enum):
    Scheduled = 'Scheduled'
    Event = 'Event'
    OnDemand = 'OnDemand'


class ConnectorType(Enum):
    Salesforce = 'Salesforce'
    Singular = 'Singular'
    Slack = 'Slack'
    Redshift = 'Redshift'
    S3 = 'S3'
    Marketo = 'Marketo'
    Googleanalytics = 'Googleanalytics'
    Zendesk = 'Zendesk'
    Servicenow = 'Servicenow'
    Datadog = 'Datadog'
    Trendmicro = 'Trendmicro'
    Snowflake = 'Snowflake'
    Dynatrace = 'Dynatrace'
    Infornexus = 'Infornexus'
    Amplitude = 'Amplitude'
    Veeva = 'Veeva'
    EventBridge = 'EventBridge'
    LookoutMetrics = 'LookoutMetrics'
    Upsolver = 'Upsolver'
    Honeycode = 'Honeycode'
    CustomerProfiles = 'CustomerProfiles'
    SAPOData = 'SAPOData'


class ConnectorProfileName(BaseModel):
    __root__: Annotated[str, Field(max_length=256, regex='[\\w/!@#+=.-]+')]


class TagValue(BaseModel):
    __root__: Annotated[str, Field(max_length=256, regex='[\\s\\w+-=\\.:/@]*')]


class ResourceNotFoundException(ValidationException):
    pass


class ConnectorServerException(ValidationException):
    pass


class DeleteConnectorProfileResponse(BaseModel):
    pass


class DeleteFlowResponse(DeleteConnectorProfileResponse):
    pass


class UnsupportedOperationException(ValidationException):
    pass


class TagResourceResponse(DeleteConnectorProfileResponse):
    pass


class UntagResourceResponse(DeleteConnectorProfileResponse):
    pass


class TagKey(BaseModel):
    __root__: Annotated[
        str, Field(max_length=128, min_length=1, regex='^(?!aws:)[a-zA-Z+-=._:/]+$')
    ]


class ARN(BaseModel):
    __root__: Annotated[str, Field(max_length=512, regex='arn:aws:.*:.*:[0-9]+:.*')]


class AccessKeyId(BaseModel):
    __root__: Annotated[SecretStr, Field(max_length=256, regex='\\S+')]


class AccessToken(BaseModel):
    __root__: Annotated[SecretStr, Field(max_length=512, regex='\\S+')]


class AccountName(BaseModel):
    __root__: Annotated[str, Field(max_length=512, regex='\\S+')]


class AggregationType(Enum):
    None_ = 'None'
    SingleFile = 'SingleFile'


class AggregationConfig(BaseModel):
    """
    The aggregation settings that you can use to customize the output format of your flow data.
    """

    aggregationType: Optional[AggregationType] = None


class AmplitudeConnectorOperator(Enum):
    BETWEEN = 'BETWEEN'


class ApiKey(BaseModel):
    __root__: Annotated[str, Field(max_length=256, regex='\\S+')]


class SecretKey(AccessKeyId):
    pass


class AmplitudeConnectorProfileCredentials(BaseModel):
    """
    The connector-specific credentials required when using Amplitude.
    """

    apiKey: ApiKey
    secretKey: SecretKey


class AmplitudeConnectorProfileProperties(DeleteConnectorProfileResponse):
    """
    The connector-specific profile properties required when using Amplitude.
    """

    pass


class AmplitudeMetadata(DeleteConnectorProfileResponse):
    """
    The connector metadata specific to Amplitude.
    """

    pass


class Object(AccountName):
    pass


class AmplitudeSourceProperties(BaseModel):
    """
    The properties that are applied when Amplitude is being used as a source.
    """

    object: Object


class ApiSecretKey(AccessKeyId):
    pass


class ApiToken(ApiKey):
    pass


class ApplicationHostUrl(BaseModel):
    __root__: Annotated[
        str,
        Field(
            max_length=256,
            regex='^(https?)://[-a-zA-Z0-9+&@#/%?=~_|!:,.;]*[-a-zA-Z0-9+&@#/%=~_|]',
        ),
    ]


class ApplicationKey(AccountName):
    pass


class ApplicationServicePath(AccountName):
    pass


class AuthCode(AccountName):
    pass


class AuthCodeUrl(ApplicationHostUrl):
    pass


class Username(AccountName):
    pass


class Password(BaseModel):
    __root__: Annotated[SecretStr, Field(max_length=512, regex='.*')]


class BasicAuthCredentials(BaseModel):
    """
    The basic auth credentials required for basic authentication.
    """

    username: Username
    password: Password


class Boolean(BaseModel):
    __root__: bool


class BucketName(BaseModel):
    __root__: Annotated[str, Field(max_length=63, min_length=3, regex='\\S+')]


class BucketPrefix(BaseModel):
    __root__: Annotated[str, Field(max_length=512, regex='.*')]


class ClientCredentialsArn(BaseModel):
    __root__: Annotated[
        SecretStr,
        Field(
            max_length=2048, min_length=20, regex='arn:aws:secretsmanager:.*:[0-9]+:.*'
        ),
    ]


class ClientId(AccountName):
    pass


class ClientNumber(BaseModel):
    __root__: Annotated[str, Field(max_length=3, min_length=3, regex='^\\d{3}$')]


class ClientSecret(AccessToken):
    pass


class ConnectionMode(Enum):
    Public = 'Public'
    Private = 'Private'


class ConnectorTypeList(BaseModel):
    __root__: Annotated[List[ConnectorType], Field(max_items=100, min_items=0)]


class TriggerTypeList(BaseModel):
    __root__: List[TriggerType]


class ConnectorConfigurationsMap(BaseModel):
    pass

    class Config:
        extra = Extra.allow


class Name(BaseModel):
    __root__: Annotated[str, Field(max_length=128, regex='\\S+')]


class Label(BaseModel):
    __root__: Annotated[str, Field(max_length=128, regex='.*')]


class ConnectorEntity(BaseModel):
    """
    The high-level entity that can be queried in Amazon AppFlow. For example, a Salesforce entity might be an <i>Account</i> or <i>Opportunity</i>, whereas a ServiceNow entity might be an <i>Incident</i>.
    """

    name: Name
    label: Optional[Label] = None
    hasNestedEntities: Optional[Boolean] = None


class Identifier(Name):
    pass


class Description1(BaseModel):
    __root__: Annotated[str, Field(max_length=1024, regex='[\\s\\w/!@#+=.-]*')]


class SourceFieldProperties(BaseModel):
    """
    The properties that can be applied to a field when the connector is being used as a source.
    """

    isRetrievable: Optional[Boolean] = None
    isQueryable: Optional[Boolean] = None


class ConnectorEntityList(BaseModel):
    __root__: List[ConnectorEntity]


class ConnectorEntityMap(BaseModel):
    pass

    class Config:
        extra = Extra.allow


class DatadogMetadata(DeleteConnectorProfileResponse):
    """
    The connector metadata specific to Datadog.
    """

    pass


class DynatraceMetadata(DeleteConnectorProfileResponse):
    """
    The connector metadata specific to Dynatrace.
    """

    pass


class InforNexusMetadata(DeleteConnectorProfileResponse):
    """
    The connector metadata specific to Infor Nexus.
    """

    pass


class MarketoMetadata(DeleteConnectorProfileResponse):
    """
    The connector metadata specific to Marketo.
    """

    pass


class RedshiftMetadata(DeleteConnectorProfileResponse):
    """
    The connector metadata specific to Amazon Redshift.
    """

    pass


class S3Metadata(DeleteConnectorProfileResponse):
    """
    The connector metadata specific to Amazon S3.
    """

    pass


class ServiceNowMetadata(DeleteConnectorProfileResponse):
    """
    The connector metadata specific to ServiceNow.
    """

    pass


class SingularMetadata(DeleteConnectorProfileResponse):
    """
    The connector metadata specific to Singular.
    """

    pass


class TrendmicroMetadata(DeleteConnectorProfileResponse):
    """
    The connector metadata specific to Trend Micro.
    """

    pass


class VeevaMetadata(DeleteConnectorProfileResponse):
    """
    The connector metadata specific to Veeva.
    """

    pass


class EventBridgeMetadata(DeleteConnectorProfileResponse):
    """
    The connector metadata specific to Amazon EventBridge.
    """

    pass


class UpsolverMetadata(DeleteConnectorProfileResponse):
    """
    The connector metadata specific to Upsolver.
    """

    pass


class CustomerProfilesMetadata(DeleteConnectorProfileResponse):
    """
    The connector metadata specific to Amazon Connect Customer Profiles.
    """

    pass


class SAPODataMetadata(DeleteConnectorProfileResponse):
    """
    The connector metadata specific to SAPOData.
    """

    pass


class RedirectUri(AccountName):
    pass


class ConnectorOAuthRequest(BaseModel):
    """
    Used by select connectors for which the OAuth workflow is supported, such as Salesforce, Google Analytics, Marketo, Zendesk, and Slack.
    """

    authCode: Optional[AuthCode] = None
    redirectUri: Optional[RedirectUri] = None


class DatadogConnectorOperator(Enum):
    PROJECTION = 'PROJECTION'
    BETWEEN = 'BETWEEN'
    EQUAL_TO = 'EQUAL_TO'
    ADDITION = 'ADDITION'
    MULTIPLICATION = 'MULTIPLICATION'
    DIVISION = 'DIVISION'
    SUBTRACTION = 'SUBTRACTION'
    MASK_ALL = 'MASK_ALL'
    MASK_FIRST_N = 'MASK_FIRST_N'
    MASK_LAST_N = 'MASK_LAST_N'
    VALIDATE_NON_NULL = 'VALIDATE_NON_NULL'
    VALIDATE_NON_ZERO = 'VALIDATE_NON_ZERO'
    VALIDATE_NON_NEGATIVE = 'VALIDATE_NON_NEGATIVE'
    VALIDATE_NUMERIC = 'VALIDATE_NUMERIC'
    NO_OP = 'NO_OP'


class GoogleAnalyticsConnectorOperator(Enum):
    PROJECTION = 'PROJECTION'
    BETWEEN = 'BETWEEN'


class MarketoConnectorOperator(Enum):
    PROJECTION = 'PROJECTION'
    LESS_THAN = 'LESS_THAN'
    GREATER_THAN = 'GREATER_THAN'
    BETWEEN = 'BETWEEN'
    ADDITION = 'ADDITION'
    MULTIPLICATION = 'MULTIPLICATION'
    DIVISION = 'DIVISION'
    SUBTRACTION = 'SUBTRACTION'
    MASK_ALL = 'MASK_ALL'
    MASK_FIRST_N = 'MASK_FIRST_N'
    MASK_LAST_N = 'MASK_LAST_N'
    VALIDATE_NON_NULL = 'VALIDATE_NON_NULL'
    VALIDATE_NON_ZERO = 'VALIDATE_NON_ZERO'
    VALIDATE_NON_NEGATIVE = 'VALIDATE_NON_NEGATIVE'
    VALIDATE_NUMERIC = 'VALIDATE_NUMERIC'
    NO_OP = 'NO_OP'


class S3ConnectorOperator(Enum):
    PROJECTION = 'PROJECTION'
    LESS_THAN = 'LESS_THAN'
    GREATER_THAN = 'GREATER_THAN'
    BETWEEN = 'BETWEEN'
    LESS_THAN_OR_EQUAL_TO = 'LESS_THAN_OR_EQUAL_TO'
    GREATER_THAN_OR_EQUAL_TO = 'GREATER_THAN_OR_EQUAL_TO'
    EQUAL_TO = 'EQUAL_TO'
    NOT_EQUAL_TO = 'NOT_EQUAL_TO'
    ADDITION = 'ADDITION'
    MULTIPLICATION = 'MULTIPLICATION'
    DIVISION = 'DIVISION'
    SUBTRACTION = 'SUBTRACTION'
    MASK_ALL = 'MASK_ALL'
    MASK_FIRST_N = 'MASK_FIRST_N'
    MASK_LAST_N = 'MASK_LAST_N'
    VALIDATE_NON_NULL = 'VALIDATE_NON_NULL'
    VALIDATE_NON_ZERO = 'VALIDATE_NON_ZERO'
    VALIDATE_NON_NEGATIVE = 'VALIDATE_NON_NEGATIVE'
    VALIDATE_NUMERIC = 'VALIDATE_NUMERIC'
    NO_OP = 'NO_OP'


class SalesforceConnectorOperator(Enum):
    PROJECTION = 'PROJECTION'
    LESS_THAN = 'LESS_THAN'
    CONTAINS = 'CONTAINS'
    GREATER_THAN = 'GREATER_THAN'
    BETWEEN = 'BETWEEN'
    LESS_THAN_OR_EQUAL_TO = 'LESS_THAN_OR_EQUAL_TO'
    GREATER_THAN_OR_EQUAL_TO = 'GREATER_THAN_OR_EQUAL_TO'
    EQUAL_TO = 'EQUAL_TO'
    NOT_EQUAL_TO = 'NOT_EQUAL_TO'
    ADDITION = 'ADDITION'
    MULTIPLICATION = 'MULTIPLICATION'
    DIVISION = 'DIVISION'
    SUBTRACTION = 'SUBTRACTION'
    MASK_ALL = 'MASK_ALL'
    MASK_FIRST_N = 'MASK_FIRST_N'
    MASK_LAST_N = 'MASK_LAST_N'
    VALIDATE_NON_NULL = 'VALIDATE_NON_NULL'
    VALIDATE_NON_ZERO = 'VALIDATE_NON_ZERO'
    VALIDATE_NON_NEGATIVE = 'VALIDATE_NON_NEGATIVE'
    VALIDATE_NUMERIC = 'VALIDATE_NUMERIC'
    NO_OP = 'NO_OP'


class ServiceNowConnectorOperator(Enum):
    PROJECTION = 'PROJECTION'
    CONTAINS = 'CONTAINS'
    LESS_THAN = 'LESS_THAN'
    GREATER_THAN = 'GREATER_THAN'
    BETWEEN = 'BETWEEN'
    LESS_THAN_OR_EQUAL_TO = 'LESS_THAN_OR_EQUAL_TO'
    GREATER_THAN_OR_EQUAL_TO = 'GREATER_THAN_OR_EQUAL_TO'
    EQUAL_TO = 'EQUAL_TO'
    NOT_EQUAL_TO = 'NOT_EQUAL_TO'
    ADDITION = 'ADDITION'
    MULTIPLICATION = 'MULTIPLICATION'
    DIVISION = 'DIVISION'
    SUBTRACTION = 'SUBTRACTION'
    MASK_ALL = 'MASK_ALL'
    MASK_FIRST_N = 'MASK_FIRST_N'
    MASK_LAST_N = 'MASK_LAST_N'
    VALIDATE_NON_NULL = 'VALIDATE_NON_NULL'
    VALIDATE_NON_ZERO = 'VALIDATE_NON_ZERO'
    VALIDATE_NON_NEGATIVE = 'VALIDATE_NON_NEGATIVE'
    VALIDATE_NUMERIC = 'VALIDATE_NUMERIC'
    NO_OP = 'NO_OP'


class SingularConnectorOperator(Enum):
    PROJECTION = 'PROJECTION'
    EQUAL_TO = 'EQUAL_TO'
    ADDITION = 'ADDITION'
    MULTIPLICATION = 'MULTIPLICATION'
    DIVISION = 'DIVISION'
    SUBTRACTION = 'SUBTRACTION'
    MASK_ALL = 'MASK_ALL'
    MASK_FIRST_N = 'MASK_FIRST_N'
    MASK_LAST_N = 'MASK_LAST_N'
    VALIDATE_NON_NULL = 'VALIDATE_NON_NULL'
    VALIDATE_NON_ZERO = 'VALIDATE_NON_ZERO'
    VALIDATE_NON_NEGATIVE = 'VALIDATE_NON_NEGATIVE'
    VALIDATE_NUMERIC = 'VALIDATE_NUMERIC'
    NO_OP = 'NO_OP'


class SlackConnectorOperator(Enum):
    PROJECTION = 'PROJECTION'
    LESS_THAN = 'LESS_THAN'
    GREATER_THAN = 'GREATER_THAN'
    BETWEEN = 'BETWEEN'
    LESS_THAN_OR_EQUAL_TO = 'LESS_THAN_OR_EQUAL_TO'
    GREATER_THAN_OR_EQUAL_TO = 'GREATER_THAN_OR_EQUAL_TO'
    EQUAL_TO = 'EQUAL_TO'
    ADDITION = 'ADDITION'
    MULTIPLICATION = 'MULTIPLICATION'
    DIVISION = 'DIVISION'
    SUBTRACTION = 'SUBTRACTION'
    MASK_ALL = 'MASK_ALL'
    MASK_FIRST_N = 'MASK_FIRST_N'
    MASK_LAST_N = 'MASK_LAST_N'
    VALIDATE_NON_NULL = 'VALIDATE_NON_NULL'
    VALIDATE_NON_ZERO = 'VALIDATE_NON_ZERO'
    VALIDATE_NON_NEGATIVE = 'VALIDATE_NON_NEGATIVE'
    VALIDATE_NUMERIC = 'VALIDATE_NUMERIC'
    NO_OP = 'NO_OP'


class VeevaConnectorOperator(Enum):
    PROJECTION = 'PROJECTION'
    LESS_THAN = 'LESS_THAN'
    GREATER_THAN = 'GREATER_THAN'
    CONTAINS = 'CONTAINS'
    BETWEEN = 'BETWEEN'
    LESS_THAN_OR_EQUAL_TO = 'LESS_THAN_OR_EQUAL_TO'
    GREATER_THAN_OR_EQUAL_TO = 'GREATER_THAN_OR_EQUAL_TO'
    EQUAL_TO = 'EQUAL_TO'
    NOT_EQUAL_TO = 'NOT_EQUAL_TO'
    ADDITION = 'ADDITION'
    MULTIPLICATION = 'MULTIPLICATION'
    DIVISION = 'DIVISION'
    SUBTRACTION = 'SUBTRACTION'
    MASK_ALL = 'MASK_ALL'
    MASK_FIRST_N = 'MASK_FIRST_N'
    MASK_LAST_N = 'MASK_LAST_N'
    VALIDATE_NON_NULL = 'VALIDATE_NON_NULL'
    VALIDATE_NON_ZERO = 'VALIDATE_NON_ZERO'
    VALIDATE_NON_NEGATIVE = 'VALIDATE_NON_NEGATIVE'
    VALIDATE_NUMERIC = 'VALIDATE_NUMERIC'
    NO_OP = 'NO_OP'


class ZendeskConnectorOperator(Enum):
    PROJECTION = 'PROJECTION'
    GREATER_THAN = 'GREATER_THAN'
    ADDITION = 'ADDITION'
    MULTIPLICATION = 'MULTIPLICATION'
    DIVISION = 'DIVISION'
    SUBTRACTION = 'SUBTRACTION'
    MASK_ALL = 'MASK_ALL'
    MASK_FIRST_N = 'MASK_FIRST_N'
    MASK_LAST_N = 'MASK_LAST_N'
    VALIDATE_NON_NULL = 'VALIDATE_NON_NULL'
    VALIDATE_NON_ZERO = 'VALIDATE_NON_ZERO'
    VALIDATE_NON_NEGATIVE = 'VALIDATE_NON_NEGATIVE'
    VALIDATE_NUMERIC = 'VALIDATE_NUMERIC'
    NO_OP = 'NO_OP'


class ConnectorOperator(BaseModel):
    """
    The operation to be performed on the provided source fields.
    """

    Amplitude: Optional[AmplitudeConnectorOperator] = None
    Datadog: Optional[DatadogConnectorOperator] = None
    Dynatrace: Optional[DatadogConnectorOperator] = None
    GoogleAnalytics: Optional[GoogleAnalyticsConnectorOperator] = None
    InforNexus: Optional[DatadogConnectorOperator] = None
    Marketo: Optional[MarketoConnectorOperator] = None
    S3: Optional[S3ConnectorOperator] = None
    Salesforce: Optional[SalesforceConnectorOperator] = None
    ServiceNow: Optional[ServiceNowConnectorOperator] = None
    Singular: Optional[SingularConnectorOperator] = None
    Slack: Optional[SlackConnectorOperator] = None
    Trendmicro: Optional[SingularConnectorOperator] = None
    Veeva: Optional[VeevaConnectorOperator] = None
    Zendesk: Optional[ZendeskConnectorOperator] = None
    SAPOData: Optional[SalesforceConnectorOperator] = None


class ConnectorProfileArn(BaseModel):
    __root__: Annotated[str, Field(max_length=512, regex='arn:aws:kms:.*:[0-9]+:.*')]


class Date(BaseModel):
    __root__: datetime


class DatadogConnectorProfileCredentials(BaseModel):
    """
    The connector-specific credentials required by Datadog.
    """

    apiKey: ApiKey
    applicationKey: ApplicationKey


class DynatraceConnectorProfileCredentials(BaseModel):
    """
    The connector-specific profile credentials required by Dynatrace.
    """

    apiToken: ApiToken


class MarketoConnectorProfileCredentials(BaseModel):
    """
    The connector-specific profile credentials required by Marketo.
    """

    clientId: ClientId
    clientSecret: ClientSecret
    accessToken: Optional[AccessToken] = None
    oAuthRequest: Optional[ConnectorOAuthRequest] = None


class RedshiftConnectorProfileCredentials(BasicAuthCredentials):
    """
    The connector-specific profile credentials required when using Amazon Redshift.
    """

    pass


class ServiceNowConnectorProfileCredentials(BasicAuthCredentials):
    """
    The connector-specific profile credentials required when using ServiceNow.
    """

    pass


class SingularConnectorProfileCredentials(BaseModel):
    """
    The connector-specific profile credentials required when using Singular.
    """

    apiKey: ApiKey


class SlackConnectorProfileCredentials(MarketoConnectorProfileCredentials):
    """
    The connector-specific profile credentials required when using Slack.
    """

    pass


class SnowflakeConnectorProfileCredentials(BasicAuthCredentials):
    """
    The connector-specific profile credentials required when using Snowflake.
    """

    pass


class TrendmicroConnectorProfileCredentials(BaseModel):
    """
    The connector-specific profile credentials required when using Trend Micro.
    """

    apiSecretKey: ApiSecretKey


class VeevaConnectorProfileCredentials(BasicAuthCredentials):
    """
    The connector-specific profile credentials required when using Veeva.
    """

    pass


class ZendeskConnectorProfileCredentials(MarketoConnectorProfileCredentials):
    """
    The connector-specific profile credentials required when using Zendesk.
    """

    pass


class ConnectorProfileNameList(BaseModel):
    __root__: Annotated[List[ConnectorProfileName], Field(max_items=100, min_items=0)]


class GoogleAnalyticsConnectorProfileProperties(DeleteConnectorProfileResponse):
    """
    The connector-specific profile properties required by Google Analytics.
    """

    pass


class HoneycodeConnectorProfileProperties(DeleteConnectorProfileResponse):
    """
    The connector-specific properties required when using Amazon Honeycode.
    """

    pass


class SingularConnectorProfileProperties(DeleteConnectorProfileResponse):
    """
    The connector-specific profile properties required when using Singular.
    """

    pass


class TrendmicroConnectorProfileProperties(DeleteConnectorProfileResponse):
    """
    The connector-specific profile properties required when using Trend Micro.
    """

    pass


class KMSArn(BaseModel):
    __root__: Annotated[
        str, Field(max_length=2048, min_length=20, regex='arn:aws:kms:.*:[0-9]+:.*')
    ]


class FlowName(BaseModel):
    __root__: Annotated[str, Field(max_length=256, regex='[a-zA-Z0-9][\\w!@#.-]+')]


class FlowDescription(BaseModel):
    __root__: Annotated[str, Field(max_length=2048, regex='[\\w!@#\\-.?,\\s]*')]


class TagMap(BaseModel):
    pass

    class Config:
        extra = Extra.allow


class FlowArn(BaseModel):
    __root__: Annotated[
        str, Field(max_length=512, regex='arn:aws:appflow:.*:[0-9]+:.*')
    ]


class FlowStatus(Enum):
    Active = 'Active'
    Deprecated = 'Deprecated'
    Deleted = 'Deleted'
    Draft = 'Draft'
    Errored = 'Errored'
    Suspended = 'Suspended'


class CreatedBy(ApiKey):
    pass


class DomainName(BaseModel):
    __root__: Annotated[str, Field(max_length=64, regex='\\S+')]


class ObjectTypeName(BaseModel):
    __root__: Annotated[str, Field(max_length=255, regex='\\S+')]


class CustomerProfilesDestinationProperties(BaseModel):
    """
    The properties that are applied when Amazon Connect Customer Profiles is used as a destination.
    """

    domainName: DomainName
    objectTypeName: Optional[ObjectTypeName] = None


class DataPullMode(Enum):
    Incremental = 'Incremental'
    Complete = 'Complete'


class DatabaseUrl(AccountName):
    pass


class InstanceUrl(ApiKey):
    pass


class DatadogSourceProperties(AmplitudeSourceProperties):
    """
    The properties that are applied when Datadog is being used as a source.
    """

    pass


class DatetimeTypeFieldName(BaseModel):
    __root__: Annotated[str, Field(max_length=256, regex='.*')]


class DeleteConnectorProfileRequest(BaseModel):
    connectorProfileName: ConnectorProfileName
    forceDelete: Optional[Boolean] = None


class DeleteFlowRequest(BaseModel):
    flowName: FlowName
    forceDelete: Optional[Boolean] = None


class DescribeConnectorEntityRequest(BaseModel):
    connectorEntityName: Name
    connectorType: Optional[ConnectorType] = None
    connectorProfileName: Optional[ConnectorProfileName] = None


class MaxResults(BaseModel):
    __root__: Annotated[int, Field(ge=1.0, le=100.0)]


class NextToken(BaseModel):
    __root__: Annotated[str, Field(max_length=2048, regex='\\S+')]


class DescribeConnectorProfilesRequest(BaseModel):
    connectorProfileNames: Optional[ConnectorProfileNameList] = None
    connectorType: Optional[ConnectorType] = None
    maxResults: Optional[MaxResults] = None
    nextToken: Optional[NextToken] = None


class DescribeConnectorsRequest(BaseModel):
    connectorTypes: Optional[ConnectorTypeList] = None
    nextToken: Optional[NextToken] = None


class DescribeFlowExecutionRecordsRequest(BaseModel):
    flowName: FlowName
    maxResults: Optional[MaxResults] = None
    nextToken: Optional[NextToken] = None


class DescribeFlowRequest(BaseModel):
    flowName: FlowName


class FlowStatusMessage(BaseModel):
    __root__: Annotated[str, Field(max_length=2048, regex='[\\s\\w/!@#+=.-]*')]


class UpdatedBy(ApiKey):
    pass


class LookoutMetricsDestinationProperties(DeleteConnectorProfileResponse):
    """
    The properties that are applied when Amazon Lookout for Metrics is used as a destination.
    """

    pass


class DestinationField(DatetimeTypeFieldName):
    pass


class DocumentType(BaseModel):
    __root__: Annotated[str, Field(max_length=512, regex='[\\s\\w_-]+')]


class DynatraceSourceProperties(AmplitudeSourceProperties):
    """
    The properties that are applied when Dynatrace is being used as a source.
    """

    pass


class EntitiesPath(BaseModel):
    __root__: Annotated[str, Field(max_length=256, regex='[\\s\\w/!@#+=.-]*')]


class ErrorHandlingConfig(BaseModel):
    """
    The settings that determine how Amazon AppFlow handles an error when placing data in the destination. For example, this setting would determine if the flow should fail after one insertion error, or continue and attempt to insert every record regardless of the initial failure. <code>ErrorHandlingConfig</code> is a part of the destination connector details.
    """

    failOnFirstDestinationError: Optional[Boolean] = None
    bucketPrefix: Optional[BucketPrefix] = None
    bucketName: Optional[BucketName] = None


class Long(BaseModel):
    __root__: int


class ExecutionMessage(FlowStatusMessage):
    pass


class ErrorInfo(BaseModel):
    """
    Provides details in the event of a failed flow, including the failure count and the related error messages.
    """

    putFailuresCount: Optional[Long] = None
    executionMessage: Optional[ExecutionMessage] = None


class MostRecentExecutionMessage(FlowDescription):
    pass


class ExecutionStatus(Enum):
    InProgress = 'InProgress'
    Successful = 'Successful'
    Error = 'Error'


class ExecutionId(ApiKey):
    pass


class ExecutionResult(BaseModel):
    """
    Specifies the end result of the flow run.
    """

    errorInfo: Optional[ErrorInfo] = None
    bytesProcessed: Optional[Long] = None
    bytesWritten: Optional[Long] = None
    recordsProcessed: Optional[Long] = None


class ExecutionRecord(BaseModel):
    """
    Specifies information about the past flow run instances for a given flow.
    """

    executionId: Optional[ExecutionId] = None
    executionStatus: Optional[ExecutionStatus] = None
    executionResult: Optional[ExecutionResult] = None
    startedAt: Optional[Date] = None
    lastUpdatedAt: Optional[Date] = None
    dataPullStartTime: Optional[Date] = None
    dataPullEndTime: Optional[Date] = None


class FieldType(BaseModel):
    __root__: str


class FileType(Enum):
    CSV = 'CSV'
    JSON = 'JSON'
    PARQUET = 'PARQUET'


class RefreshToken(AccountName):
    pass


class GoogleAnalyticsSourceProperties(AmplitudeSourceProperties):
    """
    The properties that are applied when Google Analytics is being used as a source.
    """

    pass


class Group(Name):
    pass


class IdFieldNameList(BaseModel):
    """
    A list of field names that can be used as an ID field when performing a write operation.
    """

    __root__: Annotated[
        List[Name],
        Field(
            description=' A list of field names that can be used as an ID field when performing a write operation. ',
            max_items=1,
            min_items=0,
        ),
    ]


class Key(AccountName):
    pass


class InforNexusSourceProperties(AmplitudeSourceProperties):
    """
    The properties that are applied when Infor Nexus is being used as a source.
    """

    pass


class ListConnectorEntitiesRequest(BaseModel):
    connectorProfileName: Optional[ConnectorProfileName] = None
    connectorType: Optional[ConnectorType] = None
    entitiesPath: Optional[EntitiesPath] = None


class ListFlowsRequest(BaseModel):
    maxResults: Optional[MaxResults] = None
    nextToken: Optional[NextToken] = None


class ListTagsForResourceRequest(BaseModel):
    pass


class LogonLanguage(BaseModel):
    __root__: Annotated[str, Field(max_length=2, regex='^[a-zA-Z0-9_]*$')]


class MarketoSourceProperties(AmplitudeSourceProperties):
    """
    The properties that are applied when Marketo is being used as a source.
    """

    pass


class OAuthCredentials(BaseModel):
    """
    The OAuth credentials required for OAuth type authentication.
    """

    clientId: ClientId
    clientSecret: ClientSecret
    accessToken: Optional[AccessToken] = None
    refreshToken: Optional[RefreshToken] = None
    oAuthRequest: Optional[ConnectorOAuthRequest] = None


class TokenUrl(ApplicationHostUrl):
    pass


class OAuthScope(BaseModel):
    __root__: Annotated[str, Field(max_length=128, regex='[/\\w]*')]


class OperatorPropertiesKeys(Enum):
    VALUE = 'VALUE'
    VALUES = 'VALUES'
    DATA_TYPE = 'DATA_TYPE'
    UPPER_BOUND = 'UPPER_BOUND'
    LOWER_BOUND = 'LOWER_BOUND'
    SOURCE_DATA_TYPE = 'SOURCE_DATA_TYPE'
    DESTINATION_DATA_TYPE = 'DESTINATION_DATA_TYPE'
    VALIDATION_ACTION = 'VALIDATION_ACTION'
    MASK_VALUE = 'MASK_VALUE'
    MASK_LENGTH = 'MASK_LENGTH'
    TRUNCATE_LENGTH = 'TRUNCATE_LENGTH'
    MATH_OPERATION_FIELDS_ORDER = 'MATH_OPERATION_FIELDS_ORDER'
    CONCAT_FORMAT = 'CONCAT_FORMAT'
    SUBFIELD_CATEGORY_MAP = 'SUBFIELD_CATEGORY_MAP'
    EXCLUDE_SOURCE_FIELDS_LIST = 'EXCLUDE_SOURCE_FIELDS_LIST'


class PortNumber(BaseModel):
    __root__: Annotated[int, Field(ge=1.0, le=65535.0)]


class PrefixType(Enum):
    FILENAME = 'FILENAME'
    PATH = 'PATH'
    PATH_AND_FILENAME = 'PATH_AND_FILENAME'


class PrefixFormat(Enum):
    YEAR = 'YEAR'
    MONTH = 'MONTH'
    DAY = 'DAY'
    HOUR = 'HOUR'
    MINUTE = 'MINUTE'


class PrefixConfig(BaseModel):
    """
    Determines the prefix that Amazon AppFlow applies to the destination folder name. You can name your destination folders according to the flow frequency and date.
    """

    prefixType: Optional[PrefixType] = None
    prefixFormat: Optional[PrefixFormat] = None


class PrivateConnectionProvisioningFailureCause(Enum):
    CONNECTOR_AUTHENTICATION = 'CONNECTOR_AUTHENTICATION'
    CONNECTOR_SERVER = 'CONNECTOR_SERVER'
    INTERNAL_SERVER = 'INTERNAL_SERVER'
    ACCESS_DENIED = 'ACCESS_DENIED'
    VALIDATION = 'VALIDATION'


class PrivateConnectionProvisioningFailureMessage(FlowStatusMessage):
    pass


class PrivateConnectionProvisioningStatus(Enum):
    FAILED = 'FAILED'
    PENDING = 'PENDING'
    CREATED = 'CREATED'


class PrivateLinkServiceName(BaseModel):
    __root__: Annotated[
        str, Field(max_length=512, regex='^$|com.amazonaws.vpce.[\\w/!:@#.\\-]+')
    ]


class Property(BaseModel):
    __root__: Annotated[str, Field(max_length=2048, regex='.+')]


class RoleArn(BaseModel):
    __root__: Annotated[str, Field(max_length=512, regex='arn:aws:iam:.*:[0-9]+:.*')]


class Region(DomainName):
    pass


class RegionList(BaseModel):
    __root__: List[Region]


class S3OutputFormatConfig(BaseModel):
    """
    The configuration that determines how Amazon AppFlow should format the flow output data when Amazon S3 is used as the destination.
    """

    fileType: Optional[FileType] = None
    prefixConfig: Optional[PrefixConfig] = None
    aggregationConfig: Optional[AggregationConfig] = None


class S3SourceProperties(BaseModel):
    """
    The properties that are applied when Amazon S3 is being used as the flow source.
    """

    bucketName: BucketName
    bucketPrefix: Optional[BucketPrefix] = None


class SAPODataSourceProperties(BaseModel):
    """
    The properties that are applied when using SAPOData as a flow source.
    """

    objectPath: Optional[Object] = None


class WriteOperationType(Enum):
    """
    The possible write operations in the destination connector. When this value is not provided, this defaults to the <code>INSERT</code> operation.
    """

    INSERT = 'INSERT'
    UPSERT = 'UPSERT'
    UPDATE = 'UPDATE'


class SalesforceSourceProperties(BaseModel):
    """
    The properties that are applied when Salesforce is being used as a source.
    """

    object: Object
    enableDynamicFieldUpdate: Optional[Boolean] = None
    includeDeletedRecords: Optional[Boolean] = None


class ScheduleExpression(DatetimeTypeFieldName):
    pass


class ScheduleFrequencyType(Enum):
    BYMINUTE = 'BYMINUTE'
    HOURLY = 'HOURLY'
    DAILY = 'DAILY'
    WEEKLY = 'WEEKLY'
    MONTHLY = 'MONTHLY'
    ONCE = 'ONCE'


class ScheduleOffset(BaseModel):
    __root__: Annotated[int, Field(ge=0.0, le=36000.0)]


class Timezone(DatetimeTypeFieldName):
    pass


class ScheduledTriggerProperties(BaseModel):
    """
    Specifies the configuration details of a schedule-triggered flow as defined by the user. Currently, these settings only apply to the <code>Scheduled</code> trigger type.
    """

    scheduleExpression: ScheduleExpression
    dataPullMode: Optional[DataPullMode] = None
    scheduleStartTime: Optional[Date] = None
    scheduleEndTime: Optional[Date] = None
    timezone: Optional[Timezone] = None
    scheduleOffset: Optional[ScheduleOffset] = None
    firstExecutionFrom: Optional[Date] = None


class ServiceNowSourceProperties(AmplitudeSourceProperties):
    """
    The properties that are applied when ServiceNow is being used as a source.
    """

    pass


class SingularSourceProperties(AmplitudeSourceProperties):
    """
    The properties that are applied when Singular is being used as a source.
    """

    pass


class SlackSourceProperties(AmplitudeSourceProperties):
    """
    The properties that are applied when Slack is being used as a source.
    """

    pass


class Warehouse(BaseModel):
    __root__: Annotated[str, Field(max_length=512, regex='[\\s\\w/!@#+=.-]*')]


class Stage(AccountName):
    pass


class TrendmicroSourceProperties(AmplitudeSourceProperties):
    """
    The properties that are applied when using Trend Micro as a flow source.
    """

    pass


class VeevaSourceProperties(BaseModel):
    """
    The properties that are applied when using Veeva as a flow source.
    """

    object: Object
    documentType: Optional[DocumentType] = None
    includeSourceFiles: Optional[Boolean] = None
    includeRenditions: Optional[Boolean] = None
    includeAllVersions: Optional[Boolean] = None


class ZendeskSourceProperties(AmplitudeSourceProperties):
    """
    The properties that are applied when using Zendesk as a flow source.
    """

    pass


class String(BaseModel):
    __root__: Annotated[str, Field(max_length=2048, regex='.*')]


class SourceFields(BaseModel):
    __root__: List[String]


class StartFlowRequest(BaseModel):
    flowName: FlowName


class StopFlowRequest(BaseModel):
    flowName: FlowName


class Value(Name):
    pass


class TagKeyList(BaseModel):
    __root__: Annotated[List[TagKey], Field(max_items=50, min_items=0)]


class TagResourceRequest(BaseModel):
    tags: TagMap


class TaskType(Enum):
    Arithmetic = 'Arithmetic'
    Filter = 'Filter'
    Map = 'Map'
    Map_all = 'Map_all'
    Mask = 'Mask'
    Merge = 'Merge'
    Truncate = 'Truncate'
    Validate = 'Validate'


class TaskPropertiesMap(BaseModel):
    pass

    class Config:
        extra = Extra.allow


class UntagResourceRequest(BaseModel):
    pass


class UpsolverBucketName(BaseModel):
    __root__: Annotated[
        str, Field(max_length=63, min_length=16, regex='^(upsolver-appflow)\\S*')
    ]


class UpsolverS3OutputFormatConfig(BaseModel):
    """
    The configuration that determines how Amazon AppFlow formats the flow output data when Upsolver is used as the destination.
    """

    fileType: Optional[FileType] = None
    prefixConfig: PrefixConfig
    aggregationConfig: Optional[AggregationConfig] = None


class CreateConnectorProfileResponse(BaseModel):
    connectorProfileArn: Optional[ConnectorProfileArn] = None


class CreateFlowResponse(BaseModel):
    flowArn: Optional[FlowArn] = None
    flowStatus: Optional[FlowStatus] = None


class TriggerProperties(BaseModel):
    """
    Specifies the configuration details that control the trigger for a flow. Currently, these settings only apply to the <code>Scheduled</code> trigger type.
    """

    Scheduled: Optional[ScheduledTriggerProperties] = None


class SourceConnectorProperties(BaseModel):
    """
    Specifies the information that is required to query a particular connector.
    """

    Amplitude: Optional[AmplitudeSourceProperties] = None
    Datadog: Optional[DatadogSourceProperties] = None
    Dynatrace: Optional[DynatraceSourceProperties] = None
    GoogleAnalytics: Optional[GoogleAnalyticsSourceProperties] = None
    InforNexus: Optional[InforNexusSourceProperties] = None
    Marketo: Optional[MarketoSourceProperties] = None
    S3: Optional[S3SourceProperties] = None
    Salesforce: Optional[SalesforceSourceProperties] = None
    ServiceNow: Optional[ServiceNowSourceProperties] = None
    Singular: Optional[SingularSourceProperties] = None
    Slack: Optional[SlackSourceProperties] = None
    Trendmicro: Optional[TrendmicroSourceProperties] = None
    Veeva: Optional[VeevaSourceProperties] = None
    Zendesk: Optional[ZendeskSourceProperties] = None
    SAPOData: Optional[SAPODataSourceProperties] = None


class IncrementalPullConfig(BaseModel):
    """
    Specifies the configuration used when importing incremental records from the source.
    """

    datetimeTypeFieldName: Optional[DatetimeTypeFieldName] = None


class Task(BaseModel):
    """
    A class for modeling different type of tasks. Task implementation varies based on the <code>TaskType</code>.
    """

    sourceFields: SourceFields
    connectorOperator: Optional[ConnectorOperator] = None
    destinationField: Optional[DestinationField] = None
    taskType: TaskType
    taskProperties: Optional[TaskPropertiesMap] = None


class DescribeConnectorsResponse(BaseModel):
    connectorConfigurations: Optional[ConnectorConfigurationsMap] = None
    nextToken: Optional[NextToken] = None


class ListConnectorEntitiesResponse(BaseModel):
    connectorEntityMap: ConnectorEntityMap


class ListTagsForResourceResponse(BaseModel):
    tags: Optional[TagMap] = None


class StartFlowResponse(BaseModel):
    flowArn: Optional[FlowArn] = None
    flowStatus: Optional[FlowStatus] = None
    executionId: Optional[ExecutionId] = None


class StopFlowResponse(CreateFlowResponse):
    pass


class UpdateConnectorProfileResponse(CreateConnectorProfileResponse):
    pass


class UpdateFlowResponse(BaseModel):
    flowStatus: Optional[FlowStatus] = None


class SchedulingFrequencyTypeList(BaseModel):
    __root__: List[ScheduleFrequencyType]


class SnowflakeMetadata(BaseModel):
    """
    The connector metadata specific to Snowflake.
    """

    supportedRegions: Optional[RegionList] = None


class PrivateConnectionProvisioningState(BaseModel):
    """
    Specifies the private connection provisioning state.
    """

    status: Optional[PrivateConnectionProvisioningStatus] = None
    failureMessage: Optional[PrivateConnectionProvisioningFailureMessage] = None
    failureCause: Optional[PrivateConnectionProvisioningFailureCause] = None


class GoogleAnalyticsConnectorProfileCredentials(OAuthCredentials):
    """
    The connector-specific profile credentials required by Google Analytics.
    """

    pass


class HoneycodeConnectorProfileCredentials(BaseModel):
    """
    The connector-specific credentials required when using Amazon Honeycode.
    """

    accessToken: Optional[AccessToken] = None
    refreshToken: Optional[RefreshToken] = None
    oAuthRequest: Optional[ConnectorOAuthRequest] = None


class InforNexusConnectorProfileCredentials(BaseModel):
    """
    The connector-specific profile credentials required by Infor Nexus.
    """

    accessKeyId: AccessKeyId
    userId: Username
    secretAccessKey: Key
    datakey: Key


class SalesforceConnectorProfileCredentials(BaseModel):
    """
    The connector-specific profile credentials required when using Salesforce.
    """

    accessToken: Optional[AccessToken] = None
    refreshToken: Optional[RefreshToken] = None
    oAuthRequest: Optional[ConnectorOAuthRequest] = None
    clientCredentialsArn: Optional[ClientCredentialsArn] = None


class SAPODataConnectorProfileCredentials(BaseModel):
    """
    The connector-specific profile credentials required when using SAPOData.
    """

    basicAuthCredentials: Optional[BasicAuthCredentials] = None
    oAuthCredentials: Optional[OAuthCredentials] = None


class DatadogConnectorProfileProperties(BaseModel):
    """
    The connector-specific profile properties required by Datadog.
    """

    instanceUrl: InstanceUrl


class DynatraceConnectorProfileProperties(DatadogConnectorProfileProperties):
    """
    The connector-specific profile properties required by Dynatrace.
    """

    pass


class InforNexusConnectorProfileProperties(DatadogConnectorProfileProperties):
    """
    The connector-specific profile properties required by Infor Nexus.
    """

    pass


class MarketoConnectorProfileProperties(DatadogConnectorProfileProperties):
    """
    The connector-specific profile properties required when using Marketo.
    """

    pass


class RedshiftConnectorProfileProperties(BaseModel):
    """
    The connector-specific profile properties when using Amazon Redshift.
    """

    databaseUrl: DatabaseUrl
    bucketName: BucketName
    bucketPrefix: Optional[BucketPrefix] = None
    roleArn: RoleArn


class SalesforceConnectorProfileProperties(BaseModel):
    """
    The connector-specific profile properties required when using Salesforce.
    """

    instanceUrl: Optional[InstanceUrl] = None
    isSandboxEnvironment: Optional[Boolean] = None


class ServiceNowConnectorProfileProperties(DatadogConnectorProfileProperties):
    """
    The connector-specific profile properties required when using ServiceNow.
    """

    pass


class SlackConnectorProfileProperties(DatadogConnectorProfileProperties):
    """
    The connector-specific profile properties required when using Slack.
    """

    pass


class SnowflakeConnectorProfileProperties(BaseModel):
    """
    The connector-specific profile properties required when using Snowflake.
    """

    warehouse: Warehouse
    stage: Stage
    bucketName: BucketName
    bucketPrefix: Optional[BucketPrefix] = None
    privateLinkServiceName: Optional[PrivateLinkServiceName] = None
    accountName: Optional[AccountName] = None
    region: Optional[Region] = None


class VeevaConnectorProfileProperties(DatadogConnectorProfileProperties):
    """
    The connector-specific profile properties required when using Veeva.
    """

    pass


class ZendeskConnectorProfileProperties(DatadogConnectorProfileProperties):
    """
    The connector-specific profile properties required when using Zendesk.
    """

    pass


class TriggerConfig(BaseModel):
    """
    The trigger settings that determine how and when Amazon AppFlow runs the specified flow.
    """

    triggerType: TriggerType
    triggerProperties: Optional[TriggerProperties] = None


class SourceFlowConfig(BaseModel):
    """
    Contains information about the configuration of the source connector used in the flow.
    """

    connectorType: ConnectorType
    connectorProfileName: Optional[ConnectorProfileName] = None
    sourceConnectorProperties: SourceConnectorProperties
    incrementalPullConfig: Optional[IncrementalPullConfig] = None


class Tasks(BaseModel):
    __root__: List[Task]


class FlowExecutionList(BaseModel):
    __root__: List[ExecutionRecord]


class ExecutionDetails(BaseModel):
    """
    Describes the details of the flow run, including the timestamp, status, and message.
    """

    mostRecentExecutionMessage: Optional[MostRecentExecutionMessage] = None
    mostRecentExecutionTime: Optional[Date] = None
    mostRecentExecutionStatus: Optional[ExecutionStatus] = None


class RedshiftDestinationProperties(BaseModel):
    """
    The properties that are applied when Amazon Redshift is being used as a destination.
    """

    object: Object
    intermediateBucketName: BucketName
    bucketPrefix: Optional[BucketPrefix] = None
    errorHandlingConfig: Optional[ErrorHandlingConfig] = None


class S3DestinationProperties(BaseModel):
    """
    The properties that are applied when Amazon S3 is used as a destination.
    """

    bucketName: BucketName
    bucketPrefix: Optional[BucketPrefix] = None
    s3OutputFormatConfig: Optional[S3OutputFormatConfig] = None


class SalesforceDestinationProperties(BaseModel):
    """
    The properties that are applied when Salesforce is being used as a destination.
    """

    object: Object
    idFieldNames: Optional[IdFieldNameList] = None
    errorHandlingConfig: Optional[ErrorHandlingConfig] = None
    writeOperationType: Optional[WriteOperationType] = None


class SnowflakeDestinationProperties(RedshiftDestinationProperties):
    """
    The properties that are applied when Snowflake is being used as a destination.
    """

    pass


class EventBridgeDestinationProperties(BaseModel):
    """
    The properties that are applied when Amazon EventBridge is being used as a destination.
    """

    object: Object
    errorHandlingConfig: Optional[ErrorHandlingConfig] = None


class UpsolverDestinationProperties(BaseModel):
    """
    The properties that are applied when Upsolver is used as a destination.
    """

    bucketName: UpsolverBucketName
    bucketPrefix: Optional[BucketPrefix] = None
    s3OutputFormatConfig: UpsolverS3OutputFormatConfig


class HoneycodeDestinationProperties(EventBridgeDestinationProperties):
    """
    The properties that are applied when Amazon Honeycode is used as a destination.
    """

    pass


class ZendeskDestinationProperties(SalesforceDestinationProperties):
    """
    The properties that are applied when Zendesk is used as a destination.
    """

    pass


class DestinationConnectorProperties(BaseModel):
    """
    This stores the information that is required to query a particular connector.
    """

    Redshift: Optional[RedshiftDestinationProperties] = None
    S3: Optional[S3DestinationProperties] = None
    Salesforce: Optional[SalesforceDestinationProperties] = None
    Snowflake: Optional[SnowflakeDestinationProperties] = None
    EventBridge: Optional[EventBridgeDestinationProperties] = None
    LookoutMetrics: Optional[LookoutMetricsDestinationProperties] = None
    Upsolver: Optional[UpsolverDestinationProperties] = None
    Honeycode: Optional[HoneycodeDestinationProperties] = None
    CustomerProfiles: Optional[CustomerProfilesDestinationProperties] = None
    Zendesk: Optional[ZendeskDestinationProperties] = None


class SupportedWriteOperationList(BaseModel):
    __root__: List[WriteOperationType]


class FilterOperatorList(BaseModel):
    __root__: List[VeevaConnectorOperator]


class SupportedValueList(BaseModel):
    __root__: List[Value]


class FieldTypeDetails(BaseModel):
    """
    Contains details regarding the supported field type and the operators that can be applied for filtering.
    """

    fieldType: FieldType
    filterOperators: FilterOperatorList
    supportedValues: Optional[SupportedValueList] = None


class FlowDefinition(BaseModel):
    """
    The properties of the flow, such as its source, destination, trigger type, and so on.
    """

    flowArn: Optional[FlowArn] = None
    description: Optional[FlowDescription] = None
    flowName: Optional[FlowName] = None
    flowStatus: Optional[FlowStatus] = None
    sourceConnectorType: Optional[ConnectorType] = None
    destinationConnectorType: Optional[ConnectorType] = None
    triggerType: Optional[TriggerType] = None
    createdAt: Optional[Date] = None
    lastUpdatedAt: Optional[Date] = None
    createdBy: Optional[CreatedBy] = None
    lastUpdatedBy: Optional[UpdatedBy] = None
    tags: Optional[TagMap] = None
    lastRunExecutionDetails: Optional[ExecutionDetails] = None


class FlowList(BaseModel):
    __root__: List[FlowDefinition]


class OAuthScopeList(BaseModel):
    __root__: List[OAuthScope]


class OAuthProperties(BaseModel):
    """
    The OAuth properties required for OAuth type authentication.
    """

    tokenUrl: TokenUrl
    authCodeUrl: AuthCodeUrl
    oAuthScopes: OAuthScopeList


class ConnectorProfileCredentials(BaseModel):
    """
    The connector-specific credentials required by a connector.
    """

    Amplitude: Optional[AmplitudeConnectorProfileCredentials] = None
    Datadog: Optional[DatadogConnectorProfileCredentials] = None
    Dynatrace: Optional[DynatraceConnectorProfileCredentials] = None
    GoogleAnalytics: Optional[GoogleAnalyticsConnectorProfileCredentials] = None
    Honeycode: Optional[HoneycodeConnectorProfileCredentials] = None
    InforNexus: Optional[InforNexusConnectorProfileCredentials] = None
    Marketo: Optional[MarketoConnectorProfileCredentials] = None
    Redshift: Optional[RedshiftConnectorProfileCredentials] = None
    Salesforce: Optional[SalesforceConnectorProfileCredentials] = None
    ServiceNow: Optional[ServiceNowConnectorProfileCredentials] = None
    Singular: Optional[SingularConnectorProfileCredentials] = None
    Slack: Optional[SlackConnectorProfileCredentials] = None
    Snowflake: Optional[SnowflakeConnectorProfileCredentials] = None
    Trendmicro: Optional[TrendmicroConnectorProfileCredentials] = None
    Veeva: Optional[VeevaConnectorProfileCredentials] = None
    Zendesk: Optional[ZendeskConnectorProfileCredentials] = None
    SAPOData: Optional[SAPODataConnectorProfileCredentials] = None


class DestinationFlowConfig(BaseModel):
    """
    Contains information about the configuration of destination connectors present in the flow.
    """

    connectorType: ConnectorType
    connectorProfileName: Optional[ConnectorProfileName] = None
    destinationConnectorProperties: DestinationConnectorProperties


class DescribeFlowExecutionRecordsResponse(BaseModel):
    flowExecutions: Optional[FlowExecutionList] = None
    nextToken: Optional[NextToken] = None


class ListFlowsResponse(BaseModel):
    flows: Optional[FlowList] = None
    nextToken: Optional[NextToken] = None


class SupportedFieldTypeDetails(BaseModel):
    """
    Contains details regarding all the supported <code>FieldTypes</code> and their corresponding <code>filterOperators</code> and <code>supportedValues</code>.
    """

    v1: FieldTypeDetails


class DestinationFieldProperties(BaseModel):
    """
    The properties that can be applied to a field when connector is being used as a destination.
    """

    isCreatable: Optional[Boolean] = None
    isNullable: Optional[Boolean] = None
    isUpsertable: Optional[Boolean] = None
    isUpdatable: Optional[Boolean] = None
    supportedWriteOperations: Optional[SupportedWriteOperationList] = None


class ConnectorEntityField(BaseModel):
    """
    Describes the data model of a connector field. For example, for an <i>account</i> entity, the fields would be <i>account name</i>, <i>account ID</i>, and so on.
    """

    identifier: Identifier
    label: Optional[Label] = None
    supportedFieldTypeDetails: Optional[SupportedFieldTypeDetails] = None
    description: Optional[Description1] = None
    sourceProperties: Optional[SourceFieldProperties] = None
    destinationProperties: Optional[DestinationFieldProperties] = None


class ConnectorEntityFieldList(BaseModel):
    __root__: List[ConnectorEntityField]


class GoogleAnalyticsMetadata(BaseModel):
    """
    The connector metadata specific to Google Analytics.
    """

    oAuthScopes: Optional[OAuthScopeList] = None


class SalesforceMetadata(GoogleAnalyticsMetadata):
    """
    The connector metadata specific to Salesforce.
    """

    pass


class SlackMetadata(GoogleAnalyticsMetadata):
    """
    The connector metadata specific to Slack.
    """

    pass


class ZendeskMetadata(GoogleAnalyticsMetadata):
    """
    The connector metadata specific to Zendesk.
    """

    pass


class HoneycodeMetadata(GoogleAnalyticsMetadata):
    """
    The connector metadata specific to Amazon Honeycode.
    """

    pass


class SAPODataConnectorProfileProperties(BaseModel):
    """
    The connector-specific profile properties required when using SAPOData.
    """

    applicationHostUrl: ApplicationHostUrl
    applicationServicePath: ApplicationServicePath
    portNumber: PortNumber
    clientNumber: ClientNumber
    logonLanguage: Optional[LogonLanguage] = None
    privateLinkServiceName: Optional[PrivateLinkServiceName] = None
    oAuthProperties: Optional[OAuthProperties] = None


class DestinationFlowConfigList(BaseModel):
    __root__: List[DestinationFlowConfig]


class CreateFlowRequest(BaseModel):
    flowName: FlowName
    description: Optional[FlowDescription] = None
    kmsArn: Optional[KMSArn] = None
    triggerConfig: TriggerConfig
    sourceFlowConfig: SourceFlowConfig
    destinationFlowConfigList: DestinationFlowConfigList
    tasks: Tasks
    tags: Optional[TagMap] = None


class UpdateFlowRequest(BaseModel):
    flowName: FlowName
    description: Optional[FlowDescription] = None
    triggerConfig: TriggerConfig
    sourceFlowConfig: SourceFlowConfig
    destinationFlowConfigList: DestinationFlowConfigList
    tasks: Tasks


class ConnectorProfileProperties(BaseModel):
    """
    The connector-specific profile properties required by each connector.
    """

    Amplitude: Optional[AmplitudeConnectorProfileProperties] = None
    Datadog: Optional[DatadogConnectorProfileProperties] = None
    Dynatrace: Optional[DynatraceConnectorProfileProperties] = None
    GoogleAnalytics: Optional[GoogleAnalyticsConnectorProfileProperties] = None
    Honeycode: Optional[HoneycodeConnectorProfileProperties] = None
    InforNexus: Optional[InforNexusConnectorProfileProperties] = None
    Marketo: Optional[MarketoConnectorProfileProperties] = None
    Redshift: Optional[RedshiftConnectorProfileProperties] = None
    Salesforce: Optional[SalesforceConnectorProfileProperties] = None
    ServiceNow: Optional[ServiceNowConnectorProfileProperties] = None
    Singular: Optional[SingularConnectorProfileProperties] = None
    Slack: Optional[SlackConnectorProfileProperties] = None
    Snowflake: Optional[SnowflakeConnectorProfileProperties] = None
    Trendmicro: Optional[TrendmicroConnectorProfileProperties] = None
    Veeva: Optional[VeevaConnectorProfileProperties] = None
    Zendesk: Optional[ZendeskConnectorProfileProperties] = None
    SAPOData: Optional[SAPODataConnectorProfileProperties] = None


class DescribeConnectorEntityResponse(BaseModel):
    connectorEntityFields: ConnectorEntityFieldList


class DescribeFlowResponse(BaseModel):
    flowArn: Optional[FlowArn] = None
    description: Optional[FlowDescription] = None
    flowName: Optional[FlowName] = None
    kmsArn: Optional[KMSArn] = None
    flowStatus: Optional[FlowStatus] = None
    flowStatusMessage: Optional[FlowStatusMessage] = None
    sourceFlowConfig: Optional[SourceFlowConfig] = None
    destinationFlowConfigList: Optional[DestinationFlowConfigList] = None
    lastRunExecutionDetails: Optional[ExecutionDetails] = None
    triggerConfig: Optional[TriggerConfig] = None
    tasks: Optional[Tasks] = None
    createdAt: Optional[Date] = None
    lastUpdatedAt: Optional[Date] = None
    createdBy: Optional[CreatedBy] = None
    lastUpdatedBy: Optional[UpdatedBy] = None
    tags: Optional[TagMap] = None


class ConnectorMetadata(BaseModel):
    """
    A structure to specify connector-specific metadata such as <code>oAuthScopes</code>, <code>supportedRegions</code>, <code>privateLinkServiceUrl</code>, and so on.
    """

    Amplitude: Optional[AmplitudeMetadata] = None
    Datadog: Optional[DatadogMetadata] = None
    Dynatrace: Optional[DynatraceMetadata] = None
    GoogleAnalytics: Optional[GoogleAnalyticsMetadata] = None
    InforNexus: Optional[InforNexusMetadata] = None
    Marketo: Optional[MarketoMetadata] = None
    Redshift: Optional[RedshiftMetadata] = None
    S3: Optional[S3Metadata] = None
    Salesforce: Optional[SalesforceMetadata] = None
    ServiceNow: Optional[ServiceNowMetadata] = None
    Singular: Optional[SingularMetadata] = None
    Slack: Optional[SlackMetadata] = None
    Snowflake: Optional[SnowflakeMetadata] = None
    Trendmicro: Optional[TrendmicroMetadata] = None
    Veeva: Optional[VeevaMetadata] = None
    Zendesk: Optional[ZendeskMetadata] = None
    EventBridge: Optional[EventBridgeMetadata] = None
    Upsolver: Optional[UpsolverMetadata] = None
    CustomerProfiles: Optional[CustomerProfilesMetadata] = None
    Honeycode: Optional[HoneycodeMetadata] = None
    SAPOData: Optional[SAPODataMetadata] = None


class ConnectorConfiguration(BaseModel):
    """
    The configuration settings related to a given connector.
    """

    canUseAsSource: Optional[Boolean] = None
    canUseAsDestination: Optional[Boolean] = None
    supportedDestinationConnectors: Optional[ConnectorTypeList] = None
    supportedSchedulingFrequencies: Optional[SchedulingFrequencyTypeList] = None
    isPrivateLinkEnabled: Optional[Boolean] = None
    isPrivateLinkEndpointUrlRequired: Optional[Boolean] = None
    supportedTriggerTypes: Optional[TriggerTypeList] = None
    connectorMetadata: Optional[ConnectorMetadata] = None


class ConnectorProfile(BaseModel):
    """
    Describes an instance of a connector. This includes the provided name, credentials ARN, connection-mode, and so on. To keep the API intuitive and extensible, the fields that are common to all types of connector profiles are explicitly specified at the top level. The rest of the connector-specific properties are available via the <code>connectorProfileProperties</code> field.
    """

    connectorProfileArn: Optional[ConnectorProfileArn] = None
    connectorProfileName: Optional[ConnectorProfileName] = None
    connectorType: Optional[ConnectorType] = None
    connectionMode: Optional[ConnectionMode] = None
    credentialsArn: Optional[ARN] = None
    connectorProfileProperties: Optional[ConnectorProfileProperties] = None
    createdAt: Optional[Date] = None
    lastUpdatedAt: Optional[Date] = None
    privateConnectionProvisioningState: Optional[
        PrivateConnectionProvisioningState
    ] = None


class ConnectorProfileConfig(BaseModel):
    """
    Defines the connector-specific configuration and credentials for the connector profile.
    """

    connectorProfileProperties: ConnectorProfileProperties
    connectorProfileCredentials: ConnectorProfileCredentials


class ConnectorProfileDetailList(BaseModel):
    __root__: List[ConnectorProfile]


class CreateConnectorProfileRequest(BaseModel):
    connectorProfileName: ConnectorProfileName
    kmsArn: Optional[KMSArn] = None
    connectorType: ConnectorType
    connectionMode: ConnectionMode
    connectorProfileConfig: ConnectorProfileConfig


class UpdateConnectorProfileRequest(BaseModel):
    connectorProfileName: ConnectorProfileName
    connectionMode: ConnectionMode
    connectorProfileConfig: ConnectorProfileConfig


class DescribeConnectorProfilesResponse(BaseModel):
    connectorProfileDetails: Optional[ConnectorProfileDetailList] = None
    nextToken: Optional[NextToken] = None
