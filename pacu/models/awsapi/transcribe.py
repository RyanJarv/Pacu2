# generated by datamodel-codegen:
#   filename:  openapi.yaml
#   timestamp: 2021-12-31T02:59:15+00:00

from __future__ import annotations

from datetime import datetime
from enum import Enum
from typing import Annotated, Any, List, Optional

from pydantic import BaseModel, Extra, Field


class BadRequestException(BaseModel):
    __root__: Any


class LimitExceededException(BadRequestException):
    pass


class InternalFailureException(BadRequestException):
    pass


class ConflictException(BadRequestException):
    pass


class DeleteCallAnalyticsCategoryResponse(BaseModel):
    pass


class NotFoundException(BadRequestException):
    pass


class DeleteCallAnalyticsJobResponse(DeleteCallAnalyticsCategoryResponse):
    pass


class TagResourceResponse(DeleteCallAnalyticsCategoryResponse):
    pass


class UntagResourceResponse(DeleteCallAnalyticsCategoryResponse):
    pass


class TimestampMilliseconds(BaseModel):
    __root__: Annotated[int, Field(ge=0.0, le=14400000.0)]


class AbsoluteTimeRange(BaseModel):
    """
    A time range, set in seconds, between two points in the call.
    """

    StartTime: Optional[TimestampMilliseconds] = None
    EndTime: Optional[TimestampMilliseconds] = None
    First: Optional[TimestampMilliseconds] = None
    Last: Optional[TimestampMilliseconds] = None


class BaseModelName(Enum):
    NarrowBand = 'NarrowBand'
    WideBand = 'WideBand'


class Boolean(BaseModel):
    __root__: bool


class CLMLanguageCode(Enum):
    en_US = 'en-US'
    hi_IN = 'hi-IN'
    es_US = 'es-US'
    en_GB = 'en-GB'
    en_AU = 'en-AU'


class CallAnalyticsJobName(BaseModel):
    __root__: Annotated[
        str, Field(max_length=200, min_length=1, regex='^[0-9a-zA-Z._-]+')
    ]


class CallAnalyticsJobStatus(Enum):
    QUEUED = 'QUEUED'
    IN_PROGRESS = 'IN_PROGRESS'
    FAILED = 'FAILED'
    COMPLETED = 'COMPLETED'


class LanguageCode(Enum):
    af_ZA = 'af-ZA'
    ar_AE = 'ar-AE'
    ar_SA = 'ar-SA'
    cy_GB = 'cy-GB'
    da_DK = 'da-DK'
    de_CH = 'de-CH'
    de_DE = 'de-DE'
    en_AB = 'en-AB'
    en_AU = 'en-AU'
    en_GB = 'en-GB'
    en_IE = 'en-IE'
    en_IN = 'en-IN'
    en_US = 'en-US'
    en_WL = 'en-WL'
    es_ES = 'es-ES'
    es_US = 'es-US'
    fa_IR = 'fa-IR'
    fr_CA = 'fr-CA'
    fr_FR = 'fr-FR'
    ga_IE = 'ga-IE'
    gd_GB = 'gd-GB'
    he_IL = 'he-IL'
    hi_IN = 'hi-IN'
    id_ID = 'id-ID'
    it_IT = 'it-IT'
    ja_JP = 'ja-JP'
    ko_KR = 'ko-KR'
    ms_MY = 'ms-MY'
    nl_NL = 'nl-NL'
    pt_BR = 'pt-BR'
    pt_PT = 'pt-PT'
    ru_RU = 'ru-RU'
    ta_IN = 'ta-IN'
    te_IN = 'te-IN'
    tr_TR = 'tr-TR'
    zh_CN = 'zh-CN'
    zh_TW = 'zh-TW'
    th_TH = 'th-TH'
    en_ZA = 'en-ZA'
    en_NZ = 'en-NZ'


class MediaSampleRateHertz(BaseModel):
    __root__: Annotated[int, Field(ge=8000.0, le=48000.0)]


class MediaFormat(Enum):
    mp3 = 'mp3'
    mp4 = 'mp4'
    wav = 'wav'
    flac = 'flac'
    ogg = 'ogg'
    amr = 'amr'
    webm = 'webm'


class DateTime(BaseModel):
    __root__: datetime


class FailureReason(BaseModel):
    __root__: str


class DataAccessRoleArn(BaseModel):
    __root__: Annotated[
        str,
        Field(
            max_length=2048,
            min_length=20,
            regex='^arn:(aws|aws-cn|aws-us-gov|aws-iso-{0,1}[a-z]{0,1}):iam::[0-9]{0,63}:role/[A-Za-z0-9:_/+=,@.-]{0,1024}$',
        ),
    ]


class IdentifiedLanguageScore(BaseModel):
    __root__: float


class VocabularyName(CallAnalyticsJobName):
    pass


class VocabularyFilterName(CallAnalyticsJobName):
    pass


class VocabularyFilterMethod(Enum):
    remove = 'remove'
    mask = 'mask'
    tag = 'tag'


class ModelName(CallAnalyticsJobName):
    pass


class LanguageOptions(BaseModel):
    __root__: Annotated[List[LanguageCode], Field(min_items=1)]


class CallAnalyticsJobSummary(BaseModel):
    """
    Provides summary information about a call analytics job.
    """

    CallAnalyticsJobName: Optional[CallAnalyticsJobName] = None
    CreationTime: Optional[DateTime] = None
    StartTime: Optional[DateTime] = None
    CompletionTime: Optional[DateTime] = None
    LanguageCode: Optional[LanguageCode] = None
    CallAnalyticsJobStatus: Optional[CallAnalyticsJobStatus] = None
    FailureReason: Optional[FailureReason] = None


class CallAnalyticsJobSummaries(BaseModel):
    __root__: List[CallAnalyticsJobSummary]


class CategoryName(CallAnalyticsJobName):
    pass


class ChannelId(BaseModel):
    __root__: Annotated[int, Field(ge=0.0, le=1.0)]


class ParticipantRole(Enum):
    AGENT = 'AGENT'
    CUSTOMER = 'CUSTOMER'


class ChannelDefinition(BaseModel):
    """
    For a call analytics job, an object that indicates the audio channel that belongs to the agent and the audio channel that belongs to the customer.
    """

    ChannelId: Optional[ChannelId] = None
    ParticipantRole: Optional[ParticipantRole] = None


class RedactionType(Enum):
    PII = 'PII'


class RedactionOutput(Enum):
    redacted = 'redacted'
    redacted_and_unredacted = 'redacted_and_unredacted'


class ModelStatus(Enum):
    IN_PROGRESS = 'IN_PROGRESS'
    FAILED = 'FAILED'
    COMPLETED = 'COMPLETED'


class Uri(BaseModel):
    __root__: Annotated[
        str, Field(max_length=2000, min_length=1, regex='(s3://|http(s*)://).+')
    ]


class VocabularyState(Enum):
    PENDING = 'PENDING'
    READY = 'READY'
    FAILED = 'FAILED'


class TranscriptionJobName(CallAnalyticsJobName):
    pass


class JobExecutionSettings(BaseModel):
    """
    Provides information about when a transcription job should be executed.
    """

    AllowDeferredExecution: Optional[Boolean] = None
    DataAccessRoleArn: Optional[DataAccessRoleArn] = None


class NonEmptyString(BaseModel):
    __root__: Annotated[str, Field(max_length=2000, min_length=1, regex='.*\\S.*')]


class KMSEncryptionContextMap(BaseModel):
    pass

    class Config:
        extra = Extra.allow


class KMSKeyId(BaseModel):
    __root__: Annotated[
        str,
        Field(
            max_length=2048,
            min_length=1,
            regex='^[A-Za-z0-9][A-Za-z0-9:_/+=,@.-]{0,2048}$',
        ),
    ]


class NextToken(BaseModel):
    __root__: Annotated[str, Field(max_length=8192, regex='.+')]


class MaxResults(BaseModel):
    __root__: Annotated[int, Field(ge=1.0, le=100.0)]


class TranscribeArn(BaseModel):
    __root__: Annotated[
        str,
        Field(
            max_length=1011,
            min_length=1,
            regex='arn:aws(-[^:]+)?:transcribe:[a-zA-Z0-9-]*:[0-9]{12}:[a-zA-Z-]*/[0-9a-zA-Z._-]+',
        ),
    ]


class MaxAlternatives(BaseModel):
    __root__: Annotated[int, Field(ge=2.0, le=10.0)]


class MaxSpeakers(MaxAlternatives):
    pass


class MedicalContentIdentificationType(Enum):
    PHI = 'PHI'


class MedicalTranscript(BaseModel):
    """
    Identifies the location of a medical transcript.
    """

    TranscriptFileUri: Optional[Uri] = None


class MedicalTranscriptionSetting(BaseModel):
    """
    Optional settings for the <a>StartMedicalTranscriptionJob</a> operation.
    """

    ShowSpeakerLabels: Optional[Boolean] = None
    MaxSpeakerLabels: Optional[MaxSpeakers] = None
    ChannelIdentification: Optional[Boolean] = None
    ShowAlternatives: Optional[Boolean] = None
    MaxAlternatives: Optional[MaxAlternatives] = None
    VocabularyName: Optional[VocabularyName] = None


class Specialty(Enum):
    PRIMARYCARE = 'PRIMARYCARE'


class Type(Enum):
    CONVERSATION = 'CONVERSATION'
    DICTATION = 'DICTATION'


class OutputLocationType(Enum):
    CUSTOMER_BUCKET = 'CUSTOMER_BUCKET'
    SERVICE_BUCKET = 'SERVICE_BUCKET'


class ModelSettings(BaseModel):
    """
    The object used to call your custom language model to your transcription job.
    """

    LanguageModelName: Optional[ModelName] = None


class OutputBucketName(BaseModel):
    __root__: Annotated[
        str, Field(max_length=64, regex='[a-z0-9][\\.\\-a-z0-9]{1,61}[a-z0-9]')
    ]


class OutputKey(BaseModel):
    __root__: Annotated[
        str, Field(max_length=1024, min_length=1, regex="[a-zA-Z0-9-_.!*'()/]{1,1024}$")
    ]


class Percentage(BaseModel):
    __root__: Annotated[int, Field(ge=0.0, le=100.0)]


class Phrase(BaseModel):
    __root__: Annotated[str, Field(max_length=256, min_length=0, regex='.+')]


class SentimentValue(Enum):
    POSITIVE = 'POSITIVE'
    NEGATIVE = 'NEGATIVE'
    NEUTRAL = 'NEUTRAL'
    MIXED = 'MIXED'


class Settings(BaseModel):
    """
    Provides optional settings for the <code>StartTranscriptionJob</code> operation.
    """

    VocabularyName: Optional[VocabularyName] = None
    ShowSpeakerLabels: Optional[Boolean] = None
    MaxSpeakerLabels: Optional[MaxSpeakers] = None
    ChannelIdentification: Optional[Boolean] = None
    ShowAlternatives: Optional[Boolean] = None
    MaxAlternatives: Optional[MaxAlternatives] = None
    VocabularyFilterName: Optional[VocabularyFilterName] = None
    VocabularyFilterMethod: Optional[VocabularyFilterMethod] = None


class StringTargetList(BaseModel):
    __root__: Annotated[List[NonEmptyString], Field(min_items=1)]


class SubtitleFileUris(BaseModel):
    __root__: List[Uri]


class SubtitleFormat(Enum):
    vtt = 'vtt'
    srt = 'srt'


class SubtitleFormats(BaseModel):
    __root__: List[SubtitleFormat]


class SubtitlesOutput(BaseModel):
    """
    Specify the output format for your subtitle file.
    """

    Formats: Optional[SubtitleFormats] = None
    SubtitleFileUris: Optional[SubtitleFileUris] = None


class TagKey(BaseModel):
    __root__: Annotated[str, Field(max_length=128, min_length=1)]


class TagValue(BaseModel):
    __root__: Annotated[str, Field(max_length=256, min_length=0)]


class Tag(BaseModel):
    """
    A key:value pair that adds metadata to a resource used by Amazon Transcribe. For example, a tag with the key:value pair ‘Department’:’Sales’ might be added to a resource to indicate its use by your organization's sales department.
    """

    Key: TagKey
    Value: TagValue


class TagKeyList(BaseModel):
    __root__: Annotated[List[TagKey], Field(max_items=200, min_items=1)]


class TranscriptFilterType(Enum):
    EXACT = 'EXACT'


class VocabularyInfo(BaseModel):
    """
    Provides information about a custom vocabulary.
    """

    VocabularyName: Optional[VocabularyName] = None
    LanguageCode: Optional[LanguageCode] = None
    LastModifiedTime: Optional[DateTime] = None
    VocabularyState: Optional[VocabularyState] = None


class VocabularyFilterInfo(BaseModel):
    """
    Provides information about a vocabulary filter.
    """

    VocabularyFilterName: Optional[VocabularyFilterName] = None
    LanguageCode: Optional[LanguageCode] = None
    LastModifiedTime: Optional[DateTime] = None


class Word(BaseModel):
    __root__: Annotated[str, Field(max_length=256, min_length=1)]


class CreateMedicalVocabularyResponse(BaseModel):
    VocabularyName: Optional[VocabularyName] = None
    LanguageCode: Optional[LanguageCode] = None
    VocabularyState: Optional[VocabularyState] = None
    LastModifiedTime: Optional[DateTime] = None
    FailureReason: Optional[FailureReason] = None


class CreateVocabularyResponse(CreateMedicalVocabularyResponse):
    pass


class CreateVocabularyFilterResponse(VocabularyFilterInfo):
    pass


class DeleteCallAnalyticsCategoryRequest(BaseModel):
    CategoryName: CategoryName


class DeleteCallAnalyticsJobRequest(BaseModel):
    CallAnalyticsJobName: CallAnalyticsJobName


class DeleteLanguageModelRequest(BaseModel):
    ModelName: ModelName


class DeleteMedicalTranscriptionJobRequest(BaseModel):
    MedicalTranscriptionJobName: TranscriptionJobName


class DeleteMedicalVocabularyRequest(BaseModel):
    VocabularyName: VocabularyName


class DeleteTranscriptionJobRequest(BaseModel):
    TranscriptionJobName: TranscriptionJobName


class DeleteVocabularyRequest(BaseModel):
    VocabularyName: VocabularyName


class DeleteVocabularyFilterRequest(BaseModel):
    VocabularyFilterName: VocabularyFilterName


class DescribeLanguageModelRequest(BaseModel):
    ModelName: ModelName


class GetCallAnalyticsCategoryRequest(BaseModel):
    CategoryName: CategoryName


class GetCallAnalyticsJobRequest(BaseModel):
    CallAnalyticsJobName: CallAnalyticsJobName


class GetMedicalTranscriptionJobRequest(BaseModel):
    MedicalTranscriptionJobName: TranscriptionJobName


class GetMedicalVocabularyResponse(BaseModel):
    VocabularyName: Optional[VocabularyName] = None
    LanguageCode: Optional[LanguageCode] = None
    VocabularyState: Optional[VocabularyState] = None
    LastModifiedTime: Optional[DateTime] = None
    FailureReason: Optional[FailureReason] = None
    DownloadUri: Optional[Uri] = None


class GetMedicalVocabularyRequest(BaseModel):
    VocabularyName: VocabularyName


class GetTranscriptionJobRequest(BaseModel):
    TranscriptionJobName: TranscriptionJobName


class GetVocabularyResponse(GetMedicalVocabularyResponse):
    pass


class GetVocabularyRequest(BaseModel):
    VocabularyName: VocabularyName


class GetVocabularyFilterResponse(BaseModel):
    VocabularyFilterName: Optional[VocabularyFilterName] = None
    LanguageCode: Optional[LanguageCode] = None
    LastModifiedTime: Optional[DateTime] = None
    DownloadUri: Optional[Uri] = None


class GetVocabularyFilterRequest(BaseModel):
    VocabularyFilterName: VocabularyFilterName


class ListCallAnalyticsCategoriesRequest(BaseModel):
    NextToken: Optional[NextToken] = None
    MaxResults: Optional[MaxResults] = None


class ListCallAnalyticsJobsResponse(BaseModel):
    Status: Optional[CallAnalyticsJobStatus] = None
    NextToken: Optional[NextToken] = None
    CallAnalyticsJobSummaries: Optional[CallAnalyticsJobSummaries] = None


class ListCallAnalyticsJobsRequest(BaseModel):
    Status: Optional[CallAnalyticsJobStatus] = None
    JobNameContains: Optional[CallAnalyticsJobName] = None
    NextToken: Optional[NextToken] = None
    MaxResults: Optional[MaxResults] = None


class ListLanguageModelsRequest(BaseModel):
    StatusEquals: Optional[ModelStatus] = None
    NameContains: Optional[ModelName] = None
    NextToken: Optional[NextToken] = None
    MaxResults: Optional[MaxResults] = None


class ListMedicalTranscriptionJobsRequest(BaseModel):
    Status: Optional[CallAnalyticsJobStatus] = None
    JobNameContains: Optional[TranscriptionJobName] = None
    NextToken: Optional[NextToken] = None
    MaxResults: Optional[MaxResults] = None


class ListMedicalVocabulariesRequest(BaseModel):
    NextToken: Optional[NextToken] = None
    MaxResults: Optional[MaxResults] = None
    StateEquals: Optional[VocabularyState] = None
    NameContains: Optional[VocabularyName] = None


class ListTagsForResourceRequest(BaseModel):
    ResourceArn: TranscribeArn


class ListTranscriptionJobsRequest(BaseModel):
    Status: Optional[CallAnalyticsJobStatus] = None
    JobNameContains: Optional[TranscriptionJobName] = None
    NextToken: Optional[NextToken] = None
    MaxResults: Optional[MaxResults] = None


class ListVocabulariesRequest(BaseModel):
    NextToken: Optional[NextToken] = None
    MaxResults: Optional[MaxResults] = None
    StateEquals: Optional[VocabularyState] = None
    NameContains: Optional[VocabularyName] = None


class ListVocabularyFiltersRequest(BaseModel):
    NextToken: Optional[NextToken] = None
    MaxResults: Optional[MaxResults] = None
    NameContains: Optional[VocabularyFilterName] = None


class UntagResourceRequest(BaseModel):
    ResourceArn: TranscribeArn
    TagKeys: TagKeyList


class UpdateMedicalVocabularyResponse(VocabularyInfo):
    pass


class UpdateMedicalVocabularyRequest(BaseModel):
    VocabularyName: VocabularyName
    LanguageCode: LanguageCode
    VocabularyFileUri: Optional[Uri] = None


class UpdateVocabularyResponse(VocabularyInfo):
    pass


class UpdateVocabularyFilterResponse(VocabularyFilterInfo):
    pass


class Media(BaseModel):
    """
    Describes the input media file in a transcription request.
    """

    MediaFileUri: Optional[Uri] = None
    RedactedMediaFileUri: Optional[Uri] = None


class Transcript(BaseModel):
    """
    Identifies the location of a transcription.
    """

    TranscriptFileUri: Optional[Uri] = None
    RedactedTranscriptFileUri: Optional[Uri] = None


class ChannelDefinitions(BaseModel):
    __root__: Annotated[List[ChannelDefinition], Field(max_items=2, min_items=2)]


class ContentRedaction(BaseModel):
    """
    Settings for content redaction within a transcription job.
    """

    RedactionType: RedactionType
    RedactionOutput: RedactionOutput


class InputDataConfig(BaseModel):
    """
    The object that contains the Amazon S3 object location and access role required to train and tune your custom language model.
    """

    S3Uri: Uri
    TuningDataS3Uri: Optional[Uri] = None
    DataAccessRoleArn: DataAccessRoleArn


class TagList(BaseModel):
    __root__: Annotated[List[Tag], Field(max_items=200, min_items=1)]


class Words(BaseModel):
    __root__: Annotated[List[Word], Field(min_items=1)]


class Phrases(BaseModel):
    __root__: List[Phrase]


class LanguageModel(BaseModel):
    """
    The structure used to describe a custom language model.
    """

    ModelName: Optional[ModelName] = None
    CreateTime: Optional[DateTime] = None
    LastModifiedTime: Optional[DateTime] = None
    LanguageCode: Optional[CLMLanguageCode] = None
    BaseModelName: Optional[BaseModelName] = None
    ModelStatus: Optional[ModelStatus] = None
    UpgradeAvailability: Optional[Boolean] = None
    FailureReason: Optional[FailureReason] = None
    InputDataConfig: Optional[InputDataConfig] = None


class MedicalTranscriptionJob(BaseModel):
    """
    The data structure that contains the information for a medical transcription job.
    """

    MedicalTranscriptionJobName: Optional[TranscriptionJobName] = None
    TranscriptionJobStatus: Optional[CallAnalyticsJobStatus] = None
    LanguageCode: Optional[LanguageCode] = None
    MediaSampleRateHertz: Optional[MediaSampleRateHertz] = None
    MediaFormat: Optional[MediaFormat] = None
    Media: Optional[Media] = None
    Transcript: Optional[MedicalTranscript] = None
    StartTime: Optional[DateTime] = None
    CreationTime: Optional[DateTime] = None
    CompletionTime: Optional[DateTime] = None
    FailureReason: Optional[FailureReason] = None
    Settings: Optional[MedicalTranscriptionSetting] = None
    ContentIdentificationType: Optional[MedicalContentIdentificationType] = None
    Specialty: Optional[Specialty] = None
    Type: Optional[Type] = None
    Tags: Optional[TagList] = None


class TranscriptionJob(BaseModel):
    """
    Describes an asynchronous transcription job that was created with the <code>StartTranscriptionJob</code> operation.
    """

    TranscriptionJobName: Optional[TranscriptionJobName] = None
    TranscriptionJobStatus: Optional[CallAnalyticsJobStatus] = None
    LanguageCode: Optional[LanguageCode] = None
    MediaSampleRateHertz: Optional[MediaSampleRateHertz] = None
    MediaFormat: Optional[MediaFormat] = None
    Media: Optional[Media] = None
    Transcript: Optional[Transcript] = None
    StartTime: Optional[DateTime] = None
    CreationTime: Optional[DateTime] = None
    CompletionTime: Optional[DateTime] = None
    FailureReason: Optional[FailureReason] = None
    Settings: Optional[Settings] = None
    ModelSettings: Optional[ModelSettings] = None
    JobExecutionSettings: Optional[JobExecutionSettings] = None
    ContentRedaction: Optional[ContentRedaction] = None
    IdentifyLanguage: Optional[Boolean] = None
    LanguageOptions: Optional[LanguageOptions] = None
    IdentifiedLanguageScore: Optional[IdentifiedLanguageScore] = None
    Tags: Optional[TagList] = None
    Subtitles: Optional[SubtitlesOutput] = None


class RelativeTimeRange(BaseModel):
    """
    An object that allows percentages to specify the proportion of the call where you would like to apply a filter. For example, you can specify the first half of the call. You can also specify the period of time between halfway through to three-quarters of the way through the call. Because the length of conversation can vary between calls, you can apply relative time ranges across all calls.
    """

    StartPercentage: Optional[Percentage] = None
    EndPercentage: Optional[Percentage] = None
    First: Optional[Percentage] = None
    Last: Optional[Percentage] = None


class InterruptionFilter(BaseModel):
    """
    An object that enables you to configure your category to be applied to call analytics jobs where either the customer or agent was interrupted.
    """

    Threshold: Optional[TimestampMilliseconds] = None
    ParticipantRole: Optional[ParticipantRole] = None
    AbsoluteTimeRange: Optional[AbsoluteTimeRange] = None
    RelativeTimeRange: Optional[RelativeTimeRange] = None
    Negate: Optional[Boolean] = None


class Models(BaseModel):
    __root__: List[LanguageModel]


class Vocabularies(BaseModel):
    __root__: List[VocabularyInfo]


class VocabularyFilters(BaseModel):
    __root__: List[VocabularyFilterInfo]


class MedicalTranscriptionJobSummary(BaseModel):
    """
    Provides summary information about a transcription job.
    """

    MedicalTranscriptionJobName: Optional[TranscriptionJobName] = None
    CreationTime: Optional[DateTime] = None
    StartTime: Optional[DateTime] = None
    CompletionTime: Optional[DateTime] = None
    LanguageCode: Optional[LanguageCode] = None
    TranscriptionJobStatus: Optional[CallAnalyticsJobStatus] = None
    FailureReason: Optional[FailureReason] = None
    OutputLocationType: Optional[OutputLocationType] = None
    Specialty: Optional[Specialty] = None
    ContentIdentificationType: Optional[MedicalContentIdentificationType] = None
    Type: Optional[Type] = None


class NonTalkTimeFilter(BaseModel):
    """
    An object that enables you to configure your category to be applied to call analytics jobs where either the customer or agent was interrupted.
    """

    Threshold: Optional[TimestampMilliseconds] = None
    AbsoluteTimeRange: Optional[AbsoluteTimeRange] = None
    RelativeTimeRange: Optional[RelativeTimeRange] = None
    Negate: Optional[Boolean] = None


class TranscriptFilter(BaseModel):
    """
    Matches the output of the transcription to either the specific phrases that you specify, or the intent of the phrases that you specify.
    """

    TranscriptFilterType: TranscriptFilterType
    AbsoluteTimeRange: Optional[AbsoluteTimeRange] = None
    RelativeTimeRange: Optional[RelativeTimeRange] = None
    ParticipantRole: Optional[ParticipantRole] = None
    Negate: Optional[Boolean] = None
    Targets: StringTargetList


class SentimentValueList(BaseModel):
    __root__: Annotated[List[SentimentValue], Field(min_items=1)]


class Subtitles(BaseModel):
    """
    Generate subtitles for your batch transcription job.
    """

    Formats: Optional[SubtitleFormats] = None


class TranscriptionJobSummary(BaseModel):
    """
    Provides a summary of information about a transcription job.
    """

    TranscriptionJobName: Optional[TranscriptionJobName] = None
    CreationTime: Optional[DateTime] = None
    StartTime: Optional[DateTime] = None
    CompletionTime: Optional[DateTime] = None
    LanguageCode: Optional[LanguageCode] = None
    TranscriptionJobStatus: Optional[CallAnalyticsJobStatus] = None
    FailureReason: Optional[FailureReason] = None
    OutputLocationType: Optional[OutputLocationType] = None
    ContentRedaction: Optional[ContentRedaction] = None
    ModelSettings: Optional[ModelSettings] = None
    IdentifyLanguage: Optional[Boolean] = None
    IdentifiedLanguageScore: Optional[IdentifiedLanguageScore] = None


class CreateLanguageModelResponse(BaseModel):
    LanguageCode: Optional[CLMLanguageCode] = None
    BaseModelName: Optional[BaseModelName] = None
    ModelName: Optional[ModelName] = None
    InputDataConfig: Optional[InputDataConfig] = None
    ModelStatus: Optional[ModelStatus] = None


class CreateLanguageModelRequest(BaseModel):
    LanguageCode: CLMLanguageCode
    BaseModelName: BaseModelName
    ModelName: ModelName
    InputDataConfig: InputDataConfig
    Tags: Optional[TagList] = None


class CreateMedicalVocabularyRequest(BaseModel):
    VocabularyName: VocabularyName
    LanguageCode: LanguageCode
    VocabularyFileUri: Uri
    Tags: Optional[TagList] = None


class CreateVocabularyRequest(BaseModel):
    VocabularyName: VocabularyName
    LanguageCode: LanguageCode
    Phrases: Optional[Phrases] = None
    VocabularyFileUri: Optional[Uri] = None
    Tags: Optional[TagList] = None


class CreateVocabularyFilterRequest(BaseModel):
    VocabularyFilterName: VocabularyFilterName
    LanguageCode: LanguageCode
    Words: Optional[Words] = None
    VocabularyFilterFileUri: Optional[Uri] = None
    Tags: Optional[TagList] = None


class DescribeLanguageModelResponse(BaseModel):
    LanguageModel: Optional[LanguageModel] = None


class GetMedicalTranscriptionJobResponse(BaseModel):
    MedicalTranscriptionJob: Optional[MedicalTranscriptionJob] = None


class GetTranscriptionJobResponse(BaseModel):
    TranscriptionJob: Optional[TranscriptionJob] = None


class ListLanguageModelsResponse(BaseModel):
    NextToken: Optional[NextToken] = None
    Models: Optional[Models] = None


class ListMedicalVocabulariesResponse(BaseModel):
    Status: Optional[VocabularyState] = None
    NextToken: Optional[NextToken] = None
    Vocabularies: Optional[Vocabularies] = None


class ListTagsForResourceResponse(BaseModel):
    ResourceArn: Optional[TranscribeArn] = None
    Tags: Optional[TagList] = None


class ListVocabulariesResponse(ListMedicalVocabulariesResponse):
    pass


class ListVocabularyFiltersResponse(BaseModel):
    NextToken: Optional[NextToken] = None
    VocabularyFilters: Optional[VocabularyFilters] = None


class StartMedicalTranscriptionJobResponse(GetMedicalTranscriptionJobResponse):
    pass


class StartMedicalTranscriptionJobRequest(BaseModel):
    MedicalTranscriptionJobName: TranscriptionJobName
    LanguageCode: LanguageCode
    MediaSampleRateHertz: Optional[MediaSampleRateHertz] = None
    MediaFormat: Optional[MediaFormat] = None
    Media: Media
    OutputBucketName: OutputBucketName
    OutputKey: Optional[OutputKey] = None
    OutputEncryptionKMSKeyId: Optional[KMSKeyId] = None
    KMSEncryptionContext: Optional[KMSEncryptionContextMap] = None
    Settings: Optional[MedicalTranscriptionSetting] = None
    ContentIdentificationType: Optional[MedicalContentIdentificationType] = None
    Specialty: Specialty
    Type: Type
    Tags: Optional[TagList] = None


class StartTranscriptionJobResponse(GetTranscriptionJobResponse):
    pass


class StartTranscriptionJobRequest(BaseModel):
    TranscriptionJobName: TranscriptionJobName
    LanguageCode: Optional[LanguageCode] = None
    MediaSampleRateHertz: Optional[MediaSampleRateHertz] = None
    MediaFormat: Optional[MediaFormat] = None
    Media: Media
    OutputBucketName: Optional[OutputBucketName] = None
    OutputKey: Optional[OutputKey] = None
    OutputEncryptionKMSKeyId: Optional[KMSKeyId] = None
    KMSEncryptionContext: Optional[KMSEncryptionContextMap] = None
    Settings: Optional[Settings] = None
    ModelSettings: Optional[ModelSettings] = None
    JobExecutionSettings: Optional[JobExecutionSettings] = None
    ContentRedaction: Optional[ContentRedaction] = None
    IdentifyLanguage: Optional[Boolean] = None
    LanguageOptions: Optional[LanguageOptions] = None
    Subtitles: Optional[Subtitles] = None
    Tags: Optional[TagList] = None


class TagResourceRequest(BaseModel):
    ResourceArn: TranscribeArn
    Tags: TagList


class UpdateVocabularyRequest(BaseModel):
    VocabularyName: VocabularyName
    LanguageCode: LanguageCode
    Phrases: Optional[Phrases] = None
    VocabularyFileUri: Optional[Uri] = None


class UpdateVocabularyFilterRequest(BaseModel):
    VocabularyFilterName: VocabularyFilterName
    Words: Optional[Words] = None
    VocabularyFilterFileUri: Optional[Uri] = None


class CallAnalyticsJobSettings(BaseModel):
    """
    Provides optional settings for the <code>CallAnalyticsJob</code> operation.
    """

    VocabularyName: Optional[VocabularyName] = None
    VocabularyFilterName: Optional[VocabularyFilterName] = None
    VocabularyFilterMethod: Optional[VocabularyFilterMethod] = None
    LanguageModelName: Optional[ModelName] = None
    ContentRedaction: Optional[ContentRedaction] = None
    LanguageOptions: Optional[LanguageOptions] = None


class CallAnalyticsJob(BaseModel):
    """
    Describes an asynchronous analytics job that was created with the <code>StartAnalyticsJob</code> operation.
    """

    CallAnalyticsJobName: Optional[CallAnalyticsJobName] = None
    CallAnalyticsJobStatus: Optional[CallAnalyticsJobStatus] = None
    LanguageCode: Optional[LanguageCode] = None
    MediaSampleRateHertz: Optional[MediaSampleRateHertz] = None
    MediaFormat: Optional[MediaFormat] = None
    Media: Optional[Media] = None
    Transcript: Optional[Transcript] = None
    StartTime: Optional[DateTime] = None
    CreationTime: Optional[DateTime] = None
    CompletionTime: Optional[DateTime] = None
    FailureReason: Optional[FailureReason] = None
    DataAccessRoleArn: Optional[DataAccessRoleArn] = None
    IdentifiedLanguageScore: Optional[IdentifiedLanguageScore] = None
    Settings: Optional[CallAnalyticsJobSettings] = None
    ChannelDefinitions: Optional[ChannelDefinitions] = None


class MedicalTranscriptionJobSummaries(BaseModel):
    __root__: List[MedicalTranscriptionJobSummary]


class TranscriptionJobSummaries(BaseModel):
    __root__: List[TranscriptionJobSummary]


class SentimentFilter(BaseModel):
    """
    An object that enables you to specify a particular customer or agent sentiment. If at least 50 percent of the conversation turns (the back-and-forth between two speakers) in a specified time period match the specified sentiment, Amazon Transcribe will consider the sentiment a match.
    """

    Sentiments: SentimentValueList
    AbsoluteTimeRange: Optional[AbsoluteTimeRange] = None
    RelativeTimeRange: Optional[RelativeTimeRange] = None
    ParticipantRole: Optional[ParticipantRole] = None
    Negate: Optional[Boolean] = None


class Rule(BaseModel):
    """
    A condition in the call between the customer and the agent that you want to filter for.
    """

    NonTalkTimeFilter: Optional[NonTalkTimeFilter] = None
    InterruptionFilter: Optional[InterruptionFilter] = None
    TranscriptFilter: Optional[TranscriptFilter] = None
    SentimentFilter: Optional[SentimentFilter] = None


class GetCallAnalyticsJobResponse(BaseModel):
    CallAnalyticsJob: Optional[CallAnalyticsJob] = None


class ListMedicalTranscriptionJobsResponse(BaseModel):
    Status: Optional[CallAnalyticsJobStatus] = None
    NextToken: Optional[NextToken] = None
    MedicalTranscriptionJobSummaries: Optional[MedicalTranscriptionJobSummaries] = None


class ListTranscriptionJobsResponse(BaseModel):
    Status: Optional[CallAnalyticsJobStatus] = None
    NextToken: Optional[NextToken] = None
    TranscriptionJobSummaries: Optional[TranscriptionJobSummaries] = None


class StartCallAnalyticsJobResponse(GetCallAnalyticsJobResponse):
    pass


class StartCallAnalyticsJobRequest(BaseModel):
    CallAnalyticsJobName: CallAnalyticsJobName
    Media: Media
    OutputLocation: Optional[Uri] = None
    OutputEncryptionKMSKeyId: Optional[KMSKeyId] = None
    DataAccessRoleArn: DataAccessRoleArn
    Settings: Optional[CallAnalyticsJobSettings] = None
    ChannelDefinitions: Optional[ChannelDefinitions] = None


class RuleList(BaseModel):
    __root__: Annotated[List[Rule], Field(max_items=20, min_items=1)]


class CategoryProperties(BaseModel):
    """
    An object that contains the rules and additional information about a call analytics category.
    """

    CategoryName: Optional[CategoryName] = None
    Rules: Optional[RuleList] = None
    CreateTime: Optional[DateTime] = None
    LastUpdateTime: Optional[DateTime] = None


class CategoryPropertiesList(BaseModel):
    __root__: List[CategoryProperties]


class CreateCallAnalyticsCategoryResponse(BaseModel):
    CategoryProperties: Optional[CategoryProperties] = None


class CreateCallAnalyticsCategoryRequest(BaseModel):
    CategoryName: CategoryName
    Rules: RuleList


class GetCallAnalyticsCategoryResponse(CreateCallAnalyticsCategoryResponse):
    pass


class ListCallAnalyticsCategoriesResponse(BaseModel):
    NextToken: Optional[NextToken] = None
    Categories: Optional[CategoryPropertiesList] = None


class UpdateCallAnalyticsCategoryResponse(CreateCallAnalyticsCategoryResponse):
    pass


class UpdateCallAnalyticsCategoryRequest(BaseModel):
    CategoryName: CategoryName
    Rules: RuleList
