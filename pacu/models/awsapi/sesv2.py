# generated by datamodel-codegen:
#   filename:  openapi.yaml
#   timestamp: 2021-12-31T02:58:22+00:00

from __future__ import annotations

from datetime import datetime
from enum import Enum
from typing import Annotated, Any, List, Optional

from pydantic import BaseModel, Extra, Field, SecretStr


class CreateConfigurationSetResponse(BaseModel):
    """
    An HTTP 200 response if the request succeeds, or an error message if the request fails.
    """

    pass


class CustomRedirectDomain(BaseModel):
    __root__: Annotated[
        str,
        Field(
            description='The domain that you want to use for tracking open and click events.'
        ),
    ]


class TlsPolicy(Enum):
    """
    Specifies whether messages that use the configuration set are required to use Transport Layer Security (TLS). If the value is <code>Require</code>, messages are only delivered if a TLS connection can be established. If the value is <code>Optional</code>, messages can be delivered in plain text if a TLS connection can't be established.
    """

    REQUIRE = 'REQUIRE'
    OPTIONAL = 'OPTIONAL'


class PoolName(BaseModel):
    __root__: Annotated[str, Field(description='The name of a dedicated IP pool.')]


class Enabled(BaseModel):
    __root__: bool


class LastFreshStart(BaseModel):
    __root__: Annotated[
        datetime,
        Field(
            description='The date and time (in Unix time) when the reputation metrics were last given a fresh start. When your account is given a fresh start, your reputation metrics are calculated starting from the date of the fresh start.'
        ),
    ]


class AlreadyExistsException(BaseModel):
    __root__: Any


class NotFoundException(AlreadyExistsException):
    pass


class TooManyRequestsException(AlreadyExistsException):
    pass


class LimitExceededException(AlreadyExistsException):
    pass


class BadRequestException(AlreadyExistsException):
    pass


class ConcurrentModificationException(AlreadyExistsException):
    pass


class CreateConfigurationSetEventDestinationResponse(CreateConfigurationSetResponse):
    """
    An HTTP 200 response if the request succeeds, or an error message if the request fails.
    """

    pass


class CreateContactResponse(CreateConfigurationSetResponse):
    pass


class CreateContactListResponse(CreateConfigurationSetResponse):
    pass


class CreateCustomVerificationEmailTemplateResponse(CreateConfigurationSetResponse):
    """
    If the action is successful, the service sends back an HTTP 200 response with an empty HTTP body.
    """

    pass


class CreateDedicatedIpPoolResponse(CreateConfigurationSetResponse):
    """
    An HTTP 200 response if the request succeeds, or an error message if the request fails.
    """

    pass


class AccountSuspendedException(AlreadyExistsException):
    pass


class SendingPausedException(AlreadyExistsException):
    pass


class MessageRejected(AlreadyExistsException):
    pass


class MailFromDomainNotVerifiedException(AlreadyExistsException):
    pass


class Selector(BaseModel):
    __root__: Annotated[
        str,
        Field(
            max_length=63,
            min_length=1,
            regex='^(([a-zA-Z0-9]|[a-zA-Z0-9][a-zA-Z0-9\\-]*[a-zA-Z0-9]))$',
        ),
    ]


class PrivateKey(BaseModel):
    __root__: Annotated[
        SecretStr,
        Field(max_length=20480, min_length=1, regex='^[a-zA-Z0-9+\\/]+={0,2}$'),
    ]


class CreateEmailIdentityPolicyResponse(CreateConfigurationSetResponse):
    """
    An HTTP 200 response if the request succeeds, or an error message if the request fails.
    """

    pass


class CreateEmailTemplateResponse(CreateConfigurationSetResponse):
    """
    If the action is successful, the service sends back an HTTP 200 response with an empty HTTP body.
    """

    pass


class EmailTemplateSubject(BaseModel):
    __root__: Annotated[str, Field(description='The subject line of the email.')]


class EmailTemplateText(BaseModel):
    __root__: Annotated[
        str,
        Field(
            description='The email body that will be visible to recipients whose email clients do not display HTML.'
        ),
    ]


class EmailTemplateHtml(BaseModel):
    __root__: Annotated[str, Field(description='The HTML body of the email.')]


class S3Url(BaseModel):
    __root__: Annotated[
        str,
        Field(
            description='An Amazon S3 URL in the format s3://<i>&lt;bucket_name&gt;</i>/<i>&lt;object&gt;</i>.',
            regex='^s3:\\/\\/([^\\/]+)\\/(.*?([^\\/]+)\\/?)$',
        ),
    ]


class DataFormat(Enum):
    """
    The data format of the import job's data source.
    """

    CSV = 'CSV'
    JSON = 'JSON'


class DeleteConfigurationSetResponse(CreateConfigurationSetResponse):
    """
    An HTTP 200 response if the request succeeds, or an error message if the request fails.
    """

    pass


class DeleteConfigurationSetEventDestinationResponse(CreateConfigurationSetResponse):
    """
    An HTTP 200 response if the request succeeds, or an error message if the request fails.
    """

    pass


class DeleteContactResponse(CreateConfigurationSetResponse):
    pass


class DeleteContactListResponse(CreateConfigurationSetResponse):
    pass


class DeleteCustomVerificationEmailTemplateResponse(CreateConfigurationSetResponse):
    """
    If the action is successful, the service sends back an HTTP 200 response with an empty HTTP body.
    """

    pass


class DeleteDedicatedIpPoolResponse(CreateConfigurationSetResponse):
    """
    An HTTP 200 response if the request succeeds, or an error message if the request fails.
    """

    pass


class DeleteEmailIdentityResponse(CreateConfigurationSetResponse):
    """
    An HTTP 200 response if the request succeeds, or an error message if the request fails.
    """

    pass


class DeleteEmailIdentityPolicyResponse(CreateConfigurationSetResponse):
    """
    An HTTP 200 response if the request succeeds, or an error message if the request fails.
    """

    pass


class DeleteEmailTemplateResponse(CreateConfigurationSetResponse):
    """
    If the action is successful, the service sends back an HTTP 200 response with an empty HTTP body.
    """

    pass


class DeleteSuppressedDestinationResponse(CreateConfigurationSetResponse):
    """
    An HTTP 200 response if the request succeeds, or an error message if the request fails.
    """

    pass


class BlacklistItemName(BaseModel):
    __root__: Annotated[
        str,
        Field(
            description='An IP address that you want to obtain blacklist information for.'
        ),
    ]


class SubscriptionStatus(Enum):
    OPT_IN = 'OPT_IN'
    OPT_OUT = 'OPT_OUT'


class SuppressionListReason(Enum):
    """
    <p>The reason that the address was added to the suppression list for your account. The value can be one of the following:</p> <ul> <li> <p> <code>COMPLAINT</code> – Amazon SES added an email address to the suppression list for your account because a message sent to that address results in a complaint.</p> </li> <li> <p> <code>BOUNCE</code> – Amazon SES added an email address to the suppression list for your account because a message sent to that address results in a hard bounce.</p> </li> </ul>
    """

    BOUNCE = 'BOUNCE'
    COMPLAINT = 'COMPLAINT'


class InvalidNextTokenException(AlreadyExistsException):
    pass


class PutAccountDedicatedIpWarmupAttributesResponse(CreateConfigurationSetResponse):
    """
    An HTTP 200 response if the request succeeds, or an error message if the request fails.
    """

    pass


class PutAccountDetailsResponse(CreateConfigurationSetResponse):
    """
    An HTTP 200 response if the request succeeds, or an error message if the request fails.
    """

    pass


class AdditionalContactEmailAddress(BaseModel):
    __root__: Annotated[
        SecretStr, Field(max_length=254, min_length=6, regex='^(.+)@(.+)$')
    ]


class ConflictException(AlreadyExistsException):
    pass


class PutAccountSendingAttributesResponse(CreateConfigurationSetResponse):
    """
    An HTTP 200 response if the request succeeds, or an error message if the request fails.
    """

    pass


class PutAccountSuppressionAttributesResponse(CreateConfigurationSetResponse):
    """
    An HTTP 200 response if the request succeeds, or an error message if the request fails.
    """

    pass


class PutConfigurationSetDeliveryOptionsResponse(CreateConfigurationSetResponse):
    """
    An HTTP 200 response if the request succeeds, or an error message if the request fails.
    """

    pass


class PutConfigurationSetReputationOptionsResponse(CreateConfigurationSetResponse):
    """
    An HTTP 200 response if the request succeeds, or an error message if the request fails.
    """

    pass


class PutConfigurationSetSendingOptionsResponse(CreateConfigurationSetResponse):
    """
    An HTTP 200 response if the request succeeds, or an error message if the request fails.
    """

    pass


class PutConfigurationSetSuppressionOptionsResponse(CreateConfigurationSetResponse):
    """
    An HTTP 200 response if the request succeeds, or an error message if the request fails.
    """

    pass


class PutConfigurationSetTrackingOptionsResponse(CreateConfigurationSetResponse):
    """
    An HTTP 200 response if the request succeeds, or an error message if the request fails.
    """

    pass


class PutDedicatedIpInPoolResponse(CreateConfigurationSetResponse):
    """
    An HTTP 200 response if the request succeeds, or an error message if the request fails.
    """

    pass


class PutDedicatedIpWarmupAttributesResponse(CreateConfigurationSetResponse):
    """
    An HTTP 200 response if the request succeeds, or an error message if the request fails.
    """

    pass


class PutDeliverabilityDashboardOptionResponse(CreateConfigurationSetResponse):
    """
    A response that indicates whether the Deliverability dashboard is enabled.
    """

    pass


class PutEmailIdentityConfigurationSetAttributesResponse(
    CreateConfigurationSetResponse
):
    """
    If the action is successful, the service sends back an HTTP 200 response with an empty HTTP body.
    """

    pass


class PutEmailIdentityDkimAttributesResponse(CreateConfigurationSetResponse):
    """
    An HTTP 200 response if the request succeeds, or an error message if the request fails.
    """

    pass


class PutEmailIdentityFeedbackAttributesResponse(CreateConfigurationSetResponse):
    """
    An HTTP 200 response if the request succeeds, or an error message if the request fails.
    """

    pass


class PutEmailIdentityMailFromAttributesResponse(CreateConfigurationSetResponse):
    """
    An HTTP 200 response if the request succeeds, or an error message if the request fails.
    """

    pass


class PutSuppressedDestinationResponse(CreateConfigurationSetResponse):
    """
    An HTTP 200 response if the request succeeds, or an error message if the request fails.
    """

    pass


class EmailAddress(BaseModel):
    __root__: str


class EmailAddressList(BaseModel):
    __root__: List[EmailAddress]


class ContactListName(EmailAddress):
    pass


class TopicName(EmailAddress):
    pass


class TagResourceResponse(CreateConfigurationSetResponse):
    pass


class UntagResourceResponse(CreateConfigurationSetResponse):
    pass


class TagKey(EmailAddress):
    pass


class UpdateConfigurationSetEventDestinationResponse(CreateConfigurationSetResponse):
    """
    An HTTP 200 response if the request succeeds, or an error message if the request fails.
    """

    pass


class UpdateContactResponse(CreateConfigurationSetResponse):
    pass


class UpdateContactListResponse(CreateConfigurationSetResponse):
    pass


class UpdateCustomVerificationEmailTemplateResponse(CreateConfigurationSetResponse):
    """
    If the action is successful, the service sends back an HTTP 200 response with an empty HTTP body.
    """

    pass


class UpdateEmailIdentityPolicyResponse(CreateConfigurationSetResponse):
    """
    An HTTP 200 response if the request succeeds, or an error message if the request fails.
    """

    pass


class UpdateEmailTemplateResponse(CreateConfigurationSetResponse):
    """
    If the action is successful, the service sends back an HTTP 200 response with an empty HTTP body.
    """

    pass


class MailType(Enum):
    MARKETING = 'MARKETING'
    TRANSACTIONAL = 'TRANSACTIONAL'


class WebsiteURL(BaseModel):
    __root__: Annotated[
        SecretStr,
        Field(
            max_length=1000,
            min_length=1,
            regex='^(([^:/?#]+):)?(//([^/?#]*))?([^?#]*)(\\?([^#]*))?(#(.*))?',
        ),
    ]


class ContactLanguage(Enum):
    EN = 'EN'
    JA = 'JA'


class UseCaseDescription(BaseModel):
    __root__: Annotated[SecretStr, Field(max_length=5000, min_length=1)]


class AdditionalContactEmailAddresses(BaseModel):
    __root__: Annotated[
        List[AdditionalContactEmailAddress], Field(max_items=4, min_items=1)
    ]


class AmazonResourceName(EmailAddress):
    pass


class AttributesData(EmailAddress):
    pass


class BehaviorOnMxFailure(Enum):
    """
    <p>The action that you want to take if the required MX record can't be found when you send an email. When you set this value to <code>UseDefaultValue</code>, the mail is sent using <i>amazonses.com</i> as the MAIL FROM domain. When you set this value to <code>RejectMessage</code>, the Amazon SES API v2 returns a <code>MailFromDomainNotVerified</code> error, and doesn't attempt to deliver the email.</p> <p>These behaviors are taken when the custom MAIL FROM domain configuration is in the <code>Pending</code>, <code>Failed</code>, and <code>TemporaryFailure</code> states.</p>
    """

    USE_DEFAULT_VALUE = 'USE_DEFAULT_VALUE'
    REJECT_MESSAGE = 'REJECT_MESSAGE'


class RblName(BaseModel):
    __root__: Annotated[
        str,
        Field(description='The name of a blacklist that an IP address was found on.'),
    ]


class Timestamp(BaseModel):
    __root__: datetime


class BlacklistingDescription(BaseModel):
    __root__: Annotated[
        str, Field(description='A description of the blacklisting event.')
    ]


class BlacklistItemNames(BaseModel):
    __root__: List[BlacklistItemName]


class BlacklistReport(BaseModel):
    pass

    class Config:
        extra = Extra.allow


class Destination(BaseModel):
    """
    An object that describes the recipients for an email.
    """

    ToAddresses: Optional[EmailAddressList] = None
    CcAddresses: Optional[EmailAddressList] = None
    BccAddresses: Optional[EmailAddressList] = None


class BulkEmailStatus(Enum):
    SUCCESS = 'SUCCESS'
    MESSAGE_REJECTED = 'MESSAGE_REJECTED'
    MAIL_FROM_DOMAIN_NOT_VERIFIED = 'MAIL_FROM_DOMAIN_NOT_VERIFIED'
    CONFIGURATION_SET_NOT_FOUND = 'CONFIGURATION_SET_NOT_FOUND'
    TEMPLATE_NOT_FOUND = 'TEMPLATE_NOT_FOUND'
    ACCOUNT_SUSPENDED = 'ACCOUNT_SUSPENDED'
    ACCOUNT_THROTTLED = 'ACCOUNT_THROTTLED'
    ACCOUNT_DAILY_QUOTA_EXCEEDED = 'ACCOUNT_DAILY_QUOTA_EXCEEDED'
    INVALID_SENDING_POOL_NAME = 'INVALID_SENDING_POOL_NAME'
    ACCOUNT_SENDING_PAUSED = 'ACCOUNT_SENDING_PAUSED'
    CONFIGURATION_SET_SENDING_PAUSED = 'CONFIGURATION_SET_SENDING_PAUSED'
    INVALID_PARAMETER = 'INVALID_PARAMETER'
    TRANSIENT_FAILURE = 'TRANSIENT_FAILURE'
    FAILED = 'FAILED'


class ErrorMessage(EmailAddress):
    pass


class OutboundMessageId(EmailAddress):
    pass


class BulkEmailEntryResult(BaseModel):
    """
    The result of the <code>SendBulkEmail</code> operation of each specified <code>BulkEmailEntry</code>.
    """

    Status: Optional[BulkEmailStatus] = None
    Error: Optional[ErrorMessage] = None
    MessageId: Optional[OutboundMessageId] = None


class BulkEmailEntryResultList(BaseModel):
    """
    A list of <code>BulkMailEntry</code> objects.
    """

    __root__: Annotated[
        List[BulkEmailEntryResult],
        Field(description='A list of <code>BulkMailEntry</code> objects.'),
    ]


class CampaignId(EmailAddress):
    pass


class CaseId(EmailAddress):
    pass


class Charset(EmailAddress):
    pass


class DimensionName(BaseModel):
    __root__: Annotated[
        str,
        Field(
            description='<p>The name of an Amazon CloudWatch dimension associated with an email sending metric. The name has to meet the following criteria:</p> <ul> <li> <p>It can only contain ASCII letters (a-z, A-Z), numbers (0-9), underscores (_), or dashes (-).</p> </li> <li> <p>It can contain no more than 256 characters.</p> </li> </ul>'
        ),
    ]


class DimensionValueSource(Enum):
    """
    The location where the Amazon SES API v2 finds the value of a dimension to publish to Amazon CloudWatch. If you want to use the message tags that you specify using an <code>X-SES-MESSAGE-TAGS</code> header or a parameter to the <code>SendEmail</code> or <code>SendRawEmail</code> API, choose <code>messageTag</code>. If you want to use your own email headers, choose <code>emailHeader</code>. If you want to use link tags, choose <code>linkTags</code>.
    """

    MESSAGE_TAG = 'MESSAGE_TAG'
    EMAIL_HEADER = 'EMAIL_HEADER'
    LINK_TAG = 'LINK_TAG'


class DefaultDimensionValue(BaseModel):
    __root__: Annotated[
        str,
        Field(
            description="<p>The default value of the dimension that is published to Amazon CloudWatch if you don't provide the value of the dimension when you send an email. This value has to meet the following criteria:</p> <ul> <li> <p>It can only contain ASCII letters (a–z, A–Z), numbers (0–9), underscores (_), or dashes (-).</p> </li> <li> <p>It can contain no more than 256 characters.</p> </li> </ul>"
        ),
    ]


class CloudWatchDimensionConfiguration(BaseModel):
    """
    An object that defines the dimension configuration to use when you send email events to Amazon CloudWatch.
    """

    DimensionName: DimensionName
    DimensionValueSource: DimensionValueSource
    DefaultDimensionValue: DefaultDimensionValue


class ConfigurationSetName(BaseModel):
    __root__: Annotated[
        str,
        Field(
            description='<p>The name of a configuration set.</p> <p> <i>Configuration sets</i> are groups of rules that you can apply to the emails you send. You apply a configuration set to an email by including a reference to the configuration set in the headers of the email. When you apply a configuration set to an email, all of the rules in that configuration set are applied to the email.</p>'
        ),
    ]


class ConfigurationSetNameList(BaseModel):
    __root__: List[ConfigurationSetName]


class UnsubscribeAll(Enabled):
    pass


class ContactList(BaseModel):
    """
    A list that contains contacts that have subscribed to a particular topic or topics.
    """

    ContactListName: Optional[ContactListName] = None
    LastUpdatedTimestamp: Optional[Timestamp] = None


class ContactListImportAction(Enum):
    DELETE = 'DELETE'
    PUT = 'PUT'


class MessageData(EmailAddress):
    pass


class EventDestinationName(BaseModel):
    __root__: Annotated[
        str,
        Field(
            description='<p>The name of an event destination.</p> <p> <i>Events</i> include message sends, deliveries, opens, clicks, bounces, and complaints. <i>Event destinations</i> are places that you can send information about these events to. For example, you can send event data to Amazon SNS to receive notifications when you receive bounces or complaints, or you can use Amazon Kinesis Data Firehose to stream data to Amazon S3 for long-term storage.</p>'
        ),
    ]


class TrackingOptions(BaseModel):
    """
    <p>An object that defines the tracking options for a configuration set. When you use the Amazon SES API v2 to send an email, it contains an invisible image that's used to track when recipients open your email. If your email contains links, those links are changed slightly in order to track when recipients click them.</p> <p>These images and links include references to a domain operated by AWS. You can optionally configure the Amazon SES to use a domain that you operate for these images and links.</p>
    """

    CustomRedirectDomain: CustomRedirectDomain


class DeliveryOptions(BaseModel):
    """
    Used to associate a configuration set with a dedicated IP pool.
    """

    TlsPolicy: Optional[TlsPolicy] = None
    SendingPoolName: Optional[PoolName] = None


class ReputationOptions(BaseModel):
    """
    Enable or disable collection of reputation metrics for emails that you send using this configuration set in the current AWS Region.
    """

    ReputationMetricsEnabled: Optional[Enabled] = None
    LastFreshStart: Optional[LastFreshStart] = None


class SendingOptions(BaseModel):
    """
    Used to enable or disable email sending for messages that use this configuration set in the current AWS Region.
    """

    SendingEnabled: Optional[Enabled] = None


class Description(EmailAddress):
    pass


class EmailTemplateName(BaseModel):
    __root__: Annotated[
        str,
        Field(
            description='The name of the template. You will refer to this name when you send email using the <code>SendTemplatedEmail</code> or <code>SendBulkTemplatedEmail</code> operations.',
            min_length=1,
        ),
    ]


class TemplateContent(BaseModel):
    __root__: Annotated[
        str, Field(description='The content of the custom verification email template.')
    ]


class SuccessRedirectionURL(BaseModel):
    __root__: Annotated[
        str,
        Field(
            description='The URL that the recipient of the verification email is sent to if his or her address is successfully verified.'
        ),
    ]


class FailureRedirectionURL(BaseModel):
    __root__: Annotated[
        str,
        Field(
            description='The URL that the recipient of the verification email is sent to if his or her address is not successfully verified.'
        ),
    ]


class CreateCustomVerificationEmailTemplateRequest(BaseModel):
    """
    Represents a request to create a custom verification email template.
    """

    TemplateName: EmailTemplateName
    FromEmailAddress: EmailAddress
    TemplateSubject: EmailTemplateSubject
    TemplateContent: TemplateContent
    SuccessRedirectionURL: SuccessRedirectionURL
    FailureRedirectionURL: FailureRedirectionURL


class ReportName(BaseModel):
    __root__: Annotated[
        str,
        Field(
            description='A name that helps you identify a report generated by the Deliverability dashboard.'
        ),
    ]


class ReportId(BaseModel):
    __root__: Annotated[
        str,
        Field(
            description='A unique string that identifies a Deliverability dashboard report.'
        ),
    ]


class DeliverabilityTestStatus(Enum):
    """
    The status of a predictive inbox placement test. If the status is <code>IN_PROGRESS</code>, then the predictive inbox placement test is currently running. Predictive inbox placement tests are usually complete within 24 hours of creating the test. If the status is <code>COMPLETE</code>, then the test is finished, and you can use the <code>GetDeliverabilityTestReport</code> operation to view the results of the test.
    """

    IN_PROGRESS = 'IN_PROGRESS'
    COMPLETED = 'COMPLETED'


class Identity(BaseModel):
    __root__: Annotated[str, Field(min_length=1)]


class PolicyName(BaseModel):
    __root__: Annotated[
        str,
        Field(
            description='<p>The name of the policy.</p> <p>The policy name cannot exceed 64 characters and can only include alphanumeric characters, dashes, and underscores.</p>',
            max_length=64,
            min_length=1,
        ),
    ]


class Policy(BaseModel):
    __root__: Annotated[
        str,
        Field(
            description='<p>The text of the policy in JSON format. The policy cannot exceed 4 KB.</p> <p>For information about the syntax of sending authorization policies, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/sending-authorization.html">Amazon SES Developer Guide</a>.</p>',
            min_length=1,
        ),
    ]


class CreateEmailIdentityPolicyRequest(BaseModel):
    """
    Represents a request to create a sending authorization policy for an identity. Sending authorization is an Amazon SES feature that enables you to authorize other senders to use your identities. For information, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/sending-authorization-identity-owner-tasks-management.html">Amazon SES Developer Guide</a>.
    """

    Policy: Policy


class DkimSigningAttributes(BaseModel):
    """
    An object that contains information about the tokens used for setting up Bring Your Own DKIM (BYODKIM).
    """

    DomainSigningSelector: Selector
    DomainSigningPrivateKey: PrivateKey


class IdentityType(Enum):
    """
    <p>The email identity type. The identity type can be one of the following:</p> <ul> <li> <p> <code>EMAIL_ADDRESS</code> – The identity is an email address.</p> </li> <li> <p> <code>DOMAIN</code> – The identity is a domain.</p> </li> </ul>
    """

    EMAIL_ADDRESS = 'EMAIL_ADDRESS'
    DOMAIN = 'DOMAIN'
    MANAGED_DOMAIN = 'MANAGED_DOMAIN'


class EmailTemplateContent(BaseModel):
    """
    The content of the email, composed of a subject line, an HTML part, and a text-only part.
    """

    Subject: Optional[EmailTemplateSubject] = None
    Text: Optional[EmailTemplateText] = None
    Html: Optional[EmailTemplateHtml] = None


class CreateEmailTemplateRequest(BaseModel):
    """
    Represents a request to create an email template. For more information, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/send-personalized-email-api.html">Amazon SES Developer Guide</a>.
    """

    TemplateName: EmailTemplateName
    TemplateContent: EmailTemplateContent


class ImportDataSource(BaseModel):
    """
    An object that contains details about the data source of the import job.
    """

    S3Url: S3Url
    DataFormat: DataFormat


class JobId(BaseModel):
    __root__: Annotated[
        str,
        Field(description='A string that represents the import job ID.', min_length=1),
    ]


class CustomVerificationEmailTemplateMetadata(BaseModel):
    """
    Contains information about a custom verification email template.
    """

    TemplateName: Optional[EmailTemplateName] = None
    FromEmailAddress: Optional[EmailAddress] = None
    TemplateSubject: Optional[EmailTemplateSubject] = None
    SuccessRedirectionURL: Optional[SuccessRedirectionURL] = None
    FailureRedirectionURL: Optional[FailureRedirectionURL] = None


class CustomVerificationEmailTemplatesList(BaseModel):
    """
    A list of the custom verification email templates that exist in your account.
    """

    __root__: Annotated[
        List[CustomVerificationEmailTemplateMetadata],
        Field(
            description='A list of the custom verification email templates that exist in your account.'
        ),
    ]


class Ip(BaseModel):
    __root__: Annotated[str, Field(description='An IPv4 address.')]


class WarmupStatus(Enum):
    """
    The warmup status of a dedicated IP.
    """

    IN_PROGRESS = 'IN_PROGRESS'
    DONE = 'DONE'


class Percentage100Wrapper(BaseModel):
    __root__: int


class DedicatedIp(BaseModel):
    """
    <p>Contains information about a dedicated IP address that is associated with your Amazon SES account.</p> <p>To learn more about requesting dedicated IP addresses, see <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/dedicated-ip-case.html">Requesting and Relinquishing Dedicated IP Addresses</a> in the <i>Amazon SES Developer Guide</i>.</p>
    """

    Ip: Ip
    WarmupStatus: WarmupStatus
    WarmupPercentage: Percentage100Wrapper
    PoolName: Optional[PoolName] = None


class DedicatedIpList(BaseModel):
    """
    A list of dedicated IP addresses that are associated with your AWS account.
    """

    __root__: Annotated[
        List[DedicatedIp],
        Field(
            description='A list of dedicated IP addresses that are associated with your AWS account.'
        ),
    ]


class DeleteConfigurationSetEventDestinationRequest(BaseModel):
    """
    A request to delete an event destination from a configuration set.
    """

    pass


class DeleteConfigurationSetRequest(BaseModel):
    """
    A request to delete a configuration set.
    """

    pass


class DeleteContactListRequest(BaseModel):
    pass


class DeleteContactRequest(BaseModel):
    pass


class DeleteCustomVerificationEmailTemplateRequest(BaseModel):
    """
    Represents a request to delete an existing custom verification email template.
    """

    pass


class DeleteDedicatedIpPoolRequest(BaseModel):
    """
    A request to delete a dedicated IP pool.
    """

    pass


class DeleteEmailIdentityPolicyRequest(BaseModel):
    """
    Represents a request to delete a sending authorization policy for an identity. Sending authorization is an Amazon SES feature that enables you to authorize other senders to use your identities. For information, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/sending-authorization-identity-owner-tasks-management.html">Amazon SES Developer Guide</a>.
    """

    pass


class DeleteEmailIdentityRequest(BaseModel):
    """
    A request to delete an existing email identity. When you delete an identity, you lose the ability to send email from that identity. You can restore your ability to send email by completing the verification process for the identity again.
    """

    pass


class DeleteEmailTemplateRequest(BaseModel):
    """
    Represents a request to delete an email template. For more information, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/send-personalized-email-api.html">Amazon SES Developer Guide</a>.
    """

    pass


class DeleteSuppressedDestinationRequest(BaseModel):
    """
    A request to remove an email address from the suppression list for your account.
    """

    pass


class DeliverabilityDashboardAccountStatus(Enum):
    """
    The current status of your Deliverability dashboard subscription. If this value is <code>PENDING_EXPIRATION</code>, your subscription is scheduled to expire at the end of the current calendar month.
    """

    ACTIVE = 'ACTIVE'
    PENDING_EXPIRATION = 'PENDING_EXPIRATION'
    DISABLED = 'DISABLED'


class DeliverabilityTestSubject(BaseModel):
    __root__: Annotated[
        str,
        Field(
            description='The subject line for an email that you submitted in a predictive inbox placement test.'
        ),
    ]


class DeliverabilityTestReport(BaseModel):
    """
    An object that contains metadata related to a predictive inbox placement test.
    """

    ReportId: Optional[ReportId] = None
    ReportName: Optional[ReportName] = None
    Subject: Optional[DeliverabilityTestSubject] = None
    FromEmailAddress: Optional[EmailAddress] = None
    CreateDate: Optional[Timestamp] = None
    DeliverabilityTestStatus: Optional[DeliverabilityTestStatus] = None


class DeliverabilityTestReports(BaseModel):
    __root__: List[DeliverabilityTestReport]


class DisplayName(EmailAddress):
    pass


class DkimStatus(Enum):
    """
    <p>The DKIM authentication status of the identity. The status can be one of the following:</p> <ul> <li> <p> <code>PENDING</code> – The verification process was initiated, but Amazon SES hasn't yet detected the DKIM records in the DNS configuration for the domain.</p> </li> <li> <p> <code>SUCCESS</code> – The verification process completed successfully.</p> </li> <li> <p> <code>FAILED</code> – The verification process failed. This typically occurs when Amazon SES fails to find the DKIM records in the DNS configuration of the domain.</p> </li> <li> <p> <code>TEMPORARY_FAILURE</code> – A temporary issue is preventing Amazon SES from determining the DKIM authentication status of the domain.</p> </li> <li> <p> <code>NOT_STARTED</code> – The DKIM verification process hasn't been initiated for the domain.</p> </li> </ul>
    """

    PENDING = 'PENDING'
    SUCCESS = 'SUCCESS'
    FAILED = 'FAILED'
    TEMPORARY_FAILURE = 'TEMPORARY_FAILURE'
    NOT_STARTED = 'NOT_STARTED'


class DkimSigningAttributesOrigin(Enum):
    AWS_SES = 'AWS_SES'
    EXTERNAL = 'EXTERNAL'


class DnsToken(EmailAddress):
    pass


class Domain(EmailAddress):
    pass


class ImageUrl(EmailAddress):
    pass


class Subject3(EmailAddress):
    pass


class IpList(BaseModel):
    __root__: List[Ip]


class Volume(BaseModel):
    __root__: Annotated[
        int,
        Field(
            description='An object that contains information about inbox placement volume.'
        ),
    ]


class Percentage(BaseModel):
    __root__: Annotated[
        float,
        Field(
            description='An object that contains information about inbox placement percentages.'
        ),
    ]


class IspName(BaseModel):
    __root__: Annotated[str, Field(description='The name of an email provider.')]


class DomainIspPlacement(BaseModel):
    """
    An object that contains inbox placement data for email sent from one of your email domains to a specific email provider.
    """

    IspName: Optional[IspName] = None
    InboxRawCount: Optional[Volume] = None
    SpamRawCount: Optional[Volume] = None
    InboxPercentage: Optional[Percentage] = None
    SpamPercentage: Optional[Percentage] = None


class EmailTemplateData(BaseModel):
    __root__: Annotated[
        str,
        Field(
            description='An object that defines the values to use for message variables in the template. This object is a set of key-value pairs. Each key defines a message variable in the template. The corresponding value defines the value to use for that variable.',
            max_length=262144,
        ),
    ]


class EmailTemplateMetadata(BaseModel):
    """
    Contains information about an email template.
    """

    TemplateName: Optional[EmailTemplateName] = None
    CreatedTimestamp: Optional[Timestamp] = None


class EmailTemplateMetadataList(BaseModel):
    """
    A list of the EmailTemplateMetadata object.
    """

    __root__: Annotated[
        List[EmailTemplateMetadata],
        Field(description='A list of the EmailTemplateMetadata object.'),
    ]


class EnabledWrapper(Enabled):
    pass


class Esp(EmailAddress):
    pass


class EventType(Enum):
    """
    An email sending event type. For example, email sends, opens, and bounces are all email events.
    """

    SEND = 'SEND'
    REJECT = 'REJECT'
    BOUNCE = 'BOUNCE'
    COMPLAINT = 'COMPLAINT'
    DELIVERY = 'DELIVERY'
    OPEN = 'OPEN'
    CLICK = 'CLICK'
    RENDERING_FAILURE = 'RENDERING_FAILURE'
    DELIVERY_DELAY = 'DELIVERY_DELAY'
    SUBSCRIPTION = 'SUBSCRIPTION'


class FailedRecordsCount(Percentage100Wrapper):
    pass


class FailedRecordsS3Url(EmailAddress):
    pass


class FailureInfo(BaseModel):
    """
    An object that contains the failure details about an import job.
    """

    FailedRecordsS3Url: Optional[FailedRecordsS3Url] = None
    ErrorMessage: Optional[ErrorMessage] = None


class FeedbackId(EmailAddress):
    pass


class GeneralEnforcementStatus(EmailAddress):
    pass


class GetAccountRequest(BaseModel):
    """
    A request to obtain information about the email-sending capabilities of your Amazon SES account.
    """

    pass


class GetBlacklistReportsRequest(BaseModel):
    """
    A request to retrieve a list of the blacklists that your dedicated IP addresses appear on.
    """

    pass


class GetConfigurationSetEventDestinationsRequest(BaseModel):
    """
    A request to obtain information about the event destinations for a configuration set.
    """

    pass


class GetConfigurationSetRequest(BaseModel):
    """
    A request to obtain information about a configuration set.
    """

    pass


class GetContactListRequest(BaseModel):
    pass


class GetContactRequest(BaseModel):
    pass


class GetCustomVerificationEmailTemplateRequest(BaseModel):
    """
    Represents a request to retrieve an existing custom verification email template.
    """

    pass


class GetDedicatedIpRequest(BaseModel):
    """
    A request to obtain more information about a dedicated IP address.
    """

    pass


class NextToken(EmailAddress):
    pass


class MaxItems(Percentage100Wrapper):
    pass


class GetDedicatedIpsRequest(BaseModel):
    """
    A request to obtain more information about dedicated IP pools.
    """

    pass


class GetDeliverabilityDashboardOptionsRequest(BaseModel):
    """
    <p>Retrieve information about the status of the Deliverability dashboard for your AWS account. When the Deliverability dashboard is enabled, you gain access to reputation, deliverability, and other metrics for your domains. You also gain the ability to perform predictive inbox placement tests.</p> <p>When you use the Deliverability dashboard, you pay a monthly subscription charge, in addition to any other fees that you accrue by using Amazon SES and other AWS services. For more information about the features and cost of a Deliverability dashboard subscription, see <a href="http://aws.amazon.com/pinpoint/pricing/">Amazon Pinpoint Pricing</a>.</p>
    """

    pass


class GetDeliverabilityTestReportRequest(BaseModel):
    """
    A request to retrieve the results of a predictive inbox placement test.
    """

    pass


class PlacementStatistics(BaseModel):
    """
    An object that contains inbox placement data for an email provider.
    """

    InboxPercentage: Optional[Percentage] = None
    SpamPercentage: Optional[Percentage] = None
    MissingPercentage: Optional[Percentage] = None
    SpfPercentage: Optional[Percentage] = None
    DkimPercentage: Optional[Percentage] = None


class MessageContent(BaseModel):
    __root__: Annotated[str, Field(description='The body of an email message.')]


class GetDomainDeliverabilityCampaignRequest(BaseModel):
    """
    Retrieve all the deliverability data for a specific campaign. This data is available for a campaign only if the campaign sent email by using a domain that the Deliverability dashboard is enabled for (<code>PutDeliverabilityDashboardOption</code> operation).
    """

    pass


class GetDomainStatisticsReportRequest(BaseModel):
    """
    A request to obtain deliverability metrics for a domain.
    """

    pass


class GetEmailIdentityPoliciesRequest(BaseModel):
    """
    A request to return the policies of an email identity.
    """

    pass


class PolicyMap(BaseModel):
    """
    An object that contains mapping between <code>PolicyName</code> and <code>Policy</code> text.
    """

    pass

    class Config:
        extra = Extra.allow


class GetEmailIdentityRequest(BaseModel):
    """
    A request to return details about an email identity.
    """

    pass


class GetEmailTemplateRequest(BaseModel):
    """
    Represents a request to display the template object (which includes the subject line, HTML part and text part) for the template you specify.
    """

    pass


class GetImportJobRequest(BaseModel):
    """
    Represents a request for information about an import job using the import job ID.
    """

    pass


class JobStatus(Enum):
    """
    The status of the import job.
    """

    CREATED = 'CREATED'
    PROCESSING = 'PROCESSING'
    COMPLETED = 'COMPLETED'
    FAILED = 'FAILED'


class ProcessedRecordsCount(Percentage100Wrapper):
    pass


class GetSuppressedDestinationRequest(BaseModel):
    """
    A request to retrieve information about an email address that's on the suppression list for your account.
    """

    pass


class IdentityInfo(BaseModel):
    """
    Information about an email identity.
    """

    IdentityType: Optional[IdentityType] = None
    IdentityName: Optional[Identity] = None
    SendingEnabled: Optional[Enabled] = None


class IdentityInfoList(BaseModel):
    __root__: List[IdentityInfo]


class ImportDestinationType(Enum):
    """
    The destination of the import job, which can be used to list import jobs that have a certain <code>ImportDestinationType</code>.
    """

    SUPPRESSION_LIST = 'SUPPRESSION_LIST'
    CONTACT_LIST = 'CONTACT_LIST'


class IspNameList(BaseModel):
    __root__: List[IspName]


class IspPlacement(BaseModel):
    """
    An object that describes how email sent during the predictive inbox placement test was handled by a certain email provider.
    """

    IspName: Optional[IspName] = None
    PlacementStatistics: Optional[PlacementStatistics] = None


class ListConfigurationSetsRequest(BaseModel):
    """
    A request to obtain a list of configuration sets for your Amazon SES account in the current AWS Region.
    """

    pass


class ListContactListsRequest(BaseModel):
    pass


class ListOfContactLists(BaseModel):
    __root__: List[ContactList]


class ListCustomVerificationEmailTemplatesRequest(BaseModel):
    """
    Represents a request to list the existing custom verification email templates for your account.
    """

    pass


class ListDedicatedIpPoolsRequest(BaseModel):
    """
    A request to obtain a list of dedicated IP pools.
    """

    pass


class ListOfDedicatedIpPools(BaseModel):
    """
    A list of dedicated IP pools that are associated with your AWS account.
    """

    __root__: Annotated[
        List[PoolName],
        Field(
            description='A list of dedicated IP pools that are associated with your AWS account.'
        ),
    ]


class ListDeliverabilityTestReportsRequest(BaseModel):
    """
    A request to list all of the predictive inbox placement tests that you've performed.
    """

    pass


class ListDomainDeliverabilityCampaignsRequest(BaseModel):
    """
    Retrieve deliverability data for all the campaigns that used a specific domain to send email during a specified time range. This data is available for a domain only if you enabled the Deliverability dashboard.
    """

    pass


class ListEmailIdentitiesRequest(BaseModel):
    """
    A request to list all of the email identities associated with your AWS account. This list includes identities that you've already verified, identities that are unverified, and identities that were verified in the past, but are no longer verified.
    """

    pass


class ListEmailTemplatesRequest(BaseModel):
    """
    Represents a request to list the email templates present in your Amazon SES account in the current AWS Region. For more information, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/send-personalized-email-api.html">Amazon SES Developer Guide</a>.
    """

    pass


class ListImportJobsRequest(BaseModel):
    """
    Represents a request to list all of the import jobs for a data destination within the specified maximum number of import jobs.
    """

    ImportDestinationType: Optional[ImportDestinationType] = None


class ListManagementOptions(BaseModel):
    """
    An object used to specify a list or topic to which an email belongs, which will be used when a contact chooses to unsubscribe.
    """

    ContactListName: ContactListName
    TopicName: Optional[TopicName] = None


class ListSuppressedDestinationsRequest(BaseModel):
    """
    A request to obtain a list of email destinations that are on the suppression list for your account.
    """

    pass


class ListTagsForResourceRequest(BaseModel):
    pass


class MailFromDomainName(BaseModel):
    __root__: Annotated[
        str, Field(description='The domain that you want to use as a MAIL FROM domain.')
    ]


class MailFromDomainStatus(Enum):
    """
    <p>The status of the MAIL FROM domain. This status can have the following values:</p> <ul> <li> <p> <code>PENDING</code> – Amazon SES hasn't started searching for the MX record yet.</p> </li> <li> <p> <code>SUCCESS</code> – Amazon SES detected the required MX record for the MAIL FROM domain.</p> </li> <li> <p> <code>FAILED</code> – Amazon SES can't find the required MX record, or the record no longer exists.</p> </li> <li> <p> <code>TEMPORARY_FAILURE</code> – A temporary issue occurred, which prevented Amazon SES from determining the status of the MAIL FROM domain.</p> </li> </ul>
    """

    PENDING = 'PENDING'
    SUCCESS = 'SUCCESS'
    FAILED = 'FAILED'
    TEMPORARY_FAILURE = 'TEMPORARY_FAILURE'


class Max24HourSend(BaseModel):
    __root__: float


class MaxSendRate(Max24HourSend):
    pass


class MessageTagName(BaseModel):
    __root__: Annotated[
        str,
        Field(
            description='<p>The name of the message tag. The message tag name has to meet the following criteria:</p> <ul> <li> <p>It can only contain ASCII letters (a–z, A–Z), numbers (0–9), underscores (_), or dashes (-).</p> </li> <li> <p>It can contain no more than 256 characters.</p> </li> </ul>'
        ),
    ]


class MessageTagValue(BaseModel):
    __root__: Annotated[
        str,
        Field(
            description='<p>The value of the message tag. The message tag value has to meet the following criteria:</p> <ul> <li> <p>It can only contain ASCII letters (a–z, A–Z), numbers (0–9), underscores (_), or dashes (-).</p> </li> <li> <p>It can contain no more than 256 characters.</p> </li> </ul>'
        ),
    ]


class PutAccountDedicatedIpWarmupAttributesRequest(BaseModel):
    """
    A request to enable or disable the automatic IP address warm-up feature.
    """

    AutoWarmupEnabled: Optional[Enabled] = None


class PutAccountDetailsRequest(BaseModel):
    """
    A request to submit new account details.
    """

    MailType: MailType
    WebsiteURL: WebsiteURL
    ContactLanguage: Optional[ContactLanguage] = None
    UseCaseDescription: UseCaseDescription
    AdditionalContactEmailAddresses: Optional[AdditionalContactEmailAddresses] = None
    ProductionAccessEnabled: Optional[EnabledWrapper] = None


class PutAccountSendingAttributesRequest(BaseModel):
    """
    A request to change the ability of your account to send email.
    """

    SendingEnabled: Optional[Enabled] = None


class SendingPoolName1(BaseModel):
    __root__: Annotated[
        str,
        Field(
            description='The name of the dedicated IP pool that you want to associate with the configuration set.'
        ),
    ]


class PutConfigurationSetDeliveryOptionsRequest(BaseModel):
    """
    A request to associate a configuration set with a dedicated IP pool.
    """

    TlsPolicy: Optional[TlsPolicy] = None
    SendingPoolName: Optional[SendingPoolName1] = None


class PutConfigurationSetReputationOptionsRequest(BaseModel):
    """
    A request to enable or disable tracking of reputation metrics for a configuration set.
    """

    ReputationMetricsEnabled: Optional[Enabled] = None


class PutConfigurationSetSendingOptionsRequest(BaseModel):
    """
    A request to enable or disable the ability of Amazon SES to send emails that use a specific configuration set.
    """

    SendingEnabled: Optional[Enabled] = None


class PutConfigurationSetTrackingOptionsRequest(BaseModel):
    """
    A request to add a custom domain for tracking open and click events to a configuration set.
    """

    CustomRedirectDomain: Optional[CustomRedirectDomain] = None


class PutDedicatedIpInPoolRequest(BaseModel):
    """
    A request to move a dedicated IP address to a dedicated IP pool.
    """

    DestinationPoolName: PoolName


class PutDedicatedIpWarmupAttributesRequest(BaseModel):
    """
    A request to change the warm-up attributes for a dedicated IP address. This operation is useful when you want to resume the warm-up process for an existing IP address.
    """

    WarmupPercentage: Percentage100Wrapper


class PutEmailIdentityConfigurationSetAttributesRequest(BaseModel):
    """
    A request to associate a configuration set with an email identity.
    """

    ConfigurationSetName: Optional[ConfigurationSetName] = None


class PutEmailIdentityDkimAttributesRequest(BaseModel):
    """
    A request to enable or disable DKIM signing of email that you send from an email identity.
    """

    SigningEnabled: Optional[Enabled] = None


class PutEmailIdentityDkimSigningAttributesRequest(BaseModel):
    """
    A request to change the DKIM attributes for an email identity.
    """

    SigningAttributesOrigin: DkimSigningAttributesOrigin
    SigningAttributes: Optional[DkimSigningAttributes] = None


class PutEmailIdentityFeedbackAttributesRequest(BaseModel):
    """
    A request to set the attributes that control how bounce and complaint events are processed.
    """

    EmailForwardingEnabled: Optional[Enabled] = None


class PutEmailIdentityMailFromAttributesRequest(BaseModel):
    """
    A request to configure the custom MAIL FROM domain for a verified identity.
    """

    MailFromDomain: Optional[MailFromDomainName] = None
    BehaviorOnMxFailure: Optional[BehaviorOnMxFailure] = None


class PutSuppressedDestinationRequest(BaseModel):
    """
    A request to add an email destination to the suppression list for your account.
    """

    EmailAddress: EmailAddress
    Reason: SuppressionListReason


class RawMessageData(BaseModel):
    __root__: Annotated[
        str,
        Field(
            description='<p>The raw email message. The message has to meet the following criteria:</p> <ul> <li> <p>The message has to contain a header and a body, separated by one blank line.</p> </li> <li> <p>All of the required header fields must be present in the message.</p> </li> <li> <p>Each part of a multipart MIME message must be formatted properly.</p> </li> <li> <p>Attachments must be in a file format that the Amazon SES API v2 supports. </p> </li> <li> <p>The entire message must be Base64 encoded.</p> </li> <li> <p>If any of the MIME parts in your message contain content that is outside of the 7-bit ASCII character range, you should encode that content to ensure that recipients\' email clients render the message properly.</p> </li> <li> <p>The length of any single line of text in the message can\'t exceed 1,000 characters. This restriction is defined in <a href="https://tools.ietf.org/html/rfc5321">RFC 5321</a>.</p> </li> </ul>'
        ),
    ]


class RenderedEmailTemplate(BaseModel):
    __root__: Annotated[
        str,
        Field(
            description='The complete MIME message rendered by applying the data in the TemplateData parameter to the template specified in the TemplateName parameter.'
        ),
    ]


class ReplacementTemplate(BaseModel):
    """
    An object which contains <code>ReplacementTemplateData</code> to be used for a specific <code>BulkEmailEntry</code>.
    """

    ReplacementTemplateData: Optional[EmailTemplateData] = None


class ReviewStatus(Enum):
    PENDING = 'PENDING'
    FAILED = 'FAILED'
    GRANTED = 'GRANTED'
    DENIED = 'DENIED'


class SendCustomVerificationEmailRequest(BaseModel):
    """
    Represents a request to send a custom verification email to a specified recipient.
    """

    EmailAddress: EmailAddress
    TemplateName: EmailTemplateName
    ConfigurationSetName: Optional[ConfigurationSetName] = None


class SentLast24Hours(Max24HourSend):
    pass


class SuppressedDestinationAttributes(BaseModel):
    """
    An object that contains additional attributes that are related an email address that is on the suppression list for your account.
    """

    MessageId: Optional[OutboundMessageId] = None
    FeedbackId: Optional[FeedbackId] = None


class SuppressedDestinationSummary(BaseModel):
    """
    A summary that describes the suppressed email address.
    """

    EmailAddress: EmailAddress
    Reason: SuppressionListReason
    LastUpdateTime: Timestamp


class TagValue(EmailAddress):
    pass


class TagKeyList(BaseModel):
    __root__: List[TagKey]


class TestRenderEmailTemplateRequest(BaseModel):
    """
    &gt;Represents a request to create a preview of the MIME content of an email when provided with a template and a set of replacement data.
    """

    TemplateData: EmailTemplateData


class UseDefaultIfPreferenceUnavailable(Enabled):
    pass


class UntagResourceRequest(BaseModel):
    pass


class UpdateCustomVerificationEmailTemplateRequest(BaseModel):
    """
    Represents a request to update an existing custom verification email template.
    """

    FromEmailAddress: EmailAddress
    TemplateSubject: EmailTemplateSubject
    TemplateContent: TemplateContent
    SuccessRedirectionURL: SuccessRedirectionURL
    FailureRedirectionURL: FailureRedirectionURL


class UpdateEmailIdentityPolicyRequest(BaseModel):
    """
    Represents a request to update a sending authorization policy for an identity. Sending authorization is an Amazon SES feature that enables you to authorize other senders to use your identities. For information, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/sending-authorization-identity-owner-tasks-management.html">Amazon SES Developer Guide</a>.
    """

    Policy: Policy


class UpdateEmailTemplateRequest(BaseModel):
    """
    Represents a request to update an email template. For more information, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/send-personalized-email-api.html">Amazon SES Developer Guide</a>.
    """

    TemplateContent: EmailTemplateContent


class Tag(BaseModel):
    """
    <p>An object that defines the tags that are associated with a resource. A <i>tag</i> is a label that you optionally define and associate with a resource. Tags can help you categorize and manage resources in different ways, such as by purpose, owner, environment, or other criteria. A resource can have as many as 50 tags.</p> <p>Each tag consists of a required <i>tag key</i> and an associated <i>tag value</i>, both of which you define. A tag key is a general label that acts as a category for a more specific tag value. A tag value acts as a descriptor within a tag key. A tag key can contain as many as 128 characters. A tag value can contain as many as 256 characters. The characters can be Unicode letters, digits, white space, or one of the following symbols: _ . : / = + -. The following additional restrictions apply to tags:</p> <ul> <li> <p>Tag keys and values are case sensitive.</p> </li> <li> <p>For each associated resource, each tag key must be unique and it can have only one value.</p> </li> <li> <p>The <code>aws:</code> prefix is reserved for use by AWS; you can’t use it in any tag keys or values that you define. In addition, you can't edit or remove tag keys or values that use this prefix. Tags that use this prefix don’t count against the limit of 50 tags per resource.</p> </li> <li> <p>You can associate tags with public or shared resources, but the tags are available only for your AWS account, not any other accounts that share the resource. In addition, the tags are available only for resources that are located in the specified AWS Region for your AWS account.</p> </li> </ul>
    """

    Key: TagKey
    Value: TagValue


class SuppressionListReasons(BaseModel):
    __root__: List[SuppressionListReason]


class EventTypes(BaseModel):
    __root__: List[EventType]


class KinesisFirehoseDestination(BaseModel):
    """
    An object that defines an Amazon Kinesis Data Firehose destination for email events. You can use Amazon Kinesis Data Firehose to stream data to other services, such as Amazon S3 and Amazon Redshift.
    """

    IamRoleArn: AmazonResourceName
    DeliveryStreamArn: AmazonResourceName


class SnsDestination(BaseModel):
    """
    An object that defines an Amazon SNS destination for email events. You can use Amazon SNS to send notification when certain email events occur.
    """

    TopicArn: AmazonResourceName


class PinpointDestination(BaseModel):
    """
    An object that defines an Amazon Pinpoint project destination for email events. You can send email event data to a Amazon Pinpoint project to view metrics using the Transactional Messaging dashboards that are built in to Amazon Pinpoint. For more information, see <a href="https://docs.aws.amazon.com/pinpoint/latest/userguide/analytics-transactional-messages.html">Transactional Messaging Charts</a> in the <i>Amazon Pinpoint User Guide</i>.
    """

    ApplicationArn: Optional[AmazonResourceName] = None


class TopicPreference(BaseModel):
    """
    The contact's preference for being opted-in to or opted-out of a topic.
    """

    TopicName: TopicName
    SubscriptionStatus: SubscriptionStatus


class Topic(BaseModel):
    """
    An interest group, theme, or label within a list. Lists can have multiple topics.
    """

    TopicName: TopicName
    DisplayName: DisplayName
    Description: Optional[Description] = None
    DefaultSubscriptionStatus: SubscriptionStatus


class CreateDeliverabilityTestReportResponse(BaseModel):
    """
    Information about the predictive inbox placement test that you created.
    """

    ReportId: ReportId
    DeliverabilityTestStatus: DeliverabilityTestStatus


class RawMessage(BaseModel):
    """
    Represents the raw content of an email message.
    """

    Data: RawMessageData


class Template(BaseModel):
    """
    An object that defines the email template to use for an email message, and the values to use for any message variables in that template. An <i>email template</i> is a type of message template that contains content that you want to define, save, and reuse in email messages that you send.
    """

    TemplateName: Optional[EmailTemplateName] = None
    TemplateArn: Optional[AmazonResourceName] = None
    TemplateData: Optional[EmailTemplateData] = None


class CreateImportJobResponse(BaseModel):
    """
    An HTTP 200 response if the request succeeds, or an error message if the request fails.
    """

    JobId: Optional[JobId] = None


class SuppressionListDestination(BaseModel):
    """
    An object that contains details about the action of suppression list.
    """

    SuppressionListImportAction: ContactListImportAction


class ContactListDestination(BaseModel):
    """
    An object that contains details about the action of a contact list.
    """

    ContactListName: ContactListName
    ContactListImportAction: ContactListImportAction


class GetBlacklistReportsResponse(BaseModel):
    """
    An object that contains information about blacklist events.
    """

    BlacklistReport: BlacklistReport


class GetCustomVerificationEmailTemplateResponse(BaseModel):
    """
    The following elements are returned by the service.
    """

    TemplateName: Optional[EmailTemplateName] = None
    FromEmailAddress: Optional[EmailAddress] = None
    TemplateSubject: Optional[EmailTemplateSubject] = None
    TemplateContent: Optional[TemplateContent] = None
    SuccessRedirectionURL: Optional[SuccessRedirectionURL] = None
    FailureRedirectionURL: Optional[FailureRedirectionURL] = None


class GetDedicatedIpResponse(BaseModel):
    """
    Information about a dedicated IP address.
    """

    DedicatedIp: Optional[DedicatedIp] = None


class GetDedicatedIpsResponse(BaseModel):
    """
    Information about the dedicated IP addresses that are associated with your AWS account.
    """

    DedicatedIps: Optional[DedicatedIpList] = None
    NextToken: Optional[NextToken] = None


class GetEmailIdentityPoliciesResponse(BaseModel):
    """
    Identity policies associated with email identity.
    """

    Policies: Optional[PolicyMap] = None


class GetEmailTemplateResponse(BaseModel):
    """
    The following element is returned by the service.
    """

    TemplateName: EmailTemplateName
    TemplateContent: EmailTemplateContent


class ListConfigurationSetsResponse(BaseModel):
    """
    A list of configuration sets in your Amazon SES account in the current AWS Region.
    """

    ConfigurationSets: Optional[ConfigurationSetNameList] = None
    NextToken: Optional[NextToken] = None


class ListContactListsResponse(BaseModel):
    ContactLists: Optional[ListOfContactLists] = None
    NextToken: Optional[NextToken] = None


class TopicFilter(BaseModel):
    """
    Used for filtering by a specific topic preference.
    """

    TopicName: Optional[TopicName] = None
    UseDefaultIfPreferenceUnavailable: Optional[
        UseDefaultIfPreferenceUnavailable
    ] = None


class ListCustomVerificationEmailTemplatesResponse(BaseModel):
    """
    The following elements are returned by the service.
    """

    CustomVerificationEmailTemplates: Optional[
        CustomVerificationEmailTemplatesList
    ] = None
    NextToken: Optional[NextToken] = None


class ListDedicatedIpPoolsResponse(BaseModel):
    """
    A list of dedicated IP pools.
    """

    DedicatedIpPools: Optional[ListOfDedicatedIpPools] = None
    NextToken: Optional[NextToken] = None


class ListDeliverabilityTestReportsResponse(BaseModel):
    """
    A list of the predictive inbox placement test reports that are available for your account, regardless of whether or not those tests are complete.
    """

    DeliverabilityTestReports: DeliverabilityTestReports
    NextToken: Optional[NextToken] = None


class ListEmailIdentitiesResponse(BaseModel):
    """
    A list of all of the identities that you've attempted to verify, regardless of whether or not those identities were successfully verified.
    """

    EmailIdentities: Optional[IdentityInfoList] = None
    NextToken: Optional[NextToken] = None


class ListEmailTemplatesResponse(BaseModel):
    """
    The following elements are returned by the service.
    """

    TemplatesMetadata: Optional[EmailTemplateMetadataList] = None
    NextToken: Optional[NextToken] = None


class SendBulkEmailResponse(BaseModel):
    """
    The following data is returned in JSON format by the service.
    """

    BulkEmailEntryResults: BulkEmailEntryResultList


class MessageTag(BaseModel):
    """
    Contains the name and value of a tag that you apply to an email. You can use message tags when you publish email sending events.
    """

    Name: MessageTagName
    Value: MessageTagValue


class SendCustomVerificationEmailResponse(BaseModel):
    """
    The following element is returned by the service.
    """

    MessageId: Optional[OutboundMessageId] = None


class SendEmailResponse(SendCustomVerificationEmailResponse):
    """
    A unique message ID that you receive when an email is accepted for sending.
    """

    pass


class TestRenderEmailTemplateResponse(BaseModel):
    """
    The following element is returned by the service.
    """

    RenderedTemplate: RenderedEmailTemplate


class ReviewDetails(BaseModel):
    """
    An object that contains information about your account details review.
    """

    Status: Optional[ReviewStatus] = None
    CaseId: Optional[CaseId] = None


class AccountDetails(BaseModel):
    """
    An object that contains information about your account details.
    """

    MailType: Optional[MailType] = None
    WebsiteURL: Optional[WebsiteURL] = None
    ContactLanguage: Optional[ContactLanguage] = None
    UseCaseDescription: Optional[UseCaseDescription] = None
    AdditionalContactEmailAddresses: Optional[AdditionalContactEmailAddresses] = None
    ReviewDetails: Optional[ReviewDetails] = None


class BlacklistEntry(BaseModel):
    """
    An object that contains information about a blacklisting event that impacts one of the dedicated IP addresses that is associated with your account.
    """

    RblName: Optional[RblName] = None
    ListingTime: Optional[Timestamp] = None
    Description: Optional[BlacklistingDescription] = None


class BlacklistEntries(BaseModel):
    __root__: List[BlacklistEntry]


class Content(BaseModel):
    """
    An object that represents the content of the email, and optionally a character set specification.
    """

    Data: MessageData
    Charset: Optional[Charset] = None


class Body(BaseModel):
    """
    Represents the body of the email message.
    """

    Text: Optional[Content] = None
    Html: Optional[Content] = None


class BulkEmailContent(BaseModel):
    """
    An object that contains the body of the message. You can specify a template message.
    """

    Template: Optional[Template] = None


class MessageTagList(BaseModel):
    """
    A list of message tags.
    """

    __root__: Annotated[List[MessageTag], Field(description='A list of message tags.')]


class ReplacementEmailContent(BaseModel):
    """
    The <code>ReplaceEmailContent</code> object to be used for a specific <code>BulkEmailEntry</code>. The <code>ReplacementTemplate</code> can be specified within this object.
    """

    ReplacementTemplate: Optional[ReplacementTemplate] = None


class CloudWatchDimensionConfigurations(BaseModel):
    __root__: List[CloudWatchDimensionConfiguration]


class TopicPreferenceList(BaseModel):
    __root__: List[TopicPreference]


class Contact(BaseModel):
    """
    A contact is the end-user who is receiving the email.
    """

    EmailAddress: Optional[EmailAddress] = None
    TopicPreferences: Optional[TopicPreferenceList] = None
    TopicDefaultPreferences: Optional[TopicPreferenceList] = None
    UnsubscribeAll: Optional[UnsubscribeAll] = None
    LastUpdatedTimestamp: Optional[Timestamp] = None


class TagList(BaseModel):
    __root__: List[Tag]


class SuppressionOptions(BaseModel):
    """
    An object that contains information about the suppression list preferences for your account.
    """

    SuppressedReasons: Optional[SuppressionListReasons] = None


class CreateConfigurationSetRequest(BaseModel):
    """
    A request to create a configuration set.
    """

    ConfigurationSetName: ConfigurationSetName
    TrackingOptions: Optional[TrackingOptions] = None
    DeliveryOptions: Optional[DeliveryOptions] = None
    ReputationOptions: Optional[ReputationOptions] = None
    SendingOptions: Optional[SendingOptions] = None
    Tags: Optional[TagList] = None
    SuppressionOptions: Optional[SuppressionOptions] = None


class Topics(BaseModel):
    __root__: List[Topic]


class CreateContactListRequest(BaseModel):
    ContactListName: ContactListName
    Topics: Optional[Topics] = None
    Description: Optional[Description] = None
    Tags: Optional[TagList] = None


class CreateContactRequest(BaseModel):
    EmailAddress: EmailAddress
    TopicPreferences: Optional[TopicPreferenceList] = None
    UnsubscribeAll: Optional[UnsubscribeAll] = None
    AttributesData: Optional[AttributesData] = None


class CreateDedicatedIpPoolRequest(BaseModel):
    """
    A request to create a new dedicated IP pool.
    """

    PoolName: PoolName
    Tags: Optional[TagList] = None


class CreateEmailIdentityRequest(BaseModel):
    """
    A request to begin the verification process for an email identity (an email address or domain).
    """

    EmailIdentity: Identity
    Tags: Optional[TagList] = None
    DkimSigningAttributes: Optional[DkimSigningAttributes] = None
    ConfigurationSetName: Optional[ConfigurationSetName] = None


class ImportDestination(BaseModel):
    """
    An object that contains details about the resource destination the import job is going to target.
    """

    SuppressionListDestination: Optional[SuppressionListDestination] = None
    ContactListDestination: Optional[ContactListDestination] = None


class CreateImportJobRequest(BaseModel):
    """
    Represents a request to create an import job from a data source for a data destination.
    """

    ImportDestination: ImportDestination
    ImportDataSource: ImportDataSource


class VolumeStatistics(BaseModel):
    """
    An object that contains information about the amount of email that was delivered to recipients.
    """

    InboxRawCount: Optional[Volume] = None
    SpamRawCount: Optional[Volume] = None
    ProjectedInbox: Optional[Volume] = None
    ProjectedSpam: Optional[Volume] = None


class DomainIspPlacements(BaseModel):
    __root__: List[DomainIspPlacement]


class DailyVolume(BaseModel):
    """
    An object that contains information about the volume of email sent on each day of the analysis period.
    """

    StartDate: Optional[Timestamp] = None
    VolumeStatistics: Optional[VolumeStatistics] = None
    DomainIspPlacements: Optional[DomainIspPlacements] = None


class DailyVolumes(BaseModel):
    __root__: List[DailyVolume]


class DnsTokenList(BaseModel):
    __root__: List[DnsToken]


class Esps(BaseModel):
    __root__: List[Esp]


class DomainDeliverabilityCampaign(BaseModel):
    """
    An object that contains the deliverability data for a specific campaign. This data is available for a campaign only if the campaign sent email by using a domain that the Deliverability dashboard is enabled for (<code>PutDeliverabilityDashboardOption</code> operation).
    """

    CampaignId: Optional[CampaignId] = None
    ImageUrl: Optional[ImageUrl] = None
    Subject: Optional[Subject3] = None
    FromAddress: Optional[Identity] = None
    SendingIps: Optional[IpList] = None
    FirstSeenDateTime: Optional[Timestamp] = None
    LastSeenDateTime: Optional[Timestamp] = None
    InboxCount: Optional[Volume] = None
    SpamCount: Optional[Volume] = None
    ReadRate: Optional[Percentage] = None
    DeleteRate: Optional[Percentage] = None
    ReadDeleteRate: Optional[Percentage] = None
    ProjectedVolume: Optional[Volume] = None
    Esps: Optional[Esps] = None


class DomainDeliverabilityCampaignList(BaseModel):
    """
    <p/>
    """

    __root__: Annotated[List[DomainDeliverabilityCampaign], Field(description='<p/>')]


class InboxPlacementTrackingOption(BaseModel):
    """
    An object that contains information about the inbox placement data settings for a verified domain that’s associated with your AWS account. This data is available only if you enabled the Deliverability dashboard for the domain.
    """

    Global: Optional[Enabled] = None
    TrackedIsps: Optional[IspNameList] = None


class SendQuota(BaseModel):
    """
    An object that contains information about the per-day and per-second sending limits for your Amazon SES account in the current AWS Region.
    """

    Max24HourSend: Optional[Max24HourSend] = None
    MaxSendRate: Optional[MaxSendRate] = None
    SentLast24Hours: Optional[SentLast24Hours] = None


class SuppressionAttributes(SuppressionOptions):
    """
    An object that contains information about the email address suppression preferences for your account in the current AWS Region.
    """

    pass


class IspPlacements(BaseModel):
    __root__: List[IspPlacement]


class OverallVolume(BaseModel):
    """
    An object that contains information about email that was sent from the selected domain.
    """

    VolumeStatistics: Optional[VolumeStatistics] = None
    ReadRatePercent: Optional[Percentage] = None
    DomainIspPlacements: Optional[DomainIspPlacements] = None


class MailFromAttributes(BaseModel):
    """
    A list of attributes that are associated with a MAIL FROM domain.
    """

    MailFromDomain: MailFromDomainName
    MailFromDomainStatus: MailFromDomainStatus
    BehaviorOnMxFailure: BehaviorOnMxFailure


class SuppressedDestination(BaseModel):
    """
    An object that contains information about an email address that is on the suppression list for your account.
    """

    EmailAddress: EmailAddress
    Reason: SuppressionListReason
    LastUpdateTime: Timestamp
    Attributes: Optional[SuppressedDestinationAttributes] = None


class ImportJobSummary(BaseModel):
    """
    A summary of the import job.
    """

    JobId: Optional[JobId] = None
    ImportDestination: Optional[ImportDestination] = None
    JobStatus: Optional[JobStatus] = None
    CreatedTimestamp: Optional[Timestamp] = None


class ImportJobSummaryList(BaseModel):
    """
    A list of the import job summaries.
    """

    __root__: Annotated[
        List[ImportJobSummary], Field(description='A list of the import job summaries.')
    ]


class ListContactsFilter(BaseModel):
    """
    A filter that can be applied to a list of contacts.
    """

    FilteredStatus: Optional[SubscriptionStatus] = None
    TopicFilter: Optional[TopicFilter] = None


class ListContactsRequest(BaseModel):
    Filter: Optional[ListContactsFilter] = None


class ListOfContacts(BaseModel):
    __root__: List[Contact]


class SuppressedDestinationSummaries(BaseModel):
    __root__: List[SuppressedDestinationSummary]


class PutAccountSuppressionAttributesRequest(BaseModel):
    """
    A request to change your account's suppression preferences.
    """

    SuppressedReasons: Optional[SuppressionListReasons] = None


class PutConfigurationSetSuppressionOptionsRequest(BaseModel):
    """
    A request to change the account suppression list preferences for a specific configuration set.
    """

    SuppressedReasons: Optional[SuppressionListReasons] = None


class TagResourceRequest(BaseModel):
    ResourceArn: AmazonResourceName
    Tags: TagList


class UpdateContactListRequest(BaseModel):
    Topics: Optional[Topics] = None
    Description: Optional[Description] = None


class UpdateContactRequest(BaseModel):
    TopicPreferences: Optional[TopicPreferenceList] = None
    UnsubscribeAll: Optional[UnsubscribeAll] = None
    AttributesData: Optional[AttributesData] = None


class CloudWatchDestination(BaseModel):
    """
    An object that defines an Amazon CloudWatch destination for email events. You can use Amazon CloudWatch to monitor and gain insights on your email sending metrics.
    """

    DimensionConfigurations: CloudWatchDimensionConfigurations


class Message(BaseModel):
    """
    Represents the email message that you're sending. The <code>Message</code> object consists of a subject line and a message body.
    """

    Subject: Content
    Body: Body


class GetAccountResponse(BaseModel):
    """
    A list of details about the email-sending capabilities of your Amazon SES account in the current AWS Region.
    """

    DedicatedIpAutoWarmupEnabled: Optional[Enabled] = None
    EnforcementStatus: Optional[GeneralEnforcementStatus] = None
    ProductionAccessEnabled: Optional[Enabled] = None
    SendQuota: Optional[SendQuota] = None
    SendingEnabled: Optional[Enabled] = None
    SuppressionAttributes: Optional[SuppressionAttributes] = None
    Details: Optional[AccountDetails] = None


class GetConfigurationSetResponse(BaseModel):
    """
    Information about a configuration set.
    """

    ConfigurationSetName: Optional[ConfigurationSetName] = None
    TrackingOptions: Optional[TrackingOptions] = None
    DeliveryOptions: Optional[DeliveryOptions] = None
    ReputationOptions: Optional[ReputationOptions] = None
    SendingOptions: Optional[SendingOptions] = None
    Tags: Optional[TagList] = None
    SuppressionOptions: Optional[SuppressionOptions] = None


class GetContactResponse(BaseModel):
    ContactListName: Optional[ContactListName] = None
    EmailAddress: Optional[EmailAddress] = None
    TopicPreferences: Optional[TopicPreferenceList] = None
    TopicDefaultPreferences: Optional[TopicPreferenceList] = None
    UnsubscribeAll: Optional[UnsubscribeAll] = None
    AttributesData: Optional[AttributesData] = None
    CreatedTimestamp: Optional[Timestamp] = None
    LastUpdatedTimestamp: Optional[Timestamp] = None


class GetContactListResponse(BaseModel):
    ContactListName: Optional[ContactListName] = None
    Topics: Optional[Topics] = None
    Description: Optional[Description] = None
    CreatedTimestamp: Optional[Timestamp] = None
    LastUpdatedTimestamp: Optional[Timestamp] = None
    Tags: Optional[TagList] = None


class GetDeliverabilityTestReportResponse(BaseModel):
    """
    The results of the predictive inbox placement test.
    """

    DeliverabilityTestReport: DeliverabilityTestReport
    OverallPlacement: PlacementStatistics
    IspPlacements: IspPlacements
    Message: Optional[MessageContent] = None
    Tags: Optional[TagList] = None


class GetDomainDeliverabilityCampaignResponse(BaseModel):
    """
    An object that contains all the deliverability data for a specific campaign. This data is available for a campaign only if the campaign sent email by using a domain that the Deliverability dashboard is enabled for.
    """

    DomainDeliverabilityCampaign: DomainDeliverabilityCampaign


class GetDomainStatisticsReportResponse(BaseModel):
    """
    An object that includes statistics that are related to the domain that you specified.
    """

    OverallVolume: OverallVolume
    DailyVolumes: DailyVolumes


class GetImportJobResponse(BaseModel):
    """
    An HTTP 200 response if the request succeeds, or an error message if the request fails.
    """

    JobId: Optional[JobId] = None
    ImportDestination: Optional[ImportDestination] = None
    ImportDataSource: Optional[ImportDataSource] = None
    FailureInfo: Optional[FailureInfo] = None
    JobStatus: Optional[JobStatus] = None
    CreatedTimestamp: Optional[Timestamp] = None
    CompletedTimestamp: Optional[Timestamp] = None
    ProcessedRecordsCount: Optional[ProcessedRecordsCount] = None
    FailedRecordsCount: Optional[FailedRecordsCount] = None


class GetSuppressedDestinationResponse(BaseModel):
    """
    Information about the suppressed email address.
    """

    SuppressedDestination: SuppressedDestination


class ListContactsResponse(BaseModel):
    Contacts: Optional[ListOfContacts] = None
    NextToken: Optional[NextToken] = None


class ListDomainDeliverabilityCampaignsResponse(BaseModel):
    """
    An array of objects that provide deliverability data for all the campaigns that used a specific domain to send email during a specified time range. This data is available for a domain only if you enabled the Deliverability dashboard for the domain.
    """

    DomainDeliverabilityCampaigns: DomainDeliverabilityCampaignList
    NextToken: Optional[NextToken] = None


class ListImportJobsResponse(BaseModel):
    """
    An HTTP 200 response if the request succeeds, or an error message if the request fails.
    """

    ImportJobs: Optional[ImportJobSummaryList] = None
    NextToken: Optional[NextToken] = None


class ListSuppressedDestinationsResponse(BaseModel):
    """
    A list of suppressed email addresses.
    """

    SuppressedDestinationSummaries: Optional[SuppressedDestinationSummaries] = None
    NextToken: Optional[NextToken] = None


class ListTagsForResourceResponse(BaseModel):
    Tags: TagList


class DomainDeliverabilityTrackingOption(BaseModel):
    """
    An object that contains information about the Deliverability dashboard subscription for a verified domain that you use to send email and currently has an active Deliverability dashboard subscription. If a Deliverability dashboard subscription is active for a domain, you gain access to reputation, inbox placement, and other metrics for the domain.
    """

    Domain: Optional[Domain] = None
    SubscriptionStartDate: Optional[Timestamp] = None
    InboxPlacementTrackingOption: Optional[InboxPlacementTrackingOption] = None


class PutEmailIdentityDkimSigningAttributesResponse(BaseModel):
    """
    <p>If the action is successful, the service sends back an HTTP 200 response.</p> <p>The following data is returned in JSON format by the service.</p>
    """

    DkimStatus: Optional[DkimStatus] = None
    DkimTokens: Optional[DnsTokenList] = None


class BulkEmailEntry(BaseModel):
    Destination: Destination
    ReplacementTags: Optional[MessageTagList] = None
    ReplacementEmailContent: Optional[ReplacementEmailContent] = None


class BulkEmailEntryList(BaseModel):
    """
    A list of <code>BulkEmailEntry</code> objects.
    """

    __root__: Annotated[
        List[BulkEmailEntry],
        Field(description='A list of <code>BulkEmailEntry</code> objects.'),
    ]


class EventDestinationDefinition(BaseModel):
    """
    An object that defines the event destination. Specifically, it defines which services receive events from emails sent using the configuration set that the event destination is associated with. Also defines the types of events that are sent to the event destination.
    """

    Enabled: Optional[Enabled] = None
    MatchingEventTypes: Optional[EventTypes] = None
    KinesisFirehoseDestination: Optional[KinesisFirehoseDestination] = None
    CloudWatchDestination: Optional[CloudWatchDestination] = None
    SnsDestination: Optional[SnsDestination] = None
    PinpointDestination: Optional[PinpointDestination] = None


class CreateConfigurationSetEventDestinationRequest(BaseModel):
    """
    A request to add an event destination to a configuration set.
    """

    EventDestinationName: EventDestinationName
    EventDestination: EventDestinationDefinition


class EmailContent(BaseModel):
    """
    An object that defines the entire content of the email, including the message headers and the body content. You can create a simple email message, in which you specify the subject and the text and HTML versions of the message body. You can also create raw messages, in which you specify a complete MIME-formatted message. Raw messages can include attachments and custom headers.
    """

    Simple: Optional[Message] = None
    Raw: Optional[RawMessage] = None
    Template: Optional[Template] = None


class CreateDeliverabilityTestReportRequest(BaseModel):
    """
    A request to perform a predictive inbox placement test. Predictive inbox placement tests can help you predict how your messages will be handled by various email providers around the world. When you perform a predictive inbox placement test, you provide a sample message that contains the content that you plan to send to your customers. We send that message to special email addresses spread across several major email providers around the world. The test takes about 24 hours to complete. When the test is complete, you can use the <code>GetDeliverabilityTestReport</code> operation to view the results of the test.
    """

    ReportName: Optional[ReportName] = None
    FromEmailAddress: EmailAddress
    Content: EmailContent
    Tags: Optional[TagList] = None


class DkimAttributes(BaseModel):
    """
    <p>An object that contains information about the DKIM authentication status for an email identity.</p> <p>Amazon SES determines the authentication status by searching for specific records in the DNS configuration for the domain. If you used <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/easy-dkim.html">Easy DKIM</a> to set up DKIM authentication, Amazon SES tries to find three unique CNAME records in the DNS configuration for your domain. If you provided a public key to perform DKIM authentication, Amazon SES tries to find a TXT record that uses the selector that you specified. The value of the TXT record must be a public key that's paired with the private key that you specified in the process of creating the identity</p>
    """

    SigningEnabled: Optional[Enabled] = None
    Status: Optional[DkimStatus] = None
    Tokens: Optional[DnsTokenList] = None
    SigningAttributesOrigin: Optional[DkimSigningAttributesOrigin] = None


class DomainDeliverabilityTrackingOptions(BaseModel):
    """
    An object that contains information about the Deliverability dashboard subscription for a verified domain that you use to send email and currently has an active Deliverability dashboard subscription. If a Deliverability dashboard subscription is active for a domain, you gain access to reputation, inbox placement, and other metrics for the domain.
    """

    __root__: Annotated[
        List[DomainDeliverabilityTrackingOption],
        Field(
            description='An object that contains information about the Deliverability dashboard subscription for a verified domain that you use to send email and currently has an active Deliverability dashboard subscription. If a Deliverability dashboard subscription is active for a domain, you gain access to reputation, inbox placement, and other metrics for the domain.'
        ),
    ]


class EventDestination1(BaseModel):
    """
    In the Amazon SES API v2, <i>events</i> include message sends, deliveries, opens, clicks, bounces, complaints and delivery delays. <i>Event destinations</i> are places that you can send information about these events to. For example, you can send event data to Amazon SNS to receive notifications when you receive bounces or complaints, or you can use Amazon Kinesis Data Firehose to stream data to Amazon S3 for long-term storage.
    """

    Name: EventDestinationName
    Enabled: Optional[Enabled] = None
    MatchingEventTypes: EventTypes
    KinesisFirehoseDestination: Optional[KinesisFirehoseDestination] = None
    CloudWatchDestination: Optional[CloudWatchDestination] = None
    SnsDestination: Optional[SnsDestination] = None
    PinpointDestination: Optional[PinpointDestination] = None


class EventDestinations(BaseModel):
    __root__: List[EventDestination1]


class PutDeliverabilityDashboardOptionRequest(BaseModel):
    """
    <p>Enable or disable the Deliverability dashboard. When you enable the Deliverability dashboard, you gain access to reputation, deliverability, and other metrics for the domains that you use to send email using Amazon SES API v2. You also gain the ability to perform predictive inbox placement tests.</p> <p>When you use the Deliverability dashboard, you pay a monthly subscription charge, in addition to any other fees that you accrue by using Amazon SES and other AWS services. For more information about the features and cost of a Deliverability dashboard subscription, see <a href="http://aws.amazon.com/pinpoint/pricing/">Amazon Pinpoint Pricing</a>.</p>
    """

    DashboardEnabled: Enabled
    SubscribedDomains: Optional[DomainDeliverabilityTrackingOptions] = None


class SendBulkEmailRequest(BaseModel):
    """
    Represents a request to send email messages to multiple destinations using Amazon SES. For more information, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/send-personalized-email-api.html">Amazon SES Developer Guide</a>.
    """

    FromEmailAddress: Optional[EmailAddress] = None
    FromEmailAddressIdentityArn: Optional[AmazonResourceName] = None
    ReplyToAddresses: Optional[EmailAddressList] = None
    FeedbackForwardingEmailAddress: Optional[EmailAddress] = None
    FeedbackForwardingEmailAddressIdentityArn: Optional[AmazonResourceName] = None
    DefaultEmailTags: Optional[MessageTagList] = None
    DefaultContent: BulkEmailContent
    BulkEmailEntries: BulkEmailEntryList
    ConfigurationSetName: Optional[ConfigurationSetName] = None


class SendEmailRequest(BaseModel):
    """
    Represents a request to send a single formatted email using Amazon SES. For more information, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/send-email-formatted.html">Amazon SES Developer Guide</a>.
    """

    FromEmailAddress: Optional[EmailAddress] = None
    FromEmailAddressIdentityArn: Optional[AmazonResourceName] = None
    Destination: Optional[Destination] = None
    ReplyToAddresses: Optional[EmailAddressList] = None
    FeedbackForwardingEmailAddress: Optional[EmailAddress] = None
    FeedbackForwardingEmailAddressIdentityArn: Optional[AmazonResourceName] = None
    Content: EmailContent
    EmailTags: Optional[MessageTagList] = None
    ConfigurationSetName: Optional[ConfigurationSetName] = None
    ListManagementOptions: Optional[ListManagementOptions] = None


class UpdateConfigurationSetEventDestinationRequest(BaseModel):
    """
    A request to change the settings for an event destination for a configuration set.
    """

    EventDestination: EventDestinationDefinition


class CreateEmailIdentityResponse(BaseModel):
    """
    <p>If the email identity is a domain, this object contains information about the DKIM verification status for the domain.</p> <p>If the email identity is an email address, this object is empty. </p>
    """

    IdentityType: Optional[IdentityType] = None
    VerifiedForSendingStatus: Optional[Enabled] = None
    DkimAttributes: Optional[DkimAttributes] = None


class GetConfigurationSetEventDestinationsResponse(BaseModel):
    """
    Information about an event destination for a configuration set.
    """

    EventDestinations: Optional[EventDestinations] = None


class GetDeliverabilityDashboardOptionsResponse(BaseModel):
    """
    An object that shows the status of the Deliverability dashboard.
    """

    DashboardEnabled: Enabled
    SubscriptionExpiryDate: Optional[Timestamp] = None
    AccountStatus: Optional[DeliverabilityDashboardAccountStatus] = None
    ActiveSubscribedDomains: Optional[DomainDeliverabilityTrackingOptions] = None
    PendingExpirationSubscribedDomains: Optional[
        DomainDeliverabilityTrackingOptions
    ] = None


class GetEmailIdentityResponse(BaseModel):
    """
    Details about an email identity.
    """

    IdentityType: Optional[IdentityType] = None
    FeedbackForwardingStatus: Optional[Enabled] = None
    VerifiedForSendingStatus: Optional[Enabled] = None
    DkimAttributes: Optional[DkimAttributes] = None
    MailFromAttributes: Optional[MailFromAttributes] = None
    Policies: Optional[PolicyMap] = None
    Tags: Optional[TagList] = None
    ConfigurationSetName: Optional[ConfigurationSetName] = None
