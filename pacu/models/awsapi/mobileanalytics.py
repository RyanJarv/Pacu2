# generated by datamodel-codegen:
#   filename:  openapi.yaml
#   timestamp: 2021-12-31T02:53:06+00:00

from __future__ import annotations

from typing import Annotated, List, Optional

from pydantic import BaseModel, Extra, Field


class String(BaseModel):
    __root__: str


class Double(BaseModel):
    __root__: float


class String50Chars(BaseModel):
    __root__: Annotated[str, Field(max_length=50, min_length=1)]


class ISO8601Timestamp(String):
    pass


class String10Chars(BaseModel):
    __root__: Annotated[str, Field(max_length=10, min_length=1)]


class MapOfStringToString(BaseModel):
    pass

    class Config:
        extra = Extra.allow


class MapOfStringToNumber(BaseModel):
    pass

    class Config:
        extra = Extra.allow


class Long(BaseModel):
    __root__: int


class String0to1000Chars(BaseModel):
    __root__: Annotated[str, Field(max_length=1000, min_length=0)]


class BadRequestException(BaseModel):
    """
    An exception object returned when a request fails.
    """

    message: Optional[String] = None


class Session(BaseModel):
    """
    Describes the session. Session information is required on ALL events.
    """

    id: Optional[String50Chars] = None
    duration: Optional[Long] = None
    startTimestamp: Optional[ISO8601Timestamp] = None
    stopTimestamp: Optional[ISO8601Timestamp] = None


class Event(BaseModel):
    """
    A JSON object representing a batch of unique event occurrences in your app.
    """

    eventType: String50Chars
    timestamp: ISO8601Timestamp
    session: Optional[Session] = None
    version: Optional[String10Chars] = None
    attributes: Optional[MapOfStringToString] = None
    metrics: Optional[MapOfStringToNumber] = None


class EventListDefinition(BaseModel):
    __root__: List[Event]


class PutEventsInput(BaseModel):
    """
    A container for the data needed for a PutEvent operation
    """

    events: EventListDefinition
