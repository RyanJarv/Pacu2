# generated by datamodel-codegen:
#   filename:  openapi.yaml
#   timestamp: 2021-12-31T02:47:34+00:00

from __future__ import annotations

from datetime import datetime
from enum import Enum
from typing import Annotated, Any, List, Optional

from pydantic import BaseModel, Extra, Field


class PolicyTypeValues(Enum):
    EBS_SNAPSHOT_MANAGEMENT = 'EBS_SNAPSHOT_MANAGEMENT'
    IMAGE_MANAGEMENT = 'IMAGE_MANAGEMENT'
    EVENT_BASED_POLICY = 'EVENT_BASED_POLICY'


class TagValue(BaseModel):
    __root__: Annotated[str, Field(max_length=256, regex='[\\p{all}]*')]


class InvalidRequestException(BaseModel):
    __root__: Any


class LimitExceededException(InvalidRequestException):
    pass


class InternalServerException(InvalidRequestException):
    pass


class DeleteLifecyclePolicyResponse(BaseModel):
    pass


class ResourceNotFoundException(InvalidRequestException):
    pass


class PolicyId(BaseModel):
    __root__: Annotated[
        str, Field(max_length=64, min_length=0, regex='policy-[A-Za-z0-9]+')
    ]


class ResourceTypeValues(Enum):
    VOLUME = 'VOLUME'
    INSTANCE = 'INSTANCE'


class TagFilter(BaseModel):
    __root__: Annotated[str, Field(max_length=256, min_length=0, regex='[\\p{all}]*')]


class TagResourceResponse(DeleteLifecyclePolicyResponse):
    pass


class UntagResourceResponse(DeleteLifecyclePolicyResponse):
    pass


class TagKey(BaseModel):
    __root__: Annotated[
        str, Field(max_length=128, min_length=1, regex='^(?!aws:)[a-zA-Z+-=._:/]+$')
    ]


class UpdateLifecyclePolicyResponse(DeleteLifecyclePolicyResponse):
    pass


class ActionName(BaseModel):
    __root__: Annotated[
        str, Field(max_length=120, min_length=0, regex='[0-9A-Za-z _-]+')
    ]


class AvailabilityZone(BaseModel):
    __root__: Annotated[
        str, Field(max_length=16, min_length=0, regex='([a-z]+-){2,3}\\d[a-z]')
    ]


class AvailabilityZoneList(BaseModel):
    __root__: Annotated[List[AvailabilityZone], Field(max_items=10, min_items=1)]


class AwsAccountId(BaseModel):
    __root__: Annotated[str, Field(max_length=12, min_length=12, regex='^[0-9]{12}$')]


class CmkArn(BaseModel):
    __root__: Annotated[
        str,
        Field(
            max_length=2048,
            min_length=0,
            regex='arn:aws(-[a-z]{1,3}){0,2}:kms:([a-z]+-){2,3}\\d:\\d+:key/.*',
        ),
    ]


class CopyTags(BaseModel):
    __root__: bool


class CopyTagsNullable(CopyTags):
    pass


class Count(BaseModel):
    __root__: Annotated[int, Field(ge=1.0, le=1000.0)]


class ExecutionRoleArn(BaseModel):
    __root__: Annotated[
        str,
        Field(
            max_length=2048,
            min_length=0,
            regex='arn:aws(-[a-z]{1,3}){0,2}:iam::\\d+:role/.*',
        ),
    ]


class PolicyDescription(BaseModel):
    __root__: Annotated[
        str, Field(max_length=500, min_length=0, regex='[0-9A-Za-z _-]+')
    ]


class SettablePolicyStateValues(Enum):
    ENABLED = 'ENABLED'
    DISABLED = 'DISABLED'


class TagMap(BaseModel):
    pass

    class Config:
        extra = Extra.allow


class LocationValues(Enum):
    CLOUD = 'CLOUD'
    OUTPOST_LOCAL = 'OUTPOST_LOCAL'


class Interval(BaseModel):
    __root__: Annotated[int, Field(ge=1.0)]


class IntervalUnitValues(Enum):
    HOURS = 'HOURS'


class CronExpression(BaseModel):
    __root__: Annotated[
        str, Field(max_length=106, min_length=17, regex='cron\\([^\\n]{11,100}\\)')
    ]


class Target(BaseModel):
    __root__: Annotated[
        str, Field(max_length=2048, min_length=0, regex='^[\\w:\\-\\/\\*]+$')
    ]


class RetentionIntervalUnitValues(Enum):
    DAYS = 'DAYS'
    WEEKS = 'WEEKS'
    MONTHS = 'MONTHS'
    YEARS = 'YEARS'


class CrossRegionCopyDeprecateRule(BaseModel):
    """
    Specifies an AMI deprecation rule for cross-Region AMI copies created by a cross-Region copy rule.
    """

    Interval: Optional[Interval] = None
    IntervalUnit: Optional[RetentionIntervalUnitValues] = None


class TargetRegion(BaseModel):
    __root__: Annotated[
        str, Field(max_length=16, min_length=0, regex='([a-z]+-){2,3}\\d')
    ]


class Encrypted(CopyTags):
    pass


class DeleteLifecyclePolicyRequest(BaseModel):
    pass


class DeprecateRule1(BaseModel):
    """
    Specifies an AMI deprecation rule for a schedule.
    """

    Count: Optional[Count] = None
    Interval: Optional[Interval] = None
    IntervalUnit: Optional[RetentionIntervalUnitValues] = None


class DescriptionRegex(BaseModel):
    __root__: Annotated[str, Field(max_length=1000, min_length=0, regex='[\\p{all}]*')]


class EventTypeValues(Enum):
    shareSnapshot = 'shareSnapshot'


class SnapshotOwnerList(BaseModel):
    __root__: Annotated[List[AwsAccountId], Field(max_items=50, min_items=0)]


class EventParameters(BaseModel):
    """
    Specifies an event that triggers an event-based policy.
    """

    EventType: EventTypeValues
    SnapshotOwner: SnapshotOwnerList
    DescriptionRegex: DescriptionRegex


class EventSourceValues(Enum):
    MANAGED_CWE = 'MANAGED_CWE'


class ExcludeBootVolume(CopyTags):
    pass


class FastRestoreRule(BaseModel):
    """
    Specifies a rule for enabling fast snapshot restore. You can enable fast snapshot restore based on either a count or a time interval.
    """

    Count: Optional[Count] = None
    Interval: Optional[Interval] = None
    IntervalUnit: Optional[RetentionIntervalUnitValues] = None
    AvailabilityZones: AvailabilityZoneList


class PolicyIdList(BaseModel):
    __root__: List[PolicyId]


class GettablePolicyStateValues(Enum):
    ENABLED = 'ENABLED'
    DISABLED = 'DISABLED'
    ERROR = 'ERROR'


class TargetTagsFilterList(BaseModel):
    __root__: Annotated[List[TagFilter], Field(max_items=50, min_items=1)]


class TagsToAddFilterList(BaseModel):
    __root__: Annotated[List[TagFilter], Field(max_items=50, min_items=0)]


class GetLifecyclePoliciesRequest(BaseModel):
    pass


class GetLifecyclePolicyRequest(BaseModel):
    pass


class StatusMessage(BaseModel):
    __root__: Annotated[str, Field(max_length=500, min_length=0, regex='[\\p{all}]*')]


class Timestamp(BaseModel):
    __root__: datetime


class PolicyArn(BaseModel):
    __root__: Annotated[
        str,
        Field(
            max_length=2048,
            min_length=0,
            regex='^arn:aws(-[a-z]{1,3}){0,2}:dlm:[A-Za-z0-9_/.-]{0,63}:\\d+:policy/[0-9A-Za-z_-]{1,128}$',
        ),
    ]


class LifecyclePolicySummary(BaseModel):
    """
    Summary information about a lifecycle policy.
    """

    PolicyId: Optional[PolicyId] = None
    Description: Optional[PolicyDescription] = None
    State: Optional[GettablePolicyStateValues] = None
    Tags: Optional[TagMap] = None
    PolicyType: Optional[PolicyTypeValues] = None


class ListTagsForResourceRequest(BaseModel):
    pass


class NoReboot(CopyTags):
    pass


class ResourceLocationValues(Enum):
    CLOUD = 'CLOUD'
    OUTPOST = 'OUTPOST'


class RetainRule1(DeprecateRule1):
    """
    Specifies the retention rule for a lifecycle policy. You can retain snapshots based on either a count or a time interval.
    """

    pass


class ScheduleName(ActionName):
    pass


class ShareTargetAccountList(BaseModel):
    __root__: Annotated[List[AwsAccountId], Field(min_items=1)]


class ShareRule(BaseModel):
    """
    Specifies a rule for sharing snapshots across Amazon Web Services accounts.
    """

    TargetAccounts: ShareTargetAccountList
    UnshareInterval: Optional[Interval] = None
    UnshareIntervalUnit: Optional[RetentionIntervalUnitValues] = None


class String(StatusMessage):
    pass


class Tag(BaseModel):
    """
    Specifies a tag for a resource.
    """

    Key: String
    Value: String


class TagKeyList(BaseModel):
    __root__: Annotated[List[TagKey], Field(max_items=200, min_items=1)]


class TagResourceRequest(BaseModel):
    Tags: TagMap


class Time(BaseModel):
    __root__: Annotated[
        str,
        Field(max_length=5, min_length=5, regex='^(0[0-9]|1[0-9]|2[0-3]):[0-5][0-9]$'),
    ]


class UntagResourceRequest(BaseModel):
    pass


class CreateLifecyclePolicyResponse(BaseModel):
    PolicyId: Optional[PolicyId] = None


class ResourceTypeValuesList(BaseModel):
    __root__: Annotated[List[ResourceTypeValues], Field(max_items=1, min_items=1)]


class ResourceLocationList(BaseModel):
    __root__: Annotated[List[ResourceLocationValues], Field(max_items=1, min_items=1)]


class TargetTagList(BaseModel):
    __root__: Annotated[List[Tag], Field(max_items=50, min_items=1)]


class Parameters(BaseModel):
    """
    Specifies optional parameters to add to a policy. The set of valid parameters depends on the combination of policy type and resource type.
    """

    ExcludeBootVolume: Optional[ExcludeBootVolume] = None
    NoReboot: Optional[NoReboot] = None


class EventSource(BaseModel):
    """
    Specifies an event that triggers an event-based policy.
    """

    Type: EventSourceValues
    Parameters: Optional[EventParameters] = None


class ListTagsForResourceResponse(BaseModel):
    Tags: Optional[TagMap] = None


class TimesList(BaseModel):
    __root__: Annotated[List[Time], Field(max_items=1)]


class CreateRule(BaseModel):
    """
    <p>Specifies when to create snapshots of EBS volumes.</p> <p>You must specify either a Cron expression or an interval, interval unit, and start time. You cannot specify both.</p>
    """

    Location: Optional[LocationValues] = None
    Interval: Optional[Interval] = None
    IntervalUnit: Optional[IntervalUnitValues] = None
    Times: Optional[TimesList] = None
    CronExpression: Optional[CronExpression] = None


class EncryptionConfiguration(BaseModel):
    """
    Specifies the encryption settings for shared snapshots that are copied across Regions.
    """

    Encrypted: Encrypted
    CmkArn: Optional[CmkArn] = None


class CrossRegionCopyRetainRule(CrossRegionCopyDeprecateRule):
    """
    Specifies the retention rule for cross-Region snapshot copies.
    """

    pass


class CrossRegionCopyAction(BaseModel):
    """
    Specifies a rule for copying shared snapshots across Regions.
    """

    Target: Target
    EncryptionConfiguration: EncryptionConfiguration
    RetainRule: Optional[CrossRegionCopyRetainRule] = None


class CrossRegionCopyRule(BaseModel):
    """
    Specifies a rule for cross-Region snapshot copies.
    """

    TargetRegion: Optional[TargetRegion] = None
    Target: Optional[Target] = None
    Encrypted: Encrypted
    CmkArn: Optional[CmkArn] = None
    CopyTags: Optional[CopyTagsNullable] = None
    RetainRule: Optional[CrossRegionCopyRetainRule] = None
    DeprecateRule: Optional[CrossRegionCopyDeprecateRule] = None


class CrossRegionCopyRules(BaseModel):
    __root__: Annotated[List[CrossRegionCopyRule], Field(max_items=3, min_items=0)]


class LifecyclePolicySummaryList(BaseModel):
    __root__: List[LifecyclePolicySummary]


class TagsToAddList(BaseModel):
    __root__: Annotated[List[Tag], Field(max_items=45, min_items=0)]


class VariableTagsList(TagsToAddList):
    pass


class ShareRules(BaseModel):
    __root__: Annotated[List[ShareRule], Field(max_items=1, min_items=0)]


class Schedule(BaseModel):
    """
    Specifies a backup schedule for a snapshot or AMI lifecycle policy.
    """

    Name: Optional[ScheduleName] = None
    CopyTags: Optional[CopyTags] = None
    TagsToAdd: Optional[TagsToAddList] = None
    VariableTags: Optional[VariableTagsList] = None
    CreateRule: Optional[CreateRule] = None
    RetainRule: Optional[RetainRule1] = None
    FastRestoreRule: Optional[FastRestoreRule] = None
    CrossRegionCopyRules: Optional[CrossRegionCopyRules] = None
    ShareRules: Optional[ShareRules] = None
    DeprecateRule: Optional[DeprecateRule1] = None


class ScheduleList(BaseModel):
    __root__: Annotated[List[Schedule], Field(max_items=4, min_items=1)]


class GetLifecyclePoliciesResponse(BaseModel):
    Policies: Optional[LifecyclePolicySummaryList] = None


class CrossRegionCopyActionList(BaseModel):
    __root__: Annotated[List[CrossRegionCopyAction], Field(max_items=3, min_items=0)]


class Action(BaseModel):
    """
    Specifies an action for an event-based policy.
    """

    Name: ActionName
    CrossRegionCopy: CrossRegionCopyActionList


class ActionList(BaseModel):
    __root__: Annotated[List[Action], Field(max_items=1, min_items=1)]


class PolicyDetails(BaseModel):
    """
    Specifies the configuration of a lifecycle policy.
    """

    PolicyType: Optional[PolicyTypeValues] = None
    ResourceTypes: Optional[ResourceTypeValuesList] = None
    ResourceLocations: Optional[ResourceLocationList] = None
    TargetTags: Optional[TargetTagList] = None
    Schedules: Optional[ScheduleList] = None
    Parameters: Optional[Parameters] = None
    EventSource: Optional[EventSource] = None
    Actions: Optional[ActionList] = None


class CreateLifecyclePolicyRequest(BaseModel):
    ExecutionRoleArn: ExecutionRoleArn
    Description: PolicyDescription
    State: SettablePolicyStateValues
    PolicyDetails: PolicyDetails
    Tags: Optional[TagMap] = None


class LifecyclePolicy(BaseModel):
    """
    Detailed information about a lifecycle policy.
    """

    PolicyId: Optional[PolicyId] = None
    Description: Optional[PolicyDescription] = None
    State: Optional[GettablePolicyStateValues] = None
    StatusMessage: Optional[StatusMessage] = None
    ExecutionRoleArn: Optional[ExecutionRoleArn] = None
    DateCreated: Optional[Timestamp] = None
    DateModified: Optional[Timestamp] = None
    PolicyDetails: Optional[PolicyDetails] = None
    Tags: Optional[TagMap] = None
    PolicyArn: Optional[PolicyArn] = None


class UpdateLifecyclePolicyRequest(BaseModel):
    ExecutionRoleArn: Optional[ExecutionRoleArn] = None
    State: Optional[SettablePolicyStateValues] = None
    Description: Optional[PolicyDescription] = None
    PolicyDetails: Optional[PolicyDetails] = None


class GetLifecyclePolicyResponse(BaseModel):
    Policy: Optional[LifecyclePolicy] = None
