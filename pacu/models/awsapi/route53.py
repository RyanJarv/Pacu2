# generated by datamodel-codegen:
#   filename:  openapi.yaml
#   timestamp: 2021-12-31T02:54:56+00:00

from __future__ import annotations

from datetime import datetime
from enum import Enum
from typing import Annotated, Any, List, Optional

from pydantic import BaseModel, Field


class ConcurrentModification(BaseModel):
    __root__: Any


class NoSuchKeySigningKey(ConcurrentModification):
    pass


class InvalidKeySigningKeyStatus(ConcurrentModification):
    pass


class InvalidSigningStatus(ConcurrentModification):
    pass


class InvalidKMSArn(ConcurrentModification):
    pass


class InvalidInput(ConcurrentModification):
    pass


class VPCRegion(Enum):
    us_east_1 = 'us-east-1'
    us_east_2 = 'us-east-2'
    us_west_1 = 'us-west-1'
    us_west_2 = 'us-west-2'
    eu_west_1 = 'eu-west-1'
    eu_west_2 = 'eu-west-2'
    eu_west_3 = 'eu-west-3'
    eu_central_1 = 'eu-central-1'
    ap_east_1 = 'ap-east-1'
    me_south_1 = 'me-south-1'
    us_gov_west_1 = 'us-gov-west-1'
    us_gov_east_1 = 'us-gov-east-1'
    us_iso_east_1 = 'us-iso-east-1'
    us_isob_east_1 = 'us-isob-east-1'
    ap_southeast_1 = 'ap-southeast-1'
    ap_southeast_2 = 'ap-southeast-2'
    ap_south_1 = 'ap-south-1'
    ap_northeast_1 = 'ap-northeast-1'
    ap_northeast_2 = 'ap-northeast-2'
    ap_northeast_3 = 'ap-northeast-3'
    eu_north_1 = 'eu-north-1'
    sa_east_1 = 'sa-east-1'
    ca_central_1 = 'ca-central-1'
    cn_north_1 = 'cn-north-1'
    af_south_1 = 'af-south-1'
    eu_south_1 = 'eu-south-1'


class VPCId(BaseModel):
    __root__: Annotated[
        str,
        Field(
            description='(Private hosted zones only) The ID of an Amazon VPC. ',
            max_length=1024,
        ),
    ]


class NoSuchHostedZone(ConcurrentModification):
    pass


class NotAuthorizedException(ConcurrentModification):
    pass


class InvalidVPCId(ConcurrentModification):
    pass


class PublicZoneVPCAssociation(ConcurrentModification):
    pass


class ConflictingDomainExists(ConcurrentModification):
    pass


class LimitsExceeded(ConcurrentModification):
    pass


class PriorRequestNotComplete(ConcurrentModification):
    pass


class ResourceDescription(BaseModel):
    __root__: Annotated[str, Field(max_length=256)]


class NoSuchHealthCheck(ConcurrentModification):
    pass


class InvalidChangeBatch(ConcurrentModification):
    pass


class ChangeTagsForResourceResponse(BaseModel):
    """
    Empty response for the request.
    """

    pass


class TagKey(BaseModel):
    __root__: Annotated[str, Field(max_length=128)]


class ThrottlingException(ConcurrentModification):
    pass


class IPAddress(BaseModel):
    __root__: Annotated[
        str,
        Field(
            max_length=45,
            regex='(^((([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5]))$|^(([0-9a-fA-F]{1,4}:){7,7}[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,7}:|([0-9a-fA-F]{1,4}:){1,6}:[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,5}(:[0-9a-fA-F]{1,4}){1,2}|([0-9a-fA-F]{1,4}:){1,4}(:[0-9a-fA-F]{1,4}){1,3}|([0-9a-fA-F]{1,4}:){1,3}(:[0-9a-fA-F]{1,4}){1,4}|([0-9a-fA-F]{1,4}:){1,2}(:[0-9a-fA-F]{1,4}){1,5}|[0-9a-fA-F]{1,4}:((:[0-9a-fA-F]{1,4}){1,6})|:((:[0-9a-fA-F]{1,4}){1,7}|:)|fe80:(:[0-9a-fA-F]{0,4}){0,4}%[0-9a-zA-Z]{1,}|::(ffff(:0{1,4}){0,1}:){0,1}((25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])\\.){3,3}(25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])|([0-9a-fA-F]{1,4}:){1,4}:((25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])\\.){3,3}(25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9]))$)',
        ),
    ]


class Port(BaseModel):
    __root__: Annotated[int, Field(ge=1.0, le=65535.0)]


class HealthCheckType(Enum):
    HTTP = 'HTTP'
    HTTPS = 'HTTPS'
    HTTP_STR_MATCH = 'HTTP_STR_MATCH'
    HTTPS_STR_MATCH = 'HTTPS_STR_MATCH'
    TCP = 'TCP'
    CALCULATED = 'CALCULATED'
    CLOUDWATCH_METRIC = 'CLOUDWATCH_METRIC'
    RECOVERY_CONTROL = 'RECOVERY_CONTROL'


class ResourcePath(BaseModel):
    __root__: Annotated[str, Field(max_length=255)]


class FullyQualifiedDomainName(ResourcePath):
    pass


class SearchString(ResourcePath):
    pass


class RequestInterval(BaseModel):
    __root__: Annotated[int, Field(ge=10.0, le=30.0)]


class FailureThreshold(BaseModel):
    __root__: Annotated[int, Field(ge=1.0, le=10.0)]


class MeasureLatency(BaseModel):
    __root__: bool


class Inverted(MeasureLatency):
    pass


class Disabled(MeasureLatency):
    pass


class HealthThreshold(BaseModel):
    __root__: Annotated[int, Field(ge=0.0, le=256.0)]


class EnableSNI(MeasureLatency):
    pass


class InsufficientDataHealthStatus(Enum):
    Healthy = 'Healthy'
    Unhealthy = 'Unhealthy'
    LastKnownStatus = 'LastKnownStatus'


class RoutingControlArn(BaseModel):
    __root__: Annotated[str, Field(max_length=255, min_length=1)]


class TooManyHealthChecks(ConcurrentModification):
    pass


class HealthCheckAlreadyExists(ConcurrentModification):
    pass


class IsPrivateZone(MeasureLatency):
    pass


class InvalidDomainName(ConcurrentModification):
    pass


class HostedZoneAlreadyExists(ConcurrentModification):
    pass


class TooManyHostedZones(ConcurrentModification):
    pass


class DelegationSetNotAvailable(ConcurrentModification):
    pass


class NoSuchDelegationSet(ConcurrentModification):
    pass


class DelegationSetNotReusable(ConcurrentModification):
    pass


class InvalidArgument(ConcurrentModification):
    pass


class InvalidKeySigningKeyName(ConcurrentModification):
    pass


class KeySigningKeyAlreadyExists(ConcurrentModification):
    pass


class TooManyKeySigningKeys(ConcurrentModification):
    pass


class NoSuchCloudWatchLogsLogGroup(ConcurrentModification):
    pass


class QueryLoggingConfigAlreadyExists(ConcurrentModification):
    pass


class InsufficientCloudWatchLogsResourcePolicy(ConcurrentModification):
    pass


class DelegationSetAlreadyCreated(ConcurrentModification):
    pass


class HostedZoneNotFound(ConcurrentModification):
    pass


class DelegationSetAlreadyReusable(ConcurrentModification):
    pass


class TooManyTrafficPolicies(ConcurrentModification):
    pass


class TrafficPolicyAlreadyExists(ConcurrentModification):
    pass


class InvalidTrafficPolicyDocument(ConcurrentModification):
    pass


class TooManyTrafficPolicyInstances(ConcurrentModification):
    pass


class NoSuchTrafficPolicy(ConcurrentModification):
    pass


class TrafficPolicyInstanceAlreadyExists(ConcurrentModification):
    pass


class TooManyTrafficPolicyVersionsForCurrentPolicy(ConcurrentModification):
    pass


class TooManyVPCAssociationAuthorizations(ConcurrentModification):
    pass


class KeySigningKeyInUse(ConcurrentModification):
    pass


class KeySigningKeyInParentDSRecord(ConcurrentModification):
    pass


class DeleteHealthCheckResponse(ChangeTagsForResourceResponse):
    """
    An empty element.
    """

    pass


class HealthCheckInUse(ConcurrentModification):
    pass


class HostedZoneNotEmpty(ConcurrentModification):
    pass


class DeleteQueryLoggingConfigResponse(ChangeTagsForResourceResponse):
    pass


class NoSuchQueryLoggingConfig(ConcurrentModification):
    pass


class DeleteReusableDelegationSetResponse(ChangeTagsForResourceResponse):
    """
    An empty element.
    """

    pass


class DelegationSetInUse(ConcurrentModification):
    pass


class DeleteTrafficPolicyResponse(ChangeTagsForResourceResponse):
    """
    An empty element.
    """

    pass


class TrafficPolicyInUse(ConcurrentModification):
    pass


class DeleteTrafficPolicyInstanceResponse(ChangeTagsForResourceResponse):
    """
    An empty element.
    """

    pass


class NoSuchTrafficPolicyInstance(ConcurrentModification):
    pass


class DeleteVPCAssociationAuthorizationResponse(ChangeTagsForResourceResponse):
    """
    Empty response for the request.
    """

    pass


class VPCAssociationAuthorizationNotFound(ConcurrentModification):
    pass


class DNSSECNotFound(ConcurrentModification):
    pass


class VPCAssociationNotFound(ConcurrentModification):
    pass


class LastVPCAssociation(ConcurrentModification):
    pass


class KeySigningKeyWithActiveStatusNotFound(ConcurrentModification):
    pass


class HostedZonePartiallyDelegated(ConcurrentModification):
    pass


class NoSuchChange(ConcurrentModification):
    pass


class NoSuchGeoLocation(ConcurrentModification):
    pass


class IncompatibleVersion(ConcurrentModification):
    pass


class HostedZoneNotPrivate(ConcurrentModification):
    pass


class InvalidPaginationToken(ConcurrentModification):
    pass


class TagResourceId(BaseModel):
    __root__: Annotated[str, Field(max_length=64)]


class HealthCheckId(TagResourceId):
    pass


class HealthCheckRegion(Enum):
    us_east_1 = 'us-east-1'
    us_west_1 = 'us-west-1'
    us_west_2 = 'us-west-2'
    eu_west_1 = 'eu-west-1'
    ap_southeast_1 = 'ap-southeast-1'
    ap_southeast_2 = 'ap-southeast-2'
    ap_northeast_1 = 'ap-northeast-1'
    sa_east_1 = 'sa-east-1'


class CloudWatchRegion(Enum):
    us_east_1 = 'us-east-1'
    us_east_2 = 'us-east-2'
    us_west_1 = 'us-west-1'
    us_west_2 = 'us-west-2'
    ca_central_1 = 'ca-central-1'
    eu_central_1 = 'eu-central-1'
    eu_west_1 = 'eu-west-1'
    eu_west_2 = 'eu-west-2'
    eu_west_3 = 'eu-west-3'
    ap_east_1 = 'ap-east-1'
    me_south_1 = 'me-south-1'
    ap_south_1 = 'ap-south-1'
    ap_southeast_1 = 'ap-southeast-1'
    ap_southeast_2 = 'ap-southeast-2'
    ap_northeast_1 = 'ap-northeast-1'
    ap_northeast_2 = 'ap-northeast-2'
    ap_northeast_3 = 'ap-northeast-3'
    eu_north_1 = 'eu-north-1'
    sa_east_1 = 'sa-east-1'
    cn_northwest_1 = 'cn-northwest-1'
    cn_north_1 = 'cn-north-1'
    af_south_1 = 'af-south-1'
    eu_south_1 = 'eu-south-1'
    us_gov_west_1 = 'us-gov-west-1'
    us_gov_east_1 = 'us-gov-east-1'
    us_iso_east_1 = 'us-iso-east-1'
    us_isob_east_1 = 'us-isob-east-1'


class AlarmName(BaseModel):
    __root__: Annotated[str, Field(max_length=256, min_length=1)]


class ResettableElementName(Enum):
    FullyQualifiedDomainName = 'FullyQualifiedDomainName'
    Regions = 'Regions'
    ResourcePath = 'ResourcePath'
    ChildHealthChecks = 'ChildHealthChecks'


class HealthCheckVersionMismatch(ConcurrentModification):
    pass


class ConflictingTypes(ConcurrentModification):
    pass


class AWSAccountID(BaseModel):
    __root__: str


class AccountLimitType(Enum):
    MAX_HEALTH_CHECKS_BY_OWNER = 'MAX_HEALTH_CHECKS_BY_OWNER'
    MAX_HOSTED_ZONES_BY_OWNER = 'MAX_HOSTED_ZONES_BY_OWNER'
    MAX_TRAFFIC_POLICY_INSTANCES_BY_OWNER = 'MAX_TRAFFIC_POLICY_INSTANCES_BY_OWNER'
    MAX_REUSABLE_DELEGATION_SETS_BY_OWNER = 'MAX_REUSABLE_DELEGATION_SETS_BY_OWNER'
    MAX_TRAFFIC_POLICIES_BY_OWNER = 'MAX_TRAFFIC_POLICIES_BY_OWNER'


class LimitValue(BaseModel):
    __root__: Annotated[int, Field(ge=1.0)]


class AccountLimit(BaseModel):
    """
    A complex type that contains the type of limit that you specified in the request and the current value for that limit.
    """

    Type: AccountLimitType
    Value: LimitValue


class ResourceId(BaseModel):
    __root__: Annotated[str, Field(max_length=32)]


class SigningKeyName(BaseModel):
    __root__: Annotated[str, Field(max_length=128, min_length=3)]


class ActivateKeySigningKeyRequest(BaseModel):
    pass


class AliasHealthEnabled(MeasureLatency):
    pass


class DNSName(BaseModel):
    __root__: Annotated[str, Field(max_length=1024)]


class AliasTarget(BaseModel):
    """
    <p> <i>Alias resource record sets only:</i> Information about the Amazon Web Services resource, such as a CloudFront distribution or an Amazon S3 bucket, that you want to route traffic to.</p> <p>When creating resource record sets for a private hosted zone, note the following:</p> <ul> <li> <p>Creating geolocation alias resource record sets or latency alias resource record sets in a private hosted zone is unsupported.</p> </li> <li> <p>For information about creating failover resource record sets in a private hosted zone, see <a href="https://docs.aws.amazon.com/Route53/latest/DeveloperGuide/dns-failover-private-hosted-zones.html">Configuring Failover in a Private Hosted Zone</a>.</p> </li> </ul>
    """

    HostedZoneId: ResourceId
    DNSName: DNSName
    EvaluateTargetHealth: AliasHealthEnabled


class AssociateVPCComment(AWSAccountID):
    pass


class VPC(BaseModel):
    """
    (Private hosted zones only) A complex type that contains information about an Amazon VPC.
    """

    VPCRegion: Optional[VPCRegion] = None
    VPCId: Optional[VPCId] = None


class AssociateVPCWithHostedZoneRequest(BaseModel):
    """
    A complex type that contains information about the request to associate a VPC with a private hosted zone.
    """

    VPC: VPC
    Comment: Optional[AssociateVPCComment] = None


class ChangeAction(Enum):
    CREATE = 'CREATE'
    DELETE = 'DELETE'
    UPSERT = 'UPSERT'


class ChangeStatus(Enum):
    PENDING = 'PENDING'
    INSYNC = 'INSYNC'


class TimeStamp(BaseModel):
    __root__: datetime


class TagResourceType(Enum):
    healthcheck = 'healthcheck'
    hostedzone = 'hostedzone'


class TagKeyList(BaseModel):
    __root__: Annotated[List[TagKey], Field(max_items=10, min_items=1)]


class IPAddressCidr(AWSAccountID):
    pass


class CheckerIpRanges(BaseModel):
    __root__: List[IPAddressCidr]


class EvaluationPeriods(LimitValue):
    pass


class Threshold(BaseModel):
    __root__: float


class ComparisonOperator(Enum):
    GreaterThanOrEqualToThreshold = 'GreaterThanOrEqualToThreshold'
    GreaterThanThreshold = 'GreaterThanThreshold'
    LessThanThreshold = 'LessThanThreshold'
    LessThanOrEqualToThreshold = 'LessThanOrEqualToThreshold'


class Period(BaseModel):
    __root__: Annotated[int, Field(ge=60.0)]


class MetricName(RoutingControlArn):
    pass


class Namespace(RoutingControlArn):
    pass


class Statistic(Enum):
    Average = 'Average'
    Sum = 'Sum'
    SampleCount = 'SampleCount'
    Maximum = 'Maximum'
    Minimum = 'Minimum'


class CloudWatchLogsLogGroupArn(AWSAccountID):
    pass


class HealthCheckNonce(BaseModel):
    __root__: Annotated[str, Field(max_length=64, min_length=1)]


class ResourceURI(DNSName):
    pass


class Nonce(BaseModel):
    __root__: Annotated[str, Field(max_length=128, min_length=1)]


class HostedZoneConfig(BaseModel):
    """
    A complex type that contains an optional comment about your hosted zone. If you don't want to specify a comment, omit both the <code>HostedZoneConfig</code> and <code>Comment</code> elements.
    """

    Comment: Optional[ResourceDescription] = None
    PrivateZone: Optional[IsPrivateZone] = None


class CreateHostedZoneRequest(BaseModel):
    """
    A complex type that contains information about the request to create a public or private hosted zone.
    """

    Name: DNSName
    VPC: Optional[VPC] = None
    CallerReference: Nonce
    HostedZoneConfig: Optional[HostedZoneConfig] = None
    DelegationSetId: Optional[ResourceId] = None


class SigningKeyString(AWSAccountID):
    pass


class SigningKeyStatus(BaseModel):
    __root__: Annotated[str, Field(max_length=150, min_length=5)]


class CreateKeySigningKeyRequest(BaseModel):
    CallerReference: Nonce
    HostedZoneId: ResourceId
    KeyManagementServiceArn: SigningKeyString
    Name: SigningKeyName
    Status: SigningKeyStatus


class CreateQueryLoggingConfigRequest(BaseModel):
    HostedZoneId: ResourceId
    CloudWatchLogsLogGroupArn: CloudWatchLogsLogGroupArn


class CreateReusableDelegationSetRequest(BaseModel):
    CallerReference: Nonce
    HostedZoneId: Optional[ResourceId] = None


class TTL(BaseModel):
    __root__: Annotated[int, Field(ge=0.0, le=2147483647.0)]


class TrafficPolicyId(BaseModel):
    __root__: Annotated[str, Field(max_length=36, min_length=1)]


class TrafficPolicyVersion(BaseModel):
    __root__: Annotated[int, Field(ge=1.0, le=1000.0)]


class CreateTrafficPolicyInstanceRequest(BaseModel):
    """
    A complex type that contains information about the resource record sets that you want to create based on a specified traffic policy.
    """

    HostedZoneId: ResourceId
    Name: DNSName
    TTL: TTL
    TrafficPolicyId: TrafficPolicyId
    TrafficPolicyVersion: TrafficPolicyVersion


class TrafficPolicyName(BaseModel):
    __root__: Annotated[str, Field(max_length=512)]


class TrafficPolicyDocument(BaseModel):
    __root__: Annotated[str, Field(max_length=102400)]


class TrafficPolicyComment(DNSName):
    pass


class CreateTrafficPolicyRequest(BaseModel):
    """
    A complex type that contains information about the traffic policy that you want to create.
    """

    Name: TrafficPolicyName
    Document: TrafficPolicyDocument
    Comment: Optional[TrafficPolicyComment] = None


class CreateTrafficPolicyVersionRequest(BaseModel):
    """
    A complex type that contains information about the traffic policy that you want to create a new version for.
    """

    Document: TrafficPolicyDocument
    Comment: Optional[TrafficPolicyComment] = None


class CreateVPCAssociationAuthorizationRequest(BaseModel):
    """
    A complex type that contains information about the request to authorize associating a VPC with your private hosted zone. Authorization is only required when a private hosted zone and a VPC were created by using different accounts.
    """

    VPC: VPC


class DNSRCode(AWSAccountID):
    pass


class ServeSignature(BaseModel):
    __root__: Annotated[str, Field(max_length=1024, min_length=1)]


class SigningKeyStatusMessage(BaseModel):
    __root__: Annotated[str, Field(max_length=512, min_length=0)]


class DNSSECStatus(BaseModel):
    """
    A string repesenting the status of DNSSEC signing.
    """

    ServeSignature: Optional[ServeSignature] = None
    StatusMessage: Optional[SigningKeyStatusMessage] = None


class DeactivateKeySigningKeyRequest(BaseModel):
    pass


class DelegationSetNameServers(BaseModel):
    __root__: Annotated[List[DNSName], Field(min_items=1)]


class DeleteHealthCheckRequest(BaseModel):
    """
    This action deletes a health check.
    """

    pass


class DeleteHostedZoneRequest(BaseModel):
    """
    A request to delete a hosted zone.
    """

    pass


class DeleteKeySigningKeyRequest(BaseModel):
    pass


class QueryLoggingConfigId(TrafficPolicyId):
    pass


class DeleteQueryLoggingConfigRequest(BaseModel):
    pass


class DeleteReusableDelegationSetRequest(BaseModel):
    """
    A request to delete a reusable delegation set.
    """

    pass


class TrafficPolicyInstanceId(TrafficPolicyId):
    pass


class DeleteTrafficPolicyInstanceRequest(BaseModel):
    """
    A request to delete a specified traffic policy instance.
    """

    pass


class DeleteTrafficPolicyRequest(BaseModel):
    """
    A request to delete a specified traffic policy version.
    """

    pass


class DeleteVPCAssociationAuthorizationRequest(BaseModel):
    """
    A complex type that contains information about the request to remove authorization to associate a VPC that was created by one Amazon Web Services account with a hosted zone that was created with a different Amazon Web Services account.
    """

    VPC: VPC


class DimensionField(RoutingControlArn):
    pass


class Dimension(BaseModel):
    """
    For the metric that the CloudWatch alarm is associated with, a complex type that contains information about one dimension.
    """

    Name: DimensionField
    Value: DimensionField


class DisableHostedZoneDNSSECRequest(BaseModel):
    pass


class DisassociateVPCComment(AWSAccountID):
    pass


class DisassociateVPCFromHostedZoneRequest(BaseModel):
    """
    A complex type that contains information about the VPC that you want to disassociate from a specified private hosted zone.
    """

    VPC: VPC
    Comment: Optional[DisassociateVPCComment] = None


class EnableHostedZoneDNSSECRequest(BaseModel):
    pass


class GeoLocationContinentCode(BaseModel):
    __root__: Annotated[str, Field(max_length=2, min_length=2)]


class GeoLocationCountryCode(BaseModel):
    __root__: Annotated[str, Field(max_length=2, min_length=1)]


class GeoLocationSubdivisionCode(BaseModel):
    __root__: Annotated[str, Field(max_length=3, min_length=1)]


class GeoLocation(BaseModel):
    """
    A complex type that contains information about a geographic location.
    """

    ContinentCode: Optional[GeoLocationContinentCode] = None
    CountryCode: Optional[GeoLocationCountryCode] = None
    SubdivisionCode: Optional[GeoLocationSubdivisionCode] = None


class GeoLocationContinentName(BaseModel):
    __root__: Annotated[str, Field(max_length=32, min_length=1)]


class GeoLocationCountryName(HealthCheckNonce):
    pass


class GeoLocationSubdivisionName(HealthCheckNonce):
    pass


class GeoLocationDetails(BaseModel):
    """
    A complex type that contains the codes and full continent, country, and subdivision names for the specified <code>geolocation</code> code.
    """

    ContinentCode: Optional[GeoLocationContinentCode] = None
    ContinentName: Optional[GeoLocationContinentName] = None
    CountryCode: Optional[GeoLocationCountryCode] = None
    CountryName: Optional[GeoLocationCountryName] = None
    SubdivisionCode: Optional[GeoLocationSubdivisionCode] = None
    SubdivisionName: Optional[GeoLocationSubdivisionName] = None


class GeoLocationDetailsList(BaseModel):
    __root__: List[GeoLocationDetails]


class GetAccountLimitRequest(BaseModel):
    """
    A complex type that contains information about the request to create a hosted zone.
    """

    pass


class UsageCount(BaseModel):
    __root__: Annotated[int, Field(ge=0.0)]


class GetChangeRequest(BaseModel):
    """
    The input for a GetChange request.
    """

    pass


class GetCheckerIpRangesRequest(BaseModel):
    """
    Empty request.
    """

    pass


class GetDNSSECRequest(BaseModel):
    pass


class GetGeoLocationRequest(BaseModel):
    """
    A request for information about whether a specified geographic location is supported for Amazon Route 53 geolocation resource record sets.
    """

    pass


class GetHealthCheckCountRequest(BaseModel):
    """
    A request for the number of health checks that are associated with the current Amazon Web Services account.
    """

    pass


class HealthCheckCount(BaseModel):
    __root__: int


class GetHealthCheckLastFailureReasonRequest(BaseModel):
    """
    A request for the reason that a health check failed most recently.
    """

    pass


class GetHealthCheckRequest(BaseModel):
    """
    A request to get information about a specified health check.
    """

    pass


class GetHealthCheckStatusRequest(BaseModel):
    """
    A request to get the status for a health check.
    """

    pass


class GetHostedZoneCountRequest(BaseModel):
    """
    A request to retrieve a count of all the hosted zones that are associated with the current Amazon Web Services account.
    """

    pass


class HostedZoneCount(HealthCheckCount):
    pass


class HostedZoneLimitType(Enum):
    MAX_RRSETS_BY_ZONE = 'MAX_RRSETS_BY_ZONE'
    MAX_VPCS_ASSOCIATED_BY_ZONE = 'MAX_VPCS_ASSOCIATED_BY_ZONE'


class GetHostedZoneLimitRequest(BaseModel):
    """
    A complex type that contains information about the request to create a hosted zone.
    """

    pass


class HostedZoneLimit(BaseModel):
    """
    A complex type that contains the type of limit that you specified in the request and the current value for that limit.
    """

    Type: HostedZoneLimitType
    Value: LimitValue


class GetHostedZoneRequest(BaseModel):
    """
    A request to get information about a specified hosted zone.
    """

    pass


class VPCs(BaseModel):
    """
    (Private hosted zones only) A list of <code>VPC</code> elements.
    """

    __root__: Annotated[
        List[VPC],
        Field(
            description='(Private hosted zones only) A list of <code>VPC</code> elements.',
            min_items=1,
        ),
    ]


class GetQueryLoggingConfigRequest(BaseModel):
    pass


class ReusableDelegationSetLimitType(Enum):
    MAX_ZONES_BY_REUSABLE_DELEGATION_SET = 'MAX_ZONES_BY_REUSABLE_DELEGATION_SET'


class GetReusableDelegationSetLimitRequest(BaseModel):
    """
    A complex type that contains information about the request to create a hosted zone.
    """

    pass


class ReusableDelegationSetLimit(BaseModel):
    """
    A complex type that contains the type of limit that you specified in the request and the current value for that limit.
    """

    Type: ReusableDelegationSetLimitType
    Value: LimitValue


class GetReusableDelegationSetRequest(BaseModel):
    """
    A request to get information about a specified reusable delegation set.
    """

    pass


class GetTrafficPolicyInstanceCountRequest(BaseModel):
    """
    Request to get the number of traffic policy instances that are associated with the current Amazon Web Services account.
    """

    pass


class TrafficPolicyInstanceCount(HealthCheckCount):
    pass


class GetTrafficPolicyInstanceRequest(BaseModel):
    """
    Gets information about a specified traffic policy instance.
    """

    pass


class GetTrafficPolicyRequest(BaseModel):
    """
    Gets information about a specific traffic policy version.
    """

    pass


class HealthCheckVersion(LimitValue):
    pass


class HostedZoneRRSetCount(HealthCheckCount):
    pass


class HostedZoneOwningService(TagKey):
    pass


class HostedZoneOwner(BaseModel):
    """
    A complex type that identifies a hosted zone that a specified Amazon VPC is associated with and the owner of the hosted zone. If there is a value for <code>OwningAccount</code>, there is no value for <code>OwningService</code>, and vice versa.
    """

    OwningAccount: Optional[AWSAccountID] = None
    OwningService: Optional[HostedZoneOwningService] = None


class HostedZoneSummary(BaseModel):
    """
    In the response to a <code>ListHostedZonesByVPC</code> request, the <code>HostedZoneSummaries</code> element contains one <code>HostedZoneSummary</code> element for each hosted zone that the specified Amazon VPC is associated with. Each <code>HostedZoneSummary</code> element contains the hosted zone name and ID, and information about who owns the hosted zone.
    """

    HostedZoneId: ResourceId
    Name: DNSName
    Owner: HostedZoneOwner


class HostedZoneSummaries(BaseModel):
    __root__: List[HostedZoneSummary]


class SigningKeyInteger(HealthCheckCount):
    pass


class SigningKeyTag(BaseModel):
    __root__: Annotated[int, Field(ge=0.0, le=65536.0)]


class ServicePrincipal(TagKey):
    pass


class PageMaxItems(AWSAccountID):
    pass


class ListGeoLocationsRequest(BaseModel):
    """
    A request to get a list of geographic locations that Amazon Route 53 supports for geolocation resource record sets.
    """

    pass


class PageTruncated(MeasureLatency):
    pass


class PageMarker(TagResourceId):
    pass


class ListHealthChecksRequest(BaseModel):
    """
    A request to retrieve a list of the health checks that are associated with the current Amazon Web Services account.
    """

    pass


class ListHostedZonesByNameRequest(BaseModel):
    """
    Retrieves a list of the public and private hosted zones that are associated with the current Amazon Web Services account in ASCII order by domain name.
    """

    pass


class PaginationToken(DNSName):
    pass


class ListHostedZonesByVPCRequest(BaseModel):
    """
    Lists all the private hosted zones that a specified VPC is associated with, regardless of which Amazon Web Services account created the hosted zones.
    """

    pass


class ListHostedZonesRequest(BaseModel):
    """
    A request to retrieve a list of the public and private hosted zones that are associated with the current Amazon Web Services account.
    """

    pass


class MaxResults(AWSAccountID):
    pass


class ListQueryLoggingConfigsRequest(BaseModel):
    pass


class RRType(Enum):
    SOA = 'SOA'
    A = 'A'
    TXT = 'TXT'
    NS = 'NS'
    CNAME = 'CNAME'
    MX = 'MX'
    NAPTR = 'NAPTR'
    PTR = 'PTR'
    SRV = 'SRV'
    SPF = 'SPF'
    AAAA = 'AAAA'
    CAA = 'CAA'
    DS = 'DS'


class ResourceRecordSetIdentifier(Nonce):
    pass


class ListResourceRecordSetsRequest(BaseModel):
    """
    A request for the resource record sets that are associated with a specified hosted zone.
    """

    pass


class ListReusableDelegationSetsRequest(BaseModel):
    """
    A request to get a list of the reusable delegation sets that are associated with the current Amazon Web Services account.
    """

    pass


class ListTagsForResourceRequest(BaseModel):
    """
    A complex type containing information about a request for a list of the tags that are associated with an individual resource.
    """

    pass


class TagResourceIdList(BaseModel):
    __root__: Annotated[List[TagResourceId], Field(max_items=10, min_items=1)]


class ListTagsForResourcesRequest(BaseModel):
    """
    A complex type that contains information about the health checks or hosted zones for which you want to list tags.
    """

    ResourceIds: TagResourceIdList


class ListTrafficPoliciesRequest(BaseModel):
    """
    A complex type that contains the information about the request to list the traffic policies that are associated with the current Amazon Web Services account.
    """

    pass


class ListTrafficPolicyInstancesByHostedZoneRequest(BaseModel):
    """
    A request for the traffic policy instances that you created in a specified hosted zone.
    """

    pass


class ListTrafficPolicyInstancesByPolicyRequest(BaseModel):
    """
    A complex type that contains the information about the request to list your traffic policy instances.
    """

    pass


class ListTrafficPolicyInstancesRequest(BaseModel):
    """
    A request to get information about the traffic policy instances that you created by using the current Amazon Web Services account.
    """

    pass


class TrafficPolicyVersionMarker(BaseModel):
    __root__: Annotated[str, Field(max_length=4)]


class ListTrafficPolicyVersionsRequest(BaseModel):
    """
    A complex type that contains the information about the request to list your traffic policies.
    """

    pass


class ListVPCAssociationAuthorizationsRequest(BaseModel):
    """
    A complex type that contains information about that can be associated with your hosted zone.
    """

    pass


class Message(DNSName):
    pass


class Nameserver(BaseModel):
    __root__: Annotated[str, Field(max_length=255, min_length=0)]


class RData(BaseModel):
    __root__: Annotated[str, Field(max_length=4000)]


class RecordDataEntry(BaseModel):
    __root__: Annotated[
        str,
        Field(
            description='<p>A value that Amazon Route 53 returned for this resource record set. A <code>RecordDataEntry</code> element is one of the following:</p> <ul> <li> <p>For non-alias resource record sets, a <code>RecordDataEntry</code> element contains one value in the resource record set. If the resource record set contains multiple values, the response includes one <code>RecordDataEntry</code> element for each value.</p> </li> <li> <p>For multiple resource record sets that have the same name and type, which includes weighted, latency, geolocation, and failover, a <code>RecordDataEntry</code> element contains the value from the appropriate resource record set based on the request.</p> </li> <li> <p>For alias resource record sets that refer to Amazon Web Services resources other than another resource record set, the <code>RecordDataEntry</code> element contains an IP address or a domain name for the Amazon Web Services resource, depending on the type of resource.</p> </li> <li> <p>For alias resource record sets that refer to other resource record sets, a <code>RecordDataEntry</code> element contains one value from the referenced resource record set. If the referenced resource record set contains multiple values, the response includes one <code>RecordDataEntry</code> element for each value.</p> </li> </ul>',
            max_length=512,
            min_length=0,
        ),
    ]


class RecordData(BaseModel):
    __root__: List[RecordDataEntry]


class ResettableElementNameList(BaseModel):
    __root__: Annotated[List[ResettableElementName], Field(max_items=64)]


class ResourceRecord(BaseModel):
    """
    <p>Information specific to the resource record.</p> <note> <p>If you're creating an alias resource record set, omit <code>ResourceRecord</code>.</p> </note>
    """

    Value: RData


class ResourceRecordSetWeight(BaseModel):
    __root__: Annotated[int, Field(ge=0.0, le=255.0)]


class ResourceRecordSetRegion(Enum):
    us_east_1 = 'us-east-1'
    us_east_2 = 'us-east-2'
    us_west_1 = 'us-west-1'
    us_west_2 = 'us-west-2'
    ca_central_1 = 'ca-central-1'
    eu_west_1 = 'eu-west-1'
    eu_west_2 = 'eu-west-2'
    eu_west_3 = 'eu-west-3'
    eu_central_1 = 'eu-central-1'
    ap_southeast_1 = 'ap-southeast-1'
    ap_southeast_2 = 'ap-southeast-2'
    ap_northeast_1 = 'ap-northeast-1'
    ap_northeast_2 = 'ap-northeast-2'
    ap_northeast_3 = 'ap-northeast-3'
    eu_north_1 = 'eu-north-1'
    sa_east_1 = 'sa-east-1'
    cn_north_1 = 'cn-north-1'
    cn_northwest_1 = 'cn-northwest-1'
    ap_east_1 = 'ap-east-1'
    me_south_1 = 'me-south-1'
    ap_south_1 = 'ap-south-1'
    af_south_1 = 'af-south-1'
    eu_south_1 = 'eu-south-1'


class ResourceRecordSetFailover(Enum):
    PRIMARY = 'PRIMARY'
    SECONDARY = 'SECONDARY'


class ResourceRecordSetMultiValueAnswer(MeasureLatency):
    pass


class ResourceRecords(BaseModel):
    __root__: Annotated[List[ResourceRecord], Field(min_items=1)]


class Status(AWSAccountID):
    pass


class SubnetMask(BaseModel):
    __root__: Annotated[str, Field(max_length=3, min_length=0)]


class TagValue(ResourceDescription):
    pass


class TestDNSAnswerRequest(BaseModel):
    """
    Gets the value that Amazon Route 53 returns in response to a DNS request for a specified record name and type. You can optionally specify the IP address of a DNS resolver, an EDNS0 client subnet IP address, and a subnet mask.
    """

    pass


class TransportProtocol(AWSAccountID):
    pass


class TrafficPolicyInstanceState(AWSAccountID):
    pass


class TrafficPolicySummary(BaseModel):
    """
    A complex type that contains information about the latest version of one traffic policy that is associated with the current Amazon Web Services account.
    """

    Id: TrafficPolicyId
    Name: TrafficPolicyName
    Type: RRType
    LatestVersion: TrafficPolicyVersion
    TrafficPolicyCount: TrafficPolicyVersion


class UpdateHostedZoneCommentRequest(BaseModel):
    """
    A request to update the comment for a hosted zone.
    """

    Comment: Optional[ResourceDescription] = None


class UpdateTrafficPolicyCommentRequest(BaseModel):
    """
    A complex type that contains information about the traffic policy that you want to update the comment for.
    """

    Comment: TrafficPolicyComment


class UpdateTrafficPolicyInstanceRequest(BaseModel):
    """
    A complex type that contains information about the resource record sets that you want to update based on a specified traffic policy instance.
    """

    TTL: TTL
    TrafficPolicyId: TrafficPolicyId
    TrafficPolicyVersion: TrafficPolicyVersion


class Tag(BaseModel):
    """
    A complex type that contains information about a tag that you want to add or edit for the specified health check or hosted zone.
    """

    Key: Optional[TagKey] = None
    Value: Optional[TagValue] = None


class ChildHealthCheckList(BaseModel):
    __root__: Annotated[List[HealthCheckId], Field(max_items=256)]


class HealthCheckRegionList(BaseModel):
    __root__: Annotated[List[HealthCheckRegion], Field(max_items=64, min_items=3)]


class AlarmIdentifier(BaseModel):
    """
    A complex type that identifies the CloudWatch alarm that you want Amazon Route 53 health checkers to use to determine whether the specified health check is healthy.
    """

    Region: CloudWatchRegion
    Name: AlarmName


class CreateVPCAssociationAuthorizationResponse(BaseModel):
    """
    A complex type that contains the response information from a <code>CreateVPCAssociationAuthorization</code> request.
    """

    HostedZoneId: ResourceId
    VPC: VPC


class GetAccountLimitResponse(BaseModel):
    """
    A complex type that contains the requested limit.
    """

    Limit: AccountLimit
    Count: UsageCount


class GetCheckerIpRangesResponse(BaseModel):
    """
    A complex type that contains the <code>CheckerIpRanges</code> element.
    """

    CheckerIpRanges: CheckerIpRanges


class GetGeoLocationResponse(BaseModel):
    """
    A complex type that contains the response information for the specified geolocation code.
    """

    GeoLocationDetails: GeoLocationDetails


class GetHealthCheckCountResponse(BaseModel):
    """
    A complex type that contains the response to a <code>GetHealthCheckCount</code> request.
    """

    HealthCheckCount: HealthCheckCount


class GetHostedZoneCountResponse(BaseModel):
    """
    A complex type that contains the response to a <code>GetHostedZoneCount</code> request.
    """

    HostedZoneCount: HostedZoneCount


class GetHostedZoneLimitResponse(BaseModel):
    """
    A complex type that contains the requested limit.
    """

    Limit: HostedZoneLimit
    Count: UsageCount


class GetReusableDelegationSetLimitResponse(BaseModel):
    """
    A complex type that contains the requested limit.
    """

    Limit: ReusableDelegationSetLimit
    Count: UsageCount


class GetTrafficPolicyInstanceCountResponse(BaseModel):
    """
    A complex type that contains information about the resource record sets that Amazon Route 53 created based on a specified traffic policy.
    """

    TrafficPolicyInstanceCount: TrafficPolicyInstanceCount


class ListGeoLocationsResponse(BaseModel):
    """
    A complex type containing the response information for the request.
    """

    GeoLocationDetailsList: GeoLocationDetailsList
    IsTruncated: PageTruncated
    NextContinentCode: Optional[GeoLocationContinentCode] = None
    NextCountryCode: Optional[GeoLocationCountryCode] = None
    NextSubdivisionCode: Optional[GeoLocationSubdivisionCode] = None
    MaxItems: PageMaxItems


class ListHostedZonesByVPCResponse(BaseModel):
    HostedZoneSummaries: HostedZoneSummaries
    MaxItems: PageMaxItems
    NextToken: Optional[PaginationToken] = None


class ListVPCAssociationAuthorizationsResponse(BaseModel):
    """
    A complex type that contains the response information for the request.
    """

    HostedZoneId: ResourceId
    NextToken: Optional[PaginationToken] = None
    VPCs: VPCs


class TestDNSAnswerResponse(BaseModel):
    """
    A complex type that contains the response to a <code>TestDNSAnswer</code> request.
    """

    Nameserver: Nameserver
    RecordName: DNSName
    RecordType: RRType
    RecordData: RecordData
    ResponseCode: DNSRCode
    Protocol: TransportProtocol


class ChangeInfo(BaseModel):
    """
    A complex type that describes change information about changes made to your hosted zone.
    """

    Id: ResourceId
    Status: ChangeStatus
    SubmittedAt: TimeStamp
    Comment: Optional[ResourceDescription] = None


class ResourceRecordSet(BaseModel):
    """
    Information about the resource record set to create or delete.
    """

    Name: DNSName
    Type: RRType
    SetIdentifier: Optional[ResourceRecordSetIdentifier] = None
    Weight: Optional[ResourceRecordSetWeight] = None
    Region: Optional[ResourceRecordSetRegion] = None
    GeoLocation: Optional[GeoLocation] = None
    Failover: Optional[ResourceRecordSetFailover] = None
    MultiValueAnswer: Optional[ResourceRecordSetMultiValueAnswer] = None
    TTL: Optional[TTL] = None
    ResourceRecords: Optional[ResourceRecords] = None
    AliasTarget: Optional[AliasTarget] = None
    HealthCheckId: Optional[HealthCheckId] = None
    TrafficPolicyInstanceId: Optional[TrafficPolicyInstanceId] = None


class Change(BaseModel):
    """
    The information for each resource record set that you want to change.
    """

    Action: ChangeAction
    ResourceRecordSet: ResourceRecordSet


class TagList(BaseModel):
    __root__: Annotated[List[Tag], Field(max_items=10, min_items=1)]


class ChangeTagsForResourceRequest(BaseModel):
    """
    A complex type that contains information about the tags that you want to add, edit, or delete.
    """

    AddTags: Optional[TagList] = None
    RemoveTagKeys: Optional[TagKeyList] = None


class DimensionList(BaseModel):
    __root__: Annotated[List[Dimension], Field(max_items=10)]


class CloudWatchAlarmConfiguration(BaseModel):
    """
    A complex type that contains information about the CloudWatch alarm that Amazon Route 53 is monitoring for this health check.
    """

    EvaluationPeriods: EvaluationPeriods
    Threshold: Threshold
    ComparisonOperator: ComparisonOperator
    Period: Period
    MetricName: MetricName
    Namespace: Namespace
    Statistic: Statistic
    Dimensions: Optional[DimensionList] = None


class HealthCheckConfig(BaseModel):
    """
    A complex type that contains information about the health check.
    """

    IPAddress: Optional[IPAddress] = None
    Port: Optional[Port] = None
    Type: HealthCheckType
    ResourcePath: Optional[ResourcePath] = None
    FullyQualifiedDomainName: Optional[FullyQualifiedDomainName] = None
    SearchString: Optional[SearchString] = None
    RequestInterval: Optional[RequestInterval] = None
    FailureThreshold: Optional[FailureThreshold] = None
    MeasureLatency: Optional[MeasureLatency] = None
    Inverted: Optional[Inverted] = None
    Disabled: Optional[Disabled] = None
    HealthThreshold: Optional[HealthThreshold] = None
    ChildHealthChecks: Optional[ChildHealthCheckList] = None
    EnableSNI: Optional[EnableSNI] = None
    Regions: Optional[HealthCheckRegionList] = None
    AlarmIdentifier: Optional[AlarmIdentifier] = None
    InsufficientDataHealthStatus: Optional[InsufficientDataHealthStatus] = None
    RoutingControlArn: Optional[RoutingControlArn] = None


class CreateHealthCheckRequest(BaseModel):
    """
    A complex type that contains the health check request information.
    """

    CallerReference: HealthCheckNonce
    HealthCheckConfig: HealthCheckConfig


class DelegationSet(BaseModel):
    """
    A complex type that lists the name servers in a delegation set, as well as the <code>CallerReference</code> and the <code>ID</code> for the delegation set.
    """

    Id: Optional[ResourceId] = None
    CallerReference: Optional[Nonce] = None
    NameServers: DelegationSetNameServers


class KeySigningKey(BaseModel):
    """
    A key-signing key (KSK) is a complex type that represents a public/private key pair. The private key is used to generate a digital signature for the zone signing key (ZSK). The public key is stored in the DNS and is used to authenticate the ZSK. A KSK is always associated with a hosted zone; it cannot exist by itself.
    """

    Name: Optional[SigningKeyName] = None
    KmsArn: Optional[SigningKeyString] = None
    Flag: Optional[SigningKeyInteger] = None
    SigningAlgorithmMnemonic: Optional[SigningKeyString] = None
    SigningAlgorithmType: Optional[SigningKeyInteger] = None
    DigestAlgorithmMnemonic: Optional[SigningKeyString] = None
    DigestAlgorithmType: Optional[SigningKeyInteger] = None
    KeyTag: Optional[SigningKeyTag] = None
    DigestValue: Optional[SigningKeyString] = None
    PublicKey: Optional[SigningKeyString] = None
    DSRecord: Optional[SigningKeyString] = None
    DNSKEYRecord: Optional[SigningKeyString] = None
    Status: Optional[SigningKeyStatus] = None
    StatusMessage: Optional[SigningKeyStatusMessage] = None
    CreatedDate: Optional[TimeStamp] = None
    LastModifiedDate: Optional[TimeStamp] = None


class QueryLoggingConfig(BaseModel):
    """
    A complex type that contains information about a configuration for DNS query logging.
    """

    Id: QueryLoggingConfigId
    HostedZoneId: ResourceId
    CloudWatchLogsLogGroupArn: CloudWatchLogsLogGroupArn


class TrafficPolicyInstance(BaseModel):
    """
    A complex type that contains settings for the new traffic policy instance.
    """

    Id: TrafficPolicyInstanceId
    HostedZoneId: ResourceId
    Name: DNSName
    TTL: TTL
    State: TrafficPolicyInstanceState
    Message: Message
    TrafficPolicyId: TrafficPolicyId
    TrafficPolicyVersion: TrafficPolicyVersion
    TrafficPolicyType: RRType


class TrafficPolicy(BaseModel):
    """
    A complex type that contains settings for a traffic policy.
    """

    Id: TrafficPolicyId
    Version: TrafficPolicyVersion
    Name: TrafficPolicyName
    Type: RRType
    Document: TrafficPolicyDocument
    Comment: Optional[TrafficPolicyComment] = None


class DelegationSets(BaseModel):
    __root__: List[DelegationSet]


class KeySigningKeys(BaseModel):
    __root__: List[KeySigningKey]


class LinkedService(BaseModel):
    """
    If a health check or hosted zone was created by another service, <code>LinkedService</code> is a complex type that describes the service that created the resource. When a resource is created by another service, you can't edit or delete it using Amazon Route 53.
    """

    ServicePrincipal: Optional[ServicePrincipal] = None
    Description: Optional[ResourceDescription] = None


class StatusReport(BaseModel):
    """
    A complex type that contains the status that one Amazon Route 53 health checker reports and the time of the health check.
    """

    Status: Optional[Status] = None
    CheckedTime: Optional[TimeStamp] = None


class HealthCheckObservation(BaseModel):
    """
    A complex type that contains the last failure reason as reported by one Amazon Route 53 health checker.
    """

    Region: Optional[HealthCheckRegion] = None
    IPAddress: Optional[IPAddress] = None
    StatusReport: Optional[StatusReport] = None


class QueryLoggingConfigs(BaseModel):
    __root__: List[QueryLoggingConfig]


class ResourceRecordSets(BaseModel):
    __root__: List[ResourceRecordSet]


class ResourceTagSet(BaseModel):
    """
    A complex type containing a resource and its associated tags.
    """

    ResourceType: Optional[TagResourceType] = None
    ResourceId: Optional[TagResourceId] = None
    Tags: Optional[TagList] = None


class ResourceTagSetList(BaseModel):
    __root__: List[ResourceTagSet]


class TrafficPolicySummaries(BaseModel):
    __root__: List[TrafficPolicySummary]


class TrafficPolicyInstances(BaseModel):
    __root__: List[TrafficPolicyInstance]


class TrafficPolicies(BaseModel):
    __root__: List[TrafficPolicy]


class UpdateHealthCheckRequest(BaseModel):
    """
    A complex type that contains information about a request to update a health check.
    """

    HealthCheckVersion: Optional[HealthCheckVersion] = None
    IPAddress: Optional[IPAddress] = None
    Port: Optional[Port] = None
    ResourcePath: Optional[ResourcePath] = None
    FullyQualifiedDomainName: Optional[FullyQualifiedDomainName] = None
    SearchString: Optional[SearchString] = None
    FailureThreshold: Optional[FailureThreshold] = None
    Inverted: Optional[Inverted] = None
    Disabled: Optional[Disabled] = None
    HealthThreshold: Optional[HealthThreshold] = None
    ChildHealthChecks: Optional[ChildHealthCheckList] = None
    EnableSNI: Optional[EnableSNI] = None
    Regions: Optional[HealthCheckRegionList] = None
    AlarmIdentifier: Optional[AlarmIdentifier] = None
    InsufficientDataHealthStatus: Optional[InsufficientDataHealthStatus] = None
    ResetElements: Optional[ResettableElementNameList] = None


class ActivateKeySigningKeyResponse(BaseModel):
    ChangeInfo: ChangeInfo


class AssociateVPCWithHostedZoneResponse(ActivateKeySigningKeyResponse):
    """
    A complex type that contains the response information for the <code>AssociateVPCWithHostedZone</code> request.
    """

    pass


class ChangeResourceRecordSetsResponse(ActivateKeySigningKeyResponse):
    """
    A complex type containing the response for the request.
    """

    pass


class Changes(BaseModel):
    __root__: Annotated[List[Change], Field(min_items=1)]


class CreateKeySigningKeyResponse(BaseModel):
    ChangeInfo: ChangeInfo
    KeySigningKey: KeySigningKey


class CreateQueryLoggingConfigResponse(BaseModel):
    QueryLoggingConfig: QueryLoggingConfig


class CreateReusableDelegationSetResponse(BaseModel):
    DelegationSet: DelegationSet


class CreateTrafficPolicyResponse(BaseModel):
    """
    A complex type that contains the response information for the <code>CreateTrafficPolicy</code> request.
    """

    TrafficPolicy: TrafficPolicy


class CreateTrafficPolicyInstanceResponse(BaseModel):
    """
    A complex type that contains the response information for the <code>CreateTrafficPolicyInstance</code> request.
    """

    TrafficPolicyInstance: TrafficPolicyInstance


class CreateTrafficPolicyVersionResponse(CreateTrafficPolicyResponse):
    """
    A complex type that contains the response information for the <code>CreateTrafficPolicyVersion</code> request.
    """

    pass


class DeactivateKeySigningKeyResponse(ActivateKeySigningKeyResponse):
    pass


class DeleteHostedZoneResponse(ActivateKeySigningKeyResponse):
    """
    A complex type that contains the response to a <code>DeleteHostedZone</code> request.
    """

    pass


class DeleteKeySigningKeyResponse(ActivateKeySigningKeyResponse):
    pass


class DisableHostedZoneDNSSECResponse(ActivateKeySigningKeyResponse):
    pass


class DisassociateVPCFromHostedZoneResponse(ActivateKeySigningKeyResponse):
    """
    A complex type that contains the response information for the disassociate request.
    """

    pass


class EnableHostedZoneDNSSECResponse(ActivateKeySigningKeyResponse):
    pass


class GetChangeResponse(ActivateKeySigningKeyResponse):
    """
    A complex type that contains the <code>ChangeInfo</code> element.
    """

    pass


class GetDNSSECResponse(BaseModel):
    Status: DNSSECStatus
    KeySigningKeys: KeySigningKeys


class GetQueryLoggingConfigResponse(CreateQueryLoggingConfigResponse):
    pass


class GetReusableDelegationSetResponse(CreateReusableDelegationSetResponse):
    """
    A complex type that contains the response to the <code>GetReusableDelegationSet</code> request.
    """

    pass


class GetTrafficPolicyResponse(CreateTrafficPolicyResponse):
    """
    A complex type that contains the response information for the request.
    """

    pass


class GetTrafficPolicyInstanceResponse(CreateTrafficPolicyInstanceResponse):
    """
    A complex type that contains information about the resource record sets that Amazon Route 53 created based on a specified traffic policy.
    """

    pass


class ListQueryLoggingConfigsResponse(BaseModel):
    QueryLoggingConfigs: QueryLoggingConfigs
    NextToken: Optional[PaginationToken] = None


class ListResourceRecordSetsResponse(BaseModel):
    """
    A complex type that contains list information for the resource record set.
    """

    ResourceRecordSets: ResourceRecordSets
    IsTruncated: PageTruncated
    NextRecordName: Optional[DNSName] = None
    NextRecordType: Optional[RRType] = None
    NextRecordIdentifier: Optional[ResourceRecordSetIdentifier] = None
    MaxItems: PageMaxItems


class ListReusableDelegationSetsResponse(BaseModel):
    """
    A complex type that contains information about the reusable delegation sets that are associated with the current Amazon Web Services account.
    """

    DelegationSets: DelegationSets
    Marker: PageMarker
    IsTruncated: PageTruncated
    NextMarker: Optional[PageMarker] = None
    MaxItems: PageMaxItems


class ListTagsForResourceResponse(BaseModel):
    """
    A complex type that contains information about the health checks or hosted zones for which you want to list tags.
    """

    ResourceTagSet: ResourceTagSet


class ListTagsForResourcesResponse(BaseModel):
    """
    A complex type containing tags for the specified resources.
    """

    ResourceTagSets: ResourceTagSetList


class ListTrafficPoliciesResponse(BaseModel):
    """
    A complex type that contains the response information for the request.
    """

    TrafficPolicySummaries: TrafficPolicySummaries
    IsTruncated: PageTruncated
    TrafficPolicyIdMarker: TrafficPolicyId
    MaxItems: PageMaxItems


class ListTrafficPolicyInstancesResponse(BaseModel):
    """
    A complex type that contains the response information for the request.
    """

    TrafficPolicyInstances: TrafficPolicyInstances
    HostedZoneIdMarker: Optional[ResourceId] = None
    TrafficPolicyInstanceNameMarker: Optional[DNSName] = None
    TrafficPolicyInstanceTypeMarker: Optional[RRType] = None
    IsTruncated: PageTruncated
    MaxItems: PageMaxItems


class ListTrafficPolicyInstancesByHostedZoneResponse(BaseModel):
    """
    A complex type that contains the response information for the request.
    """

    TrafficPolicyInstances: TrafficPolicyInstances
    TrafficPolicyInstanceNameMarker: Optional[DNSName] = None
    TrafficPolicyInstanceTypeMarker: Optional[RRType] = None
    IsTruncated: PageTruncated
    MaxItems: PageMaxItems


class ListTrafficPolicyInstancesByPolicyResponse(ListTrafficPolicyInstancesResponse):
    """
    A complex type that contains the response information for the request.
    """

    pass


class ListTrafficPolicyVersionsResponse(BaseModel):
    """
    A complex type that contains the response information for the request.
    """

    TrafficPolicies: TrafficPolicies
    IsTruncated: PageTruncated
    TrafficPolicyVersionMarker: TrafficPolicyVersionMarker
    MaxItems: PageMaxItems


class UpdateTrafficPolicyCommentResponse(CreateTrafficPolicyResponse):
    """
    A complex type that contains the response information for the traffic policy.
    """

    pass


class UpdateTrafficPolicyInstanceResponse(CreateTrafficPolicyInstanceResponse):
    """
    A complex type that contains information about the resource record sets that Amazon Route 53 created based on a specified traffic policy.
    """

    pass


class ChangeBatch(BaseModel):
    """
    The information for a change request.
    """

    Comment: Optional[ResourceDescription] = None
    Changes: Changes


class ChangeResourceRecordSetsRequest(BaseModel):
    """
    A complex type that contains change information for the resource record set.
    """

    ChangeBatch: ChangeBatch


class HealthCheck(BaseModel):
    """
    A complex type that contains information about one health check that is associated with the current Amazon Web Services account.
    """

    Id: HealthCheckId
    CallerReference: HealthCheckNonce
    LinkedService: Optional[LinkedService] = None
    HealthCheckConfig: HealthCheckConfig
    HealthCheckVersion: HealthCheckVersion
    CloudWatchAlarmConfiguration: Optional[CloudWatchAlarmConfiguration] = None


class HostedZone(BaseModel):
    """
    A complex type that contains general information about the hosted zone.
    """

    Id: ResourceId
    Name: DNSName
    CallerReference: Nonce
    Config_: Annotated[Optional[HostedZoneConfig], Field(alias='Config')] = None
    ResourceRecordSetCount: Optional[HostedZoneRRSetCount] = None
    LinkedService: Optional[LinkedService] = None


class HealthCheckObservations(BaseModel):
    __root__: List[HealthCheckObservation]


class HealthChecks(BaseModel):
    __root__: List[HealthCheck]


class HostedZones(BaseModel):
    __root__: List[HostedZone]


class CreateHealthCheckResponse(BaseModel):
    """
    A complex type containing the response information for the new health check.
    """

    HealthCheck: HealthCheck


class CreateHostedZoneResponse(BaseModel):
    """
    A complex type containing the response information for the hosted zone.
    """

    HostedZone: HostedZone
    ChangeInfo: ChangeInfo
    DelegationSet: DelegationSet
    VPC: Optional[VPC] = None


class GetHealthCheckResponse(CreateHealthCheckResponse):
    """
    A complex type that contains the response to a <code>GetHealthCheck</code> request.
    """

    pass


class GetHealthCheckLastFailureReasonResponse(BaseModel):
    """
    A complex type that contains the response to a <code>GetHealthCheckLastFailureReason</code> request.
    """

    HealthCheckObservations: HealthCheckObservations


class GetHealthCheckStatusResponse(GetHealthCheckLastFailureReasonResponse):
    """
    A complex type that contains the response to a <code>GetHealthCheck</code> request.
    """

    pass


class GetHostedZoneResponse(BaseModel):
    """
    A complex type that contain the response to a <code>GetHostedZone</code> request.
    """

    HostedZone: HostedZone
    DelegationSet: Optional[DelegationSet] = None
    VPCs: Optional[VPCs] = None


class ListHealthChecksResponse(BaseModel):
    """
    A complex type that contains the response to a <code>ListHealthChecks</code> request.
    """

    HealthChecks: HealthChecks
    Marker: PageMarker
    IsTruncated: PageTruncated
    NextMarker: Optional[PageMarker] = None
    MaxItems: PageMaxItems


class ListHostedZonesResponse(BaseModel):
    HostedZones: HostedZones
    Marker: PageMarker
    IsTruncated: PageTruncated
    NextMarker: Optional[PageMarker] = None
    MaxItems: PageMaxItems


class ListHostedZonesByNameResponse(BaseModel):
    """
    A complex type that contains the response information for the request.
    """

    HostedZones: HostedZones
    DNSName: Optional[DNSName] = None
    HostedZoneId: Optional[ResourceId] = None
    IsTruncated: PageTruncated
    NextDNSName: Optional[DNSName] = None
    NextHostedZoneId: Optional[ResourceId] = None
    MaxItems: PageMaxItems


class UpdateHealthCheckResponse(CreateHealthCheckResponse):
    """
    A complex type that contains the response to the <code>UpdateHealthCheck</code> request.
    """

    pass


class UpdateHostedZoneCommentResponse(BaseModel):
    """
    A complex type that contains the response to the <code>UpdateHostedZoneComment</code> request.
    """

    HostedZone: HostedZone
