# generated by datamodel-codegen:
#   filename:  openapi.yaml
#   timestamp: 2021-12-31T02:46:48+00:00

from __future__ import annotations

from datetime import datetime
from enum import Enum
from typing import Annotated, Any, List, Optional

from pydantic import BaseModel, Extra, Field


class NotAuthorizedException(BaseModel):
    __root__: Any


class InvalidParameterException(NotAuthorizedException):
    pass


class ResourceNotFoundException(NotAuthorizedException):
    pass


class InternalErrorException(NotAuthorizedException):
    pass


class DuplicateRequestException(NotAuthorizedException):
    pass


class AlreadyStreamedException(NotAuthorizedException):
    pass


class TooManyRequestsException(NotAuthorizedException):
    pass


class ResourceConflictException(NotAuthorizedException):
    pass


class InvalidConfigurationException(NotAuthorizedException):
    pass


class LambdaFunctionArn(BaseModel):
    __root__: str


class AssumeRoleArn(BaseModel):
    __root__: Annotated[
        str, Field(max_length=2048, min_length=20, regex='arn:aws:iam::\\d+:role/.*')
    ]


class StreamName(BaseModel):
    __root__: Annotated[str, Field(max_length=128, min_length=1)]


class StreamingStatus(Enum):
    ENABLED = 'ENABLED'
    DISABLED = 'DISABLED'


class ConcurrentModificationException(NotAuthorizedException):
    pass


class SubscribeToDatasetResponse(BaseModel):
    """
    Response to a SubscribeToDataset request.
    """

    pass


class UnsubscribeFromDatasetResponse(SubscribeToDatasetResponse):
    """
    Response to an UnsubscribeFromDataset request.
    """

    pass


class LimitExceededException(NotAuthorizedException):
    pass


class InvalidLambdaFunctionOutputException(NotAuthorizedException):
    pass


class LambdaThrottledException(NotAuthorizedException):
    pass


class ApplicationArn(BaseModel):
    __root__: Annotated[
        str, Field(regex='arn:aws:sns:[-0-9a-z]+:\\d+:app/[A-Z_]+/[a-zA-Z0-9_.-]+')
    ]


class Boolean(BaseModel):
    __root__: bool


class IdentityPoolId(BaseModel):
    __root__: Annotated[
        str, Field(max_length=55, min_length=1, regex='[\\w-]+:[0-9a-f-]+')
    ]


class BulkPublishRequest(BaseModel):
    """
    The input for the BulkPublish operation.
    """

    pass


class BulkPublishStatus(Enum):
    NOT_STARTED = 'NOT_STARTED'
    IN_PROGRESS = 'IN_PROGRESS'
    FAILED = 'FAILED'
    SUCCEEDED = 'SUCCEEDED'


class ClientContext(LambdaFunctionArn):
    pass


class CognitoEventType(LambdaFunctionArn):
    pass


class CognitoStreams(BaseModel):
    """
    Configuration options for configure Cognito streams.
    """

    StreamName: Optional[StreamName] = None
    RoleArn: Optional[AssumeRoleArn] = None
    StreamingStatus: Optional[StreamingStatus] = None


class IdentityId(IdentityPoolId):
    pass


class DatasetName(BaseModel):
    __root__: Annotated[
        str, Field(max_length=128, min_length=1, regex='[a-zA-Z0-9_.:-]+')
    ]


class Date(BaseModel):
    __root__: datetime


class String(LambdaFunctionArn):
    pass


class Long(BaseModel):
    __root__: int


class Dataset(BaseModel):
    """
    A collection of data for an identity pool. An identity pool can have multiple datasets. A dataset is per identity and can be general or associated with a particular entity in an application (like a saved game). Datasets are automatically created if they don't exist. Data is synced by dataset, and a dataset can hold up to 1MB of key-value pairs.
    """

    IdentityId: Optional[IdentityId] = None
    DatasetName: Optional[DatasetName] = None
    CreationDate: Optional[Date] = None
    LastModifiedDate: Optional[Date] = None
    LastModifiedBy: Optional[String] = None
    DataStorage: Optional[Long] = None
    NumRecords: Optional[Long] = None


class DatasetList(BaseModel):
    __root__: List[Dataset]


class DeleteDatasetRequest(BaseModel):
    """
    A request to delete the specific dataset.
    """

    pass


class DescribeDatasetRequest(BaseModel):
    """
    A request for meta data about a dataset (creation date, number of records, size) by owner and dataset name.
    """

    pass


class DescribeIdentityPoolUsageRequest(BaseModel):
    """
    A request for usage information about the identity pool.
    """

    pass


class IdentityPoolUsage(BaseModel):
    """
    Usage information for the identity pool.
    """

    IdentityPoolId: Optional[IdentityPoolId] = None
    SyncSessionsCount: Optional[Long] = None
    DataStorage: Optional[Long] = None
    LastModifiedDate: Optional[Date] = None


class DescribeIdentityUsageRequest(BaseModel):
    """
    A request for information about the usage of an identity pool.
    """

    pass


class DeviceId(BaseModel):
    __root__: Annotated[str, Field(max_length=256, min_length=1)]


class Events(BaseModel):
    pass

    class Config:
        extra = Extra.allow


class GetBulkPublishDetailsRequest(BaseModel):
    """
    The input for the GetBulkPublishDetails operation.
    """

    pass


class GetCognitoEventsRequest(BaseModel):
    """
    A request for a list of the configured Cognito Events
    """

    pass


class GetIdentityPoolConfigurationRequest(BaseModel):
    """
    The input for the GetIdentityPoolConfiguration operation.
    """

    pass


class IdentityPoolUsageList(BaseModel):
    __root__: List[IdentityPoolUsage]


class Integer(Long):
    pass


class IntegerString(Long):
    pass


class ListDatasetsRequest(BaseModel):
    """
    Request for a list of datasets for an identity.
    """

    pass


class ListIdentityPoolUsageRequest(BaseModel):
    """
    A request for usage information on an identity pool.
    """

    pass


class SyncSessionToken1(LambdaFunctionArn):
    pass


class ListRecordsRequest(BaseModel):
    """
    A request for a list of records.
    """

    pass


class MergedDatasetNameList(BaseModel):
    __root__: List[String]


class Operation(Enum):
    replace = 'replace'
    remove = 'remove'


class Platform(Enum):
    APNS = 'APNS'
    APNS_SANDBOX = 'APNS_SANDBOX'
    GCM = 'GCM'
    ADM = 'ADM'


class PushToken(LambdaFunctionArn):
    pass


class RecordKey(BaseModel):
    __root__: Annotated[str, Field(max_length=1024, min_length=1)]


class RecordValue(BaseModel):
    __root__: Annotated[str, Field(max_length=1048575)]


class Record(BaseModel):
    """
    The basic data structure of a dataset.
    """

    Key: Optional[RecordKey] = None
    Value: Optional[RecordValue] = None
    SyncCount: Optional[Long] = None
    LastModifiedDate: Optional[Date] = None
    LastModifiedBy: Optional[String] = None
    DeviceLastModifiedDate: Optional[Date] = None


class RegisterDeviceRequest(BaseModel):
    """
    A request to RegisterDevice.
    """

    Platform: Platform
    Token: PushToken


class SetCognitoEventsRequest(BaseModel):
    """
    <p>A request to configure Cognito Events"</p>"
    """

    Events: Events


class SubscribeToDatasetRequest(BaseModel):
    """
    A request to SubscribeToDatasetRequest.
    """

    pass


class UnsubscribeFromDatasetRequest(BaseModel):
    """
    A request to UnsubscribeFromDataset.
    """

    pass


class BulkPublishResponse(BaseModel):
    """
    The output for the BulkPublish operation.
    """

    IdentityPoolId: Optional[IdentityPoolId] = None


class DeleteDatasetResponse(BaseModel):
    """
    Response to a successful DeleteDataset request.
    """

    Dataset: Optional[Dataset] = None


class DescribeDatasetResponse(DeleteDatasetResponse):
    """
    Response to a successful DescribeDataset request.
    """

    pass


class DescribeIdentityPoolUsageResponse(BaseModel):
    """
    Response to a successful DescribeIdentityPoolUsage request.
    """

    IdentityPoolUsage: Optional[IdentityPoolUsage] = None


class GetBulkPublishDetailsResponse(BaseModel):
    """
    The output for the GetBulkPublishDetails operation.
    """

    IdentityPoolId: Optional[IdentityPoolId] = None
    BulkPublishStartTime: Optional[Date] = None
    BulkPublishCompleteTime: Optional[Date] = None
    BulkPublishStatus: Optional[BulkPublishStatus] = None
    FailureMessage: Optional[String] = None


class GetCognitoEventsResponse(BaseModel):
    """
    The response from the GetCognitoEvents request
    """

    Events: Optional[Events] = None


class ListDatasetsResponse(BaseModel):
    """
    Returned for a successful ListDatasets request.
    """

    Datasets: Optional[DatasetList] = None
    Count: Optional[Integer] = None
    NextToken: Optional[String] = None


class ListIdentityPoolUsageResponse(BaseModel):
    """
    Returned for a successful ListIdentityPoolUsage request.
    """

    IdentityPoolUsages: Optional[IdentityPoolUsageList] = None
    MaxResults: Optional[Integer] = None
    Count: Optional[Integer] = None
    NextToken: Optional[String] = None


class RegisterDeviceResponse(BaseModel):
    """
    Response to a RegisterDevice request.
    """

    DeviceId: Optional[DeviceId] = None


class ApplicationArnList(BaseModel):
    __root__: List[ApplicationArn]


class RecordPatch(BaseModel):
    """
    An update operation for a record.
    """

    Op: Operation
    Key: RecordKey
    Value: Optional[RecordValue] = None
    SyncCount: Long
    DeviceLastModifiedDate: Optional[Date] = None


class IdentityUsage(BaseModel):
    """
    Usage information for the identity.
    """

    IdentityId: Optional[IdentityId] = None
    IdentityPoolId: Optional[IdentityPoolId] = None
    LastModifiedDate: Optional[Date] = None
    DatasetCount: Optional[Integer] = None
    DataStorage: Optional[Long] = None


class PushSync(BaseModel):
    """
    Configuration options to be applied to the identity pool.
    """

    ApplicationArns: Optional[ApplicationArnList] = None
    RoleArn: Optional[AssumeRoleArn] = None


class RecordList(BaseModel):
    __root__: List[Record]


class RecordPatchList(BaseModel):
    __root__: List[RecordPatch]


class SetIdentityPoolConfigurationRequest(BaseModel):
    """
    The input for the SetIdentityPoolConfiguration operation.
    """

    PushSync: Optional[PushSync] = None
    CognitoStreams: Optional[CognitoStreams] = None


class UpdateRecordsRequest(BaseModel):
    """
    A request to post updates to records or add and delete records for a dataset and user.
    """

    DeviceId: Optional[DeviceId] = None
    RecordPatches: Optional[RecordPatchList] = None
    SyncSessionToken: SyncSessionToken1


class DescribeIdentityUsageResponse(BaseModel):
    """
    The response to a successful DescribeIdentityUsage request.
    """

    IdentityUsage: Optional[IdentityUsage] = None


class GetIdentityPoolConfigurationResponse(BaseModel):
    """
    The output for the GetIdentityPoolConfiguration operation.
    """

    IdentityPoolId: Optional[IdentityPoolId] = None
    PushSync: Optional[PushSync] = None
    CognitoStreams: Optional[CognitoStreams] = None


class ListRecordsResponse(BaseModel):
    """
    Returned for a successful ListRecordsRequest.
    """

    Records: Optional[RecordList] = None
    NextToken: Optional[String] = None
    Count: Optional[Integer] = None
    DatasetSyncCount: Optional[Long] = None
    LastModifiedBy: Optional[String] = None
    MergedDatasetNames: Optional[MergedDatasetNameList] = None
    DatasetExists: Optional[Boolean] = None
    DatasetDeletedAfterRequestedSyncCount: Optional[Boolean] = None
    SyncSessionToken: Optional[String] = None


class SetIdentityPoolConfigurationResponse(GetIdentityPoolConfigurationResponse):
    """
    The output for the SetIdentityPoolConfiguration operation
    """

    pass


class UpdateRecordsResponse(BaseModel):
    """
    Returned for a successful UpdateRecordsRequest.
    """

    Records: Optional[RecordList] = None
