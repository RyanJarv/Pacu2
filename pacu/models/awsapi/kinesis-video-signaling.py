# generated by datamodel-codegen:
#   filename:  openapi.yaml
#   timestamp: 2021-12-31T02:51:22+00:00

from __future__ import annotations

from enum import Enum
from typing import Annotated, Any, List, Optional

from pydantic import BaseModel, Field


class InvalidClientException(BaseModel):
    __root__: Any


class SessionExpiredException(InvalidClientException):
    pass


class ClientLimitExceededException(InvalidClientException):
    pass


class ResourceNotFoundException(InvalidClientException):
    pass


class InvalidArgumentException(InvalidClientException):
    pass


class NotAuthorizedException(InvalidClientException):
    pass


class Answer(BaseModel):
    __root__: Annotated[str, Field(max_length=10000, min_length=1)]


class ClientId(BaseModel):
    __root__: Annotated[
        str, Field(max_length=256, min_length=1, regex='[a-zA-Z0-9_.-]+')
    ]


class ResourceARN(BaseModel):
    __root__: Annotated[
        str,
        Field(
            max_length=1024,
            min_length=1,
            regex='arn:aws:kinesisvideo:[a-z0-9-]+:[0-9]+:[a-z]+/[a-zA-Z0-9_.-]+/[0-9]+',
        ),
    ]


class Service(Enum):
    TURN = 'TURN'


class Username(ClientId):
    pass


class GetIceServerConfigRequest(BaseModel):
    ChannelARN: ResourceARN
    ClientId: Optional[ClientId] = None
    Service: Optional[Service] = None
    Username: Optional[Username] = None


class Password(ClientId):
    pass


class Ttl(BaseModel):
    __root__: Annotated[int, Field(ge=30.0, le=86400.0)]


class MessagePayload(BaseModel):
    __root__: Annotated[
        str, Field(max_length=10000, min_length=1, regex='[a-zA-Z0-9+/=]+')
    ]


class SendAlexaOfferToMasterRequest(BaseModel):
    ChannelARN: ResourceARN
    SenderClientId: ClientId
    MessagePayload: MessagePayload


class Uri(BaseModel):
    __root__: Annotated[str, Field(max_length=256, min_length=1)]


class SendAlexaOfferToMasterResponse(BaseModel):
    Answer: Optional[Answer] = None


class Uris(BaseModel):
    __root__: List[Uri]


class IceServer(BaseModel):
    """
    A structure for the ICE server connection data.
    """

    Uris: Optional[Uris] = None
    Username: Optional[Username] = None
    Password: Optional[Password] = None
    Ttl: Optional[Ttl] = None


class IceServerList(BaseModel):
    __root__: List[IceServer]


class GetIceServerConfigResponse(BaseModel):
    IceServerList: Optional[IceServerList] = None
