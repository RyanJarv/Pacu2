# generated by datamodel-codegen:
#   filename:  openapi.yaml
#   timestamp: 2021-12-31T02:46:40+00:00

from __future__ import annotations

from datetime import datetime
from enum import Enum
from typing import Annotated, Any, List, Optional

from pydantic import BaseModel, Extra, Field, SecretStr


class EventTypeId(BaseModel):
    __root__: Annotated[str, Field(max_length=200, min_length=1)]


class TagValue(BaseModel):
    __root__: Annotated[
        str, Field(max_length=256, regex='^([\\p{L}\\p{Z}\\p{N}_.:/=+\\-@]*)$')
    ]


class ResourceAlreadyExistsException(BaseModel):
    __root__: Any


class ValidationException(ResourceAlreadyExistsException):
    pass


class LimitExceededException(ResourceAlreadyExistsException):
    pass


class ConfigurationException(ResourceAlreadyExistsException):
    pass


class ConcurrentModificationException(ResourceAlreadyExistsException):
    pass


class AccessDeniedException(ResourceAlreadyExistsException):
    pass


class DeleteTargetResult(BaseModel):
    pass


class ResourceNotFoundException(ResourceAlreadyExistsException):
    pass


class InvalidNextTokenException(ResourceAlreadyExistsException):
    pass


class TargetType(BaseModel):
    __root__: Annotated[str, Field(regex='^[A-Za-z]+$')]


class TargetAddress(BaseModel):
    __root__: Annotated[SecretStr, Field(max_length=320, min_length=1)]


class UntagResourceResult(DeleteTargetResult):
    pass


class TagKey(BaseModel):
    __root__: Annotated[
        str,
        Field(
            max_length=128, min_length=1, regex='^([\\p{L}\\p{Z}\\p{N}_.:/=+\\-@]*)$'
        ),
    ]


class UpdateNotificationRuleResult(DeleteTargetResult):
    pass


class ClientRequestToken(BaseModel):
    __root__: Annotated[str, Field(max_length=256, min_length=1, regex='^[\\w:/-]+$')]


class NotificationRuleName(BaseModel):
    __root__: Annotated[
        SecretStr, Field(max_length=64, min_length=1, regex='[A-Za-z0-9\\-_ ]+$')
    ]


class EventTypeIds(BaseModel):
    __root__: List[EventTypeId]


class NotificationRuleResource(BaseModel):
    __root__: Annotated[
        str, Field(regex='^arn:aws[^:\\s]*:[^:\\s]*:[^:\\s]*:[0-9]{12}:[^\\s]+$')
    ]


class DetailType(Enum):
    BASIC = 'BASIC'
    FULL = 'FULL'


class Tags(BaseModel):
    pass

    class Config:
        extra = Extra.allow


class NotificationRuleStatus(Enum):
    ENABLED = 'ENABLED'
    DISABLED = 'DISABLED'


class NotificationRuleArn(BaseModel):
    __root__: Annotated[
        str,
        Field(
            regex='^arn:aws[^:\\s]*:codestar-notifications:[^:\\s]+:\\d{12}:notificationrule\\/(.*\\S)?$'
        ),
    ]


class CreatedTimestamp(BaseModel):
    __root__: datetime


class DeleteNotificationRuleRequest(BaseModel):
    Arn: NotificationRuleArn


class ForceUnsubscribeAll(BaseModel):
    __root__: bool


class DeleteTargetRequest(BaseModel):
    TargetAddress: TargetAddress
    ForceUnsubscribeAll: Optional[ForceUnsubscribeAll] = None


class DescribeNotificationRuleRequest(BaseModel):
    Arn: NotificationRuleArn


class NotificationRuleCreatedBy(BaseModel):
    __root__: Annotated[str, Field(min_length=1)]


class LastModifiedTimestamp(CreatedTimestamp):
    pass


class EventTypeName(BaseModel):
    __root__: str


class ServiceName(EventTypeName):
    pass


class ResourceType(BaseModel):
    __root__: Annotated[str, Field(min_length=1, regex='^([a-zA-Z0-9-])+$')]


class ListEventTypesFilterName(Enum):
    RESOURCE_TYPE = 'RESOURCE_TYPE'
    SERVICE_NAME = 'SERVICE_NAME'


class ListEventTypesFilterValue(EventTypeName):
    pass


class NextToken(BaseModel):
    __root__: Annotated[str, Field(regex='^[\\w/+=]+$')]


class MaxResults(BaseModel):
    __root__: Annotated[int, Field(ge=1.0, le=100.0)]


class ListNotificationRulesFilterName(Enum):
    EVENT_TYPE_ID = 'EVENT_TYPE_ID'
    CREATED_BY = 'CREATED_BY'
    RESOURCE = 'RESOURCE'
    TARGET_ADDRESS = 'TARGET_ADDRESS'


class ListNotificationRulesFilterValue(EventTypeName):
    pass


class ListTagsForResourceRequest(BaseModel):
    Arn: NotificationRuleArn


class ListTargetsFilterName(Enum):
    TARGET_TYPE = 'TARGET_TYPE'
    TARGET_ADDRESS = 'TARGET_ADDRESS'
    TARGET_STATUS = 'TARGET_STATUS'


class ListTargetsFilterValue(EventTypeName):
    pass


class NotificationRuleId(BaseModel):
    __root__: Annotated[str, Field(max_length=40, min_length=1)]


class TagKeys(BaseModel):
    __root__: List[TagKey]


class TagResourceRequest(BaseModel):
    Arn: NotificationRuleArn
    Tags: Tags


class TargetStatus(Enum):
    PENDING = 'PENDING'
    ACTIVE = 'ACTIVE'
    UNREACHABLE = 'UNREACHABLE'
    INACTIVE = 'INACTIVE'
    DEACTIVATED = 'DEACTIVATED'


class TargetSummary(BaseModel):
    """
    Information about the targets specified for a notification rule.
    """

    TargetAddress: Optional[TargetAddress] = None
    TargetType: Optional[TargetType] = None
    TargetStatus: Optional[TargetStatus] = None


class UnsubscribeRequest(BaseModel):
    Arn: NotificationRuleArn
    TargetAddress: TargetAddress


class UntagResourceRequest(BaseModel):
    Arn: NotificationRuleArn
    TagKeys: TagKeys


class CreateNotificationRuleResult(BaseModel):
    Arn: Optional[NotificationRuleArn] = None


class Target(BaseModel):
    """
    Information about the SNS topics associated with a notification rule.
    """

    TargetType: Optional[TargetType] = None
    TargetAddress: Optional[TargetAddress] = None


class DeleteNotificationRuleResult(CreateNotificationRuleResult):
    pass


class ListEventTypesFilter(BaseModel):
    """
    Information about a filter to apply to the list of returned event types. You can filter by resource type or service name.
    """

    Name: ListEventTypesFilterName
    Value: ListEventTypesFilterValue


class ListNotificationRulesFilter(BaseModel):
    """
    Information about a filter to apply to the list of returned notification rules. You can filter by event type, owner, resource, or target.
    """

    Name: ListNotificationRulesFilterName
    Value: ListNotificationRulesFilterValue


class ListTagsForResourceResult(BaseModel):
    Tags: Optional[Tags] = None


class ListTargetsFilter(BaseModel):
    """
    Information about a filter to apply to the list of returned targets. You can filter by target type, address, or status. For example, to filter results to notification rules that have active Amazon SNS topics as targets, you could specify a ListTargetsFilter Name as TargetType and a Value of SNS, and a Name of TARGET_STATUS and a Value of ACTIVE.
    """

    Name: ListTargetsFilterName
    Value: ListTargetsFilterValue


class SubscribeResult(CreateNotificationRuleResult):
    pass


class TagResourceResult(ListTagsForResourceResult):
    pass


class UnsubscribeResult(BaseModel):
    Arn: NotificationRuleArn


class Targets2(BaseModel):
    __root__: Annotated[List[Target], Field(max_items=10)]


class CreateNotificationRuleRequest(BaseModel):
    Name: NotificationRuleName
    EventTypeIds: EventTypeIds
    Resource: NotificationRuleResource
    Targets: Targets2
    DetailType: DetailType
    ClientRequestToken: Optional[ClientRequestToken] = None
    Tags: Optional[Tags] = None
    Status: Optional[NotificationRuleStatus] = None


class TargetsBatch(BaseModel):
    __root__: List[TargetSummary]


class EventTypeSummary(BaseModel):
    """
    Returns information about an event that has triggered a notification rule.
    """

    EventTypeId: Optional[EventTypeId] = None
    ServiceName: Optional[ServiceName] = None
    EventTypeName: Optional[EventTypeName] = None
    ResourceType: Optional[ResourceType] = None


class ListEventTypesFilters(BaseModel):
    __root__: List[ListEventTypesFilter]


class ListEventTypesRequest(BaseModel):
    Filters: Optional[ListEventTypesFilters] = None
    NextToken: Optional[NextToken] = None
    MaxResults: Optional[MaxResults] = None


class ListNotificationRulesFilters(BaseModel):
    __root__: List[ListNotificationRulesFilter]


class ListNotificationRulesRequest(BaseModel):
    Filters: Optional[ListNotificationRulesFilters] = None
    NextToken: Optional[NextToken] = None
    MaxResults: Optional[MaxResults] = None


class ListTargetsFilters(BaseModel):
    __root__: List[ListTargetsFilter]


class ListTargetsRequest(BaseModel):
    Filters: Optional[ListTargetsFilters] = None
    NextToken: Optional[NextToken] = None
    MaxResults: Optional[MaxResults] = None


class NotificationRuleSummary(BaseModel):
    """
    Information about a specified notification rule.
    """

    Id: Optional[NotificationRuleId] = None
    Arn: Optional[NotificationRuleArn] = None


class SubscribeRequest(BaseModel):
    Arn: NotificationRuleArn
    Target: Target
    ClientRequestToken: Optional[ClientRequestToken] = None


class UpdateNotificationRuleRequest(BaseModel):
    Arn: NotificationRuleArn
    Name: Optional[NotificationRuleName] = None
    Status: Optional[NotificationRuleStatus] = None
    EventTypeIds: Optional[EventTypeIds] = None
    Targets: Optional[Targets2] = None
    DetailType: Optional[DetailType] = None


class ListTargetsResult(BaseModel):
    Targets: Optional[TargetsBatch] = None
    NextToken: Optional[NextToken] = None


class EventTypeBatch(BaseModel):
    __root__: List[EventTypeSummary]


class NotificationRuleBatch(BaseModel):
    __root__: List[NotificationRuleSummary]


class DescribeNotificationRuleResult(BaseModel):
    Arn: NotificationRuleArn
    Name: Optional[NotificationRuleName] = None
    EventTypes: Optional[EventTypeBatch] = None
    Resource: Optional[NotificationRuleResource] = None
    Targets: Optional[TargetsBatch] = None
    DetailType: Optional[DetailType] = None
    CreatedBy: Optional[NotificationRuleCreatedBy] = None
    Status: Optional[NotificationRuleStatus] = None
    CreatedTimestamp: Optional[CreatedTimestamp] = None
    LastModifiedTimestamp: Optional[LastModifiedTimestamp] = None
    Tags: Optional[Tags] = None


class ListEventTypesResult(BaseModel):
    EventTypes: Optional[EventTypeBatch] = None
    NextToken: Optional[NextToken] = None


class ListNotificationRulesResult(BaseModel):
    NextToken: Optional[NextToken] = None
    NotificationRules: Optional[NotificationRuleBatch] = None
