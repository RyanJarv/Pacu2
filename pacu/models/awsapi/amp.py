# generated by datamodel-codegen:
#   filename:  openapi.yaml
#   timestamp: 2021-12-31T02:44:44+00:00

from __future__ import annotations

from datetime import datetime
from enum import Enum
from typing import Annotated, Any, List, Optional

from pydantic import BaseModel, Extra, Field


class TagValue(BaseModel):
    __root__: Annotated[
        str,
        Field(
            max_length=256, min_length=0, regex='^([\\p{L}\\p{Z}\\p{N}_.:/=+\\-@]*)$'
        ),
    ]


class ThrottlingException(BaseModel):
    __root__: Any


class ConflictException(ThrottlingException):
    pass


class ValidationException(ThrottlingException):
    pass


class AccessDeniedException(ThrottlingException):
    pass


class InternalServerException(ThrottlingException):
    pass


class ServiceQuotaExceededException(ThrottlingException):
    pass


class ResourceNotFoundException(ThrottlingException):
    pass


class TagResourceResponse(BaseModel):
    pass


class UntagResourceResponse(TagResourceResponse):
    pass


class TagKey(BaseModel):
    __root__: Annotated[
        str,
        Field(
            max_length=128, min_length=1, regex='^([\\p{L}\\p{Z}\\p{N}_.:/=+\\-@]*)$'
        ),
    ]


class WorkspaceAlias(BaseModel):
    __root__: Annotated[
        str,
        Field(
            description='A user-assigned workspace alias.', max_length=100, min_length=1
        ),
    ]


class IdempotencyToken(BaseModel):
    __root__: Annotated[
        str,
        Field(
            description='An identifier used to ensure the idempotency of a write request.',
            max_length=64,
            min_length=1,
            regex='[!-~]+',
        ),
    ]


class TagMap(BaseModel):
    """
    The list of tags assigned to the resource.
    """

    pass

    class Config:
        extra = Extra.allow


class CreateWorkspaceRequest(BaseModel):
    """
    Represents the input of a CreateWorkspace operation.
    """

    alias: Optional[WorkspaceAlias] = None
    clientToken: Optional[IdempotencyToken] = None
    tags: Optional[TagMap] = None


class WorkspaceArn(BaseModel):
    __root__: Annotated[str, Field(description='An ARN identifying a Workspace.')]


class WorkspaceId(BaseModel):
    __root__: Annotated[
        str,
        Field(
            description='A workspace ID.',
            max_length=64,
            min_length=1,
            regex='[0-9A-Za-z][-.0-9A-Z_a-z]*',
        ),
    ]


class DeleteWorkspaceRequest(BaseModel):
    """
    Represents the input of a DeleteWorkspace operation.
    """

    pass


class DescribeWorkspaceRequest(BaseModel):
    """
    Represents the input of a DescribeWorkspace operation.
    """

    pass


class String(BaseModel):
    __root__: str


class ListTagsForResourceRequest(BaseModel):
    pass


class ListWorkspacesRequestMaxResultsInteger(BaseModel):
    __root__: Annotated[int, Field(ge=1.0, le=1000.0)]


class PaginationToken(BaseModel):
    __root__: Annotated[
        str,
        Field(
            description='A token used to access the next page in a paginated result set.'
        ),
    ]


class ListWorkspacesRequest(BaseModel):
    """
    Represents the input of a ListWorkspaces operation.
    """

    pass


class TagKeys(BaseModel):
    __root__: List[TagKey]


class TagResourceRequest(BaseModel):
    tags: TagMap


class Timestamp(BaseModel):
    __root__: datetime


class UntagResourceRequest(BaseModel):
    pass


class UpdateWorkspaceAliasRequest(BaseModel):
    """
    Represents the input of an UpdateWorkspaceAlias operation.
    """

    alias: Optional[WorkspaceAlias] = None
    clientToken: Optional[IdempotencyToken] = None


class Uri(BaseModel):
    __root__: Annotated[str, Field(max_length=1024, min_length=1)]


class WorkspaceStatusCode(Enum):
    """
    State of a workspace.
    """

    CREATING = 'CREATING'
    ACTIVE = 'ACTIVE'
    UPDATING = 'UPDATING'
    DELETING = 'DELETING'
    CREATION_FAILED = 'CREATION_FAILED'


class ListTagsForResourceResponse(BaseModel):
    tags: Optional[TagMap] = None


class WorkspaceStatus(BaseModel):
    """
    Represents the status of a workspace.
    """

    statusCode: WorkspaceStatusCode


class WorkspaceDescription(BaseModel):
    """
    Represents the properties of a workspace.
    """

    alias: Optional[WorkspaceAlias] = None
    arn: WorkspaceArn
    createdAt: Timestamp
    prometheusEndpoint: Optional[Uri] = None
    status: WorkspaceStatus
    tags: Optional[TagMap] = None
    workspaceId: WorkspaceId


class WorkspaceSummary(BaseModel):
    """
    Represents a summary of the properties of a workspace.
    """

    alias: Optional[WorkspaceAlias] = None
    arn: WorkspaceArn
    createdAt: Timestamp
    status: WorkspaceStatus
    tags: Optional[TagMap] = None
    workspaceId: WorkspaceId


class CreateWorkspaceResponse(BaseModel):
    """
    Represents the output of a CreateWorkspace operation.
    """

    arn: WorkspaceArn
    status: WorkspaceStatus
    tags: Optional[TagMap] = None
    workspaceId: WorkspaceId


class DescribeWorkspaceResponse(BaseModel):
    """
    Represents the output of a DescribeWorkspace operation.
    """

    workspace: WorkspaceDescription


class WorkspaceSummaryList(BaseModel):
    """
    A list of workspace summaries.
    """

    __root__: Annotated[
        List[WorkspaceSummary], Field(description='A list of workspace summaries.')
    ]


class ListWorkspacesResponse(BaseModel):
    """
    Represents the output of a ListWorkspaces operation.
    """

    nextToken: Optional[PaginationToken] = None
    workspaces: WorkspaceSummaryList
