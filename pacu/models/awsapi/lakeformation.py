# generated by datamodel-codegen:
#   filename:  openapi.yaml
#   timestamp: 2021-12-31T02:51:33+00:00

from __future__ import annotations

from datetime import datetime
from enum import Enum
from typing import Annotated, Any, List, Optional

from pydantic import BaseModel, Field


class EntityNotFoundException(BaseModel):
    __root__: Any


class InvalidInputException(EntityNotFoundException):
    pass


class InternalServiceException(EntityNotFoundException):
    pass


class OperationTimeoutException(EntityNotFoundException):
    pass


class AccessDeniedException(EntityNotFoundException):
    pass


class ConcurrentModificationException(EntityNotFoundException):
    pass


class CreateLFTagResponse(BaseModel):
    pass


class ResourceNumberLimitExceededException(EntityNotFoundException):
    pass


class DeleteLFTagResponse(CreateLFTagResponse):
    pass


class DeregisterResourceResponse(CreateLFTagResponse):
    pass


class GlueEncryptionException(EntityNotFoundException):
    pass


class GrantPermissionsResponse(CreateLFTagResponse):
    pass


class PutDataLakeSettingsResponse(CreateLFTagResponse):
    pass


class RegisterResourceResponse(CreateLFTagResponse):
    pass


class AlreadyExistsException(EntityNotFoundException):
    pass


class RevokePermissionsResponse(CreateLFTagResponse):
    pass


class UpdateLFTagResponse(CreateLFTagResponse):
    pass


class UpdateResourceResponse(CreateLFTagResponse):
    pass


class CatalogIdString(BaseModel):
    __root__: Annotated[str, Field(max_length=255, min_length=1)]


class Identifier(CatalogIdString):
    pass


class BooleanNullable(BaseModel):
    __root__: bool


class CatalogResource(CreateLFTagResponse):
    """
    A structure for the catalog object.
    """

    pass


class NameString(CatalogIdString):
    pass


class ColumnNames(BaseModel):
    __root__: List[NameString]


class ColumnWildcard(BaseModel):
    """
    A wildcard object, consisting of an optional list of excluded column names or indexes.
    """

    ExcludedColumnNames: Optional[ColumnNames] = None


class ComparisonOperator(Enum):
    EQ = 'EQ'
    NE = 'NE'
    LE = 'LE'
    LT = 'LT'
    GE = 'GE'
    GT = 'GT'
    CONTAINS = 'CONTAINS'
    NOT_CONTAINS = 'NOT_CONTAINS'
    BEGINS_WITH = 'BEGINS_WITH'
    IN = 'IN'
    BETWEEN = 'BETWEEN'


class LFTagKey(BaseModel):
    __root__: Annotated[
        str,
        Field(
            max_length=128, min_length=1, regex='^([\\p{L}\\p{Z}\\p{N}_.:\\/=+\\-@%]*)$'
        ),
    ]


class DataLakePrincipalString(CatalogIdString):
    pass


class DataLakeResourceType(Enum):
    CATALOG = 'CATALOG'
    DATABASE = 'DATABASE'
    TABLE = 'TABLE'
    DATA_LOCATION = 'DATA_LOCATION'
    LF_TAG = 'LF_TAG'
    LF_TAG_POLICY = 'LF_TAG_POLICY'
    LF_TAG_POLICY_DATABASE = 'LF_TAG_POLICY_DATABASE'
    LF_TAG_POLICY_TABLE = 'LF_TAG_POLICY_TABLE'


class TrustedResourceOwners(BaseModel):
    __root__: List[CatalogIdString]


class ResourceArnString(BaseModel):
    __root__: str


class DataLocationResource(BaseModel):
    """
    A structure for a data location object where permissions are granted or revoked.
    """

    CatalogId: Optional[CatalogIdString] = None
    ResourceArn: ResourceArnString


class DatabaseResource(BaseModel):
    """
    A structure for the database object.
    """

    CatalogId: Optional[CatalogIdString] = None
    Name: NameString


class DescriptionString(BaseModel):
    __root__: Annotated[str, Field(max_length=2048, min_length=0)]


class FieldNameString(Enum):
    RESOURCE_ARN = 'RESOURCE_ARN'
    ROLE_ARN = 'ROLE_ARN'
    LAST_MODIFIED = 'LAST_MODIFIED'


class Token(ResourceArnString):
    pass


class PageSize(BaseModel):
    __root__: Annotated[int, Field(ge=1.0, le=1000.0)]


class IAMRoleArn(BaseModel):
    __root__: Annotated[str, Field(regex='arn:aws:iam::[0-9]*:role/.*')]


class ResourceType1(Enum):
    DATABASE = 'DATABASE'
    TABLE = 'TABLE'


class LFTagValue(BaseModel):
    __root__: Annotated[
        str,
        Field(
            max_length=256,
            min_length=0,
            regex='^([\\p{L}\\p{Z}\\p{N}_.:\\*\\/=+\\-@%]*)$',
        ),
    ]


class LastModifiedTimestamp(BaseModel):
    __root__: datetime


class ResourceShareType(Enum):
    FOREIGN = 'FOREIGN'
    ALL = 'ALL'


class NullableBoolean(BooleanNullable):
    pass


class Permission(Enum):
    ALL = 'ALL'
    SELECT = 'SELECT'
    ALTER = 'ALTER'
    DROP = 'DROP'
    DELETE = 'DELETE'
    INSERT = 'INSERT'
    DESCRIBE = 'DESCRIBE'
    CREATE_DATABASE = 'CREATE_DATABASE'
    CREATE_TABLE = 'CREATE_TABLE'
    DATA_LOCATION_ACCESS = 'DATA_LOCATION_ACCESS'
    CREATE_TAG = 'CREATE_TAG'
    ALTER_TAG = 'ALTER_TAG'
    DELETE_TAG = 'DELETE_TAG'
    DESCRIBE_TAG = 'DESCRIBE_TAG'
    ASSOCIATE_TAG = 'ASSOCIATE_TAG'


class RAMResourceShareArn(ResourceArnString):
    pass


class TableWithColumnsResource(BaseModel):
    """
    <p>A structure for a table with columns object. This object is only used when granting a SELECT permission.</p> <p>This object must take a value for at least one of <code>ColumnsNames</code>, <code>ColumnsIndexes</code>, or <code>ColumnsWildcard</code>.</p>
    """

    CatalogId: Optional[CatalogIdString] = None
    DatabaseName: NameString
    Name: NameString
    ColumnNames: Optional[ColumnNames] = None
    ColumnWildcard: Optional[ColumnWildcard] = None


class StringValue(ResourceArnString):
    pass


class TableWildcard(CreateLFTagResponse):
    """
    A wildcard object representing every table under a database.
    """

    pass


class DeleteLFTagRequest(BaseModel):
    CatalogId: Optional[CatalogIdString] = None
    TagKey: LFTagKey


class DeregisterResourceRequest(BaseModel):
    ResourceArn: ResourceArnString


class DescribeResourceRequest(BaseModel):
    ResourceArn: ResourceArnString


class GetDataLakeSettingsRequest(BaseModel):
    CatalogId: Optional[CatalogIdString] = None


class GetEffectivePermissionsForPathRequest(BaseModel):
    CatalogId: Optional[CatalogIdString] = None
    ResourceArn: ResourceArnString
    NextToken: Optional[Token] = None
    MaxResults: Optional[PageSize] = None


class GetLFTagRequest(BaseModel):
    CatalogId: Optional[CatalogIdString] = None
    TagKey: LFTagKey


class ListLFTagsRequest(BaseModel):
    CatalogId: Optional[CatalogIdString] = None
    ResourceShareType: Optional[ResourceShareType] = None
    MaxResults: Optional[PageSize] = None
    NextToken: Optional[Token] = None


class RegisterResourceRequest(BaseModel):
    ResourceArn: ResourceArnString
    UseServiceLinkedRole: Optional[NullableBoolean] = None
    RoleArn: Optional[IAMRoleArn] = None


class UpdateResourceRequest(BaseModel):
    RoleArn: IAMRoleArn
    ResourceArn: ResourceArnString


class ErrorDetail(BaseModel):
    """
    Contains details about an error.
    """

    ErrorCode: Optional[NameString] = None
    ErrorMessage: Optional[DescriptionString] = None


class DataLakePrincipal(BaseModel):
    """
    The AWS Lake Formation principal. Supported principals are IAM users or IAM roles.
    """

    DataLakePrincipalIdentifier: Optional[DataLakePrincipalString] = None


class PermissionList(BaseModel):
    __root__: List[Permission]


class TagValueList(BaseModel):
    __root__: Annotated[List[LFTagValue], Field(max_items=50, min_items=1)]


class DataLakePrincipalList(BaseModel):
    __root__: Annotated[List[DataLakePrincipal], Field(max_items=10, min_items=0)]


class ResourceInfo(BaseModel):
    """
    A structure containing information about an AWS Lake Formation resource.
    """

    ResourceArn: Optional[ResourceArnString] = None
    RoleArn: Optional[IAMRoleArn] = None
    LastModified: Optional[LastModifiedTimestamp] = None


class ResourceShareList(BaseModel):
    __root__: List[RAMResourceShareArn]


class DetailsMap(BaseModel):
    """
    <p>A structure containing the additional details to be returned in the <code>AdditionalDetails</code> attribute of <code>PrincipalResourcePermissions</code>.</p> <p>If a catalog resource is shared through AWS Resource Access Manager (AWS RAM), then there will exist a corresponding RAM resource share ARN.</p>
    """

    ResourceShare: Optional[ResourceShareList] = None


class LFTag1(BaseModel):
    """
    A structure that allows an admin to grant user permissions on certain conditions. For example, granting a role access to all columns not tagged 'PII' of tables tagged 'Prod'.
    """

    TagKey: LFTagKey
    TagValues: TagValueList


class Expression(BaseModel):
    __root__: Annotated[List[LFTag1], Field(max_items=5, min_items=1)]


class StringValueList(BaseModel):
    __root__: List[StringValue]


class FilterCondition(BaseModel):
    """
    This structure describes the filtering of columns in a table based on a filter condition.
    """

    Field: Optional[FieldNameString] = None
    ComparisonOperator: Optional[ComparisonOperator] = None
    StringValueList: Optional[StringValueList] = None


class FilterConditionList(BaseModel):
    __root__: Annotated[List[FilterCondition], Field(max_items=20, min_items=1)]


class LFTagPair(BaseModel):
    """
    A structure containing a tag key-value pair.
    """

    CatalogId: Optional[CatalogIdString] = None
    TagKey: LFTagKey
    TagValues: TagValueList


class LFTagError(BaseModel):
    """
    A structure containing an error related to a <code>TagResource</code> or <code>UnTagResource</code> operation.
    """

    LFTag: Optional[LFTagPair] = None
    Error: Optional[ErrorDetail] = None


class LFTagKeyResource(BaseModel):
    """
    A structure containing a tag key and values for a resource.
    """

    CatalogId: Optional[CatalogIdString] = None
    TagKey: NameString
    TagValues: TagValueList


class LFTagPolicyResource(BaseModel):
    """
    A structure containing a list of tag conditions that apply to a resource's tag policy.
    """

    CatalogId: Optional[CatalogIdString] = None
    ResourceType: ResourceType1
    Expression: Expression


class ResourceInfoList(BaseModel):
    __root__: List[ResourceInfo]


class PrincipalPermissions(BaseModel):
    """
    Permissions granted to a principal.
    """

    Principal: Optional[DataLakePrincipal] = None
    Permissions: Optional[PermissionList] = None


class TableResource(BaseModel):
    """
    A structure for the table object. A table is a metadata definition that represents your data. You can Grant and Revoke table privileges to a principal.
    """

    CatalogId: Optional[CatalogIdString] = None
    DatabaseName: NameString
    Name: Optional[NameString] = None
    TableWildcard: Optional[TableWildcard] = None


class CreateLFTagRequest(BaseModel):
    CatalogId: Optional[CatalogIdString] = None
    TagKey: LFTagKey
    TagValues: TagValueList


class DescribeResourceResponse(BaseModel):
    ResourceInfo: Optional[ResourceInfo] = None


class GetLFTagResponse(BaseModel):
    CatalogId: Optional[CatalogIdString] = None
    TagKey: Optional[LFTagKey] = None
    TagValues: Optional[TagValueList] = None


class ListResourcesResponse(BaseModel):
    ResourceInfoList: Optional[ResourceInfoList] = None
    NextToken: Optional[Token] = None


class ListResourcesRequest(BaseModel):
    FilterConditionList: Optional[FilterConditionList] = None
    MaxResults: Optional[PageSize] = None
    NextToken: Optional[Token] = None


class SearchDatabasesByLFTagsRequest(BaseModel):
    NextToken: Optional[Token] = None
    MaxResults: Optional[PageSize] = None
    CatalogId: Optional[CatalogIdString] = None
    Expression: Expression


class SearchTablesByLFTagsRequest(BaseModel):
    NextToken: Optional[Token] = None
    MaxResults: Optional[PageSize] = None
    CatalogId: Optional[CatalogIdString] = None
    Expression: Expression


class UpdateLFTagRequest(BaseModel):
    CatalogId: Optional[CatalogIdString] = None
    TagKey: LFTagKey
    TagValuesToDelete: Optional[TagValueList] = None
    TagValuesToAdd: Optional[TagValueList] = None


class Resource(BaseModel):
    """
    A structure for the resource.
    """

    Catalog: Optional[CatalogResource] = None
    Database: Optional[DatabaseResource] = None
    Table: Optional[TableResource] = None
    TableWithColumns: Optional[TableWithColumnsResource] = None
    DataLocation: Optional[DataLocationResource] = None
    LFTag: Optional[LFTagKeyResource] = None
    LFTagPolicy: Optional[LFTagPolicyResource] = None


class LFTagsList(BaseModel):
    __root__: Annotated[List[LFTagPair], Field(max_items=50, min_items=1)]


class LFTagErrors(BaseModel):
    __root__: List[LFTagError]


class BatchPermissionsRequestEntry(BaseModel):
    """
    A permission to a resource granted by batch operation to the principal.
    """

    Id: Identifier
    Principal: Optional[DataLakePrincipal] = None
    Resource: Optional[Resource] = None
    Permissions: Optional[PermissionList] = None
    PermissionsWithGrantOption: Optional[PermissionList] = None


class BatchPermissionsFailureEntry(BaseModel):
    """
    A list of failures when performing a batch grant or batch revoke operation.
    """

    RequestEntry: Optional[BatchPermissionsRequestEntry] = None
    Error: Optional[ErrorDetail] = None


class ColumnLFTag(BaseModel):
    """
    A structure containing the name of a column resource and the tags attached to it.
    """

    Name: Optional[NameString] = None
    LFTags: Optional[LFTagsList] = None


class ColumnLFTagsList(BaseModel):
    __root__: List[ColumnLFTag]


class PrincipalPermissionsList(BaseModel):
    __root__: List[PrincipalPermissions]


class DataLakeSettings(BaseModel):
    """
    A structure representing a list of AWS Lake Formation principals designated as data lake administrators and lists of principal permission entries for default create database and default create table permissions.
    """

    DataLakeAdmins: Optional[DataLakePrincipalList] = None
    CreateDatabaseDefaultPermissions: Optional[PrincipalPermissionsList] = None
    CreateTableDefaultPermissions: Optional[PrincipalPermissionsList] = None
    TrustedResourceOwners: Optional[TrustedResourceOwners] = None


class TaggedDatabase(BaseModel):
    """
    A structure describing a database resource with tags.
    """

    Database: Optional[DatabaseResource] = None
    LFTags: Optional[LFTagsList] = None


class DatabaseLFTagsList(BaseModel):
    __root__: List[TaggedDatabase]


class PrincipalResourcePermissions(BaseModel):
    """
    The permissions granted or revoked on a resource.
    """

    Principal: Optional[DataLakePrincipal] = None
    Resource: Optional[Resource] = None
    Permissions: Optional[PermissionList] = None
    PermissionsWithGrantOption: Optional[PermissionList] = None
    AdditionalDetails: Optional[DetailsMap] = None


class TaggedTable(BaseModel):
    """
    A structure describing a table resource with tags.
    """

    Table: Optional[TableResource] = None
    LFTagOnDatabase: Optional[LFTagsList] = None
    LFTagsOnTable: Optional[LFTagsList] = None
    LFTagsOnColumns: Optional[ColumnLFTagsList] = None


class AddLFTagsToResourceResponse(BaseModel):
    Failures: Optional[LFTagErrors] = None


class AddLFTagsToResourceRequest(BaseModel):
    CatalogId: Optional[CatalogIdString] = None
    Resource: Resource
    LFTags: LFTagsList


class GetDataLakeSettingsResponse(BaseModel):
    DataLakeSettings: Optional[DataLakeSettings] = None


class GetResourceLFTagsResponse(BaseModel):
    LFTagOnDatabase: Optional[LFTagsList] = None
    LFTagsOnTable: Optional[LFTagsList] = None
    LFTagsOnColumns: Optional[ColumnLFTagsList] = None


class GetResourceLFTagsRequest(BaseModel):
    CatalogId: Optional[CatalogIdString] = None
    Resource: Resource
    ShowAssignedLFTags: Optional[BooleanNullable] = None


class GrantPermissionsRequest(BaseModel):
    CatalogId: Optional[CatalogIdString] = None
    Principal: DataLakePrincipal
    Resource: Resource
    Permissions: PermissionList
    PermissionsWithGrantOption: Optional[PermissionList] = None


class ListLFTagsResponse(BaseModel):
    LFTags: Optional[LFTagsList] = None
    NextToken: Optional[Token] = None


class ListPermissionsRequest(BaseModel):
    CatalogId: Optional[CatalogIdString] = None
    Principal: Optional[DataLakePrincipal] = None
    ResourceType: Optional[DataLakeResourceType] = None
    Resource: Optional[Resource] = None
    NextToken: Optional[Token] = None
    MaxResults: Optional[PageSize] = None


class PutDataLakeSettingsRequest(BaseModel):
    CatalogId: Optional[CatalogIdString] = None
    DataLakeSettings: DataLakeSettings


class RemoveLFTagsFromResourceResponse(AddLFTagsToResourceResponse):
    pass


class RemoveLFTagsFromResourceRequest(BaseModel):
    CatalogId: Optional[CatalogIdString] = None
    Resource: Resource
    LFTags: LFTagsList


class RevokePermissionsRequest(BaseModel):
    CatalogId: Optional[CatalogIdString] = None
    Principal: DataLakePrincipal
    Resource: Resource
    Permissions: PermissionList
    PermissionsWithGrantOption: Optional[PermissionList] = None


class SearchDatabasesByLFTagsResponse(BaseModel):
    NextToken: Optional[Token] = None
    DatabaseList: Optional[DatabaseLFTagsList] = None


class BatchPermissionsRequestEntryList(BaseModel):
    __root__: List[BatchPermissionsRequestEntry]


class BatchPermissionsFailureList(BaseModel):
    __root__: List[BatchPermissionsFailureEntry]


class PrincipalResourcePermissionsList(BaseModel):
    __root__: List[PrincipalResourcePermissions]


class TableLFTagsList(BaseModel):
    __root__: List[TaggedTable]


class BatchGrantPermissionsResponse(BaseModel):
    Failures: Optional[BatchPermissionsFailureList] = None


class BatchGrantPermissionsRequest(BaseModel):
    CatalogId: Optional[CatalogIdString] = None
    Entries: BatchPermissionsRequestEntryList


class BatchRevokePermissionsResponse(BatchGrantPermissionsResponse):
    pass


class BatchRevokePermissionsRequest(BaseModel):
    CatalogId: Optional[CatalogIdString] = None
    Entries: BatchPermissionsRequestEntryList


class GetEffectivePermissionsForPathResponse(BaseModel):
    Permissions: Optional[PrincipalResourcePermissionsList] = None
    NextToken: Optional[Token] = None


class ListPermissionsResponse(BaseModel):
    PrincipalResourcePermissions: Optional[PrincipalResourcePermissionsList] = None
    NextToken: Optional[Token] = None


class SearchTablesByLFTagsResponse(BaseModel):
    NextToken: Optional[Token] = None
    TableList: Optional[TableLFTagsList] = None
