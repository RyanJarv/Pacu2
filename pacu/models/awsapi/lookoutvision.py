# generated by datamodel-codegen:
#   filename:  openapi.yaml
#   timestamp: 2021-12-31T02:51:59+00:00

from __future__ import annotations

from datetime import datetime
from enum import Enum
from typing import Annotated, Any, List, Optional

from pydantic import BaseModel, Field


class AccessDeniedException(BaseModel):
    __root__: Any


class InternalServerException(AccessDeniedException):
    pass


class ValidationException(AccessDeniedException):
    pass


class ConflictException(AccessDeniedException):
    pass


class ResourceNotFoundException(AccessDeniedException):
    pass


class ThrottlingException(AccessDeniedException):
    pass


class ServiceQuotaExceededException(AccessDeniedException):
    pass


class DeleteDatasetResponse(BaseModel):
    pass


class TagResourceResponse(DeleteDatasetResponse):
    pass


class UntagResourceResponse(DeleteDatasetResponse):
    pass


class TagKey(BaseModel):
    __root__: Annotated[
        str,
        Field(
            max_length=128, min_length=1, regex='^([\\p{L}\\p{Z}\\p{N}_.:/=+\\-@]*)$'
        ),
    ]


class AnomalyClassFilter(BaseModel):
    __root__: Annotated[
        str, Field(max_length=10, min_length=1, regex='(normal|anomaly)')
    ]


class Boolean(BaseModel):
    __root__: bool


class ClientToken(BaseModel):
    __root__: Annotated[
        str, Field(max_length=64, min_length=1, regex='^[a-zA-Z0-9-]+$')
    ]


class ContentType(BaseModel):
    __root__: Annotated[str, Field(max_length=255, min_length=1, regex='.*')]


class ProjectName(BaseModel):
    __root__: Annotated[
        str, Field(max_length=255, min_length=1, regex='[a-zA-Z0-9][a-zA-Z0-9_\\-]*')
    ]


class DatasetType(BaseModel):
    __root__: Annotated[str, Field(max_length=10, min_length=1, regex='train|test')]


class ModelDescriptionMessage(BaseModel):
    __root__: Annotated[
        str, Field(max_length=500, min_length=1, regex='[0-9A-Za-z\\.\\-_]*')
    ]


class KmsKeyId(BaseModel):
    __root__: Annotated[
        str,
        Field(
            max_length=2048,
            min_length=1,
            regex='^[A-Za-z0-9][A-Za-z0-9:_/+=,@.-]{0,2048}$',
        ),
    ]


class CreateProjectRequest(BaseModel):
    ProjectName: ProjectName


class DatasetChanges(BaseModel):
    __root__: Annotated[str, Field(max_length=10485760, min_length=1)]


class DateTime(BaseModel):
    __root__: datetime


class DatasetStatus(Enum):
    CREATE_IN_PROGRESS = 'CREATE_IN_PROGRESS'
    CREATE_COMPLETE = 'CREATE_COMPLETE'
    CREATE_FAILED = 'CREATE_FAILED'
    UPDATE_IN_PROGRESS = 'UPDATE_IN_PROGRESS'
    UPDATE_COMPLETE = 'UPDATE_COMPLETE'
    UPDATE_FAILED_ROLLBACK_IN_PROGRESS = 'UPDATE_FAILED_ROLLBACK_IN_PROGRESS'
    UPDATE_FAILED_ROLLBACK_COMPLETE = 'UPDATE_FAILED_ROLLBACK_COMPLETE'
    DELETE_IN_PROGRESS = 'DELETE_IN_PROGRESS'
    DELETE_COMPLETE = 'DELETE_COMPLETE'
    DELETE_FAILED = 'DELETE_FAILED'


class DatasetStatusMessage(BaseModel):
    __root__: str


class DatasetEntry(BaseModel):
    __root__: Annotated[str, Field(max_length=8192, min_length=2, regex='^\\{.*\\}$')]


class DatasetEntryList(BaseModel):
    __root__: List[DatasetEntry]


class Integer(BaseModel):
    __root__: int


class DeleteDatasetRequest(BaseModel):
    pass


class ModelVersion(BaseModel):
    __root__: Annotated[
        str, Field(max_length=10, min_length=1, regex='([1-9][0-9]*|latest)')
    ]


class DeleteModelRequest(BaseModel):
    pass


class ModelArn(DatasetStatusMessage):
    pass


class DeleteProjectRequest(BaseModel):
    pass


class ProjectArn(DatasetStatusMessage):
    pass


class DescribeDatasetRequest(BaseModel):
    pass


class DescribeModelRequest(BaseModel):
    pass


class DescribeProjectRequest(BaseModel):
    pass


class Stream(DatasetStatusMessage):
    pass


class DetectAnomaliesRequest(BaseModel):
    Body: Stream


class Float(BaseModel):
    __root__: float


class ImageSourceType(BaseModel):
    __root__: Annotated[str, Field(regex='direct')]


class InferenceUnits(BaseModel):
    __root__: Annotated[int, Field(ge=1.0)]


class S3BucketName(BaseModel):
    __root__: Annotated[
        str, Field(max_length=63, min_length=3, regex='[0-9A-Za-z\\.\\-_]*')
    ]


class S3ObjectKey(BaseModel):
    __root__: Annotated[
        str,
        Field(
            max_length=1024,
            min_length=1,
            regex="^([a-zA-Z0-9!_.*'()-][/a-zA-Z0-9!_.*'()-]*)?$",
        ),
    ]


class S3ObjectVersion(BaseModel):
    __root__: Annotated[str, Field(max_length=1024, min_length=1, regex='.*')]


class IsLabeled(Boolean):
    pass


class PaginationToken(BaseModel):
    __root__: Annotated[
        str, Field(max_length=2048, regex='^[a-zA-Z0-9\\/\\+\\=]{0,2048}$')
    ]


class PageSize(BaseModel):
    __root__: Annotated[int, Field(ge=1.0, le=100.0)]


class QueryString(BaseModel):
    __root__: Annotated[str, Field(max_length=2048, min_length=1, regex='.*\\S.*')]


class ListDatasetEntriesRequest(BaseModel):
    pass


class ListModelsRequest(BaseModel):
    pass


class ListProjectsRequest(BaseModel):
    pass


class TagArn(BaseModel):
    __root__: Annotated[str, Field(max_length=1011, min_length=1)]


class ListTagsForResourceRequest(BaseModel):
    pass


class ModelStatus(Enum):
    TRAINING = 'TRAINING'
    TRAINED = 'TRAINED'
    TRAINING_FAILED = 'TRAINING_FAILED'
    STARTING_HOSTING = 'STARTING_HOSTING'
    HOSTED = 'HOSTED'
    HOSTING_FAILED = 'HOSTING_FAILED'
    STOPPING_HOSTING = 'STOPPING_HOSTING'
    SYSTEM_UPDATING = 'SYSTEM_UPDATING'
    DELETING = 'DELETING'


class ModelStatusMessage(DatasetStatusMessage):
    pass


class ModelPerformance(BaseModel):
    """
    Information about the evaluation performance of a trained model.
    """

    F1Score: Optional[Float] = None
    Recall: Optional[Float] = None
    Precision: Optional[Float] = None


class OutputS3Object(BaseModel):
    """
    The S3 location where Amazon Lookout for Vision saves training output.
    """

    Bucket: S3BucketName
    Key: S3ObjectKey


class ModelHostingStatus(Enum):
    STARTING_HOSTING = 'STARTING_HOSTING'
    HOSTED = 'HOSTED'
    HOSTING_FAILED = 'HOSTING_FAILED'
    STOPPING_HOSTING = 'STOPPING_HOSTING'
    SYSTEM_UPDATING = 'SYSTEM_UPDATING'


class S3KeyPrefix(BaseModel):
    __root__: Annotated[
        str,
        Field(max_length=1024, regex="^([a-zA-Z0-9!_.*'()-][/a-zA-Z0-9!_.*'()-]*)?$"),
    ]


class StartModelRequest(BaseModel):
    MinInferenceUnits: InferenceUnits


class StopModelRequest(BaseModel):
    pass


class TagValue(BaseModel):
    __root__: Annotated[
        str,
        Field(
            max_length=256, min_length=0, regex='^([\\p{L}\\p{Z}\\p{N}_.:/=+\\-@]*)$'
        ),
    ]


class TagKeyList(BaseModel):
    __root__: Annotated[List[TagKey], Field(max_items=200, min_items=0)]


class UntagResourceRequest(BaseModel):
    pass


class UpdateDatasetEntriesRequest(BaseModel):
    Changes: DatasetChanges


class S3Location(BaseModel):
    """
    Information about the location training output.
    """

    Bucket: S3BucketName
    Prefix: Optional[S3KeyPrefix] = None


class Tag(BaseModel):
    """
    A key and value pair that is attached to the specified Amazon Lookout for Vision model.
    """

    Key: TagKey
    Value: TagValue


class DeleteModelResponse(BaseModel):
    ModelArn: Optional[ModelArn] = None


class DeleteProjectResponse(BaseModel):
    ProjectArn: Optional[ProjectArn] = None


class ListDatasetEntriesResponse(BaseModel):
    DatasetEntries: Optional[DatasetEntryList] = None
    NextToken: Optional[PaginationToken] = None


class StartModelResponse(BaseModel):
    Status: Optional[ModelHostingStatus] = None


class StopModelResponse(StartModelResponse):
    pass


class UpdateDatasetEntriesResponse(BaseModel):
    Status: Optional[DatasetStatus] = None


class DatasetMetadata(BaseModel):
    """
    Sumary information for an Amazon Lookout for Vision dataset.
    """

    DatasetType: Optional[DatasetType] = None
    CreationTimestamp: Optional[DateTime] = None
    Status: Optional[DatasetStatus] = None
    StatusMessage: Optional[DatasetStatusMessage] = None


class OutputConfig(BaseModel):
    """
    The S3 location where Amazon Lookout for Vision saves model training files.
    """

    S3Location: S3Location


class TagList(BaseModel):
    __root__: Annotated[List[Tag], Field(max_items=200, min_items=0)]


class CreateModelRequest(BaseModel):
    Description: Optional[ModelDescriptionMessage] = None
    OutputConfig: OutputConfig
    KmsKeyId: Optional[KmsKeyId] = None
    Tags: Optional[TagList] = None


class ModelMetadata(BaseModel):
    """
    Describes an Amazon Lookout for Vision model.
    """

    CreationTimestamp: Optional[DateTime] = None
    ModelVersion: Optional[ModelVersion] = None
    ModelArn: Optional[ModelArn] = None
    Description: Optional[ModelDescriptionMessage] = None
    Status: Optional[ModelStatus] = None
    StatusMessage: Optional[ModelStatusMessage] = None
    Performance: Optional[ModelPerformance] = None


class ProjectMetadata(BaseModel):
    """
    Metadata about an Amazon Lookout for Vision project.
    """

    ProjectArn: Optional[ProjectArn] = None
    ProjectName: Optional[ProjectName] = None
    CreationTimestamp: Optional[DateTime] = None


class DatasetImageStats(BaseModel):
    """
    Statistics about the images in a dataset.
    """

    Total: Optional[Integer] = None
    Labeled: Optional[Integer] = None
    Normal: Optional[Integer] = None
    Anomaly: Optional[Integer] = None


class DatasetDescription(BaseModel):
    """
    The description for a dataset. For more information, see <a>DescribeDataset</a>.
    """

    ProjectName: Optional[ProjectName] = None
    DatasetType: Optional[DatasetType] = None
    CreationTimestamp: Optional[DateTime] = None
    LastUpdatedTimestamp: Optional[DateTime] = None
    Status: Optional[DatasetStatus] = None
    StatusMessage: Optional[DatasetStatusMessage] = None
    ImageStats: Optional[DatasetImageStats] = None


class InputS3Object(BaseModel):
    """
    Amazon S3 Location information for an input manifest file.
    """

    Bucket: S3BucketName
    Key: S3ObjectKey
    VersionId: Optional[S3ObjectVersion] = None


class DatasetMetadataList(BaseModel):
    __root__: List[DatasetMetadata]


class ModelDescription(BaseModel):
    """
    Describes an Amazon Lookout for Vision model.
    """

    ModelVersion: Optional[ModelVersion] = None
    ModelArn: Optional[ModelArn] = None
    CreationTimestamp: Optional[DateTime] = None
    Description: Optional[ModelDescriptionMessage] = None
    Status: Optional[ModelStatus] = None
    StatusMessage: Optional[ModelStatusMessage] = None
    Performance: Optional[ModelPerformance] = None
    OutputConfig: Optional[OutputConfig] = None
    EvaluationManifest: Optional[OutputS3Object] = None
    EvaluationResult: Optional[OutputS3Object] = None
    EvaluationEndTimestamp: Optional[DateTime] = None
    KmsKeyId: Optional[KmsKeyId] = None


class ProjectDescription(BaseModel):
    """
    Describe an Amazon Lookout for Vision project. For more information, see <a>DescribeProject</a>.
    """

    ProjectArn: Optional[ProjectArn] = None
    ProjectName: Optional[ProjectName] = None
    CreationTimestamp: Optional[DateTime] = None
    Datasets: Optional[DatasetMetadataList] = None


class ImageSource(BaseModel):
    """
    The source for an image.
    """

    Type: Optional[ImageSourceType] = None


class ModelMetadataList(BaseModel):
    __root__: List[ModelMetadata]


class ProjectMetadataList(BaseModel):
    __root__: List[ProjectMetadata]


class TagResourceRequest(BaseModel):
    Tags: TagList


class CreateDatasetResponse(BaseModel):
    DatasetMetadata: Optional[DatasetMetadata] = None


class DatasetGroundTruthManifest(BaseModel):
    """
    Location information about a manifest file. You can use a manifest file to create a dataset.
    """

    S3Object: Optional[InputS3Object] = None


class CreateModelResponse(BaseModel):
    ModelMetadata: Optional[ModelMetadata] = None


class CreateProjectResponse(BaseModel):
    ProjectMetadata: Optional[ProjectMetadata] = None


class DescribeDatasetResponse(BaseModel):
    DatasetDescription: Optional[DatasetDescription] = None


class DescribeModelResponse(BaseModel):
    ModelDescription: Optional[ModelDescription] = None


class DescribeProjectResponse(BaseModel):
    ProjectDescription: Optional[ProjectDescription] = None


class ListModelsResponse(BaseModel):
    Models: Optional[ModelMetadataList] = None
    NextToken: Optional[PaginationToken] = None


class ListProjectsResponse(BaseModel):
    Projects: Optional[ProjectMetadataList] = None
    NextToken: Optional[PaginationToken] = None


class ListTagsForResourceResponse(BaseModel):
    Tags: Optional[TagList] = None


class DatasetSource(BaseModel):
    """
    Information about the location of a manifest file that Amazon Lookout for Vision uses to to create a dataset.
    """

    GroundTruthManifest: Optional[DatasetGroundTruthManifest] = None


class CreateDatasetRequest(BaseModel):
    DatasetType: DatasetType
    DatasetSource: Optional[DatasetSource] = None


class DetectAnomalyResult(BaseModel):
    """
    The prediction results from a call to <a>DetectAnomalies</a>.
    """

    Source: Optional[ImageSource] = None
    IsAnomalous: Optional[Boolean] = None
    Confidence: Optional[Float] = None


class DetectAnomaliesResponse(BaseModel):
    DetectAnomalyResult: Optional[DetectAnomalyResult] = None
