# generated by datamodel-codegen:
#   filename:  openapi.yaml
#   timestamp: 2021-12-31T02:59:01+00:00

from __future__ import annotations

from datetime import datetime
from enum import Enum
from typing import Annotated, Any, List, Optional

from pydantic import BaseModel, Extra, Field


class ResourceNotFoundException(BaseModel):
    __root__: Any


class InternalServerError(ResourceNotFoundException):
    pass


class LimitExceededException(ResourceNotFoundException):
    pass


class ExpiredIteratorException(ResourceNotFoundException):
    pass


class TrimmedDataAccessException(ResourceNotFoundException):
    pass


class AttributeMap(BaseModel):
    pass

    class Config:
        extra = Extra.allow


class AttributeName(BaseModel):
    __root__: Annotated[str, Field(max_length=65535)]


class StringAttributeValue(BaseModel):
    __root__: str


class NumberAttributeValue(StringAttributeValue):
    pass


class BinaryAttributeValue(StringAttributeValue):
    pass


class StringSetAttributeValue(BaseModel):
    __root__: List[StringAttributeValue]


class NumberSetAttributeValue(BaseModel):
    __root__: List[NumberAttributeValue]


class BinarySetAttributeValue(BaseModel):
    __root__: List[BinaryAttributeValue]


class MapAttributeValue(AttributeMap):
    pass


class NullAttributeValue(BaseModel):
    __root__: bool


class BooleanAttributeValue(NullAttributeValue):
    pass


class Date(BaseModel):
    __root__: datetime


class StreamArn(BaseModel):
    __root__: Annotated[str, Field(max_length=1024, min_length=37)]


class PositiveIntegerObject(BaseModel):
    __root__: Annotated[int, Field(ge=1.0)]


class ShardId(BaseModel):
    __root__: Annotated[str, Field(max_length=65, min_length=28)]


class ShardIterator(BaseModel):
    __root__: Annotated[str, Field(max_length=2048, min_length=1)]


class ShardIteratorType(Enum):
    TRIM_HORIZON = 'TRIM_HORIZON'
    LATEST = 'LATEST'
    AT_SEQUENCE_NUMBER = 'AT_SEQUENCE_NUMBER'
    AFTER_SEQUENCE_NUMBER = 'AFTER_SEQUENCE_NUMBER'


class SequenceNumber(BaseModel):
    __root__: Annotated[str, Field(max_length=40, min_length=21)]


class String(StringAttributeValue):
    pass


class Identity(BaseModel):
    """
    Contains details about the type of identity that made the request.
    """

    PrincipalId: Optional[String] = None
    Type: Optional[String] = None


class KeySchemaAttributeName(BaseModel):
    __root__: Annotated[str, Field(max_length=255, min_length=1)]


class KeyType(Enum):
    HASH = 'HASH'
    RANGE = 'RANGE'


class TableName(BaseModel):
    __root__: Annotated[
        str, Field(max_length=255, min_length=3, regex='[a-zA-Z0-9_.-]+')
    ]


class OperationType(Enum):
    INSERT = 'INSERT'
    MODIFY = 'MODIFY'
    REMOVE = 'REMOVE'


class PositiveLongObject(PositiveIntegerObject):
    pass


class SequenceNumberRange(BaseModel):
    """
    The beginning and ending sequence numbers for the stream records contained within a shard.
    """

    StartingSequenceNumber: Optional[SequenceNumber] = None
    EndingSequenceNumber: Optional[SequenceNumber] = None


class Shard(BaseModel):
    """
    A uniquely identified group of stream records within a stream.
    """

    ShardId: Optional[ShardId] = None
    SequenceNumberRange: Optional[SequenceNumberRange] = None
    ParentShardId: Optional[ShardId] = None


class ShardDescriptionList(BaseModel):
    __root__: List[Shard]


class Stream(BaseModel):
    """
    Represents all of the data describing a particular stream.
    """

    StreamArn: Optional[StreamArn] = None
    TableName: Optional[TableName] = None
    StreamLabel: Optional[String] = None


class StreamStatus(Enum):
    ENABLING = 'ENABLING'
    ENABLED = 'ENABLED'
    DISABLING = 'DISABLING'
    DISABLED = 'DISABLED'


class StreamViewType(Enum):
    NEW_IMAGE = 'NEW_IMAGE'
    OLD_IMAGE = 'OLD_IMAGE'
    NEW_AND_OLD_IMAGES = 'NEW_AND_OLD_IMAGES'
    KEYS_ONLY = 'KEYS_ONLY'


class DescribeStreamInput(BaseModel):
    """
    Represents the input of a <code>DescribeStream</code> operation.
    """

    StreamArn: StreamArn
    Limit: Optional[PositiveIntegerObject] = None
    ExclusiveStartShardId: Optional[ShardId] = None


class GetRecordsInput(BaseModel):
    """
    Represents the input of a <code>GetRecords</code> operation.
    """

    ShardIterator: ShardIterator
    Limit: Optional[PositiveIntegerObject] = None


class GetShardIteratorOutput(BaseModel):
    """
    Represents the output of a <code>GetShardIterator</code> operation.
    """

    ShardIterator: Optional[ShardIterator] = None


class GetShardIteratorInput(BaseModel):
    """
    Represents the input of a <code>GetShardIterator</code> operation.
    """

    StreamArn: StreamArn
    ShardId: ShardId
    ShardIteratorType: ShardIteratorType
    SequenceNumber: Optional[SequenceNumber] = None


class ListStreamsInput(BaseModel):
    """
    Represents the input of a <code>ListStreams</code> operation.
    """

    TableName: Optional[TableName] = None
    Limit: Optional[PositiveIntegerObject] = None
    ExclusiveStartStreamArn: Optional[StreamArn] = None


class KeySchemaElement(BaseModel):
    """
    <p>Represents <i>a single element</i> of a key schema. A key schema specifies the attributes that make up the primary key of a table, or the key attributes of an index.</p> <p>A <code>KeySchemaElement</code> represents exactly one attribute of the primary key. For example, a simple primary key would be represented by one <code>KeySchemaElement</code> (for the partition key). A composite primary key would require one <code>KeySchemaElement</code> for the partition key, and another <code>KeySchemaElement</code> for the sort key.</p> <p>A <code>KeySchemaElement</code> must be a scalar, top-level attribute (not a nested attribute). The data type must be one of String, Number, or Binary. The attribute cannot be nested within a List or a Map.</p>
    """

    AttributeName: KeySchemaAttributeName
    KeyType: KeyType


class KeySchema(BaseModel):
    __root__: Annotated[List[KeySchemaElement], Field(max_items=2, min_items=1)]


class StreamList(BaseModel):
    __root__: List[Stream]


class StreamRecord(BaseModel):
    """
    A description of a single data modification that was performed on an item in a DynamoDB table.
    """

    ApproximateCreationDateTime: Optional[Date] = None
    Keys: Optional[AttributeMap] = None
    NewImage: Optional[AttributeMap] = None
    OldImage: Optional[AttributeMap] = None
    SequenceNumber: Optional[SequenceNumber] = None
    SizeBytes: Optional[PositiveLongObject] = None
    StreamViewType: Optional[StreamViewType] = None


class Record(BaseModel):
    """
    A description of a unique event within a stream.
    """

    eventID: Optional[String] = None
    eventName: Optional[OperationType] = None
    eventVersion: Optional[String] = None
    eventSource: Optional[String] = None
    awsRegion: Optional[String] = None
    dynamodb: Optional[StreamRecord] = None
    userIdentity: Optional[Identity] = None


class ListStreamsOutput(BaseModel):
    """
    Represents the output of a <code>ListStreams</code> operation.
    """

    Streams: Optional[StreamList] = None
    LastEvaluatedStreamArn: Optional[StreamArn] = None


class StreamDescription(BaseModel):
    """
    Represents all of the data describing a particular stream.
    """

    StreamArn: Optional[StreamArn] = None
    StreamLabel: Optional[String] = None
    StreamStatus: Optional[StreamStatus] = None
    StreamViewType: Optional[StreamViewType] = None
    CreationRequestDateTime: Optional[Date] = None
    TableName: Optional[TableName] = None
    KeySchema: Optional[KeySchema] = None
    Shards: Optional[ShardDescriptionList] = None
    LastEvaluatedShardId: Optional[ShardId] = None


class RecordList(BaseModel):
    __root__: List[Record]


class DescribeStreamOutput(BaseModel):
    """
    Represents the output of a <code>DescribeStream</code> operation.
    """

    StreamDescription: Optional[StreamDescription] = None


class GetRecordsOutput(BaseModel):
    """
    Represents the output of a <code>GetRecords</code> operation.
    """

    Records: Optional[RecordList] = None
    NextShardIterator: Optional[ShardIterator] = None


class AttributeValue(BaseModel):
    """
    <p>Represents the data for an attribute.</p> <p>Each attribute value is described as a name-value pair. The name is the data type, and the value is the data itself.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/HowItWorks.NamingRulesDataTypes.html#HowItWorks.DataTypes">Data Types</a> in the <i>Amazon DynamoDB Developer Guide</i>.</p>
    """

    S: Optional[StringAttributeValue] = None
    N: Optional[NumberAttributeValue] = None
    B: Optional[BinaryAttributeValue] = None
    SS: Optional[StringSetAttributeValue] = None
    NS: Optional[NumberSetAttributeValue] = None
    BS: Optional[BinarySetAttributeValue] = None
    M: Optional[MapAttributeValue] = None
    L: Optional[ListAttributeValue] = None
    NULL: Optional[NullAttributeValue] = None
    BOOL: Optional[BooleanAttributeValue] = None


class ListAttributeValue(BaseModel):
    __root__: List[AttributeValue]


AttributeValue.update_forward_refs()
