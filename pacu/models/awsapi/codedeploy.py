# generated by datamodel-codegen:
#   filename:  openapi.yaml
#   timestamp: 2021-12-31T02:46:30+00:00

from __future__ import annotations

from datetime import datetime
from enum import Enum
from typing import Annotated, Any, List, Optional

from pydantic import BaseModel, Extra, Field


class InstanceNameRequiredException(BaseModel):
    __root__: Any


class InvalidInstanceNameException(InstanceNameRequiredException):
    pass


class TagRequiredException(InstanceNameRequiredException):
    pass


class InvalidTagException(InstanceNameRequiredException):
    pass


class TagLimitExceededException(InstanceNameRequiredException):
    pass


class InstanceLimitExceededException(InstanceNameRequiredException):
    pass


class InstanceNotRegisteredException(InstanceNameRequiredException):
    pass


class ApplicationDoesNotExistException(InstanceNameRequiredException):
    pass


class ApplicationNameRequiredException(InstanceNameRequiredException):
    pass


class InvalidApplicationNameException(InstanceNameRequiredException):
    pass


class RevisionRequiredException(InstanceNameRequiredException):
    pass


class InvalidRevisionException(InstanceNameRequiredException):
    pass


class BatchLimitExceededException(InstanceNameRequiredException):
    pass


class DeploymentGroupNameRequiredException(InstanceNameRequiredException):
    pass


class InvalidDeploymentGroupNameException(InstanceNameRequiredException):
    pass


class DeploymentConfigDoesNotExistException(InstanceNameRequiredException):
    pass


class DeploymentIdRequiredException(InstanceNameRequiredException):
    pass


class DeploymentDoesNotExistException(InstanceNameRequiredException):
    pass


class InstanceIdRequiredException(InstanceNameRequiredException):
    pass


class InvalidDeploymentIdException(InstanceNameRequiredException):
    pass


class InvalidComputePlatformException(InstanceNameRequiredException):
    pass


class DeploymentNotStartedException(InstanceNameRequiredException):
    pass


class DeploymentTargetIdRequiredException(InstanceNameRequiredException):
    pass


class InvalidDeploymentTargetIdException(InstanceNameRequiredException):
    pass


class DeploymentTargetDoesNotExistException(InstanceNameRequiredException):
    pass


class DeploymentTargetListSizeExceededException(InstanceNameRequiredException):
    pass


class InstanceDoesNotExistException(InstanceNameRequiredException):
    pass


class DeploymentAlreadyCompletedException(InstanceNameRequiredException):
    pass


class DeploymentIsNotInReadyStateException(InstanceNameRequiredException):
    pass


class UnsupportedActionForDeploymentTypeException(InstanceNameRequiredException):
    pass


class InvalidDeploymentWaitTypeException(InstanceNameRequiredException):
    pass


class InvalidDeploymentStatusException(InstanceNameRequiredException):
    pass


class ApplicationAlreadyExistsException(InstanceNameRequiredException):
    pass


class ApplicationLimitExceededException(InstanceNameRequiredException):
    pass


class InvalidTagsToAddException(InstanceNameRequiredException):
    pass


class DeploymentGroupDoesNotExistException(InstanceNameRequiredException):
    pass


class RevisionDoesNotExistException(InstanceNameRequiredException):
    pass


class InvalidDeploymentConfigNameException(InstanceNameRequiredException):
    pass


class DescriptionTooLongException(InstanceNameRequiredException):
    pass


class DeploymentLimitExceededException(InstanceNameRequiredException):
    pass


class InvalidTargetInstancesException(InstanceNameRequiredException):
    pass


class InvalidAutoRollbackConfigException(InstanceNameRequiredException):
    pass


class InvalidLoadBalancerInfoException(InstanceNameRequiredException):
    pass


class InvalidFileExistsBehaviorException(InstanceNameRequiredException):
    pass


class InvalidRoleException(InstanceNameRequiredException):
    pass


class InvalidAutoScalingGroupException(InstanceNameRequiredException):
    pass


class ThrottlingException(InstanceNameRequiredException):
    pass


class InvalidUpdateOutdatedInstancesOnlyValueException(InstanceNameRequiredException):
    pass


class InvalidIgnoreApplicationStopFailuresValueException(InstanceNameRequiredException):
    pass


class InvalidGitHubAccountTokenException(InstanceNameRequiredException):
    pass


class InvalidTrafficRoutingConfigurationException(InstanceNameRequiredException):
    pass


class DeploymentConfigNameRequiredException(InstanceNameRequiredException):
    pass


class DeploymentConfigAlreadyExistsException(InstanceNameRequiredException):
    pass


class InvalidMinimumHealthyHostValueException(InstanceNameRequiredException):
    pass


class DeploymentConfigLimitExceededException(InstanceNameRequiredException):
    pass


class DeploymentGroupAlreadyExistsException(InstanceNameRequiredException):
    pass


class InvalidEC2TagException(InstanceNameRequiredException):
    pass


class RoleRequiredException(InstanceNameRequiredException):
    pass


class DeploymentGroupLimitExceededException(InstanceNameRequiredException):
    pass


class LifecycleHookLimitExceededException(InstanceNameRequiredException):
    pass


class InvalidTriggerConfigException(InstanceNameRequiredException):
    pass


class TriggerTargetsLimitExceededException(InstanceNameRequiredException):
    pass


class InvalidAlarmConfigException(InstanceNameRequiredException):
    pass


class AlarmsLimitExceededException(InstanceNameRequiredException):
    pass


class InvalidDeploymentStyleException(InstanceNameRequiredException):
    pass


class InvalidBlueGreenDeploymentConfigurationException(InstanceNameRequiredException):
    pass


class InvalidEC2TagCombinationException(InstanceNameRequiredException):
    pass


class InvalidOnPremisesTagCombinationException(InstanceNameRequiredException):
    pass


class TagSetListLimitExceededException(InstanceNameRequiredException):
    pass


class InvalidInputException(InstanceNameRequiredException):
    pass


class InvalidECSServiceException(InstanceNameRequiredException):
    pass


class InvalidTargetGroupPairException(InstanceNameRequiredException):
    pass


class ECSServiceMappingLimitExceededException(InstanceNameRequiredException):
    pass


class DeploymentConfigInUseException(InstanceNameRequiredException):
    pass


class InvalidOperationException(InstanceNameRequiredException):
    pass


class GitHubAccountTokenNameRequiredException(InstanceNameRequiredException):
    pass


class GitHubAccountTokenDoesNotExistException(InstanceNameRequiredException):
    pass


class InvalidGitHubAccountTokenNameException(InstanceNameRequiredException):
    pass


class ResourceValidationException(InstanceNameRequiredException):
    pass


class OperationNotSupportedException(InstanceNameRequiredException):
    pass


class DeleteResourcesByExternalIdOutput(BaseModel):
    pass


class InvalidSortByException(InstanceNameRequiredException):
    pass


class InvalidSortOrderException(InstanceNameRequiredException):
    pass


class InvalidBucketNameFilterException(InstanceNameRequiredException):
    pass


class InvalidKeyPrefixFilterException(InstanceNameRequiredException):
    pass


class BucketNameFilterRequiredException(InstanceNameRequiredException):
    pass


class InvalidDeployedStateFilterException(InstanceNameRequiredException):
    pass


class InvalidNextTokenException(InstanceNameRequiredException):
    pass


class InvalidInstanceStatusException(InstanceNameRequiredException):
    pass


class InvalidInstanceTypeException(InstanceNameRequiredException):
    pass


class InvalidDeploymentInstanceTypeException(InstanceNameRequiredException):
    pass


class InvalidTargetFilterNameException(InstanceNameRequiredException):
    pass


class InvalidTimeRangeException(InstanceNameRequiredException):
    pass


class InvalidExternalIdException(InstanceNameRequiredException):
    pass


class InvalidRegistrationStatusException(InstanceNameRequiredException):
    pass


class InvalidTagFilterException(InstanceNameRequiredException):
    pass


class ArnNotSupportedException(InstanceNameRequiredException):
    pass


class InvalidArnException(InstanceNameRequiredException):
    pass


class ResourceArnRequiredException(InstanceNameRequiredException):
    pass


class InvalidLifecycleEventHookExecutionStatusException(InstanceNameRequiredException):
    pass


class InvalidLifecycleEventHookExecutionIdException(InstanceNameRequiredException):
    pass


class LifecycleEventAlreadyCompletedException(InstanceNameRequiredException):
    pass


class InstanceNameAlreadyRegisteredException(InstanceNameRequiredException):
    pass


class IamArnRequiredException(InstanceNameRequiredException):
    pass


class IamSessionArnAlreadyRegisteredException(InstanceNameRequiredException):
    pass


class IamUserArnAlreadyRegisteredException(InstanceNameRequiredException):
    pass


class IamUserArnRequiredException(InstanceNameRequiredException):
    pass


class InvalidIamSessionArnException(InstanceNameRequiredException):
    pass


class InvalidIamUserArnException(InstanceNameRequiredException):
    pass


class MultipleIamArnsProvidedException(InstanceNameRequiredException):
    pass


class TagResourceOutput(DeleteResourcesByExternalIdOutput):
    pass


class UntagResourceOutput(DeleteResourcesByExternalIdOutput):
    pass


class AdditionalDeploymentStatusInfo(BaseModel):
    __root__: Annotated[
        str,
        Field(
            description='AdditionalDeploymentStatusInfo is deprecated, use DeploymentStatusMessageList instead.'
        ),
    ]


class AlarmName(BaseModel):
    __root__: str


class Alarm(BaseModel):
    """
    Information about an alarm.
    """

    name: Optional[AlarmName] = None


class Boolean(BaseModel):
    __root__: bool


class AlarmList(BaseModel):
    __root__: List[Alarm]


class AlarmConfiguration(BaseModel):
    """
    Information about alarms associated with the deployment group.
    """

    enabled: Optional[Boolean] = None
    ignorePollAlarmFailure: Optional[Boolean] = None
    alarms: Optional[AlarmList] = None


class RawStringContent(AlarmName):
    pass


class RawStringSha256(AlarmName):
    pass


class AppSpecContent(BaseModel):
    """
    A revision for an AWS Lambda or Amazon ECS deployment that is a YAML-formatted or JSON-formatted string. For AWS Lambda and Amazon ECS deployments, the revision is the same as the AppSpec file. This method replaces the deprecated <code>RawString</code> data type.
    """

    content: Optional[RawStringContent] = None
    sha256: Optional[RawStringSha256] = None


class ApplicationId(AlarmName):
    pass


class ApplicationName(BaseModel):
    __root__: Annotated[str, Field(max_length=100, min_length=1)]


class Timestamp(BaseModel):
    __root__: datetime


class GitHubAccountTokenName(AlarmName):
    pass


class ComputePlatform(Enum):
    Server = 'Server'
    Lambda = 'Lambda'
    ECS = 'ECS'


class ApplicationInfo(BaseModel):
    """
    Information about an application.
    """

    applicationId: Optional[ApplicationId] = None
    applicationName: Optional[ApplicationName] = None
    createTime: Optional[Timestamp] = None
    linkedToGitHub: Optional[Boolean] = None
    gitHubAccountName: Optional[GitHubAccountTokenName] = None
    computePlatform: Optional[ComputePlatform] = None


class ApplicationRevisionSortBy(Enum):
    registerTime = 'registerTime'
    firstUsedTime = 'firstUsedTime'
    lastUsedTime = 'lastUsedTime'


class ApplicationsInfoList(BaseModel):
    __root__: List[ApplicationInfo]


class ApplicationsList(BaseModel):
    __root__: List[ApplicationName]


class Arn(BaseModel):
    __root__: Annotated[str, Field(max_length=1011, min_length=1)]


class AutoRollbackEvent(Enum):
    DEPLOYMENT_FAILURE = 'DEPLOYMENT_FAILURE'
    DEPLOYMENT_STOP_ON_ALARM = 'DEPLOYMENT_STOP_ON_ALARM'
    DEPLOYMENT_STOP_ON_REQUEST = 'DEPLOYMENT_STOP_ON_REQUEST'


class AutoScalingGroupName(AlarmName):
    pass


class AutoScalingGroupHook(AlarmName):
    pass


class AutoScalingGroup(BaseModel):
    """
    Information about an Auto Scaling group.
    """

    name: Optional[AutoScalingGroupName] = None
    hook: Optional[AutoScalingGroupHook] = None


class AutoScalingGroupList(BaseModel):
    __root__: List[AutoScalingGroup]


class AutoScalingGroupNameList(BaseModel):
    __root__: List[AutoScalingGroupName]


class ErrorMessage(AlarmName):
    pass


class DeploymentId(AlarmName):
    pass


class DeploymentsList(BaseModel):
    __root__: List[DeploymentId]


class InstanceAction(Enum):
    TERMINATE = 'TERMINATE'
    KEEP_ALIVE = 'KEEP_ALIVE'


class Duration(BaseModel):
    __root__: int


class BundleType(Enum):
    tar = 'tar'
    tgz = 'tgz'
    zip = 'zip'
    YAML = 'YAML'
    JSON = 'JSON'


class CloudFormationResourceType(AlarmName):
    pass


class TargetId(AlarmName):
    pass


class Time(Timestamp):
    pass


class TargetStatus(Enum):
    Pending = 'Pending'
    InProgress = 'InProgress'
    Succeeded = 'Succeeded'
    Failed = 'Failed'
    Skipped = 'Skipped'
    Unknown = 'Unknown'
    Ready = 'Ready'


class TrafficWeight(BaseModel):
    __root__: float


class CommitId(AlarmName):
    pass


class DeploymentWaitType(Enum):
    READY_WAIT = 'READY_WAIT'
    TERMINATION_WAIT = 'TERMINATION_WAIT'


class DeploymentConfigName(ApplicationName):
    pass


class DeploymentConfigId(AlarmName):
    pass


class DeploymentGroupName(ApplicationName):
    pass


class Role(AlarmName):
    pass


class OutdatedInstancesStrategy(Enum):
    UPDATE = 'UPDATE'
    IGNORE = 'IGNORE'


class DeploymentGroupId(AlarmName):
    pass


class Description(AlarmName):
    pass


class FileExistsBehavior(Enum):
    DISALLOW = 'DISALLOW'
    OVERWRITE = 'OVERWRITE'
    RETAIN = 'RETAIN'


class ExternalId(AlarmName):
    pass


class DeploymentConfigsList(BaseModel):
    __root__: List[DeploymentConfigName]


class DeploymentCreator(Enum):
    user = 'user'
    autoscaling = 'autoscaling'
    codeDeployRollback = 'codeDeployRollback'
    CodeDeploy = 'CodeDeploy'
    CodeDeployAutoUpdate = 'CodeDeployAutoUpdate'
    CloudFormation = 'CloudFormation'
    CloudFormationRollback = 'CloudFormationRollback'


class DeploymentStatus(Enum):
    Created = 'Created'
    Queued = 'Queued'
    InProgress = 'InProgress'
    Baking = 'Baking'
    Succeeded = 'Succeeded'
    Failed = 'Failed'
    Stopped = 'Stopped'
    Ready = 'Ready'


class RollbackInfo(BaseModel):
    """
    Information about a deployment rollback.
    """

    rollbackDeploymentId: Optional[DeploymentId] = None
    rollbackTriggeringDeploymentId: Optional[DeploymentId] = None
    rollbackMessage: Optional[Description] = None


class DeploymentStatusMessageList(BaseModel):
    __root__: List[ErrorMessage]


class RelatedDeployments(BaseModel):
    """
    Information about deployments related to the specified deployment.
    """

    autoUpdateOutdatedInstancesRootDeploymentId: Optional[DeploymentId] = None
    autoUpdateOutdatedInstancesDeploymentIds: Optional[DeploymentsList] = None


class DeploymentOption(Enum):
    WITH_TRAFFIC_CONTROL = 'WITH_TRAFFIC_CONTROL'
    WITHOUT_TRAFFIC_CONTROL = 'WITHOUT_TRAFFIC_CONTROL'


class InstanceCount(Duration):
    pass


class DeploymentReadyAction(Enum):
    CONTINUE_DEPLOYMENT = 'CONTINUE_DEPLOYMENT'
    STOP_DEPLOYMENT = 'STOP_DEPLOYMENT'


class DeploymentStatusList(BaseModel):
    __root__: List[DeploymentStatus]


class DeploymentType(Enum):
    IN_PLACE = 'IN_PLACE'
    BLUE_GREEN = 'BLUE_GREEN'


class DeploymentTargetType(Enum):
    InstanceTarget = 'InstanceTarget'
    LambdaTarget = 'LambdaTarget'
    ECSTarget = 'ECSTarget'
    CloudFormationTarget = 'CloudFormationTarget'


class InstanceName(AlarmName):
    pass


class LifecycleErrorCode(Enum):
    Success = 'Success'
    ScriptMissing = 'ScriptMissing'
    ScriptNotExecutable = 'ScriptNotExecutable'
    ScriptTimedOut = 'ScriptTimedOut'
    ScriptFailed = 'ScriptFailed'
    UnknownError = 'UnknownError'


class ScriptName(AlarmName):
    pass


class LifecycleMessage(AlarmName):
    pass


class LogTail(AlarmName):
    pass


class Diagnostics(BaseModel):
    """
    Diagnostic information about executable scripts that are part of a deployment.
    """

    errorCode: Optional[LifecycleErrorCode] = None
    scriptName: Optional[ScriptName] = None
    message: Optional[LifecycleMessage] = None
    logTail: Optional[LogTail] = None


class Key(AlarmName):
    pass


class Value1(AlarmName):
    pass


class EC2TagFilterType(Enum):
    KEY_ONLY = 'KEY_ONLY'
    VALUE_ONLY = 'VALUE_ONLY'
    KEY_AND_VALUE = 'KEY_AND_VALUE'


class EC2TagFilter(BaseModel):
    """
    Information about an EC2 tag filter.
    """

    Key: Optional[Key] = None
    Value: Optional[Value1] = None
    Type: Optional[EC2TagFilterType] = None


class ECSClusterName(AlarmName):
    pass


class ECSServiceName(AlarmName):
    pass


class ECSService(BaseModel):
    """
    Contains the service and cluster names used to identify an Amazon ECS deployment's target.
    """

    serviceName: Optional[ECSServiceName] = None
    clusterName: Optional[ECSClusterName] = None


class TargetArn(AlarmName):
    pass


class ECSTaskSetIdentifier(AlarmName):
    pass


class ECSTaskSetCount(Duration):
    pass


class ECSTaskSetStatus(AlarmName):
    pass


class TargetLabel(Enum):
    Blue = 'Blue'
    Green = 'Green'


class ELBName(AlarmName):
    pass


class ELBInfo(BaseModel):
    """
    Information about a load balancer in Elastic Load Balancing to use in a deployment. Instances are registered directly with a load balancer, and traffic is routed to the load balancer.
    """

    name: Optional[ELBName] = None


class ELBInfoList(BaseModel):
    __root__: List[ELBInfo]


class ETag(AlarmName):
    pass


class ErrorCode(Enum):
    AGENT_ISSUE = 'AGENT_ISSUE'
    ALARM_ACTIVE = 'ALARM_ACTIVE'
    APPLICATION_MISSING = 'APPLICATION_MISSING'
    AUTOSCALING_VALIDATION_ERROR = 'AUTOSCALING_VALIDATION_ERROR'
    AUTO_SCALING_CONFIGURATION = 'AUTO_SCALING_CONFIGURATION'
    AUTO_SCALING_IAM_ROLE_PERMISSIONS = 'AUTO_SCALING_IAM_ROLE_PERMISSIONS'
    CODEDEPLOY_RESOURCE_CANNOT_BE_FOUND = 'CODEDEPLOY_RESOURCE_CANNOT_BE_FOUND'
    CUSTOMER_APPLICATION_UNHEALTHY = 'CUSTOMER_APPLICATION_UNHEALTHY'
    DEPLOYMENT_GROUP_MISSING = 'DEPLOYMENT_GROUP_MISSING'
    ECS_UPDATE_ERROR = 'ECS_UPDATE_ERROR'
    ELASTIC_LOAD_BALANCING_INVALID = 'ELASTIC_LOAD_BALANCING_INVALID'
    ELB_INVALID_INSTANCE = 'ELB_INVALID_INSTANCE'
    HEALTH_CONSTRAINTS = 'HEALTH_CONSTRAINTS'
    HEALTH_CONSTRAINTS_INVALID = 'HEALTH_CONSTRAINTS_INVALID'
    HOOK_EXECUTION_FAILURE = 'HOOK_EXECUTION_FAILURE'
    IAM_ROLE_MISSING = 'IAM_ROLE_MISSING'
    IAM_ROLE_PERMISSIONS = 'IAM_ROLE_PERMISSIONS'
    INTERNAL_ERROR = 'INTERNAL_ERROR'
    INVALID_ECS_SERVICE = 'INVALID_ECS_SERVICE'
    INVALID_LAMBDA_CONFIGURATION = 'INVALID_LAMBDA_CONFIGURATION'
    INVALID_LAMBDA_FUNCTION = 'INVALID_LAMBDA_FUNCTION'
    INVALID_REVISION = 'INVALID_REVISION'
    MANUAL_STOP = 'MANUAL_STOP'
    MISSING_BLUE_GREEN_DEPLOYMENT_CONFIGURATION = (
        'MISSING_BLUE_GREEN_DEPLOYMENT_CONFIGURATION'
    )
    MISSING_ELB_INFORMATION = 'MISSING_ELB_INFORMATION'
    MISSING_GITHUB_TOKEN = 'MISSING_GITHUB_TOKEN'
    NO_EC2_SUBSCRIPTION = 'NO_EC2_SUBSCRIPTION'
    NO_INSTANCES = 'NO_INSTANCES'
    OVER_MAX_INSTANCES = 'OVER_MAX_INSTANCES'
    RESOURCE_LIMIT_EXCEEDED = 'RESOURCE_LIMIT_EXCEEDED'
    REVISION_MISSING = 'REVISION_MISSING'
    THROTTLED = 'THROTTLED'
    TIMEOUT = 'TIMEOUT'
    CLOUDFORMATION_STACK_FAILURE = 'CLOUDFORMATION_STACK_FAILURE'


class FilterValue(AlarmName):
    pass


class FilterValueList(BaseModel):
    __root__: List[FilterValue]


class InstanceId(AlarmName):
    pass


class GitHubAccountTokenNameList(BaseModel):
    __root__: List[GitHubAccountTokenName]


class Repository(AlarmName):
    pass


class GitHubLocation(BaseModel):
    """
    Information about the location of application artifacts stored in GitHub.
    """

    repository: Optional[Repository] = None
    commitId: Optional[CommitId] = None


class GreenFleetProvisioningAction(Enum):
    DISCOVER_EXISTING = 'DISCOVER_EXISTING'
    COPY_AUTO_SCALING_GROUP = 'COPY_AUTO_SCALING_GROUP'


class IamSessionArn(AlarmName):
    pass


class IamUserArn(AlarmName):
    pass


class InstanceArn(AlarmName):
    pass


class InstanceStatusList(BaseModel):
    __root__: List[TargetStatus]


class InstanceTypeList(BaseModel):
    __root__: List[TargetLabel]


class LambdaFunctionAlias(AlarmName):
    pass


class LambdaFunctionName(AlarmName):
    pass


class Version(AlarmName):
    pass


class LambdaFunctionInfo(BaseModel):
    """
    Information about a Lambda function specified in a deployment.
    """

    functionName: Optional[LambdaFunctionName] = None
    functionAlias: Optional[LambdaFunctionAlias] = None
    currentVersion: Optional[Version] = None
    targetVersion: Optional[Version] = None
    targetVersionWeight: Optional[TrafficWeight] = None


class LifecycleEventName(AlarmName):
    pass


class LifecycleEventStatus(Enum):
    Pending = 'Pending'
    InProgress = 'InProgress'
    Succeeded = 'Succeeded'
    Failed = 'Failed'
    Skipped = 'Skipped'
    Unknown = 'Unknown'


class LifecycleEvent(BaseModel):
    """
    Information about a deployment lifecycle event.
    """

    lifecycleEventName: Optional[LifecycleEventName] = None
    diagnostics: Optional[Diagnostics] = None
    startTime: Optional[Timestamp] = None
    endTime: Optional[Timestamp] = None
    status: Optional[LifecycleEventStatus] = None


class LifecycleEventHookExecutionId(AlarmName):
    pass


class SortOrder(Enum):
    ascending = 'ascending'
    descending = 'descending'


class S3Bucket(AlarmName):
    pass


class S3Key(AlarmName):
    pass


class ListStateFilterAction(Enum):
    include = 'include'
    exclude = 'exclude'
    ignore = 'ignore'


class NextToken(AlarmName):
    pass


class TargetFilters(BaseModel):
    pass

    class Config:
        extra = Extra.allow


class TimeRange(BaseModel):
    """
    Information about a time range.
    """

    start: Optional[Timestamp] = None
    end: Optional[Timestamp] = None


class RegistrationStatus(Enum):
    Registered = 'Registered'
    Deregistered = 'Deregistered'


class ListenerArn(AlarmName):
    pass


class ListenerArnList(BaseModel):
    __root__: List[ListenerArn]


class Message(AlarmName):
    pass


class MinimumHealthyHostsType(Enum):
    HOST_COUNT = 'HOST_COUNT'
    FLEET_PERCENT = 'FLEET_PERCENT'


class MinimumHealthyHostsValue(Duration):
    pass


class NullableBoolean(Boolean):
    pass


class Percentage(Duration):
    pass


class RawString(AppSpecContent):
    """
    A revision for an AWS Lambda deployment that is a YAML-formatted or JSON-formatted string. For AWS Lambda deployments, the revision is the same as the AppSpec file.RawString and String revision type are deprecated, use AppSpecContent type instead.
    """

    pass


class RevisionLocationType(Enum):
    S3 = 'S3'
    GitHub = 'GitHub'
    String = 'String'
    AppSpecContent = 'AppSpecContent'


class VersionId(AlarmName):
    pass


class StopStatus(Enum):
    Pending = 'Pending'
    Succeeded = 'Succeeded'


class Tag(BaseModel):
    """
    Information about a tag.
    """

    Key: Optional[Key] = None
    Value: Optional[Value1] = None


class TagFilter(EC2TagFilter):
    """
    Information about an on-premises instance tag filter.
    """

    pass


class TagKeyList(BaseModel):
    __root__: List[Key]


class TargetFilterName(Enum):
    TargetStatus = 'TargetStatus'
    ServerInstanceLabel = 'ServerInstanceLabel'


class TargetGroupName(AlarmName):
    pass


class TrafficRoute(BaseModel):
    """
    Information about a listener. The listener contains the path used to route traffic that is received from the load balancer to a target group.
    """

    listenerArns: Optional[ListenerArnList] = None


class WaitTimeInMins(Duration):
    pass


class TimeBasedCanary(BaseModel):
    """
    A configuration that shifts traffic from one version of a Lambda function or ECS task set to another in two increments. The original and target Lambda function versions or ECS task sets are specified in the deployment's AppSpec file.
    """

    canaryPercentage: Optional[Percentage] = None
    canaryInterval: Optional[WaitTimeInMins] = None


class TimeBasedLinear(BaseModel):
    """
    A configuration that shifts traffic from one version of a Lambda function or ECS task set to another in equal increments, with an equal number of minutes between each increment. The original and target Lambda function versions or ECS task sets are specified in the deployment's AppSpec file.
    """

    linearPercentage: Optional[Percentage] = None
    linearInterval: Optional[WaitTimeInMins] = None


class TrafficRoutingType(Enum):
    TimeBasedCanary = 'TimeBasedCanary'
    TimeBasedLinear = 'TimeBasedLinear'
    AllAtOnce = 'AllAtOnce'


class TriggerName(AlarmName):
    pass


class TriggerTargetArn(AlarmName):
    pass


class TriggerEventType(Enum):
    DeploymentStart = 'DeploymentStart'
    DeploymentSuccess = 'DeploymentSuccess'
    DeploymentFailure = 'DeploymentFailure'
    DeploymentStop = 'DeploymentStop'
    DeploymentRollback = 'DeploymentRollback'
    DeploymentReady = 'DeploymentReady'
    InstanceStart = 'InstanceStart'
    InstanceSuccess = 'InstanceSuccess'
    InstanceFailure = 'InstanceFailure'
    InstanceReady = 'InstanceReady'


class BatchGetApplicationsOutput(BaseModel):
    """
    Represents the output of a <code>BatchGetApplications</code> operation.
    """

    applicationsInfo: Optional[ApplicationsInfoList] = None


class BatchGetApplicationsInput(BaseModel):
    """
    Represents the input of a <code>BatchGetApplications</code> operation.
    """

    applicationNames: ApplicationsList


class BatchGetDeploymentsInput(BaseModel):
    """
    Represents the input of a <code>BatchGetDeployments</code> operation.
    """

    deploymentIds: DeploymentsList


class ContinueDeploymentInput(BaseModel):
    deploymentId: Optional[DeploymentId] = None
    deploymentWaitType: Optional[DeploymentWaitType] = None


class CreateApplicationOutput(BaseModel):
    """
    Represents the output of a <code>CreateApplication</code> operation.
    """

    applicationId: Optional[ApplicationId] = None


class CreateDeploymentOutput(BaseModel):
    """
    Represents the output of a <code>CreateDeployment</code> operation.
    """

    deploymentId: Optional[DeploymentId] = None


class CreateDeploymentConfigOutput(BaseModel):
    """
    Represents the output of a <code>CreateDeploymentConfig</code> operation.
    """

    deploymentConfigId: Optional[DeploymentConfigId] = None


class CreateDeploymentGroupOutput(BaseModel):
    """
    Represents the output of a <code>CreateDeploymentGroup</code> operation.
    """

    deploymentGroupId: Optional[DeploymentGroupId] = None


class DeleteApplicationInput(BaseModel):
    """
    Represents the input of a <code>DeleteApplication</code> operation.
    """

    applicationName: ApplicationName


class DeleteDeploymentConfigInput(BaseModel):
    """
    Represents the input of a <code>DeleteDeploymentConfig</code> operation.
    """

    deploymentConfigName: DeploymentConfigName


class DeleteDeploymentGroupOutput(BaseModel):
    """
    Represents the output of a <code>DeleteDeploymentGroup</code> operation.
    """

    hooksNotCleanedUp: Optional[AutoScalingGroupList] = None


class DeleteDeploymentGroupInput(BaseModel):
    """
    Represents the input of a <code>DeleteDeploymentGroup</code> operation.
    """

    applicationName: ApplicationName
    deploymentGroupName: DeploymentGroupName


class DeleteGitHubAccountTokenOutput(BaseModel):
    """
    Represents the output of a <code>DeleteGitHubAccountToken</code> operation.
    """

    tokenName: Optional[GitHubAccountTokenName] = None


class DeleteGitHubAccountTokenInput(BaseModel):
    """
    Represents the input of a <code>DeleteGitHubAccount</code> operation.
    """

    tokenName: Optional[GitHubAccountTokenName] = None


class DeleteResourcesByExternalIdInput(BaseModel):
    externalId: Optional[ExternalId] = None


class DeregisterOnPremisesInstanceInput(BaseModel):
    """
    Represents the input of a <code>DeregisterOnPremisesInstance</code> operation.
    """

    instanceName: InstanceName


class GetApplicationOutput(BaseModel):
    """
    Represents the output of a <code>GetApplication</code> operation.
    """

    application: Optional[ApplicationInfo] = None


class GetApplicationInput(BaseModel):
    """
    Represents the input of a <code>GetApplication</code> operation.
    """

    applicationName: ApplicationName


class GetDeploymentInput(BaseModel):
    """
    Represents the input of a <code>GetDeployment</code> operation.
    """

    deploymentId: DeploymentId


class GetDeploymentConfigInput(BaseModel):
    """
    Represents the input of a <code>GetDeploymentConfig</code> operation.
    """

    deploymentConfigName: DeploymentConfigName


class GetDeploymentGroupInput(BaseModel):
    """
    Represents the input of a <code>GetDeploymentGroup</code> operation.
    """

    applicationName: ApplicationName
    deploymentGroupName: DeploymentGroupName


class GetDeploymentInstanceInput(BaseModel):
    """
    Represents the input of a <code>GetDeploymentInstance</code> operation.
    """

    deploymentId: DeploymentId
    instanceId: InstanceId


class GetDeploymentTargetInput(BaseModel):
    deploymentId: Optional[DeploymentId] = None
    targetId: Optional[TargetId] = None


class GetOnPremisesInstanceInput(BaseModel):
    """
    Represents the input of a <code>GetOnPremisesInstance</code> operation.
    """

    instanceName: InstanceName


class ListApplicationRevisionsInput(BaseModel):
    """
    Represents the input of a <code>ListApplicationRevisions</code> operation.
    """

    applicationName: ApplicationName
    sortBy: Optional[ApplicationRevisionSortBy] = None
    sortOrder: Optional[SortOrder] = None
    s3Bucket: Optional[S3Bucket] = None
    s3KeyPrefix: Optional[S3Key] = None
    deployed: Optional[ListStateFilterAction] = None
    nextToken: Optional[NextToken] = None


class ListApplicationsOutput(BaseModel):
    """
    Represents the output of a ListApplications operation.
    """

    applications: Optional[ApplicationsList] = None
    nextToken: Optional[NextToken] = None


class ListApplicationsInput(BaseModel):
    """
    Represents the input of a <code>ListApplications</code> operation.
    """

    nextToken: Optional[NextToken] = None


class ListDeploymentConfigsOutput(BaseModel):
    """
    Represents the output of a <code>ListDeploymentConfigs</code> operation.
    """

    deploymentConfigsList: Optional[DeploymentConfigsList] = None
    nextToken: Optional[NextToken] = None


class ListDeploymentConfigsInput(BaseModel):
    """
    Represents the input of a <code>ListDeploymentConfigs</code> operation.
    """

    nextToken: Optional[NextToken] = None


class ListDeploymentGroupsInput(BaseModel):
    """
    Represents the input of a <code>ListDeploymentGroups</code> operation.
    """

    applicationName: ApplicationName
    nextToken: Optional[NextToken] = None


class ListDeploymentInstancesInput(BaseModel):
    """
    Represents the input of a <code>ListDeploymentInstances</code> operation.
    """

    deploymentId: DeploymentId
    nextToken: Optional[NextToken] = None
    instanceStatusFilter: Optional[InstanceStatusList] = None
    instanceTypeFilter: Optional[InstanceTypeList] = None


class ListDeploymentTargetsInput(BaseModel):
    deploymentId: Optional[DeploymentId] = None
    nextToken: Optional[NextToken] = None
    targetFilters: Optional[TargetFilters] = None


class ListDeploymentsOutput(BaseModel):
    """
    Represents the output of a <code>ListDeployments</code> operation.
    """

    deployments: Optional[DeploymentsList] = None
    nextToken: Optional[NextToken] = None


class ListDeploymentsInput(BaseModel):
    """
    Represents the input of a <code>ListDeployments</code> operation.
    """

    applicationName: Optional[ApplicationName] = None
    deploymentGroupName: Optional[DeploymentGroupName] = None
    externalId: Optional[ExternalId] = None
    includeOnlyStatuses: Optional[DeploymentStatusList] = None
    createTimeRange: Optional[TimeRange] = None
    nextToken: Optional[NextToken] = None


class ListGitHubAccountTokenNamesOutput(BaseModel):
    """
    Represents the output of a <code>ListGitHubAccountTokenNames</code> operation.
    """

    tokenNameList: Optional[GitHubAccountTokenNameList] = None
    nextToken: Optional[NextToken] = None


class ListGitHubAccountTokenNamesInput(BaseModel):
    """
    Represents the input of a <code>ListGitHubAccountTokenNames</code> operation.
    """

    nextToken: Optional[NextToken] = None


class ListTagsForResourceInput(BaseModel):
    ResourceArn: Arn
    NextToken: Optional[NextToken] = None


class PutLifecycleEventHookExecutionStatusOutput(BaseModel):
    lifecycleEventHookExecutionId: Optional[LifecycleEventHookExecutionId] = None


class PutLifecycleEventHookExecutionStatusInput(BaseModel):
    deploymentId: Optional[DeploymentId] = None
    lifecycleEventHookExecutionId: Optional[LifecycleEventHookExecutionId] = None
    status: Optional[LifecycleEventStatus] = None


class RegisterOnPremisesInstanceInput(BaseModel):
    """
    Represents the input of the register on-premises instance operation.
    """

    instanceName: InstanceName
    iamSessionArn: Optional[IamSessionArn] = None
    iamUserArn: Optional[IamUserArn] = None


class SkipWaitTimeForInstanceTerminationInput(BaseModel):
    deploymentId: Optional[DeploymentId] = None


class StopDeploymentOutput(BaseModel):
    """
    Represents the output of a <code>StopDeployment</code> operation.
    """

    status: Optional[StopStatus] = None
    statusMessage: Optional[Message] = None


class StopDeploymentInput(BaseModel):
    """
    Represents the input of a <code>StopDeployment</code> operation.
    """

    deploymentId: DeploymentId
    autoRollbackEnabled: Optional[NullableBoolean] = None


class UntagResourceInput(BaseModel):
    ResourceArn: Arn
    TagKeys: TagKeyList


class UpdateApplicationInput(BaseModel):
    """
    Represents the input of an <code>UpdateApplication</code> operation.
    """

    applicationName: Optional[ApplicationName] = None
    newApplicationName: Optional[ApplicationName] = None


class UpdateDeploymentGroupOutput(DeleteDeploymentGroupOutput):
    """
    Represents the output of an <code>UpdateDeploymentGroup</code> operation.
    """

    pass


class TagList(BaseModel):
    __root__: List[Tag]


class InstanceNameList(BaseModel):
    __root__: List[InstanceName]


class AutoRollbackEventsList(BaseModel):
    __root__: List[AutoRollbackEvent]


class AutoRollbackConfiguration(BaseModel):
    """
    Information about a configuration for automatically rolling back to a previous version of an application revision when a deployment is not completed successfully.
    """

    enabled: Optional[Boolean] = None
    events: Optional[AutoRollbackEventsList] = None


class DeploymentGroupsList(BaseModel):
    __root__: List[DeploymentGroupName]


class InstancesList(BaseModel):
    __root__: List[InstanceId]


class TargetIdList(BaseModel):
    __root__: List[TargetId]


class BlueInstanceTerminationOption(BaseModel):
    """
    Information about whether instances in the original environment are terminated when a blue/green deployment is successful. <code>BlueInstanceTerminationOption</code> does not apply to Lambda deployments.
    """

    action: Optional[InstanceAction] = None
    terminationWaitTimeInMinutes: Optional[Duration] = None


class DeploymentReadyOption(BaseModel):
    """
    Information about how traffic is rerouted to instances in a replacement environment in a blue/green deployment.
    """

    actionOnTimeout: Optional[DeploymentReadyAction] = None
    waitTimeInMinutes: Optional[Duration] = None


class GreenFleetProvisioningOption(BaseModel):
    """
    Information about the instances that belong to the replacement environment in a blue/green deployment.
    """

    action: Optional[GreenFleetProvisioningAction] = None


class BlueGreenDeploymentConfiguration(BaseModel):
    """
    Information about blue/green deployment options for a deployment group.
    """

    terminateBlueInstancesOnDeploymentSuccess: Optional[
        BlueInstanceTerminationOption
    ] = None
    deploymentReadyOption: Optional[DeploymentReadyOption] = None
    greenFleetProvisioningOption: Optional[GreenFleetProvisioningOption] = None


class LifecycleEventList(BaseModel):
    __root__: List[LifecycleEvent]


class CloudFormationTarget(BaseModel):
    """
    Information about the target to be updated by an AWS CloudFormation blue/green deployment. This target type is used for all deployments initiated by a CloudFormation stack update.
    """

    deploymentId: Optional[DeploymentId] = None
    targetId: Optional[TargetId] = None
    lastUpdatedAt: Optional[Time] = None
    lifecycleEvents: Optional[LifecycleEventList] = None
    status: Optional[TargetStatus] = None
    resourceType: Optional[CloudFormationResourceType] = None
    targetVersionWeight: Optional[TrafficWeight] = None


class MinimumHealthyHosts(BaseModel):
    """
    Information about minimum healthy instance.
    """

    type: Optional[MinimumHealthyHostsType] = None
    value: Optional[MinimumHealthyHostsValue] = None


class TrafficRoutingConfig(BaseModel):
    """
    The configuration that specifies how traffic is shifted from one version of a Lambda function to another version during an AWS Lambda deployment, or from one Amazon ECS task set to another during an Amazon ECS deployment.
    """

    type: Optional[TrafficRoutingType] = None
    timeBasedCanary: Optional[TimeBasedCanary] = None
    timeBasedLinear: Optional[TimeBasedLinear] = None


class EC2TagFilterList(BaseModel):
    __root__: List[EC2TagFilter]


class TagFilterList(BaseModel):
    __root__: List[TagFilter]


class DeploymentStyle(BaseModel):
    """
    Information about the type of deployment, either in-place or blue/green, you want to run and whether to route deployment traffic behind a load balancer.
    """

    deploymentType: Optional[DeploymentType] = None
    deploymentOption: Optional[DeploymentOption] = None


class ECSServiceList(BaseModel):
    __root__: List[ECSService]


class DeploymentConfigInfo(BaseModel):
    """
    Information about a deployment configuration.
    """

    deploymentConfigId: Optional[DeploymentConfigId] = None
    deploymentConfigName: Optional[DeploymentConfigName] = None
    minimumHealthyHosts: Optional[MinimumHealthyHosts] = None
    createTime: Optional[Timestamp] = None
    computePlatform: Optional[ComputePlatform] = None
    trafficRoutingConfig: Optional[TrafficRoutingConfig] = None


class LastDeploymentInfo(BaseModel):
    """
    Information about the most recent attempted or successful deployment to a deployment group.
    """

    deploymentId: Optional[DeploymentId] = None
    status: Optional[DeploymentStatus] = None
    endTime: Optional[Timestamp] = None
    createTime: Optional[Timestamp] = None


class ErrorInformation(BaseModel):
    """
    Information about a deployment error.
    """

    code: Optional[ErrorCode] = None
    message: Optional[ErrorMessage] = None


class DeploymentOverview(BaseModel):
    """
    Information about the deployment status of the instances in the deployment.
    """

    Pending: Optional[InstanceCount] = None
    InProgress: Optional[InstanceCount] = None
    Succeeded: Optional[InstanceCount] = None
    Failed: Optional[InstanceCount] = None
    Skipped: Optional[InstanceCount] = None
    Ready: Optional[InstanceCount] = None


class InstanceTarget(BaseModel):
    """
    A target Amazon EC2 or on-premises instance during a deployment that uses the EC2/On-premises compute platform.
    """

    deploymentId: Optional[DeploymentId] = None
    targetId: Optional[TargetId] = None
    targetArn: Optional[TargetArn] = None
    status: Optional[TargetStatus] = None
    lastUpdatedAt: Optional[Time] = None
    lifecycleEvents: Optional[LifecycleEventList] = None
    instanceLabel: Optional[TargetLabel] = None


class LambdaTarget(BaseModel):
    """
    Information about the target AWS Lambda function during an AWS Lambda deployment.
    """

    deploymentId: Optional[DeploymentId] = None
    targetId: Optional[TargetId] = None
    targetArn: Optional[TargetArn] = None
    status: Optional[TargetStatus] = None
    lastUpdatedAt: Optional[Time] = None
    lifecycleEvents: Optional[LifecycleEventList] = None
    lambdaFunctionInfo: Optional[LambdaFunctionInfo] = None


class EC2TagSetList(BaseModel):
    __root__: List[EC2TagFilterList]


class TargetGroupInfo(BaseModel):
    """
    Information about a target group in Elastic Load Balancing to use in a deployment. Instances are registered as targets in a target group, and traffic is routed to the target group.
    """

    name: Optional[TargetGroupName] = None


class ECSTaskSet(BaseModel):
    """
    Information about a set of Amazon ECS tasks in an AWS CodeDeploy deployment. An Amazon ECS task set includes details such as the desired number of tasks, how many tasks are running, and whether the task set serves production traffic. An AWS CodeDeploy application that uses the Amazon ECS compute platform deploys a containerized application in an Amazon ECS service as a task set.
    """

    identifer: Optional[ECSTaskSetIdentifier] = None
    desiredCount: Optional[ECSTaskSetCount] = None
    pendingCount: Optional[ECSTaskSetCount] = None
    runningCount: Optional[ECSTaskSetCount] = None
    status: Optional[ECSTaskSetStatus] = None
    trafficWeight: Optional[TrafficWeight] = None
    targetGroup: Optional[TargetGroupInfo] = None
    taskSetLabel: Optional[TargetLabel] = None


class GenericRevisionInfo(BaseModel):
    """
    Information about an application revision.
    """

    description: Optional[Description] = None
    deploymentGroups: Optional[DeploymentGroupsList] = None
    firstUsedTime: Optional[Timestamp] = None
    lastUsedTime: Optional[Timestamp] = None
    registerTime: Optional[Timestamp] = None


class InstanceSummary(BaseModel):
    """
    Information about an instance in a deployment.InstanceSummary is deprecated, use DeploymentTarget instead.
    """

    deploymentId: Optional[DeploymentId] = None
    instanceId: Optional[InstanceId] = None
    status: Optional[TargetStatus] = None
    lastUpdatedAt: Optional[Timestamp] = None
    lifecycleEvents: Optional[LifecycleEventList] = None
    instanceType: Optional[TargetLabel] = None


class InstanceInfo(BaseModel):
    """
    Information about an on-premises instance.
    """

    instanceName: Optional[InstanceName] = None
    iamSessionArn: Optional[IamSessionArn] = None
    iamUserArn: Optional[IamUserArn] = None
    instanceArn: Optional[InstanceArn] = None
    registerTime: Optional[Timestamp] = None
    deregisterTime: Optional[Timestamp] = None
    tags: Optional[TagList] = None


class TargetGroupInfoList(BaseModel):
    __root__: List[TargetGroupInfo]


class OnPremisesTagSetList(BaseModel):
    __root__: List[TagFilterList]


class S3Location(BaseModel):
    """
    Information about the location of application artifacts stored in Amazon S3.
    """

    bucket: Optional[S3Bucket] = None
    key: Optional[S3Key] = None
    bundleType: Optional[BundleType] = None
    version: Optional[VersionId] = None
    eTag: Optional[ETag] = None


class TargetGroupPairInfo(BaseModel):
    """
    Information about two target groups and how traffic is routed during an Amazon ECS deployment. An optional test traffic route can be specified.
    """

    targetGroups: Optional[TargetGroupInfoList] = None
    prodTrafficRoute: Optional[TrafficRoute] = None
    testTrafficRoute: Optional[TrafficRoute] = None


class TriggerEventTypeList(BaseModel):
    __root__: List[TriggerEventType]


class TriggerConfig(BaseModel):
    """
    Information about notification triggers for the deployment group.
    """

    triggerName: Optional[TriggerName] = None
    triggerTargetArn: Optional[TriggerTargetArn] = None
    triggerEvents: Optional[TriggerEventTypeList] = None


class AddTagsToOnPremisesInstancesInput(BaseModel):
    """
    Represents the input of, and adds tags to, an on-premises instance operation.
    """

    tags: TagList
    instanceNames: InstanceNameList


class BatchGetDeploymentGroupsInput(BaseModel):
    """
    Represents the input of a <code>BatchGetDeploymentGroups</code> operation.
    """

    applicationName: ApplicationName
    deploymentGroupNames: DeploymentGroupsList


class BatchGetDeploymentInstancesInput(BaseModel):
    """
    Represents the input of a <code>BatchGetDeploymentInstances</code> operation.
    """

    deploymentId: DeploymentId
    instanceIds: InstancesList


class BatchGetDeploymentTargetsInput(BaseModel):
    deploymentId: Optional[DeploymentId] = None
    targetIds: Optional[TargetIdList] = None


class BatchGetOnPremisesInstancesInput(BaseModel):
    """
    Represents the input of a <code>BatchGetOnPremisesInstances</code> operation.
    """

    instanceNames: InstanceNameList


class CreateApplicationInput(BaseModel):
    """
    Represents the input of a <code>CreateApplication</code> operation.
    """

    applicationName: ApplicationName
    computePlatform: Optional[ComputePlatform] = None
    tags: Optional[TagList] = None


class CreateDeploymentConfigInput(BaseModel):
    """
    Represents the input of a <code>CreateDeploymentConfig</code> operation.
    """

    deploymentConfigName: DeploymentConfigName
    minimumHealthyHosts: Optional[MinimumHealthyHosts] = None
    trafficRoutingConfig: Optional[TrafficRoutingConfig] = None
    computePlatform: Optional[ComputePlatform] = None


class GetDeploymentConfigOutput(BaseModel):
    """
    Represents the output of a <code>GetDeploymentConfig</code> operation.
    """

    deploymentConfigInfo: Optional[DeploymentConfigInfo] = None


class GetDeploymentInstanceOutput(BaseModel):
    """
    Represents the output of a <code>GetDeploymentInstance</code> operation.
    """

    instanceSummary: Optional[InstanceSummary] = None


class GetOnPremisesInstanceOutput(BaseModel):
    """
    Represents the output of a <code>GetOnPremisesInstance</code> operation.
    """

    instanceInfo: Optional[InstanceInfo] = None


class ListDeploymentGroupsOutput(BaseModel):
    """
    Represents the output of a <code>ListDeploymentGroups</code> operation.
    """

    applicationName: Optional[ApplicationName] = None
    deploymentGroups: Optional[DeploymentGroupsList] = None
    nextToken: Optional[NextToken] = None


class ListDeploymentInstancesOutput(BaseModel):
    """
    Represents the output of a <code>ListDeploymentInstances</code> operation.
    """

    instancesList: Optional[InstancesList] = None
    nextToken: Optional[NextToken] = None


class ListDeploymentTargetsOutput(BaseModel):
    targetIds: Optional[TargetIdList] = None
    nextToken: Optional[NextToken] = None


class ListOnPremisesInstancesOutput(BaseModel):
    """
    Represents the output of the list on-premises instances operation.
    """

    instanceNames: Optional[InstanceNameList] = None
    nextToken: Optional[NextToken] = None


class ListOnPremisesInstancesInput(BaseModel):
    """
    Represents the input of a <code>ListOnPremisesInstances</code> operation.
    """

    registrationStatus: Optional[RegistrationStatus] = None
    tagFilters: Optional[TagFilterList] = None
    nextToken: Optional[NextToken] = None


class ListTagsForResourceOutput(BaseModel):
    Tags: Optional[TagList] = None
    NextToken: Optional[NextToken] = None


class RemoveTagsFromOnPremisesInstancesInput(BaseModel):
    """
    Represents the input of a <code>RemoveTagsFromOnPremisesInstances</code> operation.
    """

    tags: TagList
    instanceNames: InstanceNameList


class TagResourceInput(BaseModel):
    ResourceArn: Arn
    Tags: TagList


class InstanceSummaryList(BaseModel):
    __root__: List[InstanceSummary]


class InstanceInfoList(BaseModel):
    __root__: List[InstanceInfo]


class TriggerConfigList(BaseModel):
    __root__: List[TriggerConfig]


class EC2TagSet(BaseModel):
    """
    Information about groups of EC2 instance tags.
    """

    ec2TagSetList: Optional[EC2TagSetList] = None


class OnPremisesTagSet(BaseModel):
    """
    Information about groups of on-premises instance tags.
    """

    onPremisesTagSetList: Optional[OnPremisesTagSetList] = None


class RevisionLocation(BaseModel):
    """
    Information about the location of an application revision.
    """

    revisionType: Optional[RevisionLocationType] = None
    s3Location: Optional[S3Location] = None
    gitHubLocation: Optional[GitHubLocation] = None
    string: Optional[RawString] = None
    appSpecContent: Optional[AppSpecContent] = None


class TargetInstances(BaseModel):
    """
    Information about the instances to be used in the replacement environment in a blue/green deployment.
    """

    tagFilters: Optional[EC2TagFilterList] = None
    autoScalingGroups: Optional[AutoScalingGroupNameList] = None
    ec2TagSet: Optional[EC2TagSet] = None


class ECSTaskSetList(BaseModel):
    __root__: List[ECSTaskSet]


class TargetGroupPairInfoList(BaseModel):
    __root__: List[TargetGroupPairInfo]


class RevisionInfo(BaseModel):
    """
    Information about an application revision.
    """

    revisionLocation: Optional[RevisionLocation] = None
    genericRevisionInfo: Optional[GenericRevisionInfo] = None


class BatchGetDeploymentInstancesOutput(BaseModel):
    """
    Represents the output of a <code>BatchGetDeploymentInstances</code> operation.
    """

    instancesSummary: Optional[InstanceSummaryList] = None
    errorMessage: Optional[ErrorMessage] = None


class BatchGetOnPremisesInstancesOutput(BaseModel):
    """
    Represents the output of a <code>BatchGetOnPremisesInstances</code> operation.
    """

    instanceInfos: Optional[InstanceInfoList] = None


class CreateDeploymentInput(BaseModel):
    """
    Represents the input of a <code>CreateDeployment</code> operation.
    """

    applicationName: ApplicationName
    deploymentGroupName: Optional[DeploymentGroupName] = None
    revision: Optional[RevisionLocation] = None
    deploymentConfigName: Optional[DeploymentConfigName] = None
    description: Optional[Description] = None
    ignoreApplicationStopFailures: Optional[Boolean] = None
    targetInstances: Optional[TargetInstances] = None
    autoRollbackConfiguration: Optional[AutoRollbackConfiguration] = None
    updateOutdatedInstancesOnly: Optional[Boolean] = None
    fileExistsBehavior: Optional[FileExistsBehavior] = None


class GetApplicationRevisionOutput(BaseModel):
    """
    Represents the output of a <code>GetApplicationRevision</code> operation.
    """

    applicationName: Optional[ApplicationName] = None
    revision: Optional[RevisionLocation] = None
    revisionInfo: Optional[GenericRevisionInfo] = None


class GetApplicationRevisionInput(BaseModel):
    """
    Represents the input of a <code>GetApplicationRevision</code> operation.
    """

    applicationName: ApplicationName
    revision: RevisionLocation


class RegisterApplicationRevisionInput(BaseModel):
    """
    Represents the input of a RegisterApplicationRevision operation.
    """

    applicationName: ApplicationName
    description: Optional[Description] = None
    revision: RevisionLocation


class RevisionLocationList(BaseModel):
    __root__: List[RevisionLocation]


class RevisionInfoList(BaseModel):
    __root__: List[RevisionInfo]


class LoadBalancerInfo(BaseModel):
    """
    Information about the Elastic Load Balancing load balancer or target group used in a deployment.
    """

    elbInfoList: Optional[ELBInfoList] = None
    targetGroupInfoList: Optional[TargetGroupInfoList] = None
    targetGroupPairInfoList: Optional[TargetGroupPairInfoList] = None


class DeploymentGroupInfo(BaseModel):
    """
    Information about a deployment group.
    """

    applicationName: Optional[ApplicationName] = None
    deploymentGroupId: Optional[DeploymentGroupId] = None
    deploymentGroupName: Optional[DeploymentGroupName] = None
    deploymentConfigName: Optional[DeploymentConfigName] = None
    ec2TagFilters: Optional[EC2TagFilterList] = None
    onPremisesInstanceTagFilters: Optional[TagFilterList] = None
    autoScalingGroups: Optional[AutoScalingGroupList] = None
    serviceRoleArn: Optional[Role] = None
    targetRevision: Optional[RevisionLocation] = None
    triggerConfigurations: Optional[TriggerConfigList] = None
    alarmConfiguration: Optional[AlarmConfiguration] = None
    autoRollbackConfiguration: Optional[AutoRollbackConfiguration] = None
    deploymentStyle: Optional[DeploymentStyle] = None
    outdatedInstancesStrategy: Optional[OutdatedInstancesStrategy] = None
    blueGreenDeploymentConfiguration: Optional[BlueGreenDeploymentConfiguration] = None
    loadBalancerInfo: Optional[LoadBalancerInfo] = None
    lastSuccessfulDeployment: Optional[LastDeploymentInfo] = None
    lastAttemptedDeployment: Optional[LastDeploymentInfo] = None
    ec2TagSet: Optional[EC2TagSet] = None
    onPremisesTagSet: Optional[OnPremisesTagSet] = None
    computePlatform: Optional[ComputePlatform] = None
    ecsServices: Optional[ECSServiceList] = None


class DeploymentInfo(BaseModel):
    """
    Information about a deployment.
    """

    applicationName: Optional[ApplicationName] = None
    deploymentGroupName: Optional[DeploymentGroupName] = None
    deploymentConfigName: Optional[DeploymentConfigName] = None
    deploymentId: Optional[DeploymentId] = None
    previousRevision: Optional[RevisionLocation] = None
    revision: Optional[RevisionLocation] = None
    status: Optional[DeploymentStatus] = None
    errorInformation: Optional[ErrorInformation] = None
    createTime: Optional[Timestamp] = None
    startTime: Optional[Timestamp] = None
    completeTime: Optional[Timestamp] = None
    deploymentOverview: Optional[DeploymentOverview] = None
    description: Optional[Description] = None
    creator: Optional[DeploymentCreator] = None
    ignoreApplicationStopFailures: Optional[Boolean] = None
    autoRollbackConfiguration: Optional[AutoRollbackConfiguration] = None
    updateOutdatedInstancesOnly: Optional[Boolean] = None
    rollbackInfo: Optional[RollbackInfo] = None
    deploymentStyle: Optional[DeploymentStyle] = None
    targetInstances: Optional[TargetInstances] = None
    instanceTerminationWaitTimeStarted: Optional[Boolean] = None
    blueGreenDeploymentConfiguration: Optional[BlueGreenDeploymentConfiguration] = None
    loadBalancerInfo: Optional[LoadBalancerInfo] = None
    additionalDeploymentStatusInfo: Optional[AdditionalDeploymentStatusInfo] = None
    fileExistsBehavior: Optional[FileExistsBehavior] = None
    deploymentStatusMessages: Optional[DeploymentStatusMessageList] = None
    computePlatform: Optional[ComputePlatform] = None
    externalId: Optional[ExternalId] = None
    relatedDeployments: Optional[RelatedDeployments] = None


class ECSTarget(BaseModel):
    """
    Information about the target of an Amazon ECS deployment.
    """

    deploymentId: Optional[DeploymentId] = None
    targetId: Optional[TargetId] = None
    targetArn: Optional[TargetArn] = None
    lastUpdatedAt: Optional[Time] = None
    lifecycleEvents: Optional[LifecycleEventList] = None
    status: Optional[TargetStatus] = None
    taskSetsInfo: Optional[ECSTaskSetList] = None


class DeploymentTarget(BaseModel):
    """
    Information about the deployment target.
    """

    deploymentTargetType: Optional[DeploymentTargetType] = None
    instanceTarget: Optional[InstanceTarget] = None
    lambdaTarget: Optional[LambdaTarget] = None
    ecsTarget: Optional[ECSTarget] = None
    cloudFormationTarget: Optional[CloudFormationTarget] = None


class BatchGetApplicationRevisionsOutput(BaseModel):
    """
    Represents the output of a <code>BatchGetApplicationRevisions</code> operation.
    """

    applicationName: Optional[ApplicationName] = None
    errorMessage: Optional[ErrorMessage] = None
    revisions: Optional[RevisionInfoList] = None


class BatchGetApplicationRevisionsInput(BaseModel):
    """
    Represents the input of a <code>BatchGetApplicationRevisions</code> operation.
    """

    applicationName: ApplicationName
    revisions: RevisionLocationList


class CreateDeploymentGroupInput(BaseModel):
    """
    Represents the input of a <code>CreateDeploymentGroup</code> operation.
    """

    applicationName: ApplicationName
    deploymentGroupName: DeploymentGroupName
    deploymentConfigName: Optional[DeploymentConfigName] = None
    ec2TagFilters: Optional[EC2TagFilterList] = None
    onPremisesInstanceTagFilters: Optional[TagFilterList] = None
    autoScalingGroups: Optional[AutoScalingGroupNameList] = None
    serviceRoleArn: Role
    triggerConfigurations: Optional[TriggerConfigList] = None
    alarmConfiguration: Optional[AlarmConfiguration] = None
    autoRollbackConfiguration: Optional[AutoRollbackConfiguration] = None
    outdatedInstancesStrategy: Optional[OutdatedInstancesStrategy] = None
    deploymentStyle: Optional[DeploymentStyle] = None
    blueGreenDeploymentConfiguration: Optional[BlueGreenDeploymentConfiguration] = None
    loadBalancerInfo: Optional[LoadBalancerInfo] = None
    ec2TagSet: Optional[EC2TagSet] = None
    ecsServices: Optional[ECSServiceList] = None
    onPremisesTagSet: Optional[OnPremisesTagSet] = None
    tags: Optional[TagList] = None


class GetDeploymentOutput(BaseModel):
    """
    Represents the output of a <code>GetDeployment</code> operation.
    """

    deploymentInfo: Optional[DeploymentInfo] = None


class GetDeploymentGroupOutput(BaseModel):
    """
    Represents the output of a <code>GetDeploymentGroup</code> operation.
    """

    deploymentGroupInfo: Optional[DeploymentGroupInfo] = None


class GetDeploymentTargetOutput(BaseModel):
    deploymentTarget: Optional[DeploymentTarget] = None


class ListApplicationRevisionsOutput(BaseModel):
    """
    Represents the output of a <code>ListApplicationRevisions</code> operation.
    """

    revisions: Optional[RevisionLocationList] = None
    nextToken: Optional[NextToken] = None


class UpdateDeploymentGroupInput(BaseModel):
    """
    Represents the input of an <code>UpdateDeploymentGroup</code> operation.
    """

    applicationName: ApplicationName
    currentDeploymentGroupName: DeploymentGroupName
    newDeploymentGroupName: Optional[DeploymentGroupName] = None
    deploymentConfigName: Optional[DeploymentConfigName] = None
    ec2TagFilters: Optional[EC2TagFilterList] = None
    onPremisesInstanceTagFilters: Optional[TagFilterList] = None
    autoScalingGroups: Optional[AutoScalingGroupNameList] = None
    serviceRoleArn: Optional[Role] = None
    triggerConfigurations: Optional[TriggerConfigList] = None
    alarmConfiguration: Optional[AlarmConfiguration] = None
    autoRollbackConfiguration: Optional[AutoRollbackConfiguration] = None
    outdatedInstancesStrategy: Optional[OutdatedInstancesStrategy] = None
    deploymentStyle: Optional[DeploymentStyle] = None
    blueGreenDeploymentConfiguration: Optional[BlueGreenDeploymentConfiguration] = None
    loadBalancerInfo: Optional[LoadBalancerInfo] = None
    ec2TagSet: Optional[EC2TagSet] = None
    ecsServices: Optional[ECSServiceList] = None
    onPremisesTagSet: Optional[OnPremisesTagSet] = None


class DeploymentGroupInfoList(BaseModel):
    __root__: List[DeploymentGroupInfo]


class DeploymentTargetList(BaseModel):
    __root__: List[DeploymentTarget]


class DeploymentsInfoList(BaseModel):
    __root__: List[DeploymentInfo]


class BatchGetDeploymentGroupsOutput(BaseModel):
    """
    Represents the output of a <code>BatchGetDeploymentGroups</code> operation.
    """

    deploymentGroupsInfo: Optional[DeploymentGroupInfoList] = None
    errorMessage: Optional[ErrorMessage] = None


class BatchGetDeploymentTargetsOutput(BaseModel):
    deploymentTargets: Optional[DeploymentTargetList] = None


class BatchGetDeploymentsOutput(BaseModel):
    """
    Represents the output of a <code>BatchGetDeployments</code> operation.
    """

    deploymentsInfo: Optional[DeploymentsInfoList] = None
