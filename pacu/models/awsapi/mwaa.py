# generated by datamodel-codegen:
#   filename:  openapi.yaml
#   timestamp: 2021-12-31T02:53:19+00:00

from __future__ import annotations

from datetime import datetime
from enum import Enum
from typing import Annotated, Any, List, Optional

from pydantic import BaseModel, Extra, Field, SecretStr


class ResourceNotFoundException(BaseModel):
    __root__: Any


class ConfigValue(BaseModel):
    __root__: Annotated[str, Field(max_length=256, min_length=1, regex='.*')]


class TagValue(BaseModel):
    __root__: Annotated[
        str,
        Field(
            max_length=256, min_length=1, regex='^([\\p{L}\\p{Z}\\p{N}_.:/=+\\-@]*)$'
        ),
    ]


class ValidationException(ResourceNotFoundException):
    pass


class InternalServerException(ResourceNotFoundException):
    pass


class AccessDeniedException(ResourceNotFoundException):
    pass


class DeleteEnvironmentOutput(BaseModel):
    pass


class PublishMetricsOutput(DeleteEnvironmentOutput):
    pass


class TagResourceOutput(DeleteEnvironmentOutput):
    pass


class UntagResourceOutput(DeleteEnvironmentOutput):
    pass


class TagKey(BaseModel):
    __root__: Annotated[
        str,
        Field(
            max_length=128, min_length=1, regex='^([\\p{L}\\p{Z}\\p{N}_.:/=+\\-@]*)$'
        ),
    ]


class AirflowConfigurationOptions(BaseModel):
    pass

    class Config:
        extra = Extra.allow


class AirflowVersion(BaseModel):
    __root__: Annotated[str, Field(max_length=32, min_length=1, regex='^[0-9a-z.]+$')]


class CloudWatchLogGroupArn(BaseModel):
    __root__: Annotated[
        str,
        Field(
            max_length=1224,
            min_length=1,
            regex='^arn:aws(-[a-z]+)?:logs:[a-z0-9\\-]+:\\d{12}:log-group:\\w+',
        ),
    ]


class ConfigKey(BaseModel):
    __root__: Annotated[
        str, Field(max_length=64, min_length=1, regex='^[a-z]+([a-z._]*[a-z]+)?$')
    ]


class EnvironmentName(BaseModel):
    __root__: Annotated[
        str, Field(max_length=80, min_length=1, regex='^[a-zA-Z][0-9a-zA-Z-_]*$')
    ]


class CreateCliTokenRequest(BaseModel):
    pass


class SyntheticCreateCliTokenResponseToken(BaseModel):
    __root__: SecretStr


class Hostname(BaseModel):
    __root__: Annotated[
        str,
        Field(
            max_length=255,
            min_length=1,
            regex='^(([a-zA-Z0-9]|[a-zA-Z0-9][a-zA-Z0-9\\-]*[a-zA-Z0-9])\\.)*([A-Za-z0-9]|[A-Za-z0-9][A-Za-z0-9\\-]*[A-Za-z0-9])$',
        ),
    ]


class SyntheticCreateEnvironmentInputAirflowConfigurationOptions(
    AirflowConfigurationOptions
):
    pass


class RelativePath(BaseModel):
    __root__: Annotated[str, Field(max_length=1024, min_length=1, regex='.*')]


class EnvironmentClass(BaseModel):
    __root__: Annotated[str, Field(max_length=1024, min_length=1)]


class IamRoleArn(BaseModel):
    __root__: Annotated[
        str,
        Field(
            max_length=1224,
            min_length=1,
            regex='^arn:aws(-[a-z]+)?:iam::\\d{12}:role/?[a-zA-Z_0-9+=,.@\\-_/]+$',
        ),
    ]


class KmsKey(BaseModel):
    __root__: Annotated[
        str,
        Field(
            max_length=1224,
            min_length=1,
            regex='^(((arn:aws(-[a-z]+)?:kms:[a-z]{2}-[a-z]+-\\d:\\d+:)?key\\/)?[a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12}|(arn:aws(-[a-z]+)?:kms:[a-z]{2}-[a-z]+-\\d:\\d+:)?alias/.+)$',
        ),
    ]


class MaxWorkers(BaseModel):
    __root__: Annotated[int, Field(ge=1.0)]


class MinWorkers(MaxWorkers):
    pass


class S3ObjectVersion(EnvironmentClass):
    pass


class Schedulers(BaseModel):
    __root__: Annotated[int, Field(le=5.0)]


class S3BucketArn(BaseModel):
    __root__: Annotated[
        str,
        Field(
            max_length=1224,
            min_length=1,
            regex='^arn:aws(-[a-z]+)?:s3:::[a-z0-9.\\-]+$',
        ),
    ]


class TagMap(BaseModel):
    pass

    class Config:
        extra = Extra.allow


class WebserverAccessMode(Enum):
    PRIVATE_ONLY = 'PRIVATE_ONLY'
    PUBLIC_ONLY = 'PUBLIC_ONLY'


class WeeklyMaintenanceWindowStart(BaseModel):
    __root__: Annotated[
        str,
        Field(
            max_length=9,
            min_length=1,
            regex='(MON|TUE|WED|THU|FRI|SAT|SUN):([01]\\d|2[0-3]):(00|30)',
        ),
    ]


class EnvironmentArn(BaseModel):
    __root__: Annotated[
        str,
        Field(
            max_length=1224,
            min_length=1,
            regex='^arn:aws(-[a-z]+)?:airflow:[a-z0-9\\-]+:\\d{12}:environment/\\w+',
        ),
    ]


class CreateWebLoginTokenRequest(BaseModel):
    pass


class SyntheticCreateWebLoginTokenResponseToken(SyntheticCreateCliTokenResponseToken):
    pass


class CreatedAt(BaseModel):
    __root__: datetime


class DeleteEnvironmentInput(BaseModel):
    pass


class String(BaseModel):
    __root__: str


class Dimension(BaseModel):
    """
    Internal only API.
    """

    Name: String
    Value: String


class Dimensions(BaseModel):
    __root__: List[Dimension]


class Double(BaseModel):
    __root__: float


class EnvironmentStatus(Enum):
    CREATING = 'CREATING'
    CREATE_FAILED = 'CREATE_FAILED'
    AVAILABLE = 'AVAILABLE'
    UPDATING = 'UPDATING'
    DELETING = 'DELETING'
    DELETED = 'DELETED'
    UNAVAILABLE = 'UNAVAILABLE'
    UPDATE_FAILED = 'UPDATE_FAILED'


class WebserverUrl(BaseModel):
    __root__: Annotated[str, Field(max_length=256, min_length=1, regex='^https://.+$')]


class EnvironmentList(BaseModel):
    __root__: List[EnvironmentName]


class ErrorCode(String):
    pass


class ErrorMessage(BaseModel):
    __root__: Annotated[str, Field(max_length=1024, min_length=1, regex='^.+$')]


class GetEnvironmentInput(BaseModel):
    pass


class Integer(BaseModel):
    __root__: int


class UpdateCreatedAt(CreatedAt):
    pass


class UpdateError(BaseModel):
    """
    An object containing the error encountered with the last update: <code>ErrorCode</code>, <code>ErrorMessage</code>.
    """

    ErrorCode: Optional[ErrorCode] = None
    ErrorMessage: Optional[ErrorMessage] = None


class UpdateStatus(Enum):
    SUCCESS = 'SUCCESS'
    PENDING = 'PENDING'
    FAILED = 'FAILED'


class ListEnvironmentsInputMaxResultsInteger(BaseModel):
    __root__: Annotated[int, Field(ge=1.0, le=25.0)]


class NextToken(BaseModel):
    __root__: Annotated[str, Field(max_length=2048, min_length=0)]


class ListEnvironmentsInput(BaseModel):
    pass


class ListTagsForResourceInput(BaseModel):
    pass


class LoggingEnabled(BaseModel):
    __root__: bool


class LoggingLevel(Enum):
    CRITICAL = 'CRITICAL'
    ERROR = 'ERROR'
    WARNING = 'WARNING'
    INFO = 'INFO'
    DEBUG = 'DEBUG'


class StatisticSet(BaseModel):
    """
    Internal only API.
    """

    Maximum: Optional[Double] = None
    Minimum: Optional[Double] = None
    SampleCount: Optional[Integer] = None
    Sum: Optional[Double] = None


class Timestamp(CreatedAt):
    pass


class Unit(Enum):
    """
    Unit
    """

    Seconds = 'Seconds'
    Microseconds = 'Microseconds'
    Milliseconds = 'Milliseconds'
    Bytes = 'Bytes'
    Kilobytes = 'Kilobytes'
    Megabytes = 'Megabytes'
    Gigabytes = 'Gigabytes'
    Terabytes = 'Terabytes'
    Bits = 'Bits'
    Kilobits = 'Kilobits'
    Megabits = 'Megabits'
    Gigabits = 'Gigabits'
    Terabits = 'Terabits'
    Percent = 'Percent'
    Count = 'Count'
    Bytes_Second = 'Bytes/Second'
    Kilobytes_Second = 'Kilobytes/Second'
    Megabytes_Second = 'Megabytes/Second'
    Gigabytes_Second = 'Gigabytes/Second'
    Terabytes_Second = 'Terabytes/Second'
    Bits_Second = 'Bits/Second'
    Kilobits_Second = 'Kilobits/Second'
    Megabits_Second = 'Megabits/Second'
    Gigabits_Second = 'Gigabits/Second'
    Terabits_Second = 'Terabits/Second'
    Count_Second = 'Count/Second'
    None_ = 'None'


class SecurityGroupId(BaseModel):
    __root__: Annotated[
        str, Field(max_length=1024, min_length=1, regex='^sg-[a-zA-Z0-9\\-._]+$')
    ]


class SubnetId(BaseModel):
    __root__: Annotated[
        str, Field(max_length=1024, min_length=1, regex='^subnet-[a-zA-Z0-9\\-._]+$')
    ]


class SyntheticUpdateEnvironmentInputAirflowConfigurationOptions(
    AirflowConfigurationOptions
):
    pass


class TagKeyList(BaseModel):
    __root__: Annotated[List[TagKey], Field(max_items=50, min_items=0)]


class TagResourceInput(BaseModel):
    Tags: TagMap


class UntagResourceInput(BaseModel):
    pass


class CreateCliTokenResponse(BaseModel):
    CliToken: Optional[SyntheticCreateCliTokenResponseToken] = None
    WebServerHostname: Optional[Hostname] = None


class CreateEnvironmentOutput(BaseModel):
    Arn: Optional[EnvironmentArn] = None


class ModuleLoggingConfigurationInput(BaseModel):
    """
    Defines the type of logs to send for the Apache Airflow log type (e.g. <code>DagProcessingLogs</code>). Valid values: <code>CloudWatchLogGroupArn</code>, <code>Enabled</code>, <code>LogLevel</code>.
    """

    Enabled: LoggingEnabled
    LogLevel: LoggingLevel


class SecurityGroupList(BaseModel):
    __root__: Annotated[List[SecurityGroupId], Field(max_items=5, min_items=1)]


class SubnetList(BaseModel):
    __root__: Annotated[List[SubnetId], Field(max_items=2, min_items=2)]


class CreateWebLoginTokenResponse(BaseModel):
    WebServerHostname: Optional[Hostname] = None
    WebToken: Optional[SyntheticCreateWebLoginTokenResponseToken] = None


class ListEnvironmentsOutput(BaseModel):
    Environments: EnvironmentList
    NextToken: Optional[NextToken] = None


class ListTagsForResourceOutput(BaseModel):
    Tags: Optional[TagMap] = None


class MetricDatum(BaseModel):
    """
    Internal only API.
    """

    Dimensions: Optional[Dimensions] = None
    MetricName: String
    StatisticValues: Optional[StatisticSet] = None
    Timestamp: Timestamp
    Unit: Optional[Unit] = None
    Value: Optional[Double] = None


class UpdateEnvironmentOutput(CreateEnvironmentOutput):
    pass


class LoggingConfigurationInput(BaseModel):
    """
    Defines the Apache Airflow logs to send to CloudWatch Logs: <code>DagProcessingLogs</code>, <code>SchedulerLogs</code>, <code>TaskLogs</code>, <code>WebserverLogs</code>, <code>WorkerLogs</code>.
    """

    DagProcessingLogs: Optional[ModuleLoggingConfigurationInput] = None
    SchedulerLogs: Optional[ModuleLoggingConfigurationInput] = None
    TaskLogs: Optional[ModuleLoggingConfigurationInput] = None
    WebserverLogs: Optional[ModuleLoggingConfigurationInput] = None
    WorkerLogs: Optional[ModuleLoggingConfigurationInput] = None


class NetworkConfiguration(BaseModel):
    """
    The VPC networking components used to secure and enable network traffic between the AWS resources for your environment. To learn more, see <a href="https://docs.aws.amazon.com/mwaa/latest/userguide/networking-about.html">About networking on Amazon MWAA</a>.
    """

    SecurityGroupIds: Optional[SecurityGroupList] = None
    SubnetIds: Optional[SubnetList] = None


class CreateEnvironmentInput(BaseModel):
    """
    This section contains the Amazon Managed Workflows for Apache Airflow (MWAA) API reference documentation to create an environment. For more information, see <a href="https://docs.aws.amazon.com/mwaa/latest/userguide/get-started.html">Get started with Amazon Managed Workflows for Apache Airflow</a>.
    """

    AirflowConfigurationOptions: Optional[
        SyntheticCreateEnvironmentInputAirflowConfigurationOptions
    ] = None
    AirflowVersion: Optional[AirflowVersion] = None
    DagS3Path: RelativePath
    EnvironmentClass: Optional[EnvironmentClass] = None
    ExecutionRoleArn: IamRoleArn
    KmsKey: Optional[KmsKey] = None
    LoggingConfiguration: Optional[LoggingConfigurationInput] = None
    MaxWorkers: Optional[MaxWorkers] = None
    MinWorkers: Optional[MinWorkers] = None
    NetworkConfiguration: NetworkConfiguration
    PluginsS3ObjectVersion: Optional[S3ObjectVersion] = None
    PluginsS3Path: Optional[RelativePath] = None
    RequirementsS3ObjectVersion: Optional[S3ObjectVersion] = None
    RequirementsS3Path: Optional[RelativePath] = None
    Schedulers: Optional[Schedulers] = None
    SourceBucketArn: S3BucketArn
    Tags: Optional[TagMap] = None
    WebserverAccessMode: Optional[WebserverAccessMode] = None
    WeeklyMaintenanceWindowStart: Optional[WeeklyMaintenanceWindowStart] = None


class LastUpdate(BaseModel):
    """
    The status of the last update on the environment, and any errors that were encountered.
    """

    CreatedAt: Optional[UpdateCreatedAt] = None
    Error: Optional[UpdateError] = None
    Status: Optional[UpdateStatus] = None


class ModuleLoggingConfiguration(BaseModel):
    """
    Defines the type of logs to send for the Apache Airflow log type (e.g. <code>DagProcessingLogs</code>). Valid values: <code>CloudWatchLogGroupArn</code>, <code>Enabled</code>, <code>LogLevel</code>.
    """

    CloudWatchLogGroupArn: Optional[CloudWatchLogGroupArn] = None
    Enabled: Optional[LoggingEnabled] = None
    LogLevel: Optional[LoggingLevel] = None


class MetricData(BaseModel):
    __root__: List[MetricDatum]


class PublishMetricsInput(BaseModel):
    MetricData: MetricData


class UpdateNetworkConfigurationInput(BaseModel):
    """
    The VPC networking components used to secure and enable network traffic between the AWS resources for your environment. To learn more, see <a href="https://docs.aws.amazon.com/mwaa/latest/userguide/networking-about.html">About networking on Amazon MWAA</a>.
    """

    SecurityGroupIds: SecurityGroupList


class UpdateEnvironmentInput(BaseModel):
    AirflowConfigurationOptions: Optional[
        SyntheticUpdateEnvironmentInputAirflowConfigurationOptions
    ] = None
    AirflowVersion: Optional[AirflowVersion] = None
    DagS3Path: Optional[RelativePath] = None
    EnvironmentClass: Optional[EnvironmentClass] = None
    ExecutionRoleArn: Optional[IamRoleArn] = None
    LoggingConfiguration: Optional[LoggingConfigurationInput] = None
    MaxWorkers: Optional[MaxWorkers] = None
    MinWorkers: Optional[MinWorkers] = None
    NetworkConfiguration: Optional[UpdateNetworkConfigurationInput] = None
    PluginsS3ObjectVersion: Optional[S3ObjectVersion] = None
    PluginsS3Path: Optional[RelativePath] = None
    RequirementsS3ObjectVersion: Optional[S3ObjectVersion] = None
    RequirementsS3Path: Optional[RelativePath] = None
    Schedulers: Optional[Schedulers] = None
    SourceBucketArn: Optional[S3BucketArn] = None
    WebserverAccessMode: Optional[WebserverAccessMode] = None
    WeeklyMaintenanceWindowStart: Optional[WeeklyMaintenanceWindowStart] = None


class LoggingConfiguration1(BaseModel):
    """
    Defines the Apache Airflow logs to send to CloudWatch Logs: <code>DagProcessingLogs</code>, <code>SchedulerLogs</code>, <code>TaskLogs</code>, <code>WebserverLogs</code>, <code>WorkerLogs</code>.
    """

    DagProcessingLogs: Optional[ModuleLoggingConfiguration] = None
    SchedulerLogs: Optional[ModuleLoggingConfiguration] = None
    TaskLogs: Optional[ModuleLoggingConfiguration] = None
    WebserverLogs: Optional[ModuleLoggingConfiguration] = None
    WorkerLogs: Optional[ModuleLoggingConfiguration] = None


class Environment(BaseModel):
    """
    The Amazon Managed Workflows for Apache Airflow (MWAA) environment.
    """

    AirflowConfigurationOptions: Optional[AirflowConfigurationOptions] = None
    AirflowVersion: Optional[AirflowVersion] = None
    Arn: Optional[EnvironmentArn] = None
    CreatedAt: Optional[CreatedAt] = None
    DagS3Path: Optional[RelativePath] = None
    EnvironmentClass: Optional[EnvironmentClass] = None
    ExecutionRoleArn: Optional[IamRoleArn] = None
    KmsKey: Optional[KmsKey] = None
    LastUpdate: Optional[LastUpdate] = None
    LoggingConfiguration: Optional[LoggingConfiguration1] = None
    MaxWorkers: Optional[MaxWorkers] = None
    MinWorkers: Optional[MinWorkers] = None
    Name: Optional[EnvironmentName] = None
    NetworkConfiguration: Optional[NetworkConfiguration] = None
    PluginsS3ObjectVersion: Optional[S3ObjectVersion] = None
    PluginsS3Path: Optional[RelativePath] = None
    RequirementsS3ObjectVersion: Optional[S3ObjectVersion] = None
    RequirementsS3Path: Optional[RelativePath] = None
    Schedulers: Optional[Schedulers] = None
    ServiceRoleArn: Optional[IamRoleArn] = None
    SourceBucketArn: Optional[S3BucketArn] = None
    Status: Optional[EnvironmentStatus] = None
    Tags: Optional[TagMap] = None
    WebserverAccessMode: Optional[WebserverAccessMode] = None
    WebserverUrl: Optional[WebserverUrl] = None
    WeeklyMaintenanceWindowStart: Optional[WeeklyMaintenanceWindowStart] = None


class GetEnvironmentOutput(BaseModel):
    Environment: Optional[Environment] = None
