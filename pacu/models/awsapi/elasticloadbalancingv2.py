# generated by datamodel-codegen:
#   filename:  openapi.yaml
#   timestamp: 2021-12-31T02:49:04+00:00

from __future__ import annotations

from datetime import datetime
from enum import Enum
from typing import Annotated, Any, List, Optional

from pydantic import BaseModel, Extra, Field


class ListenerNotFoundException(BaseModel):
    __root__: Any


class TooManyCertificatesException(ListenerNotFoundException):
    pass


class CertificateNotFoundException(ListenerNotFoundException):
    pass


class AddTagsOutput(BaseModel):
    pass


class ResourceArn(BaseModel):
    __root__: str


class DuplicateTagKeysException(ListenerNotFoundException):
    pass


class TooManyTagsException(ListenerNotFoundException):
    pass


class LoadBalancerNotFoundException(ListenerNotFoundException):
    pass


class TargetGroupNotFoundException(ListenerNotFoundException):
    pass


class AlpnPolicyValue(ResourceArn):
    pass


class DuplicateListenerException(ListenerNotFoundException):
    pass


class TooManyListenersException(ListenerNotFoundException):
    pass


class TargetGroupAssociationLimitException(ListenerNotFoundException):
    pass


class InvalidConfigurationRequestException(ListenerNotFoundException):
    pass


class IncompatibleProtocolsException(ListenerNotFoundException):
    pass


class SSLPolicyNotFoundException(ListenerNotFoundException):
    pass


class UnsupportedProtocolException(ListenerNotFoundException):
    pass


class TooManyRegistrationsForTargetIdException(ListenerNotFoundException):
    pass


class TooManyTargetsException(ListenerNotFoundException):
    pass


class TooManyActionsException(ListenerNotFoundException):
    pass


class InvalidLoadBalancerActionException(ListenerNotFoundException):
    pass


class TooManyUniqueTargetGroupsPerLoadBalancerException(ListenerNotFoundException):
    pass


class ALPNPolicyNotSupportedException(ListenerNotFoundException):
    pass


class SubnetId(ResourceArn):
    pass


class SecurityGroupId(ResourceArn):
    pass


class DuplicateLoadBalancerNameException(ListenerNotFoundException):
    pass


class TooManyLoadBalancersException(ListenerNotFoundException):
    pass


class SubnetNotFoundException(ListenerNotFoundException):
    pass


class InvalidSubnetException(ListenerNotFoundException):
    pass


class InvalidSecurityGroupException(ListenerNotFoundException):
    pass


class InvalidSchemeException(ListenerNotFoundException):
    pass


class ResourceInUseException(ListenerNotFoundException):
    pass


class AllocationIdNotFoundException(ListenerNotFoundException):
    pass


class AvailabilityZoneNotSupportedException(ListenerNotFoundException):
    pass


class OperationNotPermittedException(ListenerNotFoundException):
    pass


class PriorityInUseException(ListenerNotFoundException):
    pass


class TooManyTargetGroupsException(ListenerNotFoundException):
    pass


class TooManyRulesException(ListenerNotFoundException):
    pass


class HttpCode(ResourceArn):
    pass


class GrpcCode(ResourceArn):
    pass


class DuplicateTargetGroupNameException(ListenerNotFoundException):
    pass


class DeleteListenerOutput(AddTagsOutput):
    pass


class DeleteLoadBalancerOutput(AddTagsOutput):
    pass


class DeleteRuleOutput(AddTagsOutput):
    pass


class RuleNotFoundException(ListenerNotFoundException):
    pass


class DeleteTargetGroupOutput(AddTagsOutput):
    pass


class DeregisterTargetsOutput(AddTagsOutput):
    pass


class InvalidTargetException(ListenerNotFoundException):
    pass


class ListenerArn(ResourceArn):
    pass


class LoadBalancerArn(ResourceArn):
    pass


class LoadBalancerName(ResourceArn):
    pass


class RuleArn(ResourceArn):
    pass


class SslPolicyName(ResourceArn):
    pass


class TargetGroupArn(ResourceArn):
    pass


class TargetGroupName(ResourceArn):
    pass


class HealthUnavailableException(ListenerNotFoundException):
    pass


class RegisterTargetsOutput(AddTagsOutput):
    pass


class RemoveListenerCertificatesOutput(AddTagsOutput):
    pass


class RemoveTagsOutput(AddTagsOutput):
    pass


class TagKey(BaseModel):
    __root__: Annotated[
        str,
        Field(
            max_length=128, min_length=1, regex='^([\\p{L}\\p{Z}\\p{N}_.:/=+\\-@]*)$'
        ),
    ]


class ActionTypeEnum(Enum):
    forward = 'forward'
    authenticate_oidc = 'authenticate-oidc'
    authenticate_cognito = 'authenticate-cognito'
    redirect = 'redirect'
    fixed_response = 'fixed-response'


class ActionOrder(BaseModel):
    __root__: Annotated[int, Field(ge=1.0, le=50000.0)]


class ResourceArns(BaseModel):
    __root__: List[ResourceArn]


class AllocationId(ResourceArn):
    pass


class AlpnPolicyName(BaseModel):
    __root__: List[AlpnPolicyValue]


class AuthenticateCognitoActionAuthenticationRequestParamValue(ResourceArn):
    pass


class AuthenticateCognitoActionAuthenticationRequestExtraParams(BaseModel):
    pass

    class Config:
        extra = Extra.allow


class AuthenticateCognitoActionAuthenticationRequestParamName(ResourceArn):
    pass


class AuthenticateCognitoActionConditionalBehaviorEnum(Enum):
    deny = 'deny'
    allow = 'allow'
    authenticate = 'authenticate'


class AuthenticateCognitoActionUserPoolArn(ResourceArn):
    pass


class AuthenticateCognitoActionUserPoolClientId(ResourceArn):
    pass


class AuthenticateCognitoActionUserPoolDomain(ResourceArn):
    pass


class AuthenticateCognitoActionSessionCookieName(ResourceArn):
    pass


class AuthenticateCognitoActionScope(ResourceArn):
    pass


class AuthenticateCognitoActionSessionTimeout(BaseModel):
    __root__: int


class AuthenticateOidcActionAuthenticationRequestParamValue(ResourceArn):
    pass


class AuthenticateOidcActionAuthenticationRequestExtraParams(BaseModel):
    pass

    class Config:
        extra = Extra.allow


class AuthenticateOidcActionAuthenticationRequestParamName(ResourceArn):
    pass


class AuthenticateOidcActionAuthorizationEndpoint(ResourceArn):
    pass


class AuthenticateOidcActionClientId(ResourceArn):
    pass


class AuthenticateOidcActionClientSecret(ResourceArn):
    pass


class AuthenticateOidcActionIssuer(ResourceArn):
    pass


class AuthenticateOidcActionTokenEndpoint(ResourceArn):
    pass


class AuthenticateOidcActionUserInfoEndpoint(ResourceArn):
    pass


class AuthenticateOidcActionSessionCookieName(ResourceArn):
    pass


class AuthenticateOidcActionScope(ResourceArn):
    pass


class AuthenticateOidcActionSessionTimeout(AuthenticateCognitoActionSessionTimeout):
    pass


class AuthenticateOidcActionUseExistingClientSecret(BaseModel):
    __root__: bool


class ZoneName(ResourceArn):
    pass


class OutpostId(ResourceArn):
    pass


class CanonicalHostedZoneId(ResourceArn):
    pass


class CertificateArn(ResourceArn):
    pass


class Default(AuthenticateOidcActionUseExistingClientSecret):
    pass


class CipherName(ResourceArn):
    pass


class CipherPriority(AuthenticateCognitoActionSessionTimeout):
    pass


class Cipher(BaseModel):
    """
    Information about a cipher used in a policy.
    """

    Name: Optional[CipherName] = None
    Priority: Optional[CipherPriority] = None


class Ciphers(BaseModel):
    __root__: List[Cipher]


class ConditionFieldName(BaseModel):
    __root__: Annotated[str, Field(max_length=64)]


class ProtocolEnum(Enum):
    HTTP = 'HTTP'
    HTTPS = 'HTTPS'
    TCP = 'TCP'
    TLS = 'TLS'
    UDP = 'UDP'
    TCP_UDP = 'TCP_UDP'
    GENEVE = 'GENEVE'


class Port(BaseModel):
    __root__: Annotated[int, Field(ge=1.0, le=65535.0)]


class Subnets(BaseModel):
    __root__: List[SubnetId]


class SecurityGroups(BaseModel):
    __root__: List[SecurityGroupId]


class LoadBalancerSchemeEnum(Enum):
    internet_facing = 'internet-facing'
    internal = 'internal'


class LoadBalancerTypeEnum(Enum):
    application = 'application'
    network = 'network'
    gateway = 'gateway'


class IpAddressType(Enum):
    ipv4 = 'ipv4'
    dualstack = 'dualstack'


class CustomerOwnedIpv4Pool(BaseModel):
    __root__: Annotated[
        str, Field(max_length=256, regex='^(ipv4pool-coip-)[a-zA-Z0-9]+$')
    ]


class RulePriority(ActionOrder):
    pass


class ProtocolVersion(ResourceArn):
    pass


class VpcId(ResourceArn):
    pass


class HealthCheckPort(ResourceArn):
    pass


class HealthCheckEnabled(AuthenticateOidcActionUseExistingClientSecret):
    pass


class Path1(BaseModel):
    __root__: Annotated[str, Field(max_length=1024, min_length=1)]


class HealthCheckIntervalSeconds(BaseModel):
    __root__: Annotated[int, Field(ge=5.0, le=300.0)]


class HealthCheckTimeoutSeconds(BaseModel):
    __root__: Annotated[int, Field(ge=2.0, le=120.0)]


class HealthCheckThresholdCount(BaseModel):
    __root__: Annotated[int, Field(ge=2.0, le=10.0)]


class Matcher(BaseModel):
    """
    The codes to use when checking for a successful response from a target. If the protocol version is gRPC, these are gRPC codes. Otherwise, these are HTTP codes.
    """

    HttpCode: Optional[HttpCode] = None
    GrpcCode: Optional[GrpcCode] = None


class TargetTypeEnum(Enum):
    instance = 'instance'
    ip = 'ip'
    lambda_ = 'lambda'


class CreatedTime(BaseModel):
    __root__: datetime


class DNSName(ResourceArn):
    pass


class DeleteListenerInput(BaseModel):
    ListenerArn: ListenerArn


class DeleteLoadBalancerInput(BaseModel):
    LoadBalancerArn: LoadBalancerArn


class DeleteRuleInput(BaseModel):
    RuleArn: RuleArn


class DeleteTargetGroupInput(BaseModel):
    TargetGroupArn: TargetGroupArn


class Marker(ResourceArn):
    pass


class PageSize(BaseModel):
    __root__: Annotated[int, Field(ge=1.0, le=400.0)]


class DescribeAccountLimitsInput(BaseModel):
    Marker: Optional[Marker] = None
    PageSize: Optional[PageSize] = None


class DescribeListenerCertificatesInput(BaseModel):
    ListenerArn: ListenerArn
    Marker: Optional[Marker] = None
    PageSize: Optional[PageSize] = None


class ListenerArns(BaseModel):
    __root__: List[ListenerArn]


class DescribeListenersInput(BaseModel):
    LoadBalancerArn: Optional[LoadBalancerArn] = None
    ListenerArns: Optional[ListenerArns] = None
    Marker: Optional[Marker] = None
    PageSize: Optional[PageSize] = None


class DescribeLoadBalancerAttributesInput(BaseModel):
    LoadBalancerArn: LoadBalancerArn


class LoadBalancerArns(BaseModel):
    __root__: List[LoadBalancerArn]


class LoadBalancerNames(BaseModel):
    __root__: List[LoadBalancerName]


class DescribeLoadBalancersInput(BaseModel):
    LoadBalancerArns: Optional[LoadBalancerArns] = None
    Names: Optional[LoadBalancerNames] = None
    Marker: Optional[Marker] = None
    PageSize: Optional[PageSize] = None


class RuleArns(BaseModel):
    __root__: List[RuleArn]


class DescribeRulesInput(BaseModel):
    ListenerArn: Optional[ListenerArn] = None
    RuleArns: Optional[RuleArns] = None
    Marker: Optional[Marker] = None
    PageSize: Optional[PageSize] = None


class SslPolicyNames(BaseModel):
    __root__: List[SslPolicyName]


class DescribeSSLPoliciesInput(BaseModel):
    Names: Optional[SslPolicyNames] = None
    Marker: Optional[Marker] = None
    PageSize: Optional[PageSize] = None


class DescribeTagsInput(BaseModel):
    ResourceArns: ResourceArns


class DescribeTargetGroupAttributesInput(BaseModel):
    TargetGroupArn: TargetGroupArn


class TargetGroupArns(BaseModel):
    __root__: List[TargetGroupArn]


class TargetGroupNames(BaseModel):
    __root__: List[TargetGroupName]


class DescribeTargetGroupsInput(BaseModel):
    LoadBalancerArn: Optional[LoadBalancerArn] = None
    TargetGroupArns: Optional[TargetGroupArns] = None
    Names: Optional[TargetGroupNames] = None
    Marker: Optional[Marker] = None
    PageSize: Optional[PageSize] = None


class Description(ResourceArn):
    pass


class FixedResponseActionMessage(BaseModel):
    __root__: Annotated[str, Field(max_length=1024, min_length=0)]


class FixedResponseActionStatusCode(BaseModel):
    __root__: Annotated[str, Field(regex='^(2|4|5)\\d\\d$')]


class FixedResponseActionContentType(BaseModel):
    __root__: Annotated[str, Field(max_length=32, min_length=0)]


class HttpHeaderConditionName(ResourceArn):
    pass


class IPv6Address(ResourceArn):
    pass


class IpAddress(ResourceArn):
    pass


class IsDefault1(AuthenticateOidcActionUseExistingClientSecret):
    pass


class Name3(ResourceArn):
    pass


class Max(ResourceArn):
    pass


class Limit(BaseModel):
    """
    Information about an Elastic Load Balancing resource limit for your Amazon Web Services account.
    """

    Name: Optional[Name3] = None
    Max: Optional[Max] = None


class StringValue(ResourceArn):
    pass


class PrivateIPv4Address(ResourceArn):
    pass


class LoadBalancerAddress(BaseModel):
    """
    Information about a static IP address for a load balancer.
    """

    IpAddress: Optional[IpAddress] = None
    AllocationId: Optional[AllocationId] = None
    PrivateIPv4Address: Optional[PrivateIPv4Address] = None
    IPv6Address: Optional[IPv6Address] = None


class LoadBalancerAttributeKey(BaseModel):
    __root__: Annotated[str, Field(max_length=256, regex='^[a-zA-Z0-9._]+$')]


class LoadBalancerAttributeValue(BaseModel):
    __root__: Annotated[str, Field(max_length=1024)]


class LoadBalancerStateEnum(Enum):
    active = 'active'
    provisioning = 'provisioning'
    active_impaired = 'active_impaired'
    failed = 'failed'


class StateReason(ResourceArn):
    pass


class ModifyTargetGroupInput(BaseModel):
    TargetGroupArn: TargetGroupArn
    HealthCheckProtocol: Optional[ProtocolEnum] = None
    HealthCheckPort: Optional[HealthCheckPort] = None
    HealthCheckPath: Optional[Path1] = None
    HealthCheckEnabled: Optional[HealthCheckEnabled] = None
    HealthCheckIntervalSeconds: Optional[HealthCheckIntervalSeconds] = None
    HealthCheckTimeoutSeconds: Optional[HealthCheckTimeoutSeconds] = None
    HealthyThresholdCount: Optional[HealthCheckThresholdCount] = None
    UnhealthyThresholdCount: Optional[HealthCheckThresholdCount] = None
    Matcher: Optional[Matcher] = None


class QueryStringKeyValuePair(BaseModel):
    """
    Information about a key/value pair.
    """

    Key: Optional[StringValue] = None
    Value: Optional[StringValue] = None


class RedirectActionProtocol(BaseModel):
    __root__: Annotated[str, Field(regex='^(HTTPS?|#\\{protocol\\})$')]


class RedirectActionPort(ResourceArn):
    pass


class RedirectActionHost(BaseModel):
    __root__: Annotated[str, Field(max_length=128, min_length=1)]


class RedirectActionPath(RedirectActionHost):
    pass


class RedirectActionQuery(BaseModel):
    __root__: Annotated[str, Field(max_length=128, min_length=0)]


class RedirectActionStatusCodeEnum(Enum):
    HTTP_301 = 'HTTP_301'
    HTTP_302 = 'HTTP_302'


class TagKeys(BaseModel):
    __root__: List[TagKey]


class RemoveTagsInput(BaseModel):
    ResourceArns: ResourceArns
    TagKeys: TagKeys


class String(ResourceArn):
    pass


class SetIpAddressTypeInput(BaseModel):
    LoadBalancerArn: LoadBalancerArn
    IpAddressType: IpAddressType


class SetSecurityGroupsInput(BaseModel):
    LoadBalancerArn: LoadBalancerArn
    SecurityGroups: SecurityGroups


class SslProtocol(ResourceArn):
    pass


class TagValue(BaseModel):
    __root__: Annotated[
        str,
        Field(
            max_length=256, min_length=0, regex='^([\\p{L}\\p{Z}\\p{N}_.:/=+\\-@]*)$'
        ),
    ]


class TargetId(ResourceArn):
    pass


class TargetGroup(BaseModel):
    """
    Information about a target group.
    """

    TargetGroupArn: Optional[TargetGroupArn] = None
    TargetGroupName: Optional[TargetGroupName] = None
    Protocol: Optional[ProtocolEnum] = None
    Port: Optional[Port] = None
    VpcId: Optional[VpcId] = None
    HealthCheckProtocol: Optional[ProtocolEnum] = None
    HealthCheckPort: Optional[HealthCheckPort] = None
    HealthCheckEnabled: Optional[HealthCheckEnabled] = None
    HealthCheckIntervalSeconds: Optional[HealthCheckIntervalSeconds] = None
    HealthCheckTimeoutSeconds: Optional[HealthCheckTimeoutSeconds] = None
    HealthyThresholdCount: Optional[HealthCheckThresholdCount] = None
    UnhealthyThresholdCount: Optional[HealthCheckThresholdCount] = None
    HealthCheckPath: Optional[Path1] = None
    Matcher: Optional[Matcher] = None
    LoadBalancerArns: Optional[LoadBalancerArns] = None
    TargetType: Optional[TargetTypeEnum] = None
    ProtocolVersion: Optional[ProtocolVersion] = None


class TargetGroupAttributeKey(LoadBalancerAttributeKey):
    pass


class TargetGroupAttributeValue(ResourceArn):
    pass


class TargetGroupStickinessEnabled(AuthenticateOidcActionUseExistingClientSecret):
    pass


class TargetGroupStickinessDurationSeconds(AuthenticateCognitoActionSessionTimeout):
    pass


class TargetGroupWeight(AuthenticateCognitoActionSessionTimeout):
    pass


class TargetHealthStateEnum(Enum):
    initial = 'initial'
    healthy = 'healthy'
    unhealthy = 'unhealthy'
    unused = 'unused'
    draining = 'draining'
    unavailable = 'unavailable'


class TargetHealthReasonEnum(Enum):
    Elb_RegistrationInProgress = 'Elb.RegistrationInProgress'
    Elb_InitialHealthChecking = 'Elb.InitialHealthChecking'
    Target_ResponseCodeMismatch = 'Target.ResponseCodeMismatch'
    Target_Timeout = 'Target.Timeout'
    Target_FailedHealthChecks = 'Target.FailedHealthChecks'
    Target_NotRegistered = 'Target.NotRegistered'
    Target_NotInUse = 'Target.NotInUse'
    Target_DeregistrationInProgress = 'Target.DeregistrationInProgress'
    Target_InvalidState = 'Target.InvalidState'
    Target_IpUnusable = 'Target.IpUnusable'
    Target_HealthCheckDisabled = 'Target.HealthCheckDisabled'
    Elb_InternalError = 'Elb.InternalError'


class TargetHealth(BaseModel):
    """
    Information about the current health of a target.
    """

    State: Optional[TargetHealthStateEnum] = None
    Reason: Optional[TargetHealthReasonEnum] = None
    Description: Optional[Description] = None


class Certificate(BaseModel):
    """
    Information about an SSL server certificate.
    """

    CertificateArn: Optional[CertificateArn] = None
    IsDefault: Optional[Default] = None


class Tag(BaseModel):
    """
    Information about a tag.
    """

    Key: TagKey
    Value: Optional[TagValue] = None


class SubnetMapping(BaseModel):
    """
    Information about a subnet mapping.
    """

    SubnetId: Optional[SubnetId] = None
    AllocationId: Optional[AllocationId] = None
    PrivateIPv4Address: Optional[PrivateIPv4Address] = None
    IPv6Address: Optional[IPv6Address] = None


class TargetDescription(BaseModel):
    """
    Information about a target.
    """

    Id: TargetId
    Port: Optional[Port] = None
    AvailabilityZone: Optional[ZoneName] = None


class LoadBalancerAttribute(BaseModel):
    """
    Information about a load balancer attribute.
    """

    Key: Optional[LoadBalancerAttributeKey] = None
    Value: Optional[LoadBalancerAttributeValue] = None


class TargetGroupAttribute(BaseModel):
    """
    Information about a target group attribute.
    """

    Key: Optional[TargetGroupAttributeKey] = None
    Value: Optional[TargetGroupAttributeValue] = None


class SetIpAddressTypeOutput(BaseModel):
    IpAddressType: Optional[IpAddressType] = None


class RulePriorityPair(BaseModel):
    """
    Information about the priorities for the rules for a listener.
    """

    RuleArn: Optional[RuleArn] = None
    Priority: Optional[RulePriority] = None


class SetSecurityGroupsOutput(BaseModel):
    SecurityGroupIds: Optional[SecurityGroups] = None


class AuthenticateOidcActionConfig(BaseModel):
    """
    Request parameters when using an identity provider (IdP) that is compliant with OpenID Connect (OIDC) to authenticate users.
    """

    Issuer: AuthenticateOidcActionIssuer
    AuthorizationEndpoint: AuthenticateOidcActionAuthorizationEndpoint
    TokenEndpoint: AuthenticateOidcActionTokenEndpoint
    UserInfoEndpoint: AuthenticateOidcActionUserInfoEndpoint
    ClientId: AuthenticateOidcActionClientId
    ClientSecret: Optional[AuthenticateOidcActionClientSecret] = None
    SessionCookieName: Optional[AuthenticateOidcActionSessionCookieName] = None
    Scope: Optional[AuthenticateOidcActionScope] = None
    SessionTimeout: Optional[AuthenticateOidcActionSessionTimeout] = None
    AuthenticationRequestExtraParams: Optional[
        AuthenticateOidcActionAuthenticationRequestExtraParams
    ] = None
    OnUnauthenticatedRequest: Optional[
        AuthenticateCognitoActionConditionalBehaviorEnum
    ] = None
    UseExistingClientSecret: Optional[
        AuthenticateOidcActionUseExistingClientSecret
    ] = None


class AuthenticateCognitoActionConfig(BaseModel):
    """
    Request parameters to use when integrating with Amazon Cognito to authenticate users.
    """

    UserPoolArn: AuthenticateCognitoActionUserPoolArn
    UserPoolClientId: AuthenticateCognitoActionUserPoolClientId
    UserPoolDomain: AuthenticateCognitoActionUserPoolDomain
    SessionCookieName: Optional[AuthenticateCognitoActionSessionCookieName] = None
    Scope: Optional[AuthenticateCognitoActionScope] = None
    SessionTimeout: Optional[AuthenticateCognitoActionSessionTimeout] = None
    AuthenticationRequestExtraParams: Optional[
        AuthenticateCognitoActionAuthenticationRequestExtraParams
    ] = None
    OnUnauthenticatedRequest: Optional[
        AuthenticateCognitoActionConditionalBehaviorEnum
    ] = None


class RedirectActionConfig(BaseModel):
    """
    <p>Information about a redirect action.</p> <p>A URI consists of the following components: protocol://hostname:port/path?query. You must modify at least one of the following components to avoid a redirect loop: protocol, hostname, port, or path. Any components that you do not modify retain their original values.</p> <p>You can reuse URI components using the following reserved keywords:</p> <ul> <li> <p>#{protocol}</p> </li> <li> <p>#{host}</p> </li> <li> <p>#{port}</p> </li> <li> <p>#{path} (the leading "/" is removed)</p> </li> <li> <p>#{query}</p> </li> </ul> <p>For example, you can change the path to "/new/#{path}", the hostname to "example.#{host}", or the query to "#{query}&amp;value=xyz".</p>
    """

    Protocol: Optional[RedirectActionProtocol] = None
    Port: Optional[RedirectActionPort] = None
    Host: Optional[RedirectActionHost] = None
    Path: Optional[RedirectActionPath] = None
    Query: Optional[RedirectActionQuery] = None
    StatusCode: RedirectActionStatusCodeEnum


class FixedResponseActionConfig(BaseModel):
    """
    Information about an action that returns a custom HTTP response.
    """

    MessageBody: Optional[FixedResponseActionMessage] = None
    StatusCode: FixedResponseActionStatusCode
    ContentType: Optional[FixedResponseActionContentType] = None


class CertificateList(BaseModel):
    __root__: List[Certificate]


class AddListenerCertificatesInput(BaseModel):
    ListenerArn: ListenerArn
    Certificates: CertificateList


class TagList(BaseModel):
    __root__: Annotated[List[Tag], Field(min_items=1)]


class AddTagsInput(BaseModel):
    ResourceArns: ResourceArns
    Tags: TagList


class LoadBalancerAddresses(BaseModel):
    __root__: List[LoadBalancerAddress]


class AvailabilityZone1(BaseModel):
    """
    Information about an Availability Zone.
    """

    ZoneName: Optional[ZoneName] = None
    SubnetId: Optional[SubnetId] = None
    OutpostId: Optional[OutpostId] = None
    LoadBalancerAddresses: Optional[LoadBalancerAddresses] = None


class AvailabilityZones(BaseModel):
    __root__: List[AvailabilityZone1]


class SubnetMappings(BaseModel):
    __root__: List[SubnetMapping]


class CreateLoadBalancerInput(BaseModel):
    Name: LoadBalancerName
    Subnets: Optional[Subnets] = None
    SubnetMappings: Optional[SubnetMappings] = None
    SecurityGroups: Optional[SecurityGroups] = None
    Scheme: Optional[LoadBalancerSchemeEnum] = None
    Tags: Optional[TagList] = None
    Type: Optional[LoadBalancerTypeEnum] = None
    IpAddressType: Optional[IpAddressType] = None
    CustomerOwnedIpv4Pool: Optional[CustomerOwnedIpv4Pool] = None


class CreateTargetGroupInput(BaseModel):
    Name: TargetGroupName
    Protocol: Optional[ProtocolEnum] = None
    ProtocolVersion: Optional[ProtocolVersion] = None
    Port: Optional[Port] = None
    VpcId: Optional[VpcId] = None
    HealthCheckProtocol: Optional[ProtocolEnum] = None
    HealthCheckPort: Optional[HealthCheckPort] = None
    HealthCheckEnabled: Optional[HealthCheckEnabled] = None
    HealthCheckPath: Optional[Path1] = None
    HealthCheckIntervalSeconds: Optional[HealthCheckIntervalSeconds] = None
    HealthCheckTimeoutSeconds: Optional[HealthCheckTimeoutSeconds] = None
    HealthyThresholdCount: Optional[HealthCheckThresholdCount] = None
    UnhealthyThresholdCount: Optional[HealthCheckThresholdCount] = None
    Matcher: Optional[Matcher] = None
    TargetType: Optional[TargetTypeEnum] = None
    Tags: Optional[TagList] = None


class TargetGroups(BaseModel):
    __root__: List[TargetGroup]


class TargetDescriptions(BaseModel):
    __root__: List[TargetDescription]


class DeregisterTargetsInput(BaseModel):
    TargetGroupArn: TargetGroupArn
    Targets: TargetDescriptions


class Limits(BaseModel):
    __root__: List[Limit]


class LoadBalancerAttributes(BaseModel):
    __root__: Annotated[List[LoadBalancerAttribute], Field(max_items=20)]


class TargetGroupAttributes(BaseModel):
    __root__: List[TargetGroupAttribute]


class DescribeTargetHealthInput(BaseModel):
    TargetGroupArn: TargetGroupArn
    Targets: Optional[TargetDescriptions] = None


class TargetGroupStickinessConfig(BaseModel):
    """
    Information about the target group stickiness for a rule.
    """

    Enabled: Optional[TargetGroupStickinessEnabled] = None
    DurationSeconds: Optional[TargetGroupStickinessDurationSeconds] = None


class ListOfString(BaseModel):
    __root__: List[StringValue]


class HostHeaderConditionConfig(BaseModel):
    """
    Information about a host header condition.
    """

    Values: Optional[ListOfString] = None


class HttpHeaderConditionConfig(BaseModel):
    """
    <p>Information about an HTTP header condition.</p> <p>There is a set of standard HTTP header fields. You can also define custom HTTP header fields.</p>
    """

    HttpHeaderName: Optional[HttpHeaderConditionName] = None
    Values: Optional[ListOfString] = None


class HttpRequestMethodConditionConfig(HostHeaderConditionConfig):
    """
    <p>Information about an HTTP method condition.</p> <p>HTTP defines a set of request methods, also referred to as HTTP verbs. For more information, see the <a href="https://www.iana.org/assignments/http-methods/http-methods.xhtml">HTTP Method Registry</a>. You can also define custom HTTP methods.</p>
    """

    pass


class LoadBalancerState(BaseModel):
    """
    Information about the state of the load balancer.
    """

    Code: Optional[LoadBalancerStateEnum] = None
    Reason: Optional[StateReason] = None


class LoadBalancer(BaseModel):
    """
    Information about a load balancer.
    """

    LoadBalancerArn: Optional[LoadBalancerArn] = None
    DNSName: Optional[DNSName] = None
    CanonicalHostedZoneId: Optional[CanonicalHostedZoneId] = None
    CreatedTime: Optional[CreatedTime] = None
    LoadBalancerName: Optional[LoadBalancerName] = None
    Scheme: Optional[LoadBalancerSchemeEnum] = None
    VpcId: Optional[VpcId] = None
    State: Optional[LoadBalancerState] = None
    Type: Optional[LoadBalancerTypeEnum] = None
    AvailabilityZones: Optional[AvailabilityZones] = None
    SecurityGroups: Optional[SecurityGroups] = None
    IpAddressType: Optional[IpAddressType] = None
    CustomerOwnedIpv4Pool: Optional[CustomerOwnedIpv4Pool] = None


class ModifyLoadBalancerAttributesInput(BaseModel):
    LoadBalancerArn: LoadBalancerArn
    Attributes: LoadBalancerAttributes


class ModifyTargetGroupAttributesInput(BaseModel):
    TargetGroupArn: TargetGroupArn
    Attributes: TargetGroupAttributes


class PathPatternConditionConfig(HostHeaderConditionConfig):
    """
    Information about a path pattern condition.
    """

    pass


class QueryStringKeyValuePairList(BaseModel):
    __root__: List[QueryStringKeyValuePair]


class QueryStringConditionConfig(BaseModel):
    """
    <p>Information about a query string condition.</p> <p>The query string component of a URI starts after the first '?' character and is terminated by either a '#' character or the end of the URI. A typical query string contains key/value pairs separated by '&amp;' characters. The allowed characters are specified by RFC 3986. Any character can be percentage encoded.</p>
    """

    Values: Optional[QueryStringKeyValuePairList] = None


class RegisterTargetsInput(BaseModel):
    TargetGroupArn: TargetGroupArn
    Targets: TargetDescriptions


class RemoveListenerCertificatesInput(BaseModel):
    ListenerArn: ListenerArn
    Certificates: CertificateList


class SourceIpConditionConfig(HostHeaderConditionConfig):
    """
    <p>Information about a source IP condition.</p> <p>You can use this condition to route based on the IP address of the source that connects to the load balancer. If a client is behind a proxy, this is the IP address of the proxy not the IP address of the client.</p>
    """

    pass


class RulePriorityList(BaseModel):
    __root__: List[RulePriorityPair]


class SetRulePrioritiesInput(BaseModel):
    RulePriorities: RulePriorityList


class SetSubnetsInput(BaseModel):
    LoadBalancerArn: LoadBalancerArn
    Subnets: Optional[Subnets] = None
    SubnetMappings: Optional[SubnetMappings] = None
    IpAddressType: Optional[IpAddressType] = None


class SslProtocols(BaseModel):
    __root__: List[SslProtocol]


class TagDescription(BaseModel):
    """
    The tags associated with a resource.
    """

    ResourceArn: Optional[ResourceArn] = None
    Tags: Optional[TagList] = None


class TargetGroupTuple(BaseModel):
    """
    Information about how traffic will be distributed between multiple target groups in a forward rule.
    """

    TargetGroupArn: Optional[TargetGroupArn] = None
    Weight: Optional[TargetGroupWeight] = None


class TargetHealthDescription(BaseModel):
    """
    Information about the health of a target.
    """

    Target: Optional[TargetDescription] = None
    HealthCheckPort: Optional[HealthCheckPort] = None
    TargetHealth: Optional[TargetHealth] = None


class AddListenerCertificatesOutput(BaseModel):
    Certificates: Optional[CertificateList] = None


class RuleCondition(BaseModel):
    """
    <p>Information about a condition for a rule.</p> <p>Each rule can optionally include up to one of each of the following conditions: <code>http-request-method</code>, <code>host-header</code>, <code>path-pattern</code>, and <code>source-ip</code>. Each rule can also optionally include one or more of each of the following conditions: <code>http-header</code> and <code>query-string</code>.</p>
    """

    Field: Optional[ConditionFieldName] = None
    Values: Optional[ListOfString] = None
    HostHeaderConfig: Optional[HostHeaderConditionConfig] = None
    PathPatternConfig: Optional[PathPatternConditionConfig] = None
    HttpHeaderConfig: Optional[HttpHeaderConditionConfig] = None
    QueryStringConfig: Optional[QueryStringConditionConfig] = None
    HttpRequestMethodConfig: Optional[HttpRequestMethodConditionConfig] = None
    SourceIpConfig: Optional[SourceIpConditionConfig] = None


class CreateTargetGroupOutput(BaseModel):
    TargetGroups: Optional[TargetGroups] = None


class DescribeAccountLimitsOutput(BaseModel):
    Limits: Optional[Limits] = None
    NextMarker: Optional[Marker] = None


class DescribeListenerCertificatesOutput(BaseModel):
    Certificates: Optional[CertificateList] = None
    NextMarker: Optional[Marker] = None


class DescribeLoadBalancerAttributesOutput(BaseModel):
    Attributes: Optional[LoadBalancerAttributes] = None


class DescribeTargetGroupAttributesOutput(BaseModel):
    Attributes: Optional[TargetGroupAttributes] = None


class DescribeTargetGroupsOutput(BaseModel):
    TargetGroups: Optional[TargetGroups] = None
    NextMarker: Optional[Marker] = None


class ModifyLoadBalancerAttributesOutput(DescribeLoadBalancerAttributesOutput):
    pass


class ModifyTargetGroupOutput(CreateTargetGroupOutput):
    pass


class ModifyTargetGroupAttributesOutput(DescribeTargetGroupAttributesOutput):
    pass


class SetSubnetsOutput(BaseModel):
    AvailabilityZones: Optional[AvailabilityZones] = None
    IpAddressType: Optional[IpAddressType] = None


class LoadBalancers(BaseModel):
    __root__: List[LoadBalancer]


class RuleConditionList(BaseModel):
    __root__: List[RuleCondition]


class TagDescriptions(BaseModel):
    __root__: List[TagDescription]


class TargetHealthDescriptions(BaseModel):
    __root__: List[TargetHealthDescription]


class TargetGroupList(BaseModel):
    __root__: List[TargetGroupTuple]


class SslPolicy(BaseModel):
    """
    Information about a policy used for SSL negotiation.
    """

    SslProtocols: Optional[SslProtocols] = None
    Ciphers: Optional[Ciphers] = None
    Name: Optional[SslPolicyName] = None


class CreateLoadBalancerOutput(BaseModel):
    LoadBalancers: Optional[LoadBalancers] = None


class DescribeLoadBalancersOutput(BaseModel):
    LoadBalancers: Optional[LoadBalancers] = None
    NextMarker: Optional[Marker] = None


class DescribeTagsOutput(BaseModel):
    TagDescriptions: Optional[TagDescriptions] = None


class DescribeTargetHealthOutput(BaseModel):
    TargetHealthDescriptions: Optional[TargetHealthDescriptions] = None


class ForwardActionConfig(BaseModel):
    """
    Information about a forward action.
    """

    TargetGroups: Optional[TargetGroupList] = None
    TargetGroupStickinessConfig: Optional[TargetGroupStickinessConfig] = None


class SslPolicies(BaseModel):
    __root__: List[SslPolicy]


class Action(BaseModel):
    """
    <p>Information about an action.</p> <p>Each rule must include exactly one of the following types of actions: <code>forward</code>, <code>fixed-response</code>, or <code>redirect</code>, and it must be the last action to be performed.</p>
    """

    Type: ActionTypeEnum
    TargetGroupArn: Optional[TargetGroupArn] = None
    AuthenticateOidcConfig: Optional[AuthenticateOidcActionConfig] = None
    AuthenticateCognitoConfig: Optional[AuthenticateCognitoActionConfig] = None
    Order: Optional[ActionOrder] = None
    RedirectConfig: Optional[RedirectActionConfig] = None
    FixedResponseConfig: Optional[FixedResponseActionConfig] = None
    ForwardConfig: Optional[ForwardActionConfig] = None


class DescribeSSLPoliciesOutput(BaseModel):
    SslPolicies: Optional[SslPolicies] = None
    NextMarker: Optional[Marker] = None


class Actions(BaseModel):
    __root__: List[Action]


class CreateListenerInput(BaseModel):
    LoadBalancerArn: LoadBalancerArn
    Protocol: Optional[ProtocolEnum] = None
    Port: Optional[Port] = None
    SslPolicy: Optional[SslPolicyName] = None
    Certificates: Optional[CertificateList] = None
    DefaultActions: Actions
    AlpnPolicy: Optional[AlpnPolicyName] = None
    Tags: Optional[TagList] = None


class CreateRuleInput(BaseModel):
    ListenerArn: ListenerArn
    Conditions: RuleConditionList
    Priority: RulePriority
    Actions: Actions
    Tags: Optional[TagList] = None


class Listener(BaseModel):
    """
    Information about a listener.
    """

    ListenerArn: Optional[ListenerArn] = None
    LoadBalancerArn: Optional[LoadBalancerArn] = None
    Port: Optional[Port] = None
    Protocol: Optional[ProtocolEnum] = None
    Certificates: Optional[CertificateList] = None
    SslPolicy: Optional[SslPolicyName] = None
    DefaultActions: Optional[Actions] = None
    AlpnPolicy: Optional[AlpnPolicyName] = None


class ModifyListenerInput(BaseModel):
    ListenerArn: ListenerArn
    Port: Optional[Port] = None
    Protocol: Optional[ProtocolEnum] = None
    SslPolicy: Optional[SslPolicyName] = None
    Certificates: Optional[CertificateList] = None
    DefaultActions: Optional[Actions] = None
    AlpnPolicy: Optional[AlpnPolicyName] = None


class ModifyRuleInput(BaseModel):
    RuleArn: RuleArn
    Conditions: Optional[RuleConditionList] = None
    Actions: Optional[Actions] = None


class Rule(BaseModel):
    """
    Information about a rule.
    """

    RuleArn: Optional[RuleArn] = None
    Priority: Optional[String] = None
    Conditions: Optional[RuleConditionList] = None
    Actions: Optional[Actions] = None
    IsDefault: Optional[IsDefault1] = None


class Listeners(BaseModel):
    __root__: List[Listener]


class Rules(BaseModel):
    __root__: List[Rule]


class CreateListenerOutput(BaseModel):
    Listeners: Optional[Listeners] = None


class CreateRuleOutput(BaseModel):
    Rules: Optional[Rules] = None


class DescribeListenersOutput(BaseModel):
    Listeners: Optional[Listeners] = None
    NextMarker: Optional[Marker] = None


class DescribeRulesOutput(BaseModel):
    Rules: Optional[Rules] = None
    NextMarker: Optional[Marker] = None


class ModifyListenerOutput(CreateListenerOutput):
    pass


class ModifyRuleOutput(CreateRuleOutput):
    pass


class SetRulePrioritiesOutput(CreateRuleOutput):
    pass
