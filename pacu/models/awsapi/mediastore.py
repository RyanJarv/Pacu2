# generated by datamodel-codegen:
#   filename:  openapi.yaml
#   timestamp: 2021-12-31T02:52:54+00:00

from __future__ import annotations

from datetime import datetime
from enum import Enum
from typing import Annotated, Any, List, Optional

from pydantic import BaseModel, Field


class ContainerInUseException(BaseModel):
    __root__: Any


class LimitExceededException(ContainerInUseException):
    pass


class InternalServerError(ContainerInUseException):
    pass


class DeleteContainerOutput(BaseModel):
    pass


class ContainerNotFoundException(ContainerInUseException):
    pass


class DeleteContainerPolicyOutput(DeleteContainerOutput):
    pass


class PolicyNotFoundException(ContainerInUseException):
    pass


class DeleteCorsPolicyOutput(DeleteContainerOutput):
    pass


class CorsPolicyNotFoundException(ContainerInUseException):
    pass


class DeleteLifecyclePolicyOutput(DeleteContainerOutput):
    pass


class DeleteMetricPolicyOutput(DeleteContainerOutput):
    pass


class PutContainerPolicyOutput(DeleteContainerOutput):
    pass


class PutCorsPolicyOutput(DeleteContainerOutput):
    pass


class PutLifecyclePolicyOutput(DeleteContainerOutput):
    pass


class PutMetricPolicyOutput(DeleteContainerOutput):
    pass


class StartAccessLoggingOutput(DeleteContainerOutput):
    pass


class StopAccessLoggingOutput(DeleteContainerOutput):
    pass


class TagResourceOutput(DeleteContainerOutput):
    pass


class UntagResourceOutput(DeleteContainerOutput):
    pass


class Header(BaseModel):
    __root__: Annotated[
        str,
        Field(
            max_length=8192,
            min_length=1,
            regex='[\\u0009\\u000A\\u000D\\u0020-\\u00FF]+',
        ),
    ]


class AllowedHeaders(BaseModel):
    __root__: Annotated[List[Header], Field(max_items=100, min_items=0)]


class MethodName(Enum):
    PUT = 'PUT'
    GET = 'GET'
    DELETE = 'DELETE'
    HEAD = 'HEAD'


class AllowedMethods(BaseModel):
    __root__: Annotated[List[MethodName], Field(max_items=4, min_items=1)]


class Origin(BaseModel):
    __root__: Annotated[
        str,
        Field(
            max_length=2048,
            min_length=1,
            regex='[\\u0009\\u000A\\u000D\\u0020-\\u00FF]+',
        ),
    ]


class AllowedOrigins(BaseModel):
    __root__: Annotated[List[Origin], Field(max_items=100, min_items=1)]


class Endpoint(BaseModel):
    __root__: Annotated[
        str,
        Field(
            max_length=255,
            min_length=1,
            regex='[\\u0009\\u000A\\u000D\\u0020-\\u00FF]+',
        ),
    ]


class TimeStamp(BaseModel):
    __root__: datetime


class ContainerARN(BaseModel):
    __root__: Annotated[
        str,
        Field(
            max_length=1024,
            min_length=1,
            regex='arn:aws:mediastore:[a-z]+-[a-z]+-\\d:\\d{12}:container/[\\w-]{1,255}',
        ),
    ]


class ContainerName(BaseModel):
    __root__: Annotated[str, Field(max_length=255, min_length=1, regex='[\\w-]+')]


class ContainerStatus(Enum):
    ACTIVE = 'ACTIVE'
    CREATING = 'CREATING'
    DELETING = 'DELETING'


class ContainerAccessLoggingEnabled(BaseModel):
    __root__: bool


class Container(BaseModel):
    """
    This section describes operations that you can perform on an AWS Elemental MediaStore container.
    """

    Endpoint: Optional[Endpoint] = None
    CreationTime: Optional[TimeStamp] = None
    ARN: Optional[ContainerARN] = None
    Name: Optional[ContainerName] = None
    Status: Optional[ContainerStatus] = None
    AccessLoggingEnabled: Optional[ContainerAccessLoggingEnabled] = None


class ContainerLevelMetrics(Enum):
    ENABLED = 'ENABLED'
    DISABLED = 'DISABLED'


class ContainerList(BaseModel):
    __root__: List[Container]


class ContainerListLimit(BaseModel):
    __root__: Annotated[int, Field(ge=1.0, le=100.0)]


class ContainerPolicy(BaseModel):
    __root__: Annotated[
        str, Field(max_length=8192, min_length=1, regex='[\\x00-\\x7F]+')
    ]


class MaxAgeSeconds(BaseModel):
    __root__: Annotated[int, Field(ge=0.0, le=2147483647.0)]


class ExposeHeaders(AllowedHeaders):
    pass


class LifecyclePolicy(BaseModel):
    __root__: Annotated[
        str,
        Field(
            max_length=8192,
            min_length=0,
            regex='[\\u0009\\u000A\\u000D\\u0020-\\u00FF]+',
        ),
    ]


class PaginationToken(BaseModel):
    __root__: Annotated[
        str, Field(max_length=1024, min_length=1, regex='[0-9A-Za-z=/+]+')
    ]


class ObjectGroup(BaseModel):
    __root__: Annotated[
        str,
        Field(
            max_length=900,
            min_length=1,
            regex='/?(?:[A-Za-z0-9_=:\\.\\-\\~\\*]+/){0,10}(?:[A-Za-z0-9_=:\\.\\-\\~\\*]+)?/?',
        ),
    ]


class ObjectGroupName(BaseModel):
    __root__: Annotated[str, Field(max_length=30, min_length=1, regex='[a-zA-Z0-9_]+')]


class MetricPolicyRule(BaseModel):
    """
    A setting that enables metrics at the object level. Each rule contains an object group and an object group name. If the policy includes the MetricPolicyRules parameter, you must include at least one rule. Each metric policy can include up to five rules by default. You can also <a href="https://console.aws.amazon.com/servicequotas/home?region=us-east-1#!/services/mediastore/quotas">request a quota increase</a> to allow up to 300 rules per policy.
    """

    ObjectGroup: ObjectGroup
    ObjectGroupName: ObjectGroupName


class TagKey(BaseModel):
    __root__: Annotated[
        str,
        Field(max_length=128, min_length=1, regex='[\\p{L}\\p{Z}\\p{N}_.:/=+\\-@]*'),
    ]


class TagValue(BaseModel):
    __root__: Annotated[
        str,
        Field(max_length=256, min_length=0, regex='[\\p{L}\\p{Z}\\p{N}_.:/=+\\-@]*'),
    ]


class Tag(BaseModel):
    """
    A collection of tags associated with a container. Each tag consists of a key:value pair, which can be anything you define. Typically, the tag key represents a category (such as "environment") and the tag value represents a specific value within that category (such as "test," "development," or "production"). You can add up to 50 tags to each container. For more information about tagging, including naming and usage conventions, see <a href="https://docs.aws.amazon.com/mediastore/latest/ug/tagging.html">Tagging Resources in MediaStore</a>.
    """

    Key: TagKey
    Value: Optional[TagValue] = None


class TagKeyList(BaseModel):
    __root__: List[TagKey]


class CreateContainerOutput(BaseModel):
    Container: Container


class DeleteContainerInput(BaseModel):
    ContainerName: ContainerName


class DeleteContainerPolicyInput(BaseModel):
    ContainerName: ContainerName


class DeleteCorsPolicyInput(BaseModel):
    ContainerName: ContainerName


class DeleteLifecyclePolicyInput(BaseModel):
    ContainerName: ContainerName


class DeleteMetricPolicyInput(BaseModel):
    ContainerName: ContainerName


class DescribeContainerOutput(BaseModel):
    Container: Optional[Container] = None


class DescribeContainerInput(BaseModel):
    ContainerName: Optional[ContainerName] = None


class GetContainerPolicyOutput(BaseModel):
    Policy: ContainerPolicy


class GetContainerPolicyInput(BaseModel):
    ContainerName: ContainerName


class GetCorsPolicyInput(BaseModel):
    ContainerName: ContainerName


class GetLifecyclePolicyOutput(BaseModel):
    LifecyclePolicy: LifecyclePolicy


class GetLifecyclePolicyInput(BaseModel):
    ContainerName: ContainerName


class GetMetricPolicyInput(BaseModel):
    ContainerName: ContainerName


class ListContainersOutput(BaseModel):
    Containers: ContainerList
    NextToken: Optional[PaginationToken] = None


class ListContainersInput(BaseModel):
    NextToken: Optional[PaginationToken] = None
    MaxResults: Optional[ContainerListLimit] = None


class ListTagsForResourceInput(BaseModel):
    Resource: ContainerARN


class PutContainerPolicyInput(BaseModel):
    ContainerName: ContainerName
    Policy: ContainerPolicy


class PutLifecyclePolicyInput(BaseModel):
    ContainerName: ContainerName
    LifecyclePolicy: LifecyclePolicy


class StartAccessLoggingInput(BaseModel):
    ContainerName: ContainerName


class StopAccessLoggingInput(BaseModel):
    ContainerName: ContainerName


class UntagResourceInput(BaseModel):
    Resource: ContainerARN
    TagKeys: TagKeyList


class CorsRule(BaseModel):
    """
    A rule for a CORS policy. You can add up to 100 rules to a CORS policy. If more than one rule applies, the service uses the first applicable rule listed.
    """

    AllowedOrigins: AllowedOrigins
    AllowedMethods: Optional[AllowedMethods] = None
    AllowedHeaders: AllowedHeaders
    MaxAgeSeconds: Optional[MaxAgeSeconds] = None
    ExposeHeaders: Optional[ExposeHeaders] = None


class CorsPolicy(BaseModel):
    """
    The CORS policy of the container.
    """

    __root__: Annotated[
        List[CorsRule],
        Field(
            description='The CORS policy of the container. ', max_items=100, min_items=1
        ),
    ]


class TagList(BaseModel):
    __root__: Annotated[List[Tag], Field(max_items=200, min_items=1)]


class MetricPolicyRules(BaseModel):
    __root__: Annotated[List[MetricPolicyRule], Field(max_items=300, min_items=1)]


class CreateContainerInput(BaseModel):
    ContainerName: ContainerName
    Tags: Optional[TagList] = None


class GetCorsPolicyOutput(BaseModel):
    CorsPolicy: CorsPolicy


class ListTagsForResourceOutput(BaseModel):
    Tags: Optional[TagList] = None


class PutCorsPolicyInput(BaseModel):
    ContainerName: ContainerName
    CorsPolicy: CorsPolicy


class TagResourceInput(BaseModel):
    Resource: ContainerARN
    Tags: TagList


class MetricPolicy(BaseModel):
    """
    <p>The metric policy that is associated with the container. A metric policy allows AWS Elemental MediaStore to send metrics to Amazon CloudWatch. In the policy, you must indicate whether you want MediaStore to send container-level metrics. You can also include rules to define groups of objects that you want MediaStore to send object-level metrics for.</p> <p>To view examples of how to construct a metric policy for your use case, see <a href="https://docs.aws.amazon.com/mediastore/latest/ug/policies-metric-examples.html">Example Metric Policies</a>.</p>
    """

    ContainerLevelMetrics: ContainerLevelMetrics
    MetricPolicyRules: Optional[MetricPolicyRules] = None


class GetMetricPolicyOutput(BaseModel):
    MetricPolicy: MetricPolicy


class PutMetricPolicyInput(BaseModel):
    ContainerName: ContainerName
    MetricPolicy: MetricPolicy
