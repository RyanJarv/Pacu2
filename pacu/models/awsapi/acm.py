# generated by datamodel-codegen:
#   filename:  openapi.yaml
#   timestamp: 2021-12-31T02:44:37+00:00

from __future__ import annotations

from datetime import datetime
from enum import Enum
from typing import Annotated, Any, List, Optional

from pydantic import BaseModel, Field, SecretStr


class ResourceNotFoundException(BaseModel):
    __root__: Any


class InvalidArnException(ResourceNotFoundException):
    pass


class InvalidTagException(ResourceNotFoundException):
    pass


class TooManyTagsException(ResourceNotFoundException):
    pass


class TagPolicyException(ResourceNotFoundException):
    pass


class InvalidParameterException(ResourceNotFoundException):
    pass


class ThrottlingException(ResourceNotFoundException):
    pass


class ResourceInUseException(ResourceNotFoundException):
    pass


class RequestInProgressException(ResourceNotFoundException):
    pass


class AccessDeniedException(ResourceNotFoundException):
    pass


class LimitExceededException(ResourceNotFoundException):
    pass


class InvalidArgsException(ResourceNotFoundException):
    pass


class ValidationException(ResourceNotFoundException):
    pass


class ConflictException(ResourceNotFoundException):
    pass


class InvalidDomainValidationOptionsException(ResourceNotFoundException):
    pass


class InvalidStateException(ResourceNotFoundException):
    pass


class Arn(BaseModel):
    __root__: Annotated[
        str,
        Field(
            max_length=2048,
            min_length=20,
            regex='arn:[\\w+=/,.@-]+:[\\w+=/,.@-]+:[\\w+=/,.@-]*:[0-9]+:[\\w+=,.@-]+(/[\\w+=,.@-]+)*',
        ),
    ]


class CertificateBody(BaseModel):
    __root__: Annotated[
        str,
        Field(
            max_length=32768,
            min_length=1,
            regex='-{5}BEGIN CERTIFICATE-{5}\\u000D?\\u000A([A-Za-z0-9/+]{64}\\u000D?\\u000A)*[A-Za-z0-9/+]{1,64}={0,2}\\u000D?\\u000A-{5}END CERTIFICATE-{5}(\\u000D?\\u000A)?',
        ),
    ]


class CertificateBodyBlob(BaseModel):
    __root__: Annotated[str, Field(max_length=32768, min_length=1)]


class CertificateChain(BaseModel):
    __root__: Annotated[
        str,
        Field(
            max_length=2097152,
            min_length=1,
            regex='(-{5}BEGIN CERTIFICATE-{5}\\u000D?\\u000A([A-Za-z0-9/+]{64}\\u000D?\\u000A)*[A-Za-z0-9/+]{1,64}={0,2}\\u000D?\\u000A-{5}END CERTIFICATE-{5}\\u000D?\\u000A)*-{5}BEGIN CERTIFICATE-{5}\\u000D?\\u000A([A-Za-z0-9/+]{64}\\u000D?\\u000A)*[A-Za-z0-9/+]{1,64}={0,2}\\u000D?\\u000A-{5}END CERTIFICATE-{5}(\\u000D?\\u000A)?',
        ),
    ]


class CertificateChainBlob(BaseModel):
    __root__: Annotated[str, Field(max_length=2097152, min_length=1)]


class DomainNameString(BaseModel):
    __root__: Annotated[
        str,
        Field(
            max_length=253,
            min_length=1,
            regex='^(\\*\\.)?(((?!-)[A-Za-z0-9-]{0,62}[A-Za-z0-9])\\.)+((?!-)[A-Za-z0-9-]{1,62}[A-Za-z0-9])$',
        ),
    ]


class DomainList(BaseModel):
    __root__: Annotated[List[DomainNameString], Field(max_items=100, min_items=1)]


class String(BaseModel):
    __root__: str


class TStamp(BaseModel):
    __root__: datetime


class CertificateStatus(Enum):
    PENDING_VALIDATION = 'PENDING_VALIDATION'
    ISSUED = 'ISSUED'
    INACTIVE = 'INACTIVE'
    EXPIRED = 'EXPIRED'
    VALIDATION_TIMED_OUT = 'VALIDATION_TIMED_OUT'
    REVOKED = 'REVOKED'
    FAILED = 'FAILED'


class RevocationReason(Enum):
    UNSPECIFIED = 'UNSPECIFIED'
    KEY_COMPROMISE = 'KEY_COMPROMISE'
    CA_COMPROMISE = 'CA_COMPROMISE'
    AFFILIATION_CHANGED = 'AFFILIATION_CHANGED'
    SUPERCEDED = 'SUPERCEDED'
    CESSATION_OF_OPERATION = 'CESSATION_OF_OPERATION'
    CERTIFICATE_HOLD = 'CERTIFICATE_HOLD'
    REMOVE_FROM_CRL = 'REMOVE_FROM_CRL'
    PRIVILEGE_WITHDRAWN = 'PRIVILEGE_WITHDRAWN'
    A_A_COMPROMISE = 'A_A_COMPROMISE'


class KeyAlgorithm(Enum):
    RSA_1024 = 'RSA_1024'
    RSA_2048 = 'RSA_2048'
    RSA_3072 = 'RSA_3072'
    RSA_4096 = 'RSA_4096'
    EC_prime256v1 = 'EC_prime256v1'
    EC_secp384r1 = 'EC_secp384r1'
    EC_secp521r1 = 'EC_secp521r1'


class InUseList(BaseModel):
    __root__: List[String]


class FailureReason(Enum):
    NO_AVAILABLE_CONTACTS = 'NO_AVAILABLE_CONTACTS'
    ADDITIONAL_VERIFICATION_REQUIRED = 'ADDITIONAL_VERIFICATION_REQUIRED'
    DOMAIN_NOT_ALLOWED = 'DOMAIN_NOT_ALLOWED'
    INVALID_PUBLIC_DOMAIN = 'INVALID_PUBLIC_DOMAIN'
    DOMAIN_VALIDATION_DENIED = 'DOMAIN_VALIDATION_DENIED'
    CAA_ERROR = 'CAA_ERROR'
    PCA_LIMIT_EXCEEDED = 'PCA_LIMIT_EXCEEDED'
    PCA_INVALID_ARN = 'PCA_INVALID_ARN'
    PCA_INVALID_STATE = 'PCA_INVALID_STATE'
    PCA_REQUEST_FAILED = 'PCA_REQUEST_FAILED'
    PCA_NAME_CONSTRAINTS_VALIDATION = 'PCA_NAME_CONSTRAINTS_VALIDATION'
    PCA_RESOURCE_NOT_FOUND = 'PCA_RESOURCE_NOT_FOUND'
    PCA_INVALID_ARGS = 'PCA_INVALID_ARGS'
    PCA_INVALID_DURATION = 'PCA_INVALID_DURATION'
    PCA_ACCESS_DENIED = 'PCA_ACCESS_DENIED'
    SLR_NOT_FOUND = 'SLR_NOT_FOUND'
    OTHER = 'OTHER'


class CertificateType(Enum):
    IMPORTED = 'IMPORTED'
    AMAZON_ISSUED = 'AMAZON_ISSUED'
    PRIVATE = 'PRIVATE'


class RenewalEligibility(Enum):
    ELIGIBLE = 'ELIGIBLE'
    INELIGIBLE = 'INELIGIBLE'


class CertificateTransparencyLoggingPreference(Enum):
    ENABLED = 'ENABLED'
    DISABLED = 'DISABLED'


class CertificateStatuses(BaseModel):
    __root__: List[CertificateStatus]


class CertificateSummary(BaseModel):
    """
    This structure is returned in the response object of <a>ListCertificates</a> action.
    """

    CertificateArn: Optional[Arn] = None
    DomainName: Optional[DomainNameString] = None


class CertificateSummaryList(BaseModel):
    __root__: List[CertificateSummary]


class DomainStatus(Enum):
    PENDING_VALIDATION = 'PENDING_VALIDATION'
    SUCCESS = 'SUCCESS'
    FAILED = 'FAILED'


class ValidationEmailList(InUseList):
    pass


class ValidationMethod(Enum):
    EMAIL = 'EMAIL'
    DNS = 'DNS'


class DomainValidationOption(BaseModel):
    """
    Contains information about the domain names that you want ACM to use to send you emails that enable you to validate domain ownership.
    """

    DomainName: DomainNameString
    ValidationDomain: DomainNameString


class DomainValidationOptionList(BaseModel):
    __root__: Annotated[List[DomainValidationOption], Field(max_items=100, min_items=1)]


class PositiveInteger(BaseModel):
    __root__: Annotated[int, Field(ge=1.0)]


class ExpiryEventsConfiguration(BaseModel):
    """
    Object containing expiration events options associated with an Amazon Web Services account.
    """

    DaysBeforeExpiry: Optional[PositiveInteger] = None


class PassphraseBlob(BaseModel):
    __root__: Annotated[SecretStr, Field(max_length=128, min_length=4)]


class PrivateKey(BaseModel):
    __root__: Annotated[
        SecretStr,
        Field(
            max_length=524288,
            min_length=1,
            regex='-{5}BEGIN PRIVATE KEY-{5}\\u000D?\\u000A([A-Za-z0-9/+]{64}\\u000D?\\u000A)*[A-Za-z0-9/+]{1,64}={0,2}\\u000D?\\u000A-{5}END PRIVATE KEY-{5}(\\u000D?\\u000A)?',
        ),
    ]


class ExtendedKeyUsageName(Enum):
    TLS_WEB_SERVER_AUTHENTICATION = 'TLS_WEB_SERVER_AUTHENTICATION'
    TLS_WEB_CLIENT_AUTHENTICATION = 'TLS_WEB_CLIENT_AUTHENTICATION'
    CODE_SIGNING = 'CODE_SIGNING'
    EMAIL_PROTECTION = 'EMAIL_PROTECTION'
    TIME_STAMPING = 'TIME_STAMPING'
    OCSP_SIGNING = 'OCSP_SIGNING'
    IPSEC_END_SYSTEM = 'IPSEC_END_SYSTEM'
    IPSEC_TUNNEL = 'IPSEC_TUNNEL'
    IPSEC_USER = 'IPSEC_USER'
    ANY = 'ANY'
    NONE = 'NONE'
    CUSTOM = 'CUSTOM'


class ExtendedKeyUsage(BaseModel):
    """
    The Extended Key Usage X.509 v3 extension defines one or more purposes for which the public key can be used. This is in addition to or in place of the basic purposes specified by the Key Usage extension.
    """

    Name: Optional[ExtendedKeyUsageName] = None
    OID: Optional[String] = None


class ExtendedKeyUsageFilterList(BaseModel):
    __root__: List[ExtendedKeyUsageName]


class KeyAlgorithmList(BaseModel):
    __root__: List[KeyAlgorithm]


class IdempotencyToken(BaseModel):
    __root__: Annotated[str, Field(max_length=32, min_length=1, regex='\\w+')]


class PrivateKeyBlob(BaseModel):
    __root__: Annotated[SecretStr, Field(max_length=5120, min_length=1)]


class KeyUsageName(Enum):
    DIGITAL_SIGNATURE = 'DIGITAL_SIGNATURE'
    NON_REPUDIATION = 'NON_REPUDIATION'
    KEY_ENCIPHERMENT = 'KEY_ENCIPHERMENT'
    DATA_ENCIPHERMENT = 'DATA_ENCIPHERMENT'
    KEY_AGREEMENT = 'KEY_AGREEMENT'
    CERTIFICATE_SIGNING = 'CERTIFICATE_SIGNING'
    CRL_SIGNING = 'CRL_SIGNING'
    ENCIPHER_ONLY = 'ENCIPHER_ONLY'
    DECIPHER_ONLY = 'DECIPHER_ONLY'
    ANY = 'ANY'
    CUSTOM = 'CUSTOM'


class KeyUsage(BaseModel):
    """
    The Key Usage X.509 v3 extension defines the purpose of the public key contained in the certificate.
    """

    Name: Optional[KeyUsageName] = None


class NextToken(BaseModel):
    __root__: Annotated[
        str,
        Field(
            max_length=10000,
            min_length=1,
            regex='[\\u0009\\u000A\\u000D\\u0020-\\u00FF]*',
        ),
    ]


class MaxItems(BaseModel):
    __root__: Annotated[int, Field(ge=1.0, le=1000.0)]


class RecordType(Enum):
    CNAME = 'CNAME'


class RenewalStatus(Enum):
    PENDING_AUTO_RENEWAL = 'PENDING_AUTO_RENEWAL'
    PENDING_VALIDATION = 'PENDING_VALIDATION'
    SUCCESS = 'SUCCESS'
    FAILED = 'FAILED'


class TagKey(BaseModel):
    __root__: Annotated[
        str,
        Field(max_length=128, min_length=1, regex='[\\p{L}\\p{Z}\\p{N}_.:\\/=+\\-@]*'),
    ]


class TagValue(BaseModel):
    __root__: Annotated[
        str,
        Field(max_length=256, min_length=0, regex='[\\p{L}\\p{Z}\\p{N}_.:\\/=+\\-@]*'),
    ]


class Tag(BaseModel):
    """
    A key-value pair that identifies or specifies metadata about an ACM resource.
    """

    Key: TagKey
    Value: Optional[TagValue] = None


class DeleteCertificateRequest(BaseModel):
    CertificateArn: Arn


class DescribeCertificateRequest(BaseModel):
    CertificateArn: Arn


class ExportCertificateResponse(BaseModel):
    Certificate: Optional[CertificateBody] = None
    CertificateChain: Optional[CertificateChain] = None
    PrivateKey: Optional[PrivateKey] = None


class ExportCertificateRequest(BaseModel):
    CertificateArn: Arn
    Passphrase: PassphraseBlob


class GetAccountConfigurationResponse(BaseModel):
    ExpiryEvents: Optional[ExpiryEventsConfiguration] = None


class GetCertificateResponse(BaseModel):
    Certificate: Optional[CertificateBody] = None
    CertificateChain: Optional[CertificateChain] = None


class GetCertificateRequest(BaseModel):
    CertificateArn: Arn


class ImportCertificateResponse(BaseModel):
    CertificateArn: Optional[Arn] = None


class ListCertificatesResponse(BaseModel):
    NextToken: Optional[NextToken] = None
    CertificateSummaryList: Optional[CertificateSummaryList] = None


class ListTagsForCertificateRequest(BaseModel):
    CertificateArn: Arn


class PutAccountConfigurationRequest(BaseModel):
    ExpiryEvents: Optional[ExpiryEventsConfiguration] = None
    IdempotencyToken: IdempotencyToken


class RenewCertificateRequest(BaseModel):
    CertificateArn: Arn


class RequestCertificateResponse(ImportCertificateResponse):
    pass


class ResendValidationEmailRequest(BaseModel):
    CertificateArn: Arn
    Domain: DomainNameString
    ValidationDomain: DomainNameString


class TagList(BaseModel):
    __root__: Annotated[List[Tag], Field(max_items=50, min_items=1)]


class KeyUsageList(BaseModel):
    __root__: List[KeyUsage]


class ExtendedKeyUsageList(BaseModel):
    __root__: List[ExtendedKeyUsage]


class CertificateOptions(BaseModel):
    """
    Structure that contains options for your certificate. Currently, you can use this only to specify whether to opt in to or out of certificate transparency logging. Some browsers require that public certificates issued for your domain be recorded in a log. Certificates that are not logged typically generate a browser error. Transparency makes it possible for you to detect SSL/TLS certificates that have been mistakenly or maliciously issued for your domain. For general information, see <a href="https://docs.aws.amazon.com/acm/latest/userguide/acm-concepts.html#concept-transparency">Certificate Transparency Logging</a>.
    """

    CertificateTransparencyLoggingPreference: Optional[
        CertificateTransparencyLoggingPreference
    ] = None


class ResourceRecord(BaseModel):
    """
    Contains a DNS record value that you can use to validate ownership or control of a domain. This is used by the <a>DescribeCertificate</a> action.
    """

    Name: String
    Type: RecordType
    Value: String


class DomainValidation(BaseModel):
    """
    Contains information about the validation of each domain name in the certificate.
    """

    DomainName: DomainNameString
    ValidationEmails: Optional[ValidationEmailList] = None
    ValidationDomain: Optional[DomainNameString] = None
    ValidationStatus: Optional[DomainStatus] = None
    ResourceRecord: Optional[ResourceRecord] = None
    ValidationMethod: Optional[ValidationMethod] = None


class KeyUsageFilterList(BaseModel):
    __root__: List[KeyUsageName]


class Filters(BaseModel):
    """
    This structure can be used in the <a>ListCertificates</a> action to filter the output of the certificate list.
    """

    extendedKeyUsage: Optional[ExtendedKeyUsageFilterList] = None
    keyUsage: Optional[KeyUsageFilterList] = None
    keyTypes: Optional[KeyAlgorithmList] = None


class AddTagsToCertificateRequest(BaseModel):
    CertificateArn: Arn
    Tags: TagList


class ImportCertificateRequest(BaseModel):
    CertificateArn: Optional[Arn] = None
    Certificate: CertificateBodyBlob
    PrivateKey: PrivateKeyBlob
    CertificateChain: Optional[CertificateChainBlob] = None
    Tags: Optional[TagList] = None


class ListCertificatesRequest(BaseModel):
    CertificateStatuses: Optional[CertificateStatuses] = None
    Includes: Optional[Filters] = None
    NextToken: Optional[NextToken] = None
    MaxItems: Optional[MaxItems] = None


class ListTagsForCertificateResponse(BaseModel):
    Tags: Optional[TagList] = None


class RemoveTagsFromCertificateRequest(BaseModel):
    CertificateArn: Arn
    Tags: TagList


class RequestCertificateRequest(BaseModel):
    DomainName: DomainNameString
    ValidationMethod: Optional[ValidationMethod] = None
    SubjectAlternativeNames: Optional[DomainList] = None
    IdempotencyToken: Optional[IdempotencyToken] = None
    DomainValidationOptions: Optional[DomainValidationOptionList] = None
    Options: Optional[CertificateOptions] = None
    CertificateAuthorityArn: Optional[Arn] = None
    Tags: Optional[TagList] = None


class UpdateCertificateOptionsRequest(BaseModel):
    CertificateArn: Arn
    Options: CertificateOptions


class DomainValidationList(BaseModel):
    __root__: Annotated[List[DomainValidation], Field(max_items=1000, min_items=1)]


class RenewalSummary(BaseModel):
    """
    Contains information about the status of ACM's <a href="https://docs.aws.amazon.com/acm/latest/userguide/acm-renewal.html">managed renewal</a> for the certificate. This structure exists only when the certificate type is <code>AMAZON_ISSUED</code>.
    """

    RenewalStatus: RenewalStatus
    DomainValidationOptions: DomainValidationList
    RenewalStatusReason: Optional[FailureReason] = None
    UpdatedAt: TStamp


class CertificateDetail(BaseModel):
    """
    Contains metadata about an ACM certificate. This structure is returned in the response to a <a>DescribeCertificate</a> request.
    """

    CertificateArn: Optional[Arn] = None
    DomainName: Optional[DomainNameString] = None
    SubjectAlternativeNames: Optional[DomainList] = None
    DomainValidationOptions: Optional[DomainValidationList] = None
    Serial: Optional[String] = None
    Subject: Optional[String] = None
    Issuer: Optional[String] = None
    CreatedAt: Optional[TStamp] = None
    IssuedAt: Optional[TStamp] = None
    ImportedAt: Optional[TStamp] = None
    Status: Optional[CertificateStatus] = None
    RevokedAt: Optional[TStamp] = None
    RevocationReason: Optional[RevocationReason] = None
    NotBefore: Optional[TStamp] = None
    NotAfter: Optional[TStamp] = None
    KeyAlgorithm: Optional[KeyAlgorithm] = None
    SignatureAlgorithm: Optional[String] = None
    InUseBy: Optional[InUseList] = None
    FailureReason: Optional[FailureReason] = None
    Type: Optional[CertificateType] = None
    RenewalSummary: Optional[RenewalSummary] = None
    KeyUsages: Optional[KeyUsageList] = None
    ExtendedKeyUsages: Optional[ExtendedKeyUsageList] = None
    CertificateAuthorityArn: Optional[Arn] = None
    RenewalEligibility: Optional[RenewalEligibility] = None
    Options: Optional[CertificateOptions] = None


class DescribeCertificateResponse(BaseModel):
    Certificate: Optional[CertificateDetail] = None
