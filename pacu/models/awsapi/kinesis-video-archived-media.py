# generated by datamodel-codegen:
#   filename:  openapi.yaml
#   timestamp: 2021-12-31T02:51:20+00:00

from __future__ import annotations

from datetime import datetime
from enum import Enum
from typing import Annotated, Any, List, Optional

from pydantic import BaseModel, Field


class ClipFragmentSelectorType(Enum):
    PRODUCER_TIMESTAMP = 'PRODUCER_TIMESTAMP'
    SERVER_TIMESTAMP = 'SERVER_TIMESTAMP'


class ResourceNotFoundException(BaseModel):
    __root__: Any


class InvalidArgumentException(ResourceNotFoundException):
    pass


class ClientLimitExceededException(ResourceNotFoundException):
    pass


class NotAuthorizedException(ResourceNotFoundException):
    pass


class UnsupportedStreamMediaTypeException(ResourceNotFoundException):
    pass


class MissingCodecPrivateDataException(ResourceNotFoundException):
    pass


class InvalidCodecPrivateDataException(ResourceNotFoundException):
    pass


class InvalidMediaFrameException(ResourceNotFoundException):
    pass


class NoDataRetentionException(ResourceNotFoundException):
    pass


class FragmentNumberString(BaseModel):
    __root__: Annotated[str, Field(max_length=128, min_length=1, regex='^[0-9]+$')]


class Timestamp(BaseModel):
    __root__: datetime


class ContainerFormat(Enum):
    FRAGMENTED_MP4 = 'FRAGMENTED_MP4'
    MPEG_TS = 'MPEG_TS'


class ContentType(BaseModel):
    __root__: Annotated[
        str, Field(max_length=128, min_length=1, regex='^[a-zA-Z0-9_\\.\\-]+$')
    ]


class DASHDisplayFragmentNumber(Enum):
    ALWAYS = 'ALWAYS'
    NEVER = 'NEVER'


class DASHMaxResults(BaseModel):
    __root__: Annotated[int, Field(ge=1.0, le=5000.0)]


class DASHPlaybackMode(Enum):
    LIVE = 'LIVE'
    LIVE_REPLAY = 'LIVE_REPLAY'
    ON_DEMAND = 'ON_DEMAND'


class DASHStreamingSessionURL(BaseModel):
    __root__: str


class Expires(BaseModel):
    __root__: Annotated[int, Field(ge=300.0, le=43200.0)]


class Long(BaseModel):
    __root__: int


class Fragment(BaseModel):
    """
    Represents a segment of video or other time-delimited data.
    """

    FragmentNumber: Optional[FragmentNumberString] = None
    FragmentSizeInBytes: Optional[Long] = None
    ProducerTimestamp: Optional[Timestamp] = None
    ServerTimestamp: Optional[Timestamp] = None
    FragmentLengthInMilliseconds: Optional[Long] = None


class FragmentList(BaseModel):
    __root__: List[Fragment]


class FragmentNumberList(BaseModel):
    __root__: Annotated[List[FragmentNumberString], Field(max_items=1000, min_items=1)]


class StreamName(BaseModel):
    __root__: Annotated[
        str, Field(max_length=256, min_length=1, regex='[a-zA-Z0-9_.-]+')
    ]


class ResourceARN(BaseModel):
    __root__: Annotated[
        str,
        Field(
            max_length=1024,
            min_length=1,
            regex='arn:[a-z\\d-]+:kinesisvideo:[a-z0-9-]+:[0-9]+:[a-z]+/[a-zA-Z0-9_.-]+/[0-9]+',
        ),
    ]


class Payload(DASHStreamingSessionURL):
    pass


class HLSDiscontinuityMode(Enum):
    ALWAYS = 'ALWAYS'
    NEVER = 'NEVER'
    ON_DISCONTINUITY = 'ON_DISCONTINUITY'


class HLSMaxResults(DASHMaxResults):
    pass


class HLSStreamingSessionURL(DASHStreamingSessionURL):
    pass


class GetMediaForFragmentListInput(BaseModel):
    StreamName: Optional[StreamName] = None
    StreamARN: Optional[ResourceARN] = None
    Fragments: FragmentNumberList


class ListFragmentsMaxResults(BaseModel):
    __root__: Annotated[int, Field(ge=1.0, le=1000.0)]


class NextToken(BaseModel):
    __root__: Annotated[
        str, Field(max_length=4096, min_length=1, regex='[a-zA-Z0-9+/]+={0,2}')
    ]


class GetClipOutput(BaseModel):
    Payload: Optional[Payload] = None


class ClipTimestampRange(BaseModel):
    """
    The range of timestamps for which to return fragments.
    """

    StartTimestamp: Timestamp
    EndTimestamp: Timestamp


class GetDASHStreamingSessionURLOutput(BaseModel):
    DASHStreamingSessionURL: Optional[DASHStreamingSessionURL] = None


class DASHTimestampRange(BaseModel):
    """
    <p>The start and end of the timestamp range for the requested media.</p> <p>This value should not be present if <code>PlaybackType</code> is <code>LIVE</code>.</p> <p>The values in <code>DASHimestampRange</code> are inclusive. Fragments that start exactly at or after the start time are included in the session. Fragments that start before the start time and continue past it are not included in the session.</p>
    """

    StartTimestamp: Optional[Timestamp] = None
    EndTimestamp: Optional[Timestamp] = None


class GetHLSStreamingSessionURLOutput(BaseModel):
    HLSStreamingSessionURL: Optional[HLSStreamingSessionURL] = None


class HLSTimestampRange(DASHTimestampRange):
    """
    <p>The start and end of the timestamp range for the requested media.</p> <p>This value should not be present if <code>PlaybackType</code> is <code>LIVE</code>.</p>
    """

    pass


class GetMediaForFragmentListOutput(GetClipOutput):
    pass


class ListFragmentsOutput(BaseModel):
    Fragments: Optional[FragmentList] = None
    NextToken: Optional[NextToken] = None


class TimestampRange(ClipTimestampRange):
    """
    The range of timestamps for which to return fragments.
    """

    pass


class ClipFragmentSelector(BaseModel):
    """
    <p>Describes the timestamp range and timestamp origin of a range of fragments.</p> <p>Fragments that have duplicate producer timestamps are deduplicated. This means that if producers are producing a stream of fragments with producer timestamps that are approximately equal to the true clock time, the clip will contain all of the fragments within the requested timestamp range. If some fragments are ingested within the same time range and very different points in time, only the oldest ingested collection of fragments are returned.</p>
    """

    FragmentSelectorType: ClipFragmentSelectorType
    TimestampRange: ClipTimestampRange


class DASHFragmentSelector(BaseModel):
    """
    Contains the range of timestamps for the requested media, and the source of the timestamps.
    """

    FragmentSelectorType: Optional[ClipFragmentSelectorType] = None
    TimestampRange: Optional[DASHTimestampRange] = None


class FragmentSelector(BaseModel):
    """
    <p>Describes the timestamp range and timestamp origin of a range of fragments.</p> <p>Only fragments with a start timestamp greater than or equal to the given start time and less than or equal to the end time are returned. For example, if a stream contains fragments with the following start timestamps: </p> <ul> <li> <p>00:00:00</p> </li> <li> <p>00:00:02</p> </li> <li> <p>00:00:04</p> </li> <li> <p>00:00:06</p> </li> </ul> <p> A fragment selector range with a start time of 00:00:01 and end time of 00:00:04 would return the fragments with start times of 00:00:02 and 00:00:04. </p>
    """

    FragmentSelectorType: ClipFragmentSelectorType
    TimestampRange: TimestampRange


class GetClipInput(BaseModel):
    StreamName: Optional[StreamName] = None
    StreamARN: Optional[ResourceARN] = None
    ClipFragmentSelector: ClipFragmentSelector


class GetDASHStreamingSessionURLInput(BaseModel):
    StreamName: Optional[StreamName] = None
    StreamARN: Optional[ResourceARN] = None
    PlaybackMode: Optional[DASHPlaybackMode] = None
    DisplayFragmentTimestamp: Optional[DASHDisplayFragmentNumber] = None
    DisplayFragmentNumber: Optional[DASHDisplayFragmentNumber] = None
    DASHFragmentSelector: Optional[DASHFragmentSelector] = None
    Expires: Optional[Expires] = None
    MaxManifestFragmentResults: Optional[DASHMaxResults] = None


class HLSFragmentSelector(BaseModel):
    """
    Contains the range of timestamps for the requested media, and the source of the timestamps.
    """

    FragmentSelectorType: Optional[ClipFragmentSelectorType] = None
    TimestampRange: Optional[HLSTimestampRange] = None


class GetHLSStreamingSessionURLInput(BaseModel):
    StreamName: Optional[StreamName] = None
    StreamARN: Optional[ResourceARN] = None
    PlaybackMode: Optional[DASHPlaybackMode] = None
    HLSFragmentSelector: Optional[HLSFragmentSelector] = None
    ContainerFormat: Optional[ContainerFormat] = None
    DiscontinuityMode: Optional[HLSDiscontinuityMode] = None
    DisplayFragmentTimestamp: Optional[DASHDisplayFragmentNumber] = None
    Expires: Optional[Expires] = None
    MaxMediaPlaylistFragmentResults: Optional[HLSMaxResults] = None


class ListFragmentsInput(BaseModel):
    StreamName: Optional[StreamName] = None
    StreamARN: Optional[ResourceARN] = None
    MaxResults: Optional[ListFragmentsMaxResults] = None
    NextToken: Optional[NextToken] = None
    FragmentSelector: Optional[FragmentSelector] = None
