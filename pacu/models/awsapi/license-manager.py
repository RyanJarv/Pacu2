# generated by datamodel-codegen:
#   filename:  openapi.yaml
#   timestamp: 2021-12-31T02:51:42+00:00

from __future__ import annotations

from datetime import datetime
from enum import Enum
from typing import Annotated, Any, List, Optional

from pydantic import BaseModel, Field


class ValidationException(BaseModel):
    __root__: Any


class InvalidParameterValueException(ValidationException):
    pass


class AuthorizationException(ValidationException):
    pass


class AccessDeniedException(ValidationException):
    pass


class RateLimitExceededException(ValidationException):
    pass


class ResourceLimitExceededException(ValidationException):
    pass


class ServerInternalException(ValidationException):
    pass


class CheckInLicenseResponse(BaseModel):
    pass


class ResourceNotFoundException(ValidationException):
    pass


class ConflictException(ValidationException):
    pass


class NoEntitlementsAllowedException(ValidationException):
    pass


class EntitlementNotAllowedException(ValidationException):
    pass


class UnsupportedDigitalSignatureMethodException(ValidationException):
    pass


class RedirectException(ValidationException):
    pass


class DeleteLicenseConfigurationResponse(CheckInLicenseResponse):
    pass


class DeleteLicenseManagerReportGeneratorResponse(CheckInLicenseResponse):
    pass


class DeleteTokenResponse(CheckInLicenseResponse):
    pass


class GetServiceSettingsRequest(BaseModel):
    pass


class FilterLimitExceededException(ValidationException):
    pass


class FailedDependencyException(ValidationException):
    pass


class TagResourceResponse(CheckInLicenseResponse):
    pass


class UntagResourceResponse(CheckInLicenseResponse):
    pass


class UpdateLicenseConfigurationResponse(CheckInLicenseResponse):
    pass


class UpdateLicenseManagerReportGeneratorResponse(CheckInLicenseResponse):
    pass


class UpdateLicenseSpecificationsForResourceResponse(CheckInLicenseResponse):
    pass


class InvalidResourceStateException(ValidationException):
    pass


class LicenseUsageException(ValidationException):
    pass


class UpdateServiceSettingsResponse(CheckInLicenseResponse):
    pass


class Arn(BaseModel):
    __root__: Annotated[
        str,
        Field(
            max_length=2048,
            regex='^arn:aws(-(cn|us-gov|iso-b|iso-c|iso-d))?:[A-Za-z0-9][A-Za-z0-9_/.-]{0,62}:[A-Za-z0-9_/.-]{0,63}:[A-Za-z0-9_/.-]{0,63}:[A-Za-z0-9][A-Za-z0-9:_/+=,@.-]{0,1023}$',
        ),
    ]


class GrantStatus(Enum):
    PENDING_WORKFLOW = 'PENDING_WORKFLOW'
    PENDING_ACCEPT = 'PENDING_ACCEPT'
    REJECTED = 'REJECTED'
    ACTIVE = 'ACTIVE'
    FAILED_WORKFLOW = 'FAILED_WORKFLOW'
    DELETED = 'DELETED'
    PENDING_DELETE = 'PENDING_DELETE'
    DISABLED = 'DISABLED'
    WORKFLOW_COMPLETED = 'WORKFLOW_COMPLETED'


class String(BaseModel):
    __root__: str


class AllowedOperation(Enum):
    CreateGrant = 'CreateGrant'
    CheckoutLicense = 'CheckoutLicense'
    CheckoutBorrowLicense = 'CheckoutBorrowLicense'
    CheckInLicense = 'CheckInLicense'
    ExtendConsumptionLicense = 'ExtendConsumptionLicense'
    ListPurchasedLicenses = 'ListPurchasedLicenses'
    CreateToken = 'CreateToken'


class AllowedOperationList(BaseModel):
    __root__: Annotated[List[AllowedOperation], Field(max_items=7, min_items=1)]


class ArnList(BaseModel):
    __root__: List[Arn]


class DateTime(BaseModel):
    __root__: datetime


class AutomatedDiscoveryInformation(BaseModel):
    """
    Describes automated discovery.
    """

    LastRunTime: Optional[DateTime] = None


class Boolean(BaseModel):
    __root__: bool


class BoxBoolean(Boolean):
    pass


class BoxInteger(BaseModel):
    __root__: int


class BorrowConfiguration(BaseModel):
    """
    Details about a borrow configuration.
    """

    AllowEarlyCheckIn: BoxBoolean
    MaxTimeToLiveInMinutes: BoxInteger


class BoxLong(BoxInteger):
    pass


class DigitalSignatureMethod(Enum):
    JWT_PS384 = 'JWT_PS384'


class ClientToken(BaseModel):
    __root__: Annotated[str, Field(max_length=2048, regex='\\S+')]


class SignedToken(BaseModel):
    __root__: Annotated[str, Field(min_length=4096)]


class ISO8601DateTime(BaseModel):
    __root__: Annotated[
        str,
        Field(
            max_length=50,
            regex='^(-?(?:[1-9][0-9]*)?[0-9]{4})-(1[0-2]|0[1-9])-(3[0-1]|0[1-9]|[1-2][0-9])T(2[0-3]|[0-1][0-9]):([0-5][0-9]):([0-5][0-9])(\\.[0-9]+)?(Z|[+-](?:2[ 0-3]|[0-1][0-9]):[0-5][0-9])+$',
        ),
    ]


class CheckoutType(Enum):
    PROVISIONAL = 'PROVISIONAL'
    PERPETUAL = 'PERPETUAL'


class ClientRequestToken(BaseModel):
    __root__: Annotated[str, Field(max_length=36, min_length=1)]


class ResourceType(Enum):
    EC2_INSTANCE = 'EC2_INSTANCE'
    EC2_HOST = 'EC2_HOST'
    EC2_AMI = 'EC2_AMI'
    RDS = 'RDS'
    SYSTEMS_MANAGER_MANAGED_INSTANCE = 'SYSTEMS_MANAGER_MANAGED_INSTANCE'


class ConsumedLicenseSummary(BaseModel):
    """
    Details about license consumption.
    """

    ResourceType: Optional[ResourceType] = None
    ConsumedLicenses: Optional[BoxLong] = None


class ConsumedLicenseSummaryList(BaseModel):
    __root__: List[ConsumedLicenseSummary]


class RenewType(Enum):
    None_ = 'None'
    Weekly = 'Weekly'
    Monthly = 'Monthly'


class ProvisionalConfiguration(BaseModel):
    """
    Details about a provisional configuration.
    """

    MaxTimeToLiveInMinutes: BoxInteger


class ConsumptionConfiguration(BaseModel):
    """
    Details about a consumption configuration.
    """

    RenewType: Optional[RenewType] = None
    ProvisionalConfiguration: Optional[ProvisionalConfiguration] = None
    BorrowConfiguration: Optional[BorrowConfiguration] = None


class PrincipalArnList(BaseModel):
    __root__: Annotated[List[Arn], Field(max_items=1, min_items=1)]


class StatusReasonMessage(BaseModel):
    __root__: Annotated[str, Field(max_length=400, regex='[\\s\\S]+')]


class LicenseCountingType(Enum):
    vCPU = 'vCPU'
    Instance = 'Instance'
    Core = 'Core'
    Socket = 'Socket'


class StringList(BaseModel):
    __root__: List[String]


class ReportGeneratorName(BaseModel):
    __root__: Annotated[str, Field(max_length=100, min_length=1)]


class ReportContext(BaseModel):
    """
    Details of the license configuration that this generator reports on.
    """

    licenseConfigurationArns: ArnList


class Issuer(BaseModel):
    """
    Details about the issuer of a license.
    """

    Name: String
    SignKey: Optional[String] = None


class DatetimeRange(BaseModel):
    """
    Describes a time range, in ISO8601-UTC format.
    """

    Begin: ISO8601DateTime
    End: Optional[ISO8601DateTime] = None


class LicenseStatus(Enum):
    AVAILABLE = 'AVAILABLE'
    PENDING_AVAILABLE = 'PENDING_AVAILABLE'
    DEACTIVATED = 'DEACTIVATED'
    SUSPENDED = 'SUSPENDED'
    EXPIRED = 'EXPIRED'
    PENDING_DELETE = 'PENDING_DELETE'
    DELETED = 'DELETED'


class Integer(BoxInteger):
    pass


class MaxSize3StringList(BaseModel):
    __root__: Annotated[List[String], Field(max_items=3)]


class TokenType(Enum):
    REFRESH_TOKEN = 'REFRESH_TOKEN'


class TokenString(BaseModel):
    __root__: Annotated[str, Field(max_length=4096, regex='\\S+')]


class LicenseDeletionStatus(Enum):
    PENDING_DELETE = 'PENDING_DELETE'
    DELETED = 'DELETED'


class Long(BoxInteger):
    pass


class EntitlementUnit(Enum):
    Count = 'Count'
    None_ = 'None'
    Seconds = 'Seconds'
    Microseconds = 'Microseconds'
    Milliseconds = 'Milliseconds'
    Bytes = 'Bytes'
    Kilobytes = 'Kilobytes'
    Megabytes = 'Megabytes'
    Gigabytes = 'Gigabytes'
    Terabytes = 'Terabytes'
    Bits = 'Bits'
    Kilobits = 'Kilobits'
    Megabits = 'Megabits'
    Gigabits = 'Gigabits'
    Terabits = 'Terabits'
    Percent = 'Percent'
    Bytes_Second = 'Bytes/Second'
    Kilobytes_Second = 'Kilobytes/Second'
    Megabytes_Second = 'Megabytes/Second'
    Gigabytes_Second = 'Gigabytes/Second'
    Terabytes_Second = 'Terabytes/Second'
    Bits_Second = 'Bits/Second'
    Kilobits_Second = 'Kilobits/Second'
    Megabits_Second = 'Megabits/Second'
    Gigabits_Second = 'Gigabits/Second'
    Terabits_Second = 'Terabits/Second'
    Count_Second = 'Count/Second'


class Entitlement(BaseModel):
    """
    Describes a resource entitled for use with a license.
    """

    Name: String
    Value: Optional[String] = None
    MaxCount: Optional[Long] = None
    Overage: Optional[BoxBoolean] = None
    Unit: EntitlementUnit
    AllowCheckIn: Optional[BoxBoolean] = None


class EntitlementData(BaseModel):
    """
    Data associated with an entitlement resource.
    """

    Name: String
    Value: Optional[String] = None
    Unit: EntitlementUnit


class EntitlementUsage(BaseModel):
    """
    Usage associated with an entitlement resource.
    """

    Name: String
    ConsumedValue: String
    MaxCount: Optional[String] = None
    Unit: EntitlementUnit


class EntitlementUsageList(BaseModel):
    __root__: List[EntitlementUsage]


class FilterName(String):
    pass


class FilterValue(String):
    pass


class Grant(BaseModel):
    """
    Describes a grant.
    """

    GrantArn: Arn
    GrantName: String
    ParentArn: Arn
    LicenseArn: Arn
    GranteePrincipalArn: Arn
    HomeRegion: String
    GrantStatus: GrantStatus
    StatusReason: Optional[StatusReasonMessage] = None
    Version: String
    GrantedOperations: AllowedOperationList


class LicenseUsage(BaseModel):
    """
    Describes the entitlement usage associated with a license.
    """

    EntitlementUsages: Optional[EntitlementUsageList] = None


class OrganizationConfiguration(BaseModel):
    """
    Configuration information for AWS Organizations.
    """

    EnableIntegration: Boolean


class GrantList(BaseModel):
    __root__: List[Grant]


class IssuerDetails(BaseModel):
    """
    Details associated with the issuer of a license.
    """

    Name: Optional[String] = None
    SignKey: Optional[String] = None
    KeyFingerprint: Optional[String] = None


class InventoryFilterCondition(Enum):
    EQUALS = 'EQUALS'
    NOT_EQUALS = 'NOT_EQUALS'
    BEGINS_WITH = 'BEGINS_WITH'
    CONTAINS = 'CONTAINS'


class InventoryFilter(BaseModel):
    """
    An inventory filter.
    """

    Name: String
    Condition: InventoryFilterCondition
    Value: Optional[String] = None


class InventoryFilterList(BaseModel):
    __root__: List[InventoryFilter]


class LicenseConfigurationAssociation(BaseModel):
    """
    Describes an association with a license configuration.
    """

    ResourceArn: Optional[String] = None
    ResourceType: Optional[ResourceType] = None
    ResourceOwnerId: Optional[String] = None
    AssociationTime: Optional[DateTime] = None
    AmiAssociationScope: Optional[String] = None


class LicenseConfigurationAssociations(BaseModel):
    __root__: List[LicenseConfigurationAssociation]


class LicenseConfigurationStatus(Enum):
    AVAILABLE = 'AVAILABLE'
    DISABLED = 'DISABLED'


class LicenseConfigurationUsage(BaseModel):
    """
    Details about the usage of a resource associated with a license configuration.
    """

    ResourceArn: Optional[String] = None
    ResourceType: Optional[ResourceType] = None
    ResourceStatus: Optional[String] = None
    ResourceOwnerId: Optional[String] = None
    AssociationTime: Optional[DateTime] = None
    ConsumedLicenses: Optional[BoxLong] = None


class LicenseConfigurationUsageList(BaseModel):
    __root__: List[LicenseConfigurationUsage]


class LicenseSpecification(BaseModel):
    """
    Details for associating a license configuration with a resource.
    """

    LicenseConfigurationArn: String
    AmiAssociationScope: Optional[String] = None


class LicenseSpecifications(BaseModel):
    __root__: List[LicenseSpecification]


class MaxSize100(BaseModel):
    __root__: Annotated[int, Field(ge=1.0, le=100.0)]


class ManagedResourceSummary(BaseModel):
    """
    Summary information about a managed resource.
    """

    ResourceType: Optional[ResourceType] = None
    AssociationCount: Optional[BoxLong] = None


class Metadata(BaseModel):
    """
    Describes key/value pairs.
    """

    Name: Optional[String] = None
    Value: Optional[String] = None


class ProductInformationFilter(BaseModel):
    """
    Describes product information filters.
    """

    ProductInformationFilterName: String
    ProductInformationFilterValue: Optional[StringList] = None
    ProductInformationFilterComparator: String


class ReceivedStatus(Enum):
    PENDING_WORKFLOW = 'PENDING_WORKFLOW'
    PENDING_ACCEPT = 'PENDING_ACCEPT'
    REJECTED = 'REJECTED'
    ACTIVE = 'ACTIVE'
    FAILED_WORKFLOW = 'FAILED_WORKFLOW'
    DELETED = 'DELETED'
    DISABLED = 'DISABLED'
    WORKFLOW_COMPLETED = 'WORKFLOW_COMPLETED'


class ReportFrequencyType(Enum):
    DAY = 'DAY'
    WEEK = 'WEEK'
    MONTH = 'MONTH'


class S3Location(BaseModel):
    """
    Details of the S3 bucket that report generator reports are published to.
    """

    bucket: Optional[String] = None
    keyPrefix: Optional[String] = None


class ReportType(Enum):
    LicenseConfigurationSummaryReport = 'LicenseConfigurationSummaryReport'
    LicenseConfigurationUsageReport = 'LicenseConfigurationUsageReport'


class ResourceInventory(BaseModel):
    """
    Details about a resource.
    """

    ResourceId: Optional[String] = None
    ResourceType: Optional[ResourceType] = None
    ResourceArn: Optional[String] = None
    Platform: Optional[String] = None
    PlatformVersion: Optional[String] = None
    ResourceOwningAccountId: Optional[String] = None


class Tag(BaseModel):
    """
    Details about a tag for a license configuration.
    """

    Key: Optional[String] = None
    Value: Optional[String] = None


class TagKeyList(StringList):
    pass


class TokenData(BaseModel):
    """
    Describes a token.
    """

    TokenId: Optional[String] = None
    TokenType: Optional[String] = None
    LicenseArn: Optional[String] = None
    ExpirationTime: Optional[ISO8601DateTime] = None
    TokenProperties: Optional[MaxSize3StringList] = None
    RoleArns: Optional[ArnList] = None
    Status: Optional[String] = None


class AcceptGrantResponse(BaseModel):
    GrantArn: Optional[Arn] = None
    Status: Optional[GrantStatus] = None
    Version: Optional[String] = None


class AcceptGrantRequest(BaseModel):
    GrantArn: Arn


class CheckInLicenseRequest(BaseModel):
    LicenseConsumptionToken: String
    Beneficiary: Optional[String] = None


class CreateGrantResponse(AcceptGrantResponse):
    pass


class CreateGrantRequest(BaseModel):
    ClientToken: ClientToken
    GrantName: String
    LicenseArn: Arn
    Principals: PrincipalArnList
    HomeRegion: String
    AllowedOperations: AllowedOperationList


class CreateGrantVersionResponse(AcceptGrantResponse):
    pass


class CreateGrantVersionRequest(BaseModel):
    ClientToken: ClientToken
    GrantArn: Arn
    GrantName: Optional[String] = None
    AllowedOperations: Optional[AllowedOperationList] = None
    Status: Optional[GrantStatus] = None
    StatusReason: Optional[StatusReasonMessage] = None
    SourceVersion: Optional[String] = None


class CreateLicenseResponse(BaseModel):
    LicenseArn: Optional[Arn] = None
    Status: Optional[LicenseStatus] = None
    Version: Optional[String] = None


class CreateLicenseConfigurationResponse(BaseModel):
    LicenseConfigurationArn: Optional[String] = None


class CreateLicenseManagerReportGeneratorResponse(BaseModel):
    LicenseManagerReportGeneratorArn: Optional[String] = None


class CreateLicenseVersionResponse(BaseModel):
    LicenseArn: Optional[Arn] = None
    Version: Optional[String] = None
    Status: Optional[LicenseStatus] = None


class CreateTokenResponse(BaseModel):
    TokenId: Optional[String] = None
    TokenType: Optional[TokenType] = None
    Token: Optional[TokenString] = None


class CreateTokenRequest(BaseModel):
    LicenseArn: Arn
    RoleArns: Optional[ArnList] = None
    ExpirationInDays: Optional[Integer] = None
    TokenProperties: Optional[MaxSize3StringList] = None
    ClientToken: ClientToken


class DeleteGrantResponse(AcceptGrantResponse):
    pass


class DeleteGrantRequest(BaseModel):
    GrantArn: Arn
    StatusReason: Optional[StatusReasonMessage] = None
    Version: String


class DeleteLicenseResponse(BaseModel):
    Status: Optional[LicenseDeletionStatus] = None
    DeletionDate: Optional[ISO8601DateTime] = None


class DeleteLicenseRequest(BaseModel):
    LicenseArn: Arn
    SourceVersion: String


class DeleteLicenseConfigurationRequest(BaseModel):
    LicenseConfigurationArn: String


class DeleteLicenseManagerReportGeneratorRequest(BaseModel):
    LicenseManagerReportGeneratorArn: String


class DeleteTokenRequest(BaseModel):
    TokenId: String


class ExtendLicenseConsumptionResponse(BaseModel):
    LicenseConsumptionToken: Optional[String] = None
    Expiration: Optional[ISO8601DateTime] = None


class ExtendLicenseConsumptionRequest(BaseModel):
    LicenseConsumptionToken: String
    DryRun: Optional[Boolean] = None


class GetAccessTokenResponse(BaseModel):
    AccessToken: Optional[TokenString] = None


class GetAccessTokenRequest(BaseModel):
    Token: TokenString
    TokenProperties: Optional[MaxSize3StringList] = None


class GetGrantResponse(BaseModel):
    Grant: Optional[Grant] = None


class GetGrantRequest(BaseModel):
    GrantArn: Arn
    Version: Optional[String] = None


class GetLicenseRequest(BaseModel):
    LicenseArn: Arn
    Version: Optional[String] = None


class GetLicenseConfigurationRequest(BaseModel):
    LicenseConfigurationArn: String


class GetLicenseManagerReportGeneratorRequest(BaseModel):
    LicenseManagerReportGeneratorArn: String


class GetLicenseUsageResponse(BaseModel):
    LicenseUsage: Optional[LicenseUsage] = None


class GetLicenseUsageRequest(BaseModel):
    LicenseArn: Arn


class GetServiceSettingsResponse(BaseModel):
    S3BucketArn: Optional[String] = None
    SnsTopicArn: Optional[String] = None
    OrganizationConfiguration: Optional[OrganizationConfiguration] = None
    EnableCrossAccountsDiscovery: Optional[BoxBoolean] = None
    LicenseManagerResourceShareArn: Optional[String] = None


class ListAssociationsForLicenseConfigurationResponse(BaseModel):
    LicenseConfigurationAssociations: Optional[LicenseConfigurationAssociations] = None
    NextToken: Optional[String] = None


class ListAssociationsForLicenseConfigurationRequest(BaseModel):
    LicenseConfigurationArn: String
    MaxResults: Optional[BoxInteger] = None
    NextToken: Optional[String] = None


class ListDistributedGrantsResponse(BaseModel):
    Grants: Optional[GrantList] = None
    NextToken: Optional[String] = None


class ListFailuresForLicenseConfigurationOperationsRequest(BaseModel):
    LicenseConfigurationArn: String
    MaxResults: Optional[BoxInteger] = None
    NextToken: Optional[String] = None


class ListLicenseSpecificationsForResourceResponse(BaseModel):
    LicenseSpecifications: Optional[LicenseSpecifications] = None
    NextToken: Optional[String] = None


class ListLicenseSpecificationsForResourceRequest(BaseModel):
    ResourceArn: String
    MaxResults: Optional[BoxInteger] = None
    NextToken: Optional[String] = None


class ListLicenseVersionsRequest(BaseModel):
    LicenseArn: Arn
    NextToken: Optional[String] = None
    MaxResults: Optional[MaxSize100] = None


class ListReceivedGrantsResponse(ListDistributedGrantsResponse):
    pass


class ListResourceInventoryRequest(BaseModel):
    MaxResults: Optional[BoxInteger] = None
    NextToken: Optional[String] = None
    Filters: Optional[InventoryFilterList] = None


class ListTagsForResourceRequest(BaseModel):
    ResourceArn: String


class ListUsageForLicenseConfigurationResponse(BaseModel):
    LicenseConfigurationUsageList: Optional[LicenseConfigurationUsageList] = None
    NextToken: Optional[String] = None


class RejectGrantResponse(AcceptGrantResponse):
    pass


class RejectGrantRequest(BaseModel):
    GrantArn: Arn


class UntagResourceRequest(BaseModel):
    ResourceArn: String
    TagKeys: TagKeyList


class UpdateLicenseSpecificationsForResourceRequest(BaseModel):
    ResourceArn: String
    AddLicenseSpecifications: Optional[LicenseSpecifications] = None
    RemoveLicenseSpecifications: Optional[LicenseSpecifications] = None


class UpdateServiceSettingsRequest(BaseModel):
    S3BucketArn: Optional[String] = None
    SnsTopicArn: Optional[String] = None
    OrganizationConfiguration: Optional[OrganizationConfiguration] = None
    EnableCrossAccountsDiscovery: Optional[BoxBoolean] = None


class EntitlementDataList(BaseModel):
    __root__: List[EntitlementData]


class MetadataList(BaseModel):
    __root__: List[Metadata]


class TagList(BaseModel):
    __root__: List[Tag]


class ReportTypeList(BaseModel):
    __root__: List[ReportType]


class ReportFrequency(BaseModel):
    """
    Details on how frequently reports are generated.
    """

    value: Optional[Integer] = None
    period: Optional[ReportFrequencyType] = None


class EntitlementList(BaseModel):
    __root__: List[Entitlement]


class FilterValues(BaseModel):
    __root__: List[FilterValue]


class Filter(BaseModel):
    """
    A filter name and value pair that is used to return more specific results from a describe operation. Filters can be used to match a set of resources by specific criteria, such as tags, attributes, or IDs.
    """

    Name: Optional[FilterName] = None
    Values: Optional[FilterValues] = None


class FilterList(BaseModel):
    __root__: List[Filter]


class Filters(FilterList):
    pass


class ManagedResourceSummaryList(BaseModel):
    __root__: List[ManagedResourceSummary]


class ReportGenerator(BaseModel):
    """
    Describe the details of a report generator.
    """

    ReportGeneratorName: Optional[String] = None
    ReportType: Optional[ReportTypeList] = None
    ReportContext: Optional[ReportContext] = None
    ReportFrequency: Optional[ReportFrequency] = None
    LicenseManagerReportGeneratorArn: Optional[String] = None
    LastRunStatus: Optional[String] = None
    LastRunFailureReason: Optional[String] = None
    LastReportGenerationTime: Optional[String] = None
    ReportCreatorAccount: Optional[String] = None
    Description: Optional[String] = None
    S3Location: Optional[S3Location] = None
    CreateTime: Optional[String] = None
    Tags: Optional[TagList] = None


class License(BaseModel):
    """
    Software license that is managed in AWS License Manager.
    """

    LicenseArn: Optional[Arn] = None
    LicenseName: Optional[String] = None
    ProductName: Optional[String] = None
    ProductSKU: Optional[String] = None
    Issuer: Optional[IssuerDetails] = None
    HomeRegion: Optional[String] = None
    Status: Optional[LicenseStatus] = None
    Validity: Optional[DatetimeRange] = None
    Beneficiary: Optional[String] = None
    Entitlements: Optional[EntitlementList] = None
    ConsumptionConfiguration: Optional[ConsumptionConfiguration] = None
    LicenseMetadata: Optional[MetadataList] = None
    CreateTime: Optional[ISO8601DateTime] = None
    Version: Optional[String] = None


class ReceivedMetadata(BaseModel):
    """
    Metadata associated with received licenses and grants.
    """

    ReceivedStatus: Optional[ReceivedStatus] = None
    ReceivedStatusReason: Optional[StatusReasonMessage] = None
    AllowedOperations: Optional[AllowedOperationList] = None


class GrantedLicense(BaseModel):
    """
    Describes a license that is granted to a grantee.
    """

    LicenseArn: Optional[Arn] = None
    LicenseName: Optional[String] = None
    ProductName: Optional[String] = None
    ProductSKU: Optional[String] = None
    Issuer: Optional[IssuerDetails] = None
    HomeRegion: Optional[String] = None
    Status: Optional[LicenseStatus] = None
    Validity: Optional[DatetimeRange] = None
    Beneficiary: Optional[String] = None
    Entitlements: Optional[EntitlementList] = None
    ConsumptionConfiguration: Optional[ConsumptionConfiguration] = None
    LicenseMetadata: Optional[MetadataList] = None
    CreateTime: Optional[ISO8601DateTime] = None
    Version: Optional[String] = None
    ReceivedMetadata: Optional[ReceivedMetadata] = None


class GrantedLicenseList(BaseModel):
    __root__: List[GrantedLicense]


class LicenseList(BaseModel):
    __root__: List[License]


class LicenseOperationFailure(BaseModel):
    """
    Describes the failure of a license operation.
    """

    ResourceArn: Optional[String] = None
    ResourceType: Optional[ResourceType] = None
    ErrorMessage: Optional[String] = None
    FailureTime: Optional[DateTime] = None
    OperationName: Optional[String] = None
    ResourceOwnerId: Optional[String] = None
    OperationRequestedBy: Optional[String] = None
    MetadataList: Optional[MetadataList] = None


class LicenseOperationFailureList(BaseModel):
    __root__: List[LicenseOperationFailure]


class ReportGeneratorList(BaseModel):
    __root__: List[ReportGenerator]


class ResourceInventoryList(BaseModel):
    __root__: List[ResourceInventory]


class TokenList(BaseModel):
    __root__: List[TokenData]


class ProductInformationFilterList(BaseModel):
    __root__: List[ProductInformationFilter]


class ProductInformation(BaseModel):
    """
    Describes product information for a license configuration.
    """

    ResourceType: String
    ProductInformationFilterList: ProductInformationFilterList


class CheckoutBorrowLicenseResponse(BaseModel):
    LicenseArn: Optional[Arn] = None
    LicenseConsumptionToken: Optional[String] = None
    EntitlementsAllowed: Optional[EntitlementDataList] = None
    NodeId: Optional[String] = None
    SignedToken: Optional[SignedToken] = None
    IssuedAt: Optional[ISO8601DateTime] = None
    Expiration: Optional[ISO8601DateTime] = None
    CheckoutMetadata: Optional[MetadataList] = None


class CheckoutBorrowLicenseRequest(BaseModel):
    LicenseArn: Arn
    Entitlements: EntitlementDataList
    DigitalSignatureMethod: DigitalSignatureMethod
    NodeId: Optional[String] = None
    CheckoutMetadata: Optional[MetadataList] = None
    ClientToken: ClientToken


class CheckoutLicenseResponse(BaseModel):
    CheckoutType: Optional[CheckoutType] = None
    LicenseConsumptionToken: Optional[String] = None
    EntitlementsAllowed: Optional[EntitlementDataList] = None
    SignedToken: Optional[SignedToken] = None
    NodeId: Optional[String] = None
    IssuedAt: Optional[ISO8601DateTime] = None
    Expiration: Optional[ISO8601DateTime] = None


class CheckoutLicenseRequest(BaseModel):
    ProductSKU: String
    CheckoutType: CheckoutType
    KeyFingerprint: String
    Entitlements: EntitlementDataList
    ClientToken: ClientToken
    Beneficiary: Optional[String] = None
    NodeId: Optional[String] = None


class CreateLicenseRequest(BaseModel):
    LicenseName: String
    ProductName: String
    ProductSKU: String
    Issuer: Issuer
    HomeRegion: String
    Validity: DatetimeRange
    Entitlements: EntitlementList
    Beneficiary: String
    ConsumptionConfiguration: ConsumptionConfiguration
    LicenseMetadata: Optional[MetadataList] = None
    ClientToken: ClientToken


class CreateLicenseManagerReportGeneratorRequest(BaseModel):
    ReportGeneratorName: ReportGeneratorName
    Type: ReportTypeList
    ReportContext: ReportContext
    ReportFrequency: ReportFrequency
    ClientToken: ClientRequestToken
    Description: Optional[String] = None
    Tags: Optional[TagList] = None


class CreateLicenseVersionRequest(BaseModel):
    LicenseArn: Arn
    LicenseName: String
    ProductName: String
    Issuer: Issuer
    HomeRegion: String
    Validity: DatetimeRange
    LicenseMetadata: Optional[MetadataList] = None
    Entitlements: EntitlementList
    ConsumptionConfiguration: ConsumptionConfiguration
    Status: LicenseStatus
    ClientToken: ClientToken
    SourceVersion: Optional[String] = None


class GetLicenseResponse(BaseModel):
    License: Optional[License] = None


class GetLicenseManagerReportGeneratorResponse(BaseModel):
    ReportGenerator: Optional[ReportGenerator] = None


class ListDistributedGrantsRequest(BaseModel):
    GrantArns: Optional[ArnList] = None
    Filters: Optional[FilterList] = None
    NextToken: Optional[String] = None
    MaxResults: Optional[MaxSize100] = None


class ListFailuresForLicenseConfigurationOperationsResponse(BaseModel):
    LicenseOperationFailureList: Optional[LicenseOperationFailureList] = None
    NextToken: Optional[String] = None


class ListLicenseConfigurationsRequest(BaseModel):
    LicenseConfigurationArns: Optional[StringList] = None
    MaxResults: Optional[BoxInteger] = None
    NextToken: Optional[String] = None
    Filters: Optional[Filters] = None


class ListLicenseManagerReportGeneratorsResponse(BaseModel):
    ReportGenerators: Optional[ReportGeneratorList] = None
    NextToken: Optional[String] = None


class ListLicenseManagerReportGeneratorsRequest(BaseModel):
    Filters: Optional[FilterList] = None
    NextToken: Optional[String] = None
    MaxResults: Optional[MaxSize100] = None


class ListLicenseVersionsResponse(BaseModel):
    Licenses: Optional[LicenseList] = None
    NextToken: Optional[String] = None


class ListLicensesResponse(ListLicenseVersionsResponse):
    pass


class ListLicensesRequest(BaseModel):
    LicenseArns: Optional[ArnList] = None
    Filters: Optional[FilterList] = None
    NextToken: Optional[String] = None
    MaxResults: Optional[MaxSize100] = None


class ListReceivedGrantsRequest(BaseModel):
    GrantArns: Optional[ArnList] = None
    Filters: Optional[FilterList] = None
    NextToken: Optional[String] = None
    MaxResults: Optional[MaxSize100] = None


class ListReceivedLicensesResponse(BaseModel):
    Licenses: Optional[GrantedLicenseList] = None
    NextToken: Optional[String] = None


class ListReceivedLicensesRequest(BaseModel):
    LicenseArns: Optional[ArnList] = None
    Filters: Optional[FilterList] = None
    NextToken: Optional[String] = None
    MaxResults: Optional[MaxSize100] = None


class ListResourceInventoryResponse(BaseModel):
    ResourceInventoryList: Optional[ResourceInventoryList] = None
    NextToken: Optional[String] = None


class ListTagsForResourceResponse(BaseModel):
    Tags: Optional[TagList] = None


class ListTokensResponse(BaseModel):
    Tokens: Optional[TokenList] = None
    NextToken: Optional[String] = None


class ListTokensRequest(BaseModel):
    TokenIds: Optional[StringList] = None
    Filters: Optional[FilterList] = None
    NextToken: Optional[String] = None
    MaxResults: Optional[MaxSize100] = None


class ListUsageForLicenseConfigurationRequest(BaseModel):
    LicenseConfigurationArn: String
    MaxResults: Optional[BoxInteger] = None
    NextToken: Optional[String] = None
    Filters: Optional[Filters] = None


class TagResourceRequest(BaseModel):
    ResourceArn: String
    Tags: TagList


class UpdateLicenseManagerReportGeneratorRequest(BaseModel):
    LicenseManagerReportGeneratorArn: String
    ReportGeneratorName: ReportGeneratorName
    Type: ReportTypeList
    ReportContext: ReportContext
    ReportFrequency: ReportFrequency
    ClientToken: ClientRequestToken
    Description: Optional[String] = None


class ProductInformationList(BaseModel):
    __root__: List[ProductInformation]


class LicenseConfiguration(BaseModel):
    """
    A license configuration is an abstraction of a customer license agreement that can be consumed and enforced by License Manager. Components include specifications for the license type (licensing by instance, socket, CPU, or vCPU), allowed tenancy (shared tenancy, Dedicated Instance, Dedicated Host, or all of these), host affinity (how long a VM must be associated with a host), and the number of licenses purchased and used.
    """

    LicenseConfigurationId: Optional[String] = None
    LicenseConfigurationArn: Optional[String] = None
    Name: Optional[String] = None
    Description: Optional[String] = None
    LicenseCountingType: Optional[LicenseCountingType] = None
    LicenseRules: Optional[StringList] = None
    LicenseCount: Optional[BoxLong] = None
    LicenseCountHardLimit: Optional[BoxBoolean] = None
    DisassociateWhenNotFound: Optional[BoxBoolean] = None
    ConsumedLicenses: Optional[BoxLong] = None
    Status: Optional[String] = None
    OwnerAccountId: Optional[String] = None
    ConsumedLicenseSummaryList: Optional[ConsumedLicenseSummaryList] = None
    ManagedResourceSummaryList: Optional[ManagedResourceSummaryList] = None
    ProductInformationList: Optional[ProductInformationList] = None
    AutomatedDiscoveryInformation: Optional[AutomatedDiscoveryInformation] = None


class LicenseConfigurations(BaseModel):
    __root__: List[LicenseConfiguration]


class CreateLicenseConfigurationRequest(BaseModel):
    Name: String
    Description: Optional[String] = None
    LicenseCountingType: LicenseCountingType
    LicenseCount: Optional[BoxLong] = None
    LicenseCountHardLimit: Optional[BoxBoolean] = None
    LicenseRules: Optional[StringList] = None
    Tags: Optional[TagList] = None
    DisassociateWhenNotFound: Optional[BoxBoolean] = None
    ProductInformationList: Optional[ProductInformationList] = None


class GetLicenseConfigurationResponse(BaseModel):
    LicenseConfigurationId: Optional[String] = None
    LicenseConfigurationArn: Optional[String] = None
    Name: Optional[String] = None
    Description: Optional[String] = None
    LicenseCountingType: Optional[LicenseCountingType] = None
    LicenseRules: Optional[StringList] = None
    LicenseCount: Optional[BoxLong] = None
    LicenseCountHardLimit: Optional[BoxBoolean] = None
    ConsumedLicenses: Optional[BoxLong] = None
    Status: Optional[String] = None
    OwnerAccountId: Optional[String] = None
    ConsumedLicenseSummaryList: Optional[ConsumedLicenseSummaryList] = None
    ManagedResourceSummaryList: Optional[ManagedResourceSummaryList] = None
    Tags: Optional[TagList] = None
    ProductInformationList: Optional[ProductInformationList] = None
    AutomatedDiscoveryInformation: Optional[AutomatedDiscoveryInformation] = None
    DisassociateWhenNotFound: Optional[BoxBoolean] = None


class ListLicenseConfigurationsResponse(BaseModel):
    LicenseConfigurations: Optional[LicenseConfigurations] = None
    NextToken: Optional[String] = None


class UpdateLicenseConfigurationRequest(BaseModel):
    LicenseConfigurationArn: String
    LicenseConfigurationStatus: Optional[LicenseConfigurationStatus] = None
    LicenseRules: Optional[StringList] = None
    LicenseCount: Optional[BoxLong] = None
    LicenseCountHardLimit: Optional[BoxBoolean] = None
    Name: Optional[String] = None
    Description: Optional[String] = None
    ProductInformationList: Optional[ProductInformationList] = None
    DisassociateWhenNotFound: Optional[BoxBoolean] = None
