# generated by datamodel-codegen:
#   filename:  openapi.yaml
#   timestamp: 2021-12-31T02:48:48+00:00

from __future__ import annotations

from enum import Enum
from typing import Annotated, Any, List, Optional

from pydantic import BaseModel, Extra, Field


class AcceleratorTypeName(BaseModel):
    __root__: Annotated[str, Field(max_length=256, min_length=1, regex='^\\S+$')]


class BadRequestException(BaseModel):
    __root__: Any


class ResourceNotFoundException(BadRequestException):
    pass


class InternalServerException(BadRequestException):
    pass


class AcceleratorId(BaseModel):
    __root__: Annotated[
        str, Field(max_length=256, min_length=1, regex='^eia-[0-9a-f]+$')
    ]


class TagResourceResult(BaseModel):
    pass


class TagValue(BaseModel):
    __root__: Annotated[str, Field(max_length=256)]


class UntagResourceResult(TagResourceResult):
    pass


class TagKey(BaseModel):
    __root__: Annotated[str, Field(max_length=128, min_length=1, regex='^\\S$')]


class AcceleratorHealthStatus(BaseModel):
    __root__: Annotated[str, Field(max_length=256, min_length=1)]


class AcceleratorIdList(BaseModel):
    __root__: Annotated[List[AcceleratorId], Field(max_items=1000, min_items=0)]


class AcceleratorTypeNameList(BaseModel):
    __root__: Annotated[List[AcceleratorTypeName], Field(max_items=100, min_items=0)]


class LocationType(Enum):
    region = 'region'
    availability_zone = 'availability-zone'
    availability_zone_id = 'availability-zone-id'


class Location(AcceleratorHealthStatus):
    pass


class AcceleratorTypeOffering(BaseModel):
    """
    The offering for an Elastic Inference Accelerator type.
    """

    acceleratorType: Optional[AcceleratorTypeName] = None
    locationType: Optional[LocationType] = None
    location: Optional[Location] = None


class AcceleratorTypeOfferingList(BaseModel):
    __root__: Annotated[
        List[AcceleratorTypeOffering], Field(max_items=100, min_items=0)
    ]


class AvailabilityZone(AcceleratorHealthStatus):
    pass


class DescribeAcceleratorOfferingsRequest(BaseModel):
    locationType: LocationType
    acceleratorTypes: Optional[AcceleratorTypeNameList] = None


class DescribeAcceleratorTypesRequest(BaseModel):
    pass


class MaxResults(BaseModel):
    __root__: Annotated[int, Field(ge=0.0, le=100.0)]


class NextToken(BaseModel):
    __root__: Annotated[
        str, Field(max_length=2048, min_length=1, regex='^[A-Za-z0-9+/]+={0,2}$')
    ]


class ElasticInferenceAcceleratorHealth(BaseModel):
    """
    The health details of an Elastic Inference Accelerator.
    """

    status: Optional[AcceleratorHealthStatus] = None


class ResourceArn(BaseModel):
    __root__: Annotated[str, Field(max_length=1283, min_length=1)]


class ElasticInferenceAccelerator(BaseModel):
    """
    The details of an Elastic Inference Accelerator.
    """

    acceleratorHealth: Optional[ElasticInferenceAcceleratorHealth] = None
    acceleratorType: Optional[AcceleratorTypeName] = None
    acceleratorId: Optional[AcceleratorId] = None
    availabilityZone: Optional[AvailabilityZone] = None
    attachedResource: Optional[ResourceArn] = None


class FilterName(BaseModel):
    __root__: Annotated[str, Field(max_length=128, min_length=1, regex='^\\S+$')]


class Integer(BaseModel):
    __root__: int


class Key(AcceleratorTypeName):
    pass


class Value(Integer):
    pass


class KeyValuePair(BaseModel):
    """
    A throughput entry for an Elastic Inference Accelerator type.
    """

    key: Optional[Key] = None
    value: Optional[Value] = None


class ResourceARN(BaseModel):
    __root__: Annotated[
        str,
        Field(
            max_length=1011,
            min_length=1,
            regex='^arn:aws\\S*:elastic-inference:\\S+:\\d{12}:elastic-inference-accelerator/eia-[0-9a-f]+$',
        ),
    ]


class ListTagsForResourceRequest(BaseModel):
    pass


class TagMap(BaseModel):
    pass

    class Config:
        extra = Extra.allow


class String(BaseModel):
    __root__: Annotated[str, Field(max_length=500000, regex='^.*$')]


class TagKeyList(BaseModel):
    __root__: Annotated[List[TagKey], Field(max_items=50, min_items=1)]


class TagResourceRequest(BaseModel):
    tags: TagMap


class UntagResourceRequest(BaseModel):
    pass


class DescribeAcceleratorOfferingsResponse(BaseModel):
    acceleratorTypeOfferings: Optional[AcceleratorTypeOfferingList] = None


class ListTagsForResourceResult(BaseModel):
    tags: Optional[TagMap] = None


class MemoryInfo(BaseModel):
    """
    The memory information of an Elastic Inference Accelerator type.
    """

    sizeInMiB: Optional[Integer] = None


class ThroughputInfoList(BaseModel):
    __root__: Annotated[List[KeyValuePair], Field(max_items=100, min_items=0)]


class AcceleratorType(BaseModel):
    """
    The details of an Elastic Inference Accelerator type.
    """

    acceleratorTypeName: Optional[AcceleratorTypeName] = None
    memoryInfo: Optional[MemoryInfo] = None
    throughputInfo: Optional[ThroughputInfoList] = None


class AcceleratorTypeList(BaseModel):
    __root__: Annotated[List[AcceleratorType], Field(max_items=100, min_items=0)]


class ElasticInferenceAcceleratorSet(BaseModel):
    __root__: List[ElasticInferenceAccelerator]


class ValueStringList(BaseModel):
    __root__: Annotated[List[String], Field(max_items=100, min_items=0)]


class DescribeAcceleratorTypesResponse(BaseModel):
    acceleratorTypes: Optional[AcceleratorTypeList] = None


class DescribeAcceleratorsResponse(BaseModel):
    acceleratorSet: Optional[ElasticInferenceAcceleratorSet] = None
    nextToken: Optional[NextToken] = None


class Filter(BaseModel):
    """
    A filter expression for the Elastic Inference Accelerator list.
    """

    name: Optional[FilterName] = None
    values: Optional[ValueStringList] = None


class FilterList(BaseModel):
    __root__: Annotated[List[Filter], Field(max_items=100, min_items=0)]


class DescribeAcceleratorsRequest(BaseModel):
    acceleratorIds: Optional[AcceleratorIdList] = None
    filters: Optional[FilterList] = None
    maxResults: Optional[MaxResults] = None
    nextToken: Optional[NextToken] = None
