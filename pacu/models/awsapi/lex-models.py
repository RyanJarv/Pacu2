# generated by datamodel-codegen:
#   filename:  openapi.yaml
#   timestamp: 2021-12-31T02:51:39+00:00

from __future__ import annotations

from datetime import datetime
from enum import Enum
from typing import Annotated, Any, List, Optional

from pydantic import BaseModel, Extra, Field


class NotFoundException(BaseModel):
    __root__: Any


class ConflictException(NotFoundException):
    pass


class LimitExceededException(NotFoundException):
    pass


class InternalFailureException(NotFoundException):
    pass


class BadRequestException(NotFoundException):
    pass


class PreconditionFailedException(NotFoundException):
    pass


class ResourceInUseException(NotFoundException):
    pass


class Version(BaseModel):
    __root__: Annotated[
        str, Field(max_length=64, min_length=1, regex='\\$LATEST|[0-9]+')
    ]


class PromptMaxAttempts(BaseModel):
    __root__: Annotated[int, Field(ge=1.0, le=5.0)]


class ResponseCard(BaseModel):
    __root__: Annotated[str, Field(max_length=50000, min_length=1)]


class IamRoleArn(BaseModel):
    __root__: Annotated[
        str,
        Field(
            max_length=2048,
            min_length=20,
            regex='^arn:[\\w\\-]+:iam::[\\d]{12}:role/.+$',
        ),
    ]


class Utterance(BaseModel):
    __root__: Annotated[str, Field(max_length=200, min_length=1)]


class LambdaARN(BaseModel):
    __root__: Annotated[
        str,
        Field(
            max_length=2048,
            min_length=20,
            regex='arn:aws[a-zA-Z-]*:lambda:[a-z]+-[a-z]+(-[a-z]+)*-[0-9]:[0-9]{12}:function:[a-zA-Z0-9-_]+(\\/[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12})?(:[a-zA-Z0-9-_]+)?',
        ),
    ]


class MessageVersion(BaseModel):
    __root__: Annotated[str, Field(max_length=5, min_length=1)]


class FulfillmentActivityType(Enum):
    ReturnIntent = 'ReturnIntent'
    CodeHook = 'CodeHook'


class CodeHook(BaseModel):
    """
    Specifies a Lambda function that verifies requests to a bot or fulfills the user's request to a bot..
    """

    uri: LambdaARN
    messageVersion: MessageVersion


class KendraIndexArn(BaseModel):
    __root__: Annotated[
        str,
        Field(
            max_length=2048,
            min_length=20,
            regex='arn:aws:kendra:[a-z]+-[a-z]+-[0-9]:[0-9]{12}:index\\/[a-zA-Z0-9][a-zA-Z0-9_-]*',
        ),
    ]


class QueryFilterString(BaseModel):
    __root__: Annotated[str, Field(min_length=0)]


class RoleArn(BaseModel):
    __root__: Annotated[
        str,
        Field(max_length=2048, min_length=20, regex='arn:aws:iam::[0-9]{12}:role/.*'),
    ]


class AccessDeniedException(NotFoundException):
    pass


class TagResourceResponse(BaseModel):
    pass


class UntagResourceResponse(TagResourceResponse):
    pass


class TagKey(BaseModel):
    __root__: Annotated[str, Field(max_length=128, min_length=1)]


class AliasName(BaseModel):
    __root__: Annotated[
        str, Field(max_length=100, min_length=1, regex='^([A-Za-z]_?)+$')
    ]


class AliasNameOrListAll(BaseModel):
    __root__: Annotated[
        str, Field(max_length=100, min_length=1, regex='^(-|^([A-Za-z]_?)+$)$')
    ]


class AmazonResourceName(BaseModel):
    __root__: Annotated[str, Field(max_length=1011, min_length=1)]


class Blob(BaseModel):
    __root__: str


class Boolean(BaseModel):
    __root__: bool


class Description(BaseModel):
    __root__: Annotated[str, Field(max_length=200, min_length=0)]


class BotName(BaseModel):
    __root__: Annotated[
        str, Field(max_length=50, min_length=2, regex='^([A-Za-z]_?)+$')
    ]


class Timestamp(BaseModel):
    __root__: datetime


class String(Blob):
    pass


class BotChannelName(AliasName):
    pass


class ChannelType(Enum):
    Facebook = 'Facebook'
    Slack = 'Slack'
    Twilio_Sms = 'Twilio-Sms'
    Kik = 'Kik'


class ChannelConfigurationMap(BaseModel):
    pass

    class Config:
        extra = Extra.allow


class ChannelStatus(Enum):
    IN_PROGRESS = 'IN_PROGRESS'
    CREATED = 'CREATED'
    FAILED = 'FAILED'


class BotChannelAssociation(BaseModel):
    """
    Represents an association between an Amazon Lex bot and an external messaging platform.
    """

    name: Optional[BotChannelName] = None
    description: Optional[Description] = None
    botAlias: Optional[AliasName] = None
    botName: Optional[BotName] = None
    createdDate: Optional[Timestamp] = None
    type: Optional[ChannelType] = None
    botConfiguration: Optional[ChannelConfigurationMap] = None
    status: Optional[ChannelStatus] = None
    failureReason: Optional[String] = None


class BotChannelAssociationList(BaseModel):
    __root__: List[BotChannelAssociation]


class Status(Enum):
    BUILDING = 'BUILDING'
    READY = 'READY'
    READY_BASIC_TESTING = 'READY_BASIC_TESTING'
    FAILED = 'FAILED'
    NOT_BUILT = 'NOT_BUILT'


class BotMetadata(BaseModel):
    """
    Provides information about a bot. .
    """

    name: Optional[BotName] = None
    description: Optional[Description] = None
    status: Optional[Status] = None
    lastUpdatedDate: Optional[Timestamp] = None
    createdDate: Optional[Timestamp] = None
    version: Optional[Version] = None


class BotMetadataList(BaseModel):
    __root__: List[BotMetadata]


class BotVersions(BaseModel):
    __root__: Annotated[List[Version], Field(max_items=5, min_items=1)]


class BuiltinIntentSignature(Blob):
    pass


class BuiltinIntentSlot(BaseModel):
    """
    Provides information about a slot used in a built-in intent.
    """

    name: Optional[String] = None


class BuiltinIntentSlotList(BaseModel):
    __root__: List[BuiltinIntentSlot]


class BuiltinSlotTypeSignature(Blob):
    pass


class ConfidenceThreshold(BaseModel):
    __root__: Annotated[float, Field(ge=0.0, le=1.0)]


class ContentString(BaseModel):
    __root__: Annotated[str, Field(max_length=1000, min_length=1)]


class ContentType(Enum):
    PlainText = 'PlainText'
    SSML = 'SSML'
    CustomPayload = 'CustomPayload'


class ContextTimeToLiveInSeconds(BaseModel):
    __root__: Annotated[int, Field(ge=5.0, le=86400.0)]


class ContextTurnsToLive(BaseModel):
    __root__: Annotated[int, Field(ge=1.0, le=20.0)]


class Count(BaseModel):
    __root__: int


class CreateBotVersionRequest(BaseModel):
    checksum: Optional[String] = None


class SessionTTL(BaseModel):
    __root__: Annotated[int, Field(ge=60.0, le=86400.0)]


class Locale(Enum):
    de_DE = 'de-DE'
    en_AU = 'en-AU'
    en_GB = 'en-GB'
    en_IN = 'en-IN'
    en_US = 'en-US'
    es_419 = 'es-419'
    es_ES = 'es-ES'
    es_US = 'es-US'
    fr_FR = 'fr-FR'
    fr_CA = 'fr-CA'
    it_IT = 'it-IT'
    ja_JP = 'ja-JP'
    ko_KR = 'ko-KR'


class IntentName(AliasName):
    pass


class CreateIntentVersionRequest(BaseModel):
    checksum: Optional[String] = None


class IntentUtteranceList(BaseModel):
    __root__: Annotated[List[Utterance], Field(max_items=1500, min_items=0)]


class FulfillmentActivity(BaseModel):
    """
    <p> Describes how the intent is fulfilled after the user provides all of the information required for the intent. You can provide a Lambda function to process the intent, or you can return the intent information to the client application. We recommend that you use a Lambda function so that the relevant logic lives in the Cloud and limit the client-side code primarily to presentation. If you need to update the logic, you only update the Lambda function; you don't need to upgrade your client application. </p> <p>Consider the following examples:</p> <ul> <li> <p>In a pizza ordering application, after the user provides all of the information for placing an order, you use a Lambda function to place an order with a pizzeria. </p> </li> <li> <p>In a gaming application, when a user says "pick up a rock," this information must go back to the client application so that it can perform the operation and update the graphics. In this case, you want Amazon Lex to return the intent data to the client. </p> </li> </ul>
    """

    type: FulfillmentActivityType
    codeHook: Optional[CodeHook] = None


class KendraConfiguration(BaseModel):
    """
    Provides configuration information for the AMAZON.KendraSearchIntent intent. When you use this intent, Amazon Lex searches the specified Amazon Kendra index and returns documents from the index that match the user's utterance. For more information, see <a href="http://docs.aws.amazon.com/lex/latest/dg/built-in-intent-kendra-search.html"> AMAZON.KendraSearchIntent</a>.
    """

    kendraIndex: KendraIndexArn
    queryFilterString: Optional[QueryFilterString] = None
    role: RoleArn


class SlotTypeName(AliasName):
    pass


class CreateSlotTypeVersionRequest(BaseModel):
    checksum: Optional[String] = None


class SlotValueSelectionStrategy(Enum):
    ORIGINAL_VALUE = 'ORIGINAL_VALUE'
    TOP_RESOLUTION = 'TOP_RESOLUTION'


class CustomOrBuiltinSlotTypeName(BaseModel):
    __root__: Annotated[
        str, Field(max_length=100, min_length=1, regex='^((AMAZON\\.)_?|[A-Za-z]_?)+')
    ]


class DeleteBotAliasRequest(BaseModel):
    pass


class DeleteBotChannelAssociationRequest(BaseModel):
    pass


class DeleteBotRequest(BaseModel):
    pass


class NumericalVersion(BaseModel):
    __root__: Annotated[str, Field(max_length=64, min_length=1, regex='[0-9]+')]


class DeleteBotVersionRequest(BaseModel):
    pass


class DeleteIntentRequest(BaseModel):
    pass


class DeleteIntentVersionRequest(BaseModel):
    pass


class DeleteSlotTypeRequest(BaseModel):
    pass


class DeleteSlotTypeVersionRequest(BaseModel):
    pass


class UserId(BaseModel):
    __root__: Annotated[str, Field(max_length=100, min_length=2)]


class DeleteUtterancesRequest(BaseModel):
    pass


class Destination(Enum):
    CLOUDWATCH_LOGS = 'CLOUDWATCH_LOGS'
    S3 = 'S3'


class Value(BaseModel):
    __root__: Annotated[str, Field(max_length=140, min_length=1)]


class SynonymList(BaseModel):
    __root__: List[Value]


class ExportStatus(Enum):
    IN_PROGRESS = 'IN_PROGRESS'
    READY = 'READY'
    FAILED = 'FAILED'


class ExportType(Enum):
    ALEXA_SKILLS_KIT = 'ALEXA_SKILLS_KIT'
    LEX = 'LEX'


class GetBotAliasRequest(BaseModel):
    pass


class NextToken(Blob):
    pass


class MaxResults(BaseModel):
    __root__: Annotated[int, Field(ge=1.0, le=50.0)]


class GetBotAliasesRequest(BaseModel):
    pass


class GetBotChannelAssociationRequest(BaseModel):
    pass


class GetBotChannelAssociationsRequest(BaseModel):
    pass


class GetBotRequest(BaseModel):
    pass


class GetBotVersionsRequest(BaseModel):
    pass


class GetBotsRequest(BaseModel):
    pass


class GetBuiltinIntentRequest(BaseModel):
    pass


class GetBuiltinIntentsRequest(BaseModel):
    pass


class GetBuiltinSlotTypesRequest(BaseModel):
    pass


class Name(BaseModel):
    __root__: Annotated[str, Field(max_length=100, min_length=1, regex='[a-zA-Z_]+')]


class ResourceType(Enum):
    BOT = 'BOT'
    INTENT = 'INTENT'
    SLOT_TYPE = 'SLOT_TYPE'


class GetExportRequest(BaseModel):
    pass


class GetImportRequest(BaseModel):
    pass


class MergeStrategy(Enum):
    OVERWRITE_LATEST = 'OVERWRITE_LATEST'
    FAIL_ON_CONFLICT = 'FAIL_ON_CONFLICT'


class ImportStatus(Enum):
    IN_PROGRESS = 'IN_PROGRESS'
    COMPLETE = 'COMPLETE'
    FAILED = 'FAILED'


class StringList(BaseModel):
    __root__: List[String]


class GetIntentRequest(BaseModel):
    pass


class GetIntentVersionsRequest(BaseModel):
    pass


class GetIntentsRequest(BaseModel):
    pass


class MigrationId(BaseModel):
    __root__: Annotated[
        str, Field(max_length=10, min_length=10, regex='^[0-9a-zA-Z]+$')
    ]


class GetMigrationRequest(BaseModel):
    pass


class V2BotId(MigrationId):
    pass


class MigrationStatus(Enum):
    IN_PROGRESS = 'IN_PROGRESS'
    COMPLETED = 'COMPLETED'
    FAILED = 'FAILED'


class MigrationStrategy(Enum):
    CREATE_NEW = 'CREATE_NEW'
    UPDATE_EXISTING = 'UPDATE_EXISTING'


class MigrationSortAttribute(Enum):
    V1_BOT_NAME = 'V1_BOT_NAME'
    MIGRATION_DATE_TIME = 'MIGRATION_DATE_TIME'


class SortOrder(Enum):
    ASCENDING = 'ASCENDING'
    DESCENDING = 'DESCENDING'


class GetMigrationsRequest(BaseModel):
    pass


class GetSlotTypeRequest(BaseModel):
    pass


class GetSlotTypeVersionsRequest(BaseModel):
    pass


class GetSlotTypesRequest(BaseModel):
    pass


class StatusType(Enum):
    Detected = 'Detected'
    Missed = 'Missed'


class GetUtterancesViewRequest(BaseModel):
    pass


class GroupNumber(PromptMaxAttempts):
    pass


class InputContextName(AliasName):
    pass


class IntentMetadata(BaseModel):
    """
    Provides information about an intent.
    """

    name: Optional[IntentName] = None
    description: Optional[Description] = None
    lastUpdatedDate: Optional[Timestamp] = None
    createdDate: Optional[Timestamp] = None
    version: Optional[Version] = None


class KmsKeyArn(BaseModel):
    __root__: Annotated[
        str,
        Field(
            max_length=2048,
            min_length=20,
            regex='^arn:[\\w\\-]+:kms:[\\w\\-]+:[\\d]{12}:(?:key\\/[\\w\\-]+|alias\\/[a-zA-Z0-9:\\/_\\-]{1,256})$',
        ),
    ]


class ListTagsForResourceRequest(BaseModel):
    pass


class LogType(Enum):
    AUDIO = 'AUDIO'
    TEXT = 'TEXT'


class ResourceArn(BaseModel):
    __root__: Annotated[
        str,
        Field(
            max_length=2048,
            min_length=1,
            regex='^arn:[\\w\\-]+:(?:logs:[\\w\\-]+:[\\d]{12}:log-group:[\\.\\-_/#A-Za-z0-9]{1,512}(?::\\*)?|s3:::[a-z0-9][\\.\\-a-z0-9]{1,61}[a-z0-9])$',
        ),
    ]


class LogSettingsRequest(BaseModel):
    """
    Settings used to configure delivery mode and destination for conversation logs.
    """

    logType: LogType
    destination: Destination
    kmsKeyArn: Optional[KmsKeyArn] = None
    resourceArn: ResourceArn


class ResourcePrefix(BaseModel):
    __root__: Annotated[str, Field(max_length=1024)]


class LogSettingsResponse(BaseModel):
    """
    The settings for conversation logs.
    """

    logType: Optional[LogType] = None
    destination: Optional[Destination] = None
    kmsKeyArn: Optional[KmsKeyArn] = None
    resourceArn: Optional[ResourceArn] = None
    resourcePrefix: Optional[ResourcePrefix] = None


class Message(BaseModel):
    """
    The message object that provides the message text and its type.
    """

    contentType: ContentType
    content: ContentString
    groupNumber: Optional[GroupNumber] = None


class MigrationAlertType(Enum):
    ERROR = 'ERROR'
    WARN = 'WARN'


class MigrationAlertMessage(Blob):
    pass


class MigrationAlertDetail(Blob):
    pass


class MigrationAlertReferenceURL(Blob):
    pass


class MigrationSummary(BaseModel):
    """
    Provides information about migrating a bot from Amazon Lex V1 to Amazon Lex V2.
    """

    migrationId: Optional[MigrationId] = None
    v1BotName: Optional[BotName] = None
    v1BotVersion: Optional[Version] = None
    v1BotLocale: Optional[Locale] = None
    v2BotId: Optional[V2BotId] = None
    v2BotRole: Optional[IamRoleArn] = None
    migrationStatus: Optional[MigrationStatus] = None
    migrationStrategy: Optional[MigrationStrategy] = None
    migrationTimestamp: Optional[Timestamp] = None


class ObfuscationSetting(Enum):
    NONE = 'NONE'
    DEFAULT_OBFUSCATION = 'DEFAULT_OBFUSCATION'


class OutputContextName(AliasName):
    pass


class Priority(BaseModel):
    __root__: Annotated[int, Field(ge=0.0, le=100.0)]


class ProcessBehavior(Enum):
    SAVE = 'SAVE'
    BUILD = 'BUILD'


class RegexPattern(BaseModel):
    __root__: Annotated[str, Field(max_length=100, min_length=1)]


class SlotName(BaseModel):
    __root__: Annotated[
        str, Field(max_length=100, min_length=1, regex='^([A-Za-z](-|_|.)?)+$')
    ]


class SlotConstraint(Enum):
    Required = 'Required'
    Optional = 'Optional'


class SlotUtteranceList(BaseModel):
    __root__: Annotated[List[Utterance], Field(max_items=10, min_items=0)]


class SlotDefaultValueString(BaseModel):
    __root__: Annotated[str, Field(max_length=202, min_length=1)]


class SlotDefaultValue(BaseModel):
    """
    A default value for a slot.
    """

    defaultValue: SlotDefaultValueString


class SlotDefaultValueList(BaseModel):
    __root__: Annotated[List[SlotDefaultValue], Field(max_items=10, min_items=0)]


class SlotTypeRegexConfiguration(BaseModel):
    """
    Provides a regular expression used to validate the value of a slot.
    """

    pattern: RegexPattern


class SlotTypeMetadata(BaseModel):
    """
    Provides information about a slot type..
    """

    name: Optional[SlotTypeName] = None
    description: Optional[Description] = None
    lastUpdatedDate: Optional[Timestamp] = None
    createdDate: Optional[Timestamp] = None
    version: Optional[Version] = None


class V2BotName(BaseModel):
    __root__: Annotated[
        str, Field(max_length=100, min_length=1, regex='^([0-9a-zA-Z][_-]?)+$')
    ]


class StartMigrationRequest(BaseModel):
    v1BotName: BotName
    v1BotVersion: Version
    v2BotName: V2BotName
    v2BotRole: IamRoleArn
    migrationStrategy: MigrationStrategy


class TagValue(BaseModel):
    __root__: Annotated[str, Field(max_length=256, min_length=0)]


class TagKeyList(BaseModel):
    __root__: Annotated[List[TagKey], Field(max_items=200, min_items=0)]


class UntagResourceRequest(BaseModel):
    pass


class UtteranceString(BaseModel):
    __root__: Annotated[str, Field(max_length=2000, min_length=1)]


class GetBotChannelAssociationResponse(BotChannelAssociation):
    pass


class GetBotChannelAssociationsResponse(BaseModel):
    botChannelAssociations: Optional[BotChannelAssociationList] = None
    nextToken: Optional[NextToken] = None


class GetBotVersionsResponse(BaseModel):
    bots: Optional[BotMetadataList] = None
    nextToken: Optional[NextToken] = None


class GetBotsResponse(GetBotVersionsResponse):
    pass


class GetExportResponse(BaseModel):
    name: Optional[Name] = None
    version: Optional[NumericalVersion] = None
    resourceType: Optional[ResourceType] = None
    exportType: Optional[ExportType] = None
    exportStatus: Optional[ExportStatus] = None
    failureReason: Optional[String] = None
    url: Optional[String] = None


class GetImportResponse(BaseModel):
    name: Optional[Name] = None
    resourceType: Optional[ResourceType] = None
    mergeStrategy: Optional[MergeStrategy] = None
    importId: Optional[String] = None
    importStatus: Optional[ImportStatus] = None
    failureReason: Optional[StringList] = None
    createdDate: Optional[Timestamp] = None


class Intent(BaseModel):
    """
    Identifies the specific version of an intent.
    """

    intentName: IntentName
    intentVersion: Version


class MessageList(BaseModel):
    __root__: Annotated[List[Message], Field(max_items=15, min_items=1)]


class Tag(BaseModel):
    """
    A list of key/value pairs that identify a bot, bot alias, or bot channel. Tag keys and values can consist of Unicode letters, digits, white space, and any of the following symbols: _ . : / = + - @.
    """

    key: TagKey
    value: TagValue


class LogSettingsRequestList(BaseModel):
    __root__: List[LogSettingsRequest]


class Prompt(BaseModel):
    """
    Obtains information from the user. To define a prompt, provide one or more messages and specify the number of attempts to get information from the user. If you provide more than one message, Amazon Lex chooses one of the messages to use to prompt the user. For more information, see <a>how-it-works</a>.
    """

    messages: MessageList
    maxAttempts: PromptMaxAttempts
    responseCard: Optional[ResponseCard] = None


class Statement(BaseModel):
    """
    A collection of messages that convey information to the user. At runtime, Amazon Lex selects the message to convey.
    """

    messages: MessageList
    responseCard: Optional[ResponseCard] = None


class InputContext(BaseModel):
    """
    The name of a context that must be active for an intent to be selected by Amazon Lex.
    """

    name: InputContextName


class OutputContext(BaseModel):
    """
    The specification of an output context that is set when an intent is fulfilled.
    """

    name: OutputContextName
    timeToLiveInSeconds: ContextTimeToLiveInSeconds
    turnsToLive: ContextTurnsToLive


class EnumerationValue(BaseModel):
    """
    <p>Each slot type can have a set of values. Each enumeration value represents a value the slot type can take. </p> <p>For example, a pizza ordering bot could have a slot type that specifies the type of crust that the pizza should have. The slot type could include the values </p> <ul> <li> <p>thick</p> </li> <li> <p>thin</p> </li> <li> <p>stuffed</p> </li> </ul>
    """

    value: Value
    synonyms: Optional[SynonymList] = None


class SlotTypeConfiguration(BaseModel):
    """
    Provides configuration information for a slot type.
    """

    regexConfiguration: Optional[SlotTypeRegexConfiguration] = None


class StartMigrationResponse(BaseModel):
    v1BotName: Optional[BotName] = None
    v1BotVersion: Optional[Version] = None
    v1BotLocale: Optional[Locale] = None
    v2BotId: Optional[V2BotId] = None
    v2BotRole: Optional[IamRoleArn] = None
    migrationId: Optional[MigrationId] = None
    migrationStrategy: Optional[MigrationStrategy] = None
    migrationTimestamp: Optional[Timestamp] = None


class LocaleList(BaseModel):
    __root__: List[Locale]


class BuiltinIntentMetadata(BaseModel):
    """
    Provides metadata for a built-in intent.
    """

    signature: Optional[BuiltinIntentSignature] = None
    supportedLocales: Optional[LocaleList] = None


class BuiltinIntentMetadataList(BaseModel):
    __root__: List[BuiltinIntentMetadata]


class BuiltinSlotTypeMetadata(BaseModel):
    """
    Provides information about a built in slot type.
    """

    signature: Optional[BuiltinSlotTypeSignature] = None
    supportedLocales: Optional[LocaleList] = None


class BuiltinSlotTypeMetadataList(BaseModel):
    __root__: List[BuiltinSlotTypeMetadata]


class ConversationLogsRequest(BaseModel):
    """
    Provides the settings needed for conversation logs.
    """

    logSettings: LogSettingsRequestList
    iamRoleArn: IamRoleArn


class LogSettingsResponseList(BaseModel):
    __root__: List[LogSettingsResponse]


class IntentList(BaseModel):
    __root__: List[Intent]


class FollowUpPrompt(BaseModel):
    """
    A prompt for additional activity after an intent is fulfilled. For example, after the <code>OrderPizza</code> intent is fulfilled, you might prompt the user to find out whether the user wants to order drinks.
    """

    prompt: Prompt
    rejectionStatement: Statement


class InputContextList(BaseModel):
    __root__: Annotated[List[InputContext], Field(max_items=5, min_items=0)]


class OutputContextList(BaseModel):
    __root__: Annotated[List[OutputContext], Field(max_items=10, min_items=0)]


class EnumerationValues(BaseModel):
    __root__: Annotated[List[EnumerationValue], Field(max_items=10000, min_items=0)]


class SlotTypeConfigurations(BaseModel):
    __root__: Annotated[List[SlotTypeConfiguration], Field(max_items=10, min_items=0)]


class IntentMetadataList(BaseModel):
    __root__: List[IntentMetadata]


class MigrationSummaryList(BaseModel):
    __root__: List[MigrationSummary]


class SlotTypeMetadataList(BaseModel):
    __root__: List[SlotTypeMetadata]


class UtteranceData(BaseModel):
    """
    Provides information about a single utterance that was made to your bot.
    """

    utteranceString: Optional[UtteranceString] = None
    count: Optional[Count] = None
    distinctUsers: Optional[Count] = None
    firstUtteredDate: Optional[Timestamp] = None
    lastUtteredDate: Optional[Timestamp] = None


class ListOfUtterance(BaseModel):
    __root__: List[UtteranceData]


class TagList(BaseModel):
    __root__: Annotated[List[Tag], Field(max_items=200, min_items=0)]


class UtteranceList(BaseModel):
    """
    Provides a list of utterances that have been made to a specific version of your bot. The list contains a maximum of 100 utterances.
    """

    botVersion: Optional[Version] = None
    utterances: Optional[ListOfUtterance] = None


class MigrationAlertDetails(BaseModel):
    __root__: List[MigrationAlertDetail]


class MigrationAlertReferenceURLs(BaseModel):
    __root__: List[MigrationAlertReferenceURL]


class MigrationAlert(BaseModel):
    """
    Provides information about alerts and warnings that Amazon Lex sends during a migration. The alerts include information about how to resolve the issue.
    """

    type: Optional[MigrationAlertType] = None
    message: Optional[MigrationAlertMessage] = None
    details: Optional[MigrationAlertDetails] = None
    referenceURLs: Optional[MigrationAlertReferenceURLs] = None


class PutBotAliasRequest(BaseModel):
    description: Optional[Description] = None
    botVersion: Version
    checksum: Optional[String] = None
    conversationLogs: Optional[ConversationLogsRequest] = None
    tags: Optional[TagList] = None


class PutBotRequest(BaseModel):
    description: Optional[Description] = None
    intents: Optional[IntentList] = None
    enableModelImprovements: Optional[Boolean] = None
    nluIntentConfidenceThreshold: Optional[ConfidenceThreshold] = None
    clarificationPrompt: Optional[Prompt] = None
    abortStatement: Optional[Statement] = None
    idleSessionTTLInSeconds: Optional[SessionTTL] = None
    voiceId: Optional[String] = None
    checksum: Optional[String] = None
    processBehavior: Optional[ProcessBehavior] = None
    locale: Locale
    childDirected: Boolean
    detectSentiment: Optional[Boolean] = None
    createVersion: Optional[Boolean] = None
    tags: Optional[TagList] = None


class PutSlotTypeRequest(BaseModel):
    description: Optional[Description] = None
    enumerationValues: Optional[EnumerationValues] = None
    checksum: Optional[String] = None
    valueSelectionStrategy: Optional[SlotValueSelectionStrategy] = None
    createVersion: Optional[Boolean] = None
    parentSlotTypeSignature: Optional[CustomOrBuiltinSlotTypeName] = None
    slotTypeConfigurations: Optional[SlotTypeConfigurations] = None


class SlotDefaultValueSpec(BaseModel):
    """
    Contains the default values for a slot. Default values are used when Amazon Lex hasn't determined a value for a slot.
    """

    defaultValueList: SlotDefaultValueList


class StartImportRequest(BaseModel):
    payload: Blob
    resourceType: ResourceType
    mergeStrategy: MergeStrategy
    tags: Optional[TagList] = None


class TagResourceRequest(BaseModel):
    tags: TagList


class CreateBotVersionResponse(BaseModel):
    name: Optional[BotName] = None
    description: Optional[Description] = None
    intents: Optional[IntentList] = None
    clarificationPrompt: Optional[Prompt] = None
    abortStatement: Optional[Statement] = None
    status: Optional[Status] = None
    failureReason: Optional[String] = None
    lastUpdatedDate: Optional[Timestamp] = None
    createdDate: Optional[Timestamp] = None
    idleSessionTTLInSeconds: Optional[SessionTTL] = None
    voiceId: Optional[String] = None
    checksum: Optional[String] = None
    version: Optional[Version] = None
    locale: Optional[Locale] = None
    childDirected: Optional[Boolean] = None
    enableModelImprovements: Optional[Boolean] = None
    detectSentiment: Optional[Boolean] = None


class CreateSlotTypeVersionResponse(BaseModel):
    name: Optional[SlotTypeName] = None
    description: Optional[Description] = None
    enumerationValues: Optional[EnumerationValues] = None
    lastUpdatedDate: Optional[Timestamp] = None
    createdDate: Optional[Timestamp] = None
    version: Optional[Version] = None
    checksum: Optional[String] = None
    valueSelectionStrategy: Optional[SlotValueSelectionStrategy] = None
    parentSlotTypeSignature: Optional[CustomOrBuiltinSlotTypeName] = None
    slotTypeConfigurations: Optional[SlotTypeConfigurations] = None


class GetBotResponse(BaseModel):
    name: Optional[BotName] = None
    description: Optional[Description] = None
    intents: Optional[IntentList] = None
    enableModelImprovements: Optional[Boolean] = None
    nluIntentConfidenceThreshold: Optional[ConfidenceThreshold] = None
    clarificationPrompt: Optional[Prompt] = None
    abortStatement: Optional[Statement] = None
    status: Optional[Status] = None
    failureReason: Optional[String] = None
    lastUpdatedDate: Optional[Timestamp] = None
    createdDate: Optional[Timestamp] = None
    idleSessionTTLInSeconds: Optional[SessionTTL] = None
    voiceId: Optional[String] = None
    checksum: Optional[String] = None
    version: Optional[Version] = None
    locale: Optional[Locale] = None
    childDirected: Optional[Boolean] = None
    detectSentiment: Optional[Boolean] = None


class GetBuiltinIntentResponse(BaseModel):
    signature: Optional[BuiltinIntentSignature] = None
    supportedLocales: Optional[LocaleList] = None
    slots: Optional[BuiltinIntentSlotList] = None


class GetBuiltinIntentsResponse(BaseModel):
    intents: Optional[BuiltinIntentMetadataList] = None
    nextToken: Optional[NextToken] = None


class GetBuiltinSlotTypesResponse(BaseModel):
    slotTypes: Optional[BuiltinSlotTypeMetadataList] = None
    nextToken: Optional[NextToken] = None


class GetIntentVersionsResponse(BaseModel):
    intents: Optional[IntentMetadataList] = None
    nextToken: Optional[NextToken] = None


class GetIntentsResponse(GetIntentVersionsResponse):
    pass


class GetMigrationsResponse(BaseModel):
    migrationSummaries: Optional[MigrationSummaryList] = None
    nextToken: Optional[NextToken] = None


class GetSlotTypeResponse(CreateSlotTypeVersionResponse):
    pass


class GetSlotTypeVersionsResponse(BaseModel):
    slotTypes: Optional[SlotTypeMetadataList] = None
    nextToken: Optional[NextToken] = None


class GetSlotTypesResponse(GetSlotTypeVersionsResponse):
    pass


class ListTagsForResourceResponse(BaseModel):
    tags: Optional[TagList] = None


class PutBotResponse(BaseModel):
    name: Optional[BotName] = None
    description: Optional[Description] = None
    intents: Optional[IntentList] = None
    enableModelImprovements: Optional[Boolean] = None
    nluIntentConfidenceThreshold: Optional[ConfidenceThreshold] = None
    clarificationPrompt: Optional[Prompt] = None
    abortStatement: Optional[Statement] = None
    status: Optional[Status] = None
    failureReason: Optional[String] = None
    lastUpdatedDate: Optional[Timestamp] = None
    createdDate: Optional[Timestamp] = None
    idleSessionTTLInSeconds: Optional[SessionTTL] = None
    voiceId: Optional[String] = None
    checksum: Optional[String] = None
    version: Optional[Version] = None
    locale: Optional[Locale] = None
    childDirected: Optional[Boolean] = None
    createVersion: Optional[Boolean] = None
    detectSentiment: Optional[Boolean] = None
    tags: Optional[TagList] = None


class Slot(BaseModel):
    """
    Identifies the version of a specific slot.
    """

    name: SlotName
    description: Optional[Description] = None
    slotConstraint: SlotConstraint
    slotType: Optional[CustomOrBuiltinSlotTypeName] = None
    slotTypeVersion: Optional[Version] = None
    valueElicitationPrompt: Optional[Prompt] = None
    priority: Optional[Priority] = None
    sampleUtterances: Optional[SlotUtteranceList] = None
    responseCard: Optional[ResponseCard] = None
    obfuscationSetting: Optional[ObfuscationSetting] = None
    defaultValueSpec: Optional[SlotDefaultValueSpec] = None


class PutSlotTypeResponse(BaseModel):
    name: Optional[SlotTypeName] = None
    description: Optional[Description] = None
    enumerationValues: Optional[EnumerationValues] = None
    lastUpdatedDate: Optional[Timestamp] = None
    createdDate: Optional[Timestamp] = None
    version: Optional[Version] = None
    checksum: Optional[String] = None
    valueSelectionStrategy: Optional[SlotValueSelectionStrategy] = None
    createVersion: Optional[Boolean] = None
    parentSlotTypeSignature: Optional[CustomOrBuiltinSlotTypeName] = None
    slotTypeConfigurations: Optional[SlotTypeConfigurations] = None


class StartImportResponse(BaseModel):
    name: Optional[Name] = None
    resourceType: Optional[ResourceType] = None
    mergeStrategy: Optional[MergeStrategy] = None
    importId: Optional[String] = None
    importStatus: Optional[ImportStatus] = None
    tags: Optional[TagList] = None
    createdDate: Optional[Timestamp] = None


class ConversationLogsResponse(BaseModel):
    """
    Contains information about conversation log settings.
    """

    logSettings: Optional[LogSettingsResponseList] = None
    iamRoleArn: Optional[IamRoleArn] = None


class BotAliasMetadata(BaseModel):
    """
    Provides information about a bot alias.
    """

    name: Optional[AliasName] = None
    description: Optional[Description] = None
    botVersion: Optional[Version] = None
    botName: Optional[BotName] = None
    lastUpdatedDate: Optional[Timestamp] = None
    createdDate: Optional[Timestamp] = None
    checksum: Optional[String] = None
    conversationLogs: Optional[ConversationLogsResponse] = None


class BotAliasMetadataList(BaseModel):
    __root__: List[BotAliasMetadata]


class SlotList(BaseModel):
    __root__: Annotated[List[Slot], Field(max_items=100, min_items=0)]


class MigrationAlerts(BaseModel):
    __root__: List[MigrationAlert]


class ListsOfUtterances(BaseModel):
    __root__: List[UtteranceList]


class PutIntentRequest(BaseModel):
    description: Optional[Description] = None
    slots: Optional[SlotList] = None
    sampleUtterances: Optional[IntentUtteranceList] = None
    confirmationPrompt: Optional[Prompt] = None
    rejectionStatement: Optional[Statement] = None
    followUpPrompt: Optional[FollowUpPrompt] = None
    conclusionStatement: Optional[Statement] = None
    dialogCodeHook: Optional[CodeHook] = None
    fulfillmentActivity: Optional[FulfillmentActivity] = None
    parentIntentSignature: Optional[BuiltinIntentSignature] = None
    checksum: Optional[String] = None
    createVersion: Optional[Boolean] = None
    kendraConfiguration: Optional[KendraConfiguration] = None
    inputContexts: Optional[InputContextList] = None
    outputContexts: Optional[OutputContextList] = None


class CreateIntentVersionResponse(BaseModel):
    name: Optional[IntentName] = None
    description: Optional[Description] = None
    slots: Optional[SlotList] = None
    sampleUtterances: Optional[IntentUtteranceList] = None
    confirmationPrompt: Optional[Prompt] = None
    rejectionStatement: Optional[Statement] = None
    followUpPrompt: Optional[FollowUpPrompt] = None
    conclusionStatement: Optional[Statement] = None
    dialogCodeHook: Optional[CodeHook] = None
    fulfillmentActivity: Optional[FulfillmentActivity] = None
    parentIntentSignature: Optional[BuiltinIntentSignature] = None
    lastUpdatedDate: Optional[Timestamp] = None
    createdDate: Optional[Timestamp] = None
    version: Optional[Version] = None
    checksum: Optional[String] = None
    kendraConfiguration: Optional[KendraConfiguration] = None
    inputContexts: Optional[InputContextList] = None
    outputContexts: Optional[OutputContextList] = None


class GetBotAliasResponse(BotAliasMetadata):
    pass


class GetBotAliasesResponse(BaseModel):
    BotAliases: Optional[BotAliasMetadataList] = None
    nextToken: Optional[NextToken] = None


class GetIntentResponse(CreateIntentVersionResponse):
    pass


class GetMigrationResponse(BaseModel):
    migrationId: Optional[MigrationId] = None
    v1BotName: Optional[BotName] = None
    v1BotVersion: Optional[Version] = None
    v1BotLocale: Optional[Locale] = None
    v2BotId: Optional[V2BotId] = None
    v2BotRole: Optional[IamRoleArn] = None
    migrationStatus: Optional[MigrationStatus] = None
    migrationStrategy: Optional[MigrationStrategy] = None
    migrationTimestamp: Optional[Timestamp] = None
    alerts: Optional[MigrationAlerts] = None


class GetUtterancesViewResponse(BaseModel):
    botName: Optional[BotName] = None
    utterances: Optional[ListsOfUtterances] = None


class PutBotAliasResponse(BaseModel):
    name: Optional[AliasName] = None
    description: Optional[Description] = None
    botVersion: Optional[Version] = None
    botName: Optional[BotName] = None
    lastUpdatedDate: Optional[Timestamp] = None
    createdDate: Optional[Timestamp] = None
    checksum: Optional[String] = None
    conversationLogs: Optional[ConversationLogsResponse] = None
    tags: Optional[TagList] = None


class PutIntentResponse(BaseModel):
    name: Optional[IntentName] = None
    description: Optional[Description] = None
    slots: Optional[SlotList] = None
    sampleUtterances: Optional[IntentUtteranceList] = None
    confirmationPrompt: Optional[Prompt] = None
    rejectionStatement: Optional[Statement] = None
    followUpPrompt: Optional[FollowUpPrompt] = None
    conclusionStatement: Optional[Statement] = None
    dialogCodeHook: Optional[CodeHook] = None
    fulfillmentActivity: Optional[FulfillmentActivity] = None
    parentIntentSignature: Optional[BuiltinIntentSignature] = None
    lastUpdatedDate: Optional[Timestamp] = None
    createdDate: Optional[Timestamp] = None
    version: Optional[Version] = None
    checksum: Optional[String] = None
    createVersion: Optional[Boolean] = None
    kendraConfiguration: Optional[KendraConfiguration] = None
    inputContexts: Optional[InputContextList] = None
    outputContexts: Optional[OutputContextList] = None
