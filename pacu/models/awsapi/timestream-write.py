# generated by datamodel-codegen:
#   filename:  openapi.yaml
#   timestamp: 2021-12-31T02:59:12+00:00

from __future__ import annotations

from datetime import datetime
from enum import Enum
from typing import Annotated, Any, List, Optional

from pydantic import BaseModel, Field


class ConflictException(BaseModel):
    __root__: Any


class ValidationException(ConflictException):
    pass


class AccessDeniedException(ConflictException):
    pass


class ServiceQuotaExceededException(ConflictException):
    pass


class ThrottlingException(ConflictException):
    pass


class InvalidEndpointException(ConflictException):
    pass


class InternalServerException(ConflictException):
    pass


class ResourceNotFoundException(ConflictException):
    pass


class DescribeEndpointsRequest(BaseModel):
    pass


class TagResourceResponse(BaseModel):
    pass


class UntagResourceResponse(TagResourceResponse):
    pass


class RejectedRecordsException(ConflictException):
    pass


class AmazonResourceName(BaseModel):
    __root__: Annotated[str, Field(max_length=1011, min_length=1)]


class ResourceName(BaseModel):
    __root__: Annotated[
        str, Field(max_length=64, min_length=3, regex='[a-zA-Z0-9_.-]+')
    ]


class StringValue2048(BaseModel):
    __root__: Annotated[str, Field(max_length=2048, min_length=1)]


class String(BaseModel):
    __root__: str


class Long(BaseModel):
    __root__: int


class Date(BaseModel):
    __root__: datetime


class StringValue256(BaseModel):
    __root__: Annotated[str, Field(max_length=256, min_length=1)]


class DimensionValueType(Enum):
    VARCHAR = 'VARCHAR'


class Dimension(BaseModel):
    """
    Dimension represents the meta data attributes of the time series. For example, the name and availability zone of an EC2 instance or the name of the manufacturer of a wind turbine are dimensions.
    """

    Name: StringValue256
    Value: StringValue2048
    DimensionValueType: Optional[DimensionValueType] = None


class Dimensions(BaseModel):
    __root__: Annotated[List[Dimension], Field(max_items=128)]


class Endpoint(BaseModel):
    """
    Represents an available endpoint against which to make API calls agaisnt, as well as the TTL for that endpoint.
    """

    Address: String
    CachePeriodInMinutes: Long


class PaginationLimit(BaseModel):
    __root__: Annotated[int, Field(ge=1.0, le=20.0)]


class MagneticStoreRetentionPeriodInDays(BaseModel):
    __root__: Annotated[int, Field(ge=1.0, le=73000.0)]


class MeasureValueType(Enum):
    DOUBLE = 'DOUBLE'
    BIGINT = 'BIGINT'
    VARCHAR = 'VARCHAR'
    BOOLEAN = 'BOOLEAN'


class MemoryStoreRetentionPeriodInHours(BaseModel):
    __root__: Annotated[int, Field(ge=1.0, le=8766.0)]


class TimeUnit(Enum):
    MILLISECONDS = 'MILLISECONDS'
    SECONDS = 'SECONDS'
    MICROSECONDS = 'MICROSECONDS'
    NANOSECONDS = 'NANOSECONDS'


class RecordVersion(Long):
    pass


class Record(BaseModel):
    """
    Record represents a time series data point being written into Timestream. Each record contains an array of dimensions. Dimensions represent the meta data attributes of a time series data point such as the instance name or availability zone of an EC2 instance. A record also contains the measure name which is the name of the measure being collected for example the CPU utilization of an EC2 instance. A record also contains the measure value and the value type which is the data type of the measure value. In addition, the record contains the timestamp when the measure was collected that the timestamp unit which represents the granularity of the timestamp.
    """

    Dimensions: Optional[Dimensions] = None
    MeasureName: Optional[StringValue256] = None
    MeasureValue: Optional[StringValue2048] = None
    MeasureValueType: Optional[MeasureValueType] = None
    Time: Optional[StringValue256] = None
    TimeUnit: Optional[TimeUnit] = None
    Version: Optional[RecordVersion] = None


class Records(BaseModel):
    __root__: Annotated[List[Record], Field(max_items=100, min_items=1)]


class TableStatus(Enum):
    ACTIVE = 'ACTIVE'
    DELETING = 'DELETING'


class TagKey(BaseModel):
    __root__: Annotated[str, Field(max_length=128, min_length=1)]


class TagValue(BaseModel):
    __root__: Annotated[str, Field(max_length=256, min_length=0)]


class Tag(BaseModel):
    """
    A tag is a label that you assign to a Timestream database and/or table. Each tag consists of a key and an optional value, both of which you define. Tags enable you to categorize databases and/or tables, for example, by purpose, owner, or environment.
    """

    Key: TagKey
    Value: TagValue


class TagKeyList(BaseModel):
    __root__: Annotated[List[TagKey], Field(max_items=200, min_items=0)]


class DeleteDatabaseRequest(BaseModel):
    DatabaseName: ResourceName


class DeleteTableRequest(BaseModel):
    DatabaseName: ResourceName
    TableName: ResourceName


class DescribeDatabaseRequest(BaseModel):
    DatabaseName: ResourceName


class DescribeTableRequest(BaseModel):
    DatabaseName: ResourceName
    TableName: ResourceName


class ListDatabasesRequest(BaseModel):
    NextToken: Optional[String] = None
    MaxResults: Optional[PaginationLimit] = None


class ListTablesRequest(BaseModel):
    DatabaseName: Optional[ResourceName] = None
    NextToken: Optional[String] = None
    MaxResults: Optional[PaginationLimit] = None


class ListTagsForResourceRequest(BaseModel):
    ResourceARN: AmazonResourceName


class UntagResourceRequest(BaseModel):
    ResourceARN: AmazonResourceName
    TagKeys: TagKeyList


class UpdateDatabaseRequest(BaseModel):
    DatabaseName: ResourceName
    KmsKeyId: StringValue2048


class WriteRecordsRequest(BaseModel):
    DatabaseName: ResourceName
    TableName: ResourceName
    CommonAttributes: Optional[Record] = None
    Records: Records


class TagList(BaseModel):
    __root__: Annotated[List[Tag], Field(max_items=200, min_items=0)]


class Database(BaseModel):
    """
    A top level container for a table. Databases and tables are the fundamental management concepts in Amazon Timestream. All tables in a database are encrypted with the same KMS key.
    """

    Arn: Optional[String] = None
    DatabaseName: Optional[ResourceName] = None
    TableCount: Optional[Long] = None
    KmsKeyId: Optional[StringValue2048] = None
    CreationTime: Optional[Date] = None
    LastUpdatedTime: Optional[Date] = None


class RetentionProperties(BaseModel):
    """
    Retention properties contain the duration for which your time series data must be stored in the magnetic store and the memory store.
    """

    MemoryStoreRetentionPeriodInHours: MemoryStoreRetentionPeriodInHours
    MagneticStoreRetentionPeriodInDays: MagneticStoreRetentionPeriodInDays


class Table(BaseModel):
    """
    Table represents a database table in Timestream. Tables contain one or more related time series. You can modify the retention duration of the memory store and the magnetic store for a table.
    """

    Arn: Optional[String] = None
    TableName: Optional[ResourceName] = None
    DatabaseName: Optional[ResourceName] = None
    TableStatus: Optional[TableStatus] = None
    RetentionProperties: Optional[RetentionProperties] = None
    CreationTime: Optional[Date] = None
    LastUpdatedTime: Optional[Date] = None


class DatabaseList(BaseModel):
    __root__: List[Database]


class Endpoints(BaseModel):
    __root__: List[Endpoint]


class TableList(BaseModel):
    __root__: List[Table]


class CreateDatabaseResponse(BaseModel):
    Database: Optional[Database] = None


class CreateDatabaseRequest(BaseModel):
    DatabaseName: ResourceName
    KmsKeyId: Optional[StringValue2048] = None
    Tags: Optional[TagList] = None


class CreateTableResponse(BaseModel):
    Table: Optional[Table] = None


class CreateTableRequest(BaseModel):
    DatabaseName: ResourceName
    TableName: ResourceName
    RetentionProperties: Optional[RetentionProperties] = None
    Tags: Optional[TagList] = None


class DescribeDatabaseResponse(CreateDatabaseResponse):
    pass


class DescribeEndpointsResponse(BaseModel):
    Endpoints: Endpoints


class DescribeTableResponse(CreateTableResponse):
    pass


class ListDatabasesResponse(BaseModel):
    Databases: Optional[DatabaseList] = None
    NextToken: Optional[String] = None


class ListTablesResponse(BaseModel):
    Tables: Optional[TableList] = None
    NextToken: Optional[String] = None


class ListTagsForResourceResponse(BaseModel):
    Tags: Optional[TagList] = None


class TagResourceRequest(BaseModel):
    ResourceARN: AmazonResourceName
    Tags: TagList


class UpdateDatabaseResponse(CreateDatabaseResponse):
    pass


class UpdateTableResponse(CreateTableResponse):
    pass


class UpdateTableRequest(BaseModel):
    DatabaseName: ResourceName
    TableName: ResourceName
    RetentionProperties: RetentionProperties
