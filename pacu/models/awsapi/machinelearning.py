# generated by datamodel-codegen:
#   filename:  openapi.yaml
#   timestamp: 2021-12-31T02:52:01+00:00

from __future__ import annotations

from datetime import datetime
from enum import Enum
from typing import Annotated, Any, List, Optional

from pydantic import BaseModel, Extra, Field


class InvalidInputException(BaseModel):
    __root__: Any


class InvalidTagException(InvalidInputException):
    pass


class TagLimitExceededException(InvalidInputException):
    pass


class ResourceNotFoundException(InvalidInputException):
    pass


class InternalServerException(InvalidInputException):
    pass


class IdempotentParameterMismatchException(InvalidInputException):
    pass


class LimitExceededException(InvalidInputException):
    pass


class PredictorNotMountedException(InvalidInputException):
    pass


class EntityId(BaseModel):
    __root__: Annotated[
        str, Field(max_length=64, min_length=1, regex='[a-zA-Z0-9_.-]+')
    ]


class TaggableResourceType(Enum):
    BatchPrediction = 'BatchPrediction'
    DataSource = 'DataSource'
    Evaluation = 'Evaluation'
    MLModel = 'MLModel'


class Algorithm(Enum):
    """
    <p>The function used to train an <code>MLModel</code>. Training choices supported by Amazon ML include the following:</p> <ul> <li> <p> <code>SGD</code> - Stochastic Gradient Descent.</p> </li> <li> <p> <code>RandomForest</code> - Random forest of decision trees.</p> </li> </ul>
    """

    sgd = 'sgd'


class AwsUserArn(BaseModel):
    __root__: Annotated[
        str,
        Field(
            description='An Amazon Web Service (AWS) user account identifier. The account identifier can be an AWS root account or an AWS Identity and Access Management (IAM) user.',
            regex='arn:aws:iam::[0-9]+:((user/.+)|(root))',
        ),
    ]


class S3Url(BaseModel):
    __root__: Annotated[
        str,
        Field(
            description='A reference to a file or bucket on Amazon Simple Storage Service (Amazon S3).',
            max_length=2048,
            regex='s3://([^/]+)(/.*)?',
        ),
    ]


class EpochTime(BaseModel):
    __root__: Annotated[
        datetime, Field(description='A timestamp represented in epoch time.')
    ]


class EntityName(BaseModel):
    __root__: Annotated[
        str,
        Field(
            description='A user-supplied name or description of the Amazon ML resource.',
            max_length=1024,
            regex='.*\\S.*|^$',
        ),
    ]


class EntityStatus(Enum):
    """
    <p>Object status with the following possible values:</p> <ul> <li> <p> <code>PENDING</code> </p> </li> <li> <p> <code>INPROGRESS</code> </p> </li> <li> <p> <code>FAILED</code> </p> </li> <li> <p> <code>COMPLETED</code> </p> </li> <li> <p> <code>DELETED</code> </p> </li> </ul>
    """

    PENDING = 'PENDING'
    INPROGRESS = 'INPROGRESS'
    FAILED = 'FAILED'
    COMPLETED = 'COMPLETED'
    DELETED = 'DELETED'


class Message(BaseModel):
    __root__: Annotated[
        str,
        Field(
            description='Description of the most recent details about an object.',
            max_length=10240,
        ),
    ]


class LongType(BaseModel):
    __root__: Annotated[
        int, Field(description='Long integer type that is a 64-bit signed number.')
    ]


class BatchPrediction(BaseModel):
    """
    <p> Represents the output of a <code>GetBatchPrediction</code> operation.</p> <p> The content consists of the detailed metadata, the status, and the data file information of a <code>Batch Prediction</code>.</p>
    """

    BatchPredictionId: Optional[EntityId] = None
    MLModelId: Optional[EntityId] = None
    BatchPredictionDataSourceId: Optional[EntityId] = None
    InputDataLocationS3: Optional[S3Url] = None
    CreatedByIamUser: Optional[AwsUserArn] = None
    CreatedAt: Optional[EpochTime] = None
    LastUpdatedAt: Optional[EpochTime] = None
    Name: Optional[EntityName] = None
    Status: Optional[EntityStatus] = None
    OutputUri: Optional[S3Url] = None
    Message: Optional[Message] = None
    ComputeTime: Optional[LongType] = None
    FinishedAt: Optional[EpochTime] = None
    StartedAt: Optional[EpochTime] = None
    TotalRecordCount: Optional[LongType] = None
    InvalidRecordCount: Optional[LongType] = None


class BatchPredictionFilterVariable(Enum):
    """
    <p>A list of the variables to use in searching or filtering <code>BatchPrediction</code>.</p> <ul> <li> <p> <code>CreatedAt</code> - Sets the search criteria to <code>BatchPrediction</code> creation date.</p> </li> <li> <p> <code>Status</code> - Sets the search criteria to <code>BatchPrediction</code> status.</p> </li> <li> <p> <code>Name</code> - Sets the search criteria to the contents of <code>BatchPrediction</code> <code>Name</code>.</p> </li> <li> <p> <code>IAMUser</code> - Sets the search criteria to the user account that invoked the <code>BatchPrediction</code> creation.</p> </li> <li> <p> <code>MLModelId</code> - Sets the search criteria to the <code>MLModel</code> used in the <code>BatchPrediction</code>.</p> </li> <li> <p> <code>DataSourceId</code> - Sets the search criteria to the <code>DataSource</code> used in the <code>BatchPrediction</code>.</p> </li> <li> <p> <code>DataURI</code> - Sets the search criteria to the data file(s) used in the <code>BatchPrediction</code>. The URL can identify either a file or an Amazon Simple Storage Service (Amazon S3) bucket or directory.</p> </li> </ul>
    """

    CreatedAt = 'CreatedAt'
    LastUpdatedAt = 'LastUpdatedAt'
    Status = 'Status'
    Name = 'Name'
    IAMUser = 'IAMUser'
    MLModelId = 'MLModelId'
    DataSourceId = 'DataSourceId'
    DataURI = 'DataURI'


class BatchPredictions(BaseModel):
    __root__: List[BatchPrediction]


class ComparatorValue(BaseModel):
    __root__: Annotated[
        str,
        Field(
            description='The value specified in a filtering condition. The <code>ComparatorValue</code> becomes the reference value when matching or evaluating data values in filtering and searching functions.',
            max_length=1024,
            regex='.*\\S.*|^$',
        ),
    ]


class ComputeStatistics(BaseModel):
    __root__: bool


class RoleARN(BaseModel):
    __root__: Annotated[
        str,
        Field(
            description='The Amazon Resource Name (ARN) of an <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/roles-toplevel.html#roles-about-termsandconcepts">AWS IAM Role</a>, such as the following: arn:aws:iam::account:role/rolename. ',
            max_length=110,
            min_length=1,
        ),
    ]


class MLModelType(Enum):
    REGRESSION = 'REGRESSION'
    BINARY = 'BINARY'
    MULTICLASS = 'MULTICLASS'


class TrainingParameters(BaseModel):
    pass

    class Config:
        extra = Extra.allow


class Recipe(BaseModel):
    __root__: Annotated[str, Field(max_length=131071)]


class DataRearrangement(BaseModel):
    __root__: str


class DataSchema(BaseModel):
    __root__: Annotated[
        str,
        Field(
            description='<p>The schema of a <code>DataSource</code>. The <code>DataSchema</code> defines the structure of the observation data in the data file(s) referenced in the <code>DataSource</code>. The DataSource schema is expressed in JSON format.</p> <p> <code>DataSchema</code> is not required if you specify a <code>DataSchemaUri</code> </p> <p>{ "version": "1.0", "recordAnnotationFieldName": "F1", "recordWeightFieldName": "F2", "targetFieldName": "F3", "dataFormat": "CSV", "dataFileContainsHeader": true, "variables": [ { "fieldName": "F1", "fieldType": "TEXT" }, { "fieldName": "F2", "fieldType": "NUMERIC" }, { "fieldName": "F3", "fieldType": "CATEGORICAL" }, { "fieldName": "F4", "fieldType": "NUMERIC" }, { "fieldName": "F5", "fieldType": "CATEGORICAL" }, { "fieldName": "F6", "fieldType": "TEXT" }, { "fieldName": "F7", "fieldType": "WEIGHTED_INT_SEQUENCE" }, { "fieldName": "F8", "fieldType": "WEIGHTED_STRING_SEQUENCE" } ], "excludedVariableNames": [ "F6" ] }</p>',
            max_length=131071,
        ),
    ]


class DataSourceFilterVariable(Enum):
    """
    <p>A list of the variables to use in searching or filtering <code>DataSource</code>.</p> <ul> <li> <p> <code>CreatedAt</code> - Sets the search criteria to <code>DataSource</code> creation date.</p> </li> <li> <p> <code>Status</code> - Sets the search criteria to <code>DataSource</code> status.</p> </li> <li> <p> <code>Name</code> - Sets the search criteria to the contents of <code>DataSource</code> <code>Name</code>.</p> </li> <li> <p> <code>DataUri</code> - Sets the search criteria to the URI of data files used to create the <code>DataSource</code>. The URI can identify either a file or an Amazon Simple Storage Service (Amazon S3) bucket or directory.</p> </li> <li> <p> <code>IAMUser</code> - Sets the search criteria to the user account that invoked the <code>DataSource</code> creation.</p> </li> </ul> <p> <b>Note:</b> The variable names should match the variable names in the <code>DataSource</code>.</p>
    """

    CreatedAt = 'CreatedAt'
    LastUpdatedAt = 'LastUpdatedAt'
    Status = 'Status'
    Name = 'Name'
    DataLocationS3 = 'DataLocationS3'
    IAMUser = 'IAMUser'


class SortOrder(Enum):
    """
    <p>The sort order specified in a listing condition. Possible values include the following:</p> <ul> <li> <p> <code>asc</code> - Present the information in ascending order (from A-Z).</p> </li> <li> <p> <code>dsc</code> - Present the information in descending order (from Z-A).</p> </li> </ul>
    """

    asc = 'asc'
    dsc = 'dsc'


class StringType(BaseModel):
    __root__: Annotated[str, Field(description='String type.')]


class PageLimit(BaseModel):
    __root__: Annotated[int, Field(ge=1.0, le=100.0)]


class MLModelFilterVariable(Enum):
    CreatedAt = 'CreatedAt'
    LastUpdatedAt = 'LastUpdatedAt'
    Status = 'Status'
    Name = 'Name'
    IAMUser = 'IAMUser'
    TrainingDataSourceId = 'TrainingDataSourceId'
    RealtimeEndpointStatus = 'RealtimeEndpointStatus'
    MLModelType = 'MLModelType'
    Algorithm = 'Algorithm'
    TrainingDataURI = 'TrainingDataURI'


class DetailsAttributes(Enum):
    """
    <p>Contains the key values of <code>DetailsMap</code>:</p> <ul> <li> <p> <code>PredictiveModelType</code> - Indicates the type of the <code>MLModel</code>.</p> </li> <li> <p> <code>Algorithm</code> - Indicates the algorithm that was used for the <code>MLModel</code>.</p> </li> </ul>
    """

    PredictiveModelType = 'PredictiveModelType'
    Algorithm = 'Algorithm'


class DetailsValue(BaseModel):
    __root__: Annotated[str, Field(min_length=1)]


class DetailsMap(BaseModel):
    """
    Provides any additional details regarding the prediction.
    """

    pass

    class Config:
        extra = Extra.allow


class EDPPipelineId(BaseModel):
    __root__: Annotated[str, Field(max_length=1024, min_length=1)]


class EDPResourceRole(BaseModel):
    __root__: Annotated[str, Field(max_length=64, min_length=1)]


class EDPSecurityGroupId(BaseModel):
    __root__: Annotated[str, Field(max_length=255, min_length=1)]


class EDPSecurityGroupIds(BaseModel):
    __root__: List[EDPSecurityGroupId]


class EDPServiceRole(EDPResourceRole):
    pass


class EDPSubnetId(EDPSecurityGroupId):
    pass


class PresignedS3Url(DataRearrangement):
    pass


class Verbose(BaseModel):
    __root__: Annotated[
        bool,
        Field(
            description='Specifies whether a describe operation should return exhaustive or abbreviated information.'
        ),
    ]


class MLModelName(BaseModel):
    __root__: Annotated[str, Field(max_length=1024)]


class ScoreThreshold(BaseModel):
    __root__: float


class IntegerType(BaseModel):
    __root__: Annotated[
        int, Field(description='Integer type that is a 32-bit signed number.')
    ]


class Label(DetailsValue):
    pass


class PerformanceMetricsProperties(BaseModel):
    pass

    class Config:
        extra = Extra.allow


class PerformanceMetricsPropertyValue(DataRearrangement):
    pass


class PerformanceMetricsPropertyKey(DataRearrangement):
    pass


class Record(BaseModel):
    """
    A map of variable name-value pairs that represent an observation.
    """

    pass

    class Config:
        extra = Extra.allow


class VipURL(BaseModel):
    __root__: Annotated[
        str,
        Field(max_length=2048, regex='https://[a-zA-Z0-9-.]*\\.amazon(aws)?\\.com[/]?'),
    ]


class FloatLabel(ScoreThreshold):
    pass


class ScoreValuePerLabelMap(BaseModel):
    """
    Provides the raw classification score corresponding to each label.
    """

    pass

    class Config:
        extra = Extra.allow


class RDSSelectSqlQuery(BaseModel):
    __root__: Annotated[
        str,
        Field(
            description='The SQL query to be executed against the Amazon RDS database. The SQL query should be valid for the Amazon RDS type being used.',
            max_length=16777216,
            min_length=1,
        ),
    ]


class RDSInstanceIdentifier(BaseModel):
    __root__: Annotated[
        str,
        Field(
            description='Identifier of RDS DB Instances.',
            max_length=63,
            min_length=1,
            regex='[a-z0-9-]+',
        ),
    ]


class RDSDatabaseName(BaseModel):
    __root__: Annotated[
        str,
        Field(
            description='The name of a database hosted on an RDS DB instance.',
            max_length=64,
            min_length=1,
        ),
    ]


class RDSDatabaseUsername(BaseModel):
    __root__: Annotated[
        str,
        Field(
            description='The username to be used by Amazon ML to connect to database on an Amazon RDS instance. The username should have sufficient permissions to execute an <code>RDSSelectSqlQuery</code> query.',
            max_length=128,
            min_length=1,
        ),
    ]


class RDSDatabasePassword(BaseModel):
    __root__: Annotated[
        str,
        Field(
            description='The password to be used by Amazon ML to connect to a database on an RDS DB instance. The password should have sufficient permissions to execute the <code>RDSSelectQuery</code> query.',
            max_length=128,
            min_length=8,
        ),
    ]


class RealtimeEndpointStatus(Enum):
    NONE = 'NONE'
    READY = 'READY'
    UPDATING = 'UPDATING'
    FAILED = 'FAILED'


class VariableValue(BaseModel):
    __root__: Annotated[
        str,
        Field(
            description="The value of a variable. Currently it's used to specify values of the target value, weights, and tag variables and for filtering variable values."
        ),
    ]


class RedshiftClusterIdentifier(BaseModel):
    __root__: Annotated[
        str,
        Field(
            description='The ID of an Amazon Redshift cluster.',
            max_length=63,
            min_length=1,
            regex='[a-z0-9-]+',
        ),
    ]


class RedshiftSelectSqlQuery(BaseModel):
    __root__: Annotated[
        str,
        Field(
            description=' Describes the SQL query to execute on the Amazon Redshift database. The SQL query should be valid for an Amazon Redshift <a href="https://docs.aws.amazon.com/redshift/latest/dg/r_SELECT_synopsis.html">SELECT</a>. ',
            max_length=16777216,
            min_length=1,
        ),
    ]


class RedshiftDatabaseName(BaseModel):
    __root__: Annotated[
        str,
        Field(
            description='The name of a database hosted on an Amazon Redshift cluster.',
            max_length=64,
            min_length=1,
            regex='[a-z0-9]+',
        ),
    ]


class RedshiftDatabaseUsername(BaseModel):
    __root__: Annotated[
        str,
        Field(
            description='A username to be used by Amazon Machine Learning (Amazon ML)to connect to a database on an Amazon Redshift cluster. The username should have sufficient permissions to execute the <code>RedshiftSelectSqlQuery</code> query. The username should be valid for an Amazon Redshift <a href="https://docs.aws.amazon.com/redshift/latest/dg/r_CREATE_USER.html">USER</a>.',
            max_length=128,
            min_length=1,
        ),
    ]


class RedshiftDatabasePassword(BaseModel):
    __root__: Annotated[
        str,
        Field(
            description='A password to be used by Amazon ML to connect to a database on an Amazon Redshift cluster. The password should have sufficient permissions to execute a <code>RedshiftSelectSqlQuery</code> query. The password should be valid for an Amazon Redshift <a href="https://docs.aws.amazon.com/redshift/latest/dg/r_CREATE_USER.html">USER</a>.',
            max_length=64,
            min_length=8,
        ),
    ]


class ScoreValue(ScoreThreshold):
    pass


class TagKey(BaseModel):
    __root__: Annotated[
        str,
        Field(
            max_length=128, min_length=1, regex='^([\\p{L}\\p{Z}\\p{N}_.:/=+\\-@]*)$'
        ),
    ]


class TagValue(BaseModel):
    __root__: Annotated[
        str,
        Field(
            max_length=256, min_length=0, regex='^([\\p{L}\\p{Z}\\p{N}_.:/=+\\-@]*)$'
        ),
    ]


class Tag(BaseModel):
    """
    A custom key-value pair associated with an ML object, such as an ML model.
    """

    Key: Optional[TagKey] = None
    Value: Optional[TagValue] = None


class VariableName(BaseModel):
    __root__: Annotated[
        str,
        Field(
            description="The name of a variable. Currently it's used to specify the name of the target value, label, weight, and tags."
        ),
    ]


class AddTagsOutput(BaseModel):
    """
    Amazon ML returns the following elements.
    """

    ResourceId: Optional[EntityId] = None
    ResourceType: Optional[TaggableResourceType] = None


class CreateBatchPredictionOutput(BaseModel):
    """
    <p> Represents the output of a <code>CreateBatchPrediction</code> operation, and is an acknowledgement that Amazon ML received the request.</p> <p>The <code>CreateBatchPrediction</code> operation is asynchronous. You can poll for status updates by using the <code>&gt;GetBatchPrediction</code> operation and checking the <code>Status</code> parameter of the result. </p>
    """

    BatchPredictionId: Optional[EntityId] = None


class CreateBatchPredictionInput(BaseModel):
    BatchPredictionId: EntityId
    BatchPredictionName: Optional[EntityName] = None
    MLModelId: EntityId
    BatchPredictionDataSourceId: EntityId
    OutputUri: S3Url


class CreateDataSourceFromRDSOutput(BaseModel):
    """
    <p> Represents the output of a <code>CreateDataSourceFromRDS</code> operation, and is an acknowledgement that Amazon ML received the request.</p> <p>The <code>CreateDataSourceFromRDS</code>&gt; operation is asynchronous. You can poll for updates by using the <code>GetBatchPrediction</code> operation and checking the <code>Status</code> parameter. You can inspect the <code>Message</code> when <code>Status</code> shows up as <code>FAILED</code>. You can also check the progress of the copy operation by going to the <code>DataPipeline</code> console and looking up the pipeline using the <code>pipelineId </code> from the describe call.</p>
    """

    DataSourceId: Optional[EntityId] = None


class CreateDataSourceFromRedshiftOutput(CreateDataSourceFromRDSOutput):
    """
    <p> Represents the output of a <code>CreateDataSourceFromRedshift</code> operation, and is an acknowledgement that Amazon ML received the request.</p> <p>The <code>CreateDataSourceFromRedshift</code> operation is asynchronous. You can poll for updates by using the <code>GetBatchPrediction</code> operation and checking the <code>Status</code> parameter. </p>
    """

    pass


class CreateDataSourceFromS3Output(CreateDataSourceFromRDSOutput):
    """
    <p> Represents the output of a <code>CreateDataSourceFromS3</code> operation, and is an acknowledgement that Amazon ML received the request.</p> <p>The <code>CreateDataSourceFromS3</code> operation is asynchronous. You can poll for updates by using the <code>GetBatchPrediction</code> operation and checking the <code>Status</code> parameter. </p>
    """

    pass


class CreateEvaluationOutput(BaseModel):
    """
    <p> Represents the output of a <code>CreateEvaluation</code> operation, and is an acknowledgement that Amazon ML received the request.</p> <p> <code>CreateEvaluation</code> operation is asynchronous. You can poll for status updates by using the <code>GetEvcaluation</code> operation and checking the <code>Status</code> parameter. </p>
    """

    EvaluationId: Optional[EntityId] = None


class CreateEvaluationInput(BaseModel):
    EvaluationId: EntityId
    EvaluationName: Optional[EntityName] = None
    MLModelId: EntityId
    EvaluationDataSourceId: EntityId


class CreateMLModelOutput(BaseModel):
    """
    <p> Represents the output of a <code>CreateMLModel</code> operation, and is an acknowledgement that Amazon ML received the request.</p> <p>The <code>CreateMLModel</code> operation is asynchronous. You can poll for status updates by using the <code>GetMLModel</code> operation and checking the <code>Status</code> parameter. </p>
    """

    MLModelId: Optional[EntityId] = None


class CreateMLModelInput(BaseModel):
    MLModelId: EntityId
    MLModelName: Optional[EntityName] = None
    MLModelType: MLModelType
    Parameters: Optional[TrainingParameters] = None
    TrainingDataSourceId: EntityId
    Recipe: Optional[Recipe] = None
    RecipeUri: Optional[S3Url] = None


class CreateRealtimeEndpointInput(BaseModel):
    MLModelId: EntityId


class DeleteBatchPredictionOutput(CreateBatchPredictionOutput):
    """
    <p> Represents the output of a <code>DeleteBatchPrediction</code> operation.</p> <p>You can use the <code>GetBatchPrediction</code> operation and check the value of the <code>Status</code> parameter to see whether a <code>BatchPrediction</code> is marked as <code>DELETED</code>.</p>
    """

    pass


class DeleteBatchPredictionInput(BaseModel):
    BatchPredictionId: EntityId


class DeleteDataSourceOutput(CreateDataSourceFromRDSOutput):
    """
    Represents the output of a <code>DeleteDataSource</code> operation.
    """

    pass


class DeleteDataSourceInput(BaseModel):
    DataSourceId: EntityId


class DeleteEvaluationOutput(CreateEvaluationOutput):
    """
    <p> Represents the output of a <code>DeleteEvaluation</code> operation. The output indicates that Amazon Machine Learning (Amazon ML) received the request.</p> <p>You can use the <code>GetEvaluation</code> operation and check the value of the <code>Status</code> parameter to see whether an <code>Evaluation</code> is marked as <code>DELETED</code>.</p>
    """

    pass


class DeleteEvaluationInput(BaseModel):
    EvaluationId: EntityId


class DeleteMLModelOutput(CreateMLModelOutput):
    """
    <p>Represents the output of a <code>DeleteMLModel</code> operation.</p> <p>You can use the <code>GetMLModel</code> operation and check the value of the <code>Status</code> parameter to see whether an <code>MLModel</code> is marked as <code>DELETED</code>.</p>
    """

    pass


class DeleteMLModelInput(BaseModel):
    MLModelId: EntityId


class DeleteRealtimeEndpointInput(BaseModel):
    MLModelId: EntityId


class DeleteTagsOutput(AddTagsOutput):
    """
    Amazon ML returns the following elements.
    """

    pass


class DescribeBatchPredictionsOutput(BaseModel):
    """
    Represents the output of a <code>DescribeBatchPredictions</code> operation. The content is essentially a list of <code>BatchPrediction</code>s.
    """

    Results: Optional[BatchPredictions] = None
    NextToken: Optional[StringType] = None


class DescribeBatchPredictionsInput(BaseModel):
    FilterVariable: Optional[BatchPredictionFilterVariable] = None
    EQ: Optional[ComparatorValue] = None
    GT: Optional[ComparatorValue] = None
    LT: Optional[ComparatorValue] = None
    GE: Optional[ComparatorValue] = None
    LE: Optional[ComparatorValue] = None
    NE: Optional[ComparatorValue] = None
    Prefix: Optional[ComparatorValue] = None
    SortOrder: Optional[SortOrder] = None
    NextToken: Optional[StringType] = None
    Limit: Optional[PageLimit] = None


class DescribeDataSourcesInput(BaseModel):
    FilterVariable: Optional[DataSourceFilterVariable] = None
    EQ: Optional[ComparatorValue] = None
    GT: Optional[ComparatorValue] = None
    LT: Optional[ComparatorValue] = None
    GE: Optional[ComparatorValue] = None
    LE: Optional[ComparatorValue] = None
    NE: Optional[ComparatorValue] = None
    Prefix: Optional[ComparatorValue] = None
    SortOrder: Optional[SortOrder] = None
    NextToken: Optional[StringType] = None
    Limit: Optional[PageLimit] = None


class DescribeEvaluationsInput(BaseModel):
    FilterVariable: Optional[BatchPredictionFilterVariable] = None
    EQ: Optional[ComparatorValue] = None
    GT: Optional[ComparatorValue] = None
    LT: Optional[ComparatorValue] = None
    GE: Optional[ComparatorValue] = None
    LE: Optional[ComparatorValue] = None
    NE: Optional[ComparatorValue] = None
    Prefix: Optional[ComparatorValue] = None
    SortOrder: Optional[SortOrder] = None
    NextToken: Optional[StringType] = None
    Limit: Optional[PageLimit] = None


class DescribeMLModelsInput(BaseModel):
    FilterVariable: Optional[MLModelFilterVariable] = None
    EQ: Optional[ComparatorValue] = None
    GT: Optional[ComparatorValue] = None
    LT: Optional[ComparatorValue] = None
    GE: Optional[ComparatorValue] = None
    LE: Optional[ComparatorValue] = None
    NE: Optional[ComparatorValue] = None
    Prefix: Optional[ComparatorValue] = None
    SortOrder: Optional[SortOrder] = None
    NextToken: Optional[StringType] = None
    Limit: Optional[PageLimit] = None


class DescribeTagsInput(BaseModel):
    ResourceId: EntityId
    ResourceType: TaggableResourceType


class GetBatchPredictionOutput(BaseModel):
    """
    Represents the output of a <code>GetBatchPrediction</code> operation and describes a <code>BatchPrediction</code>.
    """

    BatchPredictionId: Optional[EntityId] = None
    MLModelId: Optional[EntityId] = None
    BatchPredictionDataSourceId: Optional[EntityId] = None
    InputDataLocationS3: Optional[S3Url] = None
    CreatedByIamUser: Optional[AwsUserArn] = None
    CreatedAt: Optional[EpochTime] = None
    LastUpdatedAt: Optional[EpochTime] = None
    Name: Optional[EntityName] = None
    Status: Optional[EntityStatus] = None
    OutputUri: Optional[S3Url] = None
    LogUri: Optional[PresignedS3Url] = None
    Message: Optional[Message] = None
    ComputeTime: Optional[LongType] = None
    FinishedAt: Optional[EpochTime] = None
    StartedAt: Optional[EpochTime] = None
    TotalRecordCount: Optional[LongType] = None
    InvalidRecordCount: Optional[LongType] = None


class GetBatchPredictionInput(BaseModel):
    BatchPredictionId: EntityId


class GetDataSourceInput(BaseModel):
    DataSourceId: EntityId
    Verbose: Optional[Verbose] = None


class GetEvaluationInput(BaseModel):
    EvaluationId: EntityId


class GetMLModelInput(BaseModel):
    MLModelId: EntityId
    Verbose: Optional[Verbose] = None


class PredictInput(BaseModel):
    MLModelId: EntityId
    Record: Record
    PredictEndpoint: VipURL


class UpdateBatchPredictionOutput(CreateBatchPredictionOutput):
    """
    <p>Represents the output of an <code>UpdateBatchPrediction</code> operation.</p> <p>You can see the updated content by using the <code>GetBatchPrediction</code> operation.</p>
    """

    pass


class UpdateBatchPredictionInput(BaseModel):
    BatchPredictionId: EntityId
    BatchPredictionName: EntityName


class UpdateDataSourceOutput(CreateDataSourceFromRDSOutput):
    """
    <p>Represents the output of an <code>UpdateDataSource</code> operation.</p> <p>You can see the updated content by using the <code>GetBatchPrediction</code> operation.</p>
    """

    pass


class UpdateDataSourceInput(BaseModel):
    DataSourceId: EntityId
    DataSourceName: EntityName


class UpdateEvaluationOutput(CreateEvaluationOutput):
    """
    <p>Represents the output of an <code>UpdateEvaluation</code> operation.</p> <p>You can see the updated content by using the <code>GetEvaluation</code> operation.</p>
    """

    pass


class UpdateEvaluationInput(BaseModel):
    EvaluationId: EntityId
    EvaluationName: EntityName


class UpdateMLModelOutput(CreateMLModelOutput):
    """
    <p>Represents the output of an <code>UpdateMLModel</code> operation.</p> <p>You can see the updated content by using the <code>GetMLModel</code> operation.</p>
    """

    pass


class UpdateMLModelInput(BaseModel):
    MLModelId: EntityId
    MLModelName: Optional[EntityName] = None
    ScoreThreshold: Optional[ScoreThreshold] = None


class TagList(BaseModel):
    __root__: Annotated[List[Tag], Field(max_items=100)]


class S3DataSpec(BaseModel):
    """
    Describes the data specification of a <code>DataSource</code>.
    """

    DataLocationS3: S3Url
    DataRearrangement: Optional[DataRearrangement] = None
    DataSchema: Optional[DataSchema] = None
    DataSchemaLocationS3: Optional[S3Url] = None


class RealtimeEndpointInfo(BaseModel):
    """
    Describes the real-time endpoint information for an <code>MLModel</code>.
    """

    PeakRequestsPerSecond: Optional[IntegerType] = None
    CreatedAt: Optional[EpochTime] = None
    EndpointUrl: Optional[VipURL] = None
    EndpointStatus: Optional[RealtimeEndpointStatus] = None


class TagKeyList(BaseModel):
    __root__: Annotated[List[TagKey], Field(max_items=100)]


class PerformanceMetrics(BaseModel):
    """
    <p>Measurements of how well the <code>MLModel</code> performed on known observations. One of the following metrics is returned, based on the type of the <code>MLModel</code>: </p> <ul> <li> <p>BinaryAUC: The binary <code>MLModel</code> uses the Area Under the Curve (AUC) technique to measure performance. </p> </li> <li> <p>RegressionRMSE: The regression <code>MLModel</code> uses the Root Mean Square Error (RMSE) technique to measure performance. RMSE measures the difference between predicted and actual values for a single variable.</p> </li> <li> <p>MulticlassAvgFScore: The multiclass <code>MLModel</code> uses the F1 score technique to measure performance. </p> </li> </ul> <p> For more information about performance metrics, please see the <a href="https://docs.aws.amazon.com/machine-learning/latest/dg">Amazon Machine Learning Developer Guide</a>. </p>
    """

    Properties: Optional[PerformanceMetricsProperties] = None


class Evaluation(BaseModel):
    """
    <p> Represents the output of <code>GetEvaluation</code> operation. </p> <p>The content consists of the detailed metadata and data file information and the current status of the <code>Evaluation</code>.</p>
    """

    EvaluationId: Optional[EntityId] = None
    MLModelId: Optional[EntityId] = None
    EvaluationDataSourceId: Optional[EntityId] = None
    InputDataLocationS3: Optional[S3Url] = None
    CreatedByIamUser: Optional[AwsUserArn] = None
    CreatedAt: Optional[EpochTime] = None
    LastUpdatedAt: Optional[EpochTime] = None
    Name: Optional[EntityName] = None
    Status: Optional[EntityStatus] = None
    PerformanceMetrics: Optional[PerformanceMetrics] = None
    Message: Optional[Message] = None
    ComputeTime: Optional[LongType] = None
    FinishedAt: Optional[EpochTime] = None
    StartedAt: Optional[EpochTime] = None


class MLModel(BaseModel):
    """
    <p> Represents the output of a <code>GetMLModel</code> operation. </p> <p>The content consists of the detailed metadata and the current status of the <code>MLModel</code>.</p>
    """

    MLModelId: Optional[EntityId] = None
    TrainingDataSourceId: Optional[EntityId] = None
    CreatedByIamUser: Optional[AwsUserArn] = None
    CreatedAt: Optional[EpochTime] = None
    LastUpdatedAt: Optional[EpochTime] = None
    Name: Optional[MLModelName] = None
    Status: Optional[EntityStatus] = None
    SizeInBytes: Optional[LongType] = None
    EndpointInfo: Optional[RealtimeEndpointInfo] = None
    TrainingParameters: Optional[TrainingParameters] = None
    InputDataLocationS3: Optional[S3Url] = None
    Algorithm: Optional[Algorithm] = None
    MLModelType: Optional[MLModelType] = None
    ScoreThreshold: Optional[ScoreThreshold] = None
    ScoreThresholdLastUpdatedAt: Optional[EpochTime] = None
    Message: Optional[Message] = None
    ComputeTime: Optional[LongType] = None
    FinishedAt: Optional[EpochTime] = None
    StartedAt: Optional[EpochTime] = None


class Prediction(BaseModel):
    """
    <p>The output from a <code>Predict</code> operation: </p> <ul> <li> <p> <code>Details</code> - Contains the following attributes: <code>DetailsAttributes.PREDICTIVE_MODEL_TYPE - REGRESSION | BINARY | MULTICLASS</code> <code>DetailsAttributes.ALGORITHM - SGD</code> </p> </li> <li> <p> <code>PredictedLabel</code> - Present for either a <code>BINARY</code> or <code>MULTICLASS</code> <code>MLModel</code> request. </p> </li> <li> <p> <code>PredictedScores</code> - Contains the raw classification score corresponding to each label. </p> </li> <li> <p> <code>PredictedValue</code> - Present for a <code>REGRESSION</code> <code>MLModel</code> request. </p> </li> </ul>
    """

    predictedLabel: Optional[Label] = None
    predictedValue: Optional[FloatLabel] = None
    predictedScores: Optional[ScoreValuePerLabelMap] = None
    details: Optional[DetailsMap] = None


class RDSDatabase(BaseModel):
    """
    The database details of an Amazon RDS database.
    """

    InstanceIdentifier: RDSInstanceIdentifier
    DatabaseName: RDSDatabaseName


class RDSDatabaseCredentials(BaseModel):
    """
    The database credentials to connect to a database on an RDS DB instance.
    """

    Username: RDSDatabaseUsername
    Password: RDSDatabasePassword


class RedshiftDatabase(BaseModel):
    """
    Describes the database details required to connect to an Amazon Redshift database.
    """

    DatabaseName: RedshiftDatabaseName
    ClusterIdentifier: RedshiftClusterIdentifier


class RedshiftDatabaseCredentials(BaseModel):
    """
    Describes the database credentials for connecting to a database on an Amazon Redshift cluster.
    """

    Username: RedshiftDatabaseUsername
    Password: RedshiftDatabasePassword


class AddTagsInput(BaseModel):
    Tags: TagList
    ResourceId: EntityId
    ResourceType: TaggableResourceType


class CreateDataSourceFromS3Input(BaseModel):
    DataSourceId: EntityId
    DataSourceName: Optional[EntityName] = None
    DataSpec: S3DataSpec
    ComputeStatistics: Optional[ComputeStatistics] = None


class CreateRealtimeEndpointOutput(BaseModel):
    """
    <p>Represents the output of an <code>CreateRealtimeEndpoint</code> operation.</p> <p>The result contains the <code>MLModelId</code> and the endpoint information for the <code>MLModel</code>.</p> <p> <b>Note:</b> The endpoint information includes the URI of the <code>MLModel</code>; that is, the location to send online prediction requests for the specified <code>MLModel</code>.</p>
    """

    MLModelId: Optional[EntityId] = None
    RealtimeEndpointInfo: Optional[RealtimeEndpointInfo] = None


class DeleteRealtimeEndpointOutput(CreateRealtimeEndpointOutput):
    """
    <p>Represents the output of an <code>DeleteRealtimeEndpoint</code> operation.</p> <p>The result contains the <code>MLModelId</code> and the endpoint information for the <code>MLModel</code>. </p>
    """

    pass


class DeleteTagsInput(BaseModel):
    TagKeys: TagKeyList
    ResourceId: EntityId
    ResourceType: TaggableResourceType


class DescribeTagsOutput(BaseModel):
    """
    Amazon ML returns the following elements.
    """

    ResourceId: Optional[EntityId] = None
    ResourceType: Optional[TaggableResourceType] = None
    Tags: Optional[TagList] = None


class GetEvaluationOutput(BaseModel):
    """
    Represents the output of a <code>GetEvaluation</code> operation and describes an <code>Evaluation</code>.
    """

    EvaluationId: Optional[EntityId] = None
    MLModelId: Optional[EntityId] = None
    EvaluationDataSourceId: Optional[EntityId] = None
    InputDataLocationS3: Optional[S3Url] = None
    CreatedByIamUser: Optional[AwsUserArn] = None
    CreatedAt: Optional[EpochTime] = None
    LastUpdatedAt: Optional[EpochTime] = None
    Name: Optional[EntityName] = None
    Status: Optional[EntityStatus] = None
    PerformanceMetrics: Optional[PerformanceMetrics] = None
    LogUri: Optional[PresignedS3Url] = None
    Message: Optional[Message] = None
    ComputeTime: Optional[LongType] = None
    FinishedAt: Optional[EpochTime] = None
    StartedAt: Optional[EpochTime] = None


class GetMLModelOutput(BaseModel):
    """
    Represents the output of a <code>GetMLModel</code> operation, and provides detailed information about a <code>MLModel</code>.
    """

    MLModelId: Optional[EntityId] = None
    TrainingDataSourceId: Optional[EntityId] = None
    CreatedByIamUser: Optional[AwsUserArn] = None
    CreatedAt: Optional[EpochTime] = None
    LastUpdatedAt: Optional[EpochTime] = None
    Name: Optional[MLModelName] = None
    Status: Optional[EntityStatus] = None
    SizeInBytes: Optional[LongType] = None
    EndpointInfo: Optional[RealtimeEndpointInfo] = None
    TrainingParameters: Optional[TrainingParameters] = None
    InputDataLocationS3: Optional[S3Url] = None
    MLModelType: Optional[MLModelType] = None
    ScoreThreshold: Optional[ScoreThreshold] = None
    ScoreThresholdLastUpdatedAt: Optional[EpochTime] = None
    LogUri: Optional[PresignedS3Url] = None
    Message: Optional[Message] = None
    ComputeTime: Optional[LongType] = None
    FinishedAt: Optional[EpochTime] = None
    StartedAt: Optional[EpochTime] = None
    Recipe: Optional[Recipe] = None
    Schema: Optional[DataSchema] = None


class PredictOutput(BaseModel):
    Prediction: Optional[Prediction] = None


class RDSDataSpec(BaseModel):
    """
    The data specification of an Amazon Relational Database Service (Amazon RDS) <code>DataSource</code>.
    """

    DatabaseInformation: RDSDatabase
    SelectSqlQuery: RDSSelectSqlQuery
    DatabaseCredentials: RDSDatabaseCredentials
    S3StagingLocation: S3Url
    DataRearrangement: Optional[DataRearrangement] = None
    DataSchema: Optional[DataSchema] = None
    DataSchemaUri: Optional[S3Url] = None
    ResourceRole: EDPResourceRole
    ServiceRole: EDPServiceRole
    SubnetId: EDPSubnetId
    SecurityGroupIds: EDPSecurityGroupIds


class RedshiftDataSpec(BaseModel):
    """
    Describes the data specification of an Amazon Redshift <code>DataSource</code>.
    """

    DatabaseInformation: RedshiftDatabase
    SelectSqlQuery: RedshiftSelectSqlQuery
    DatabaseCredentials: RedshiftDatabaseCredentials
    S3StagingLocation: S3Url
    DataRearrangement: Optional[DataRearrangement] = None
    DataSchema: Optional[DataSchema] = None
    DataSchemaUri: Optional[S3Url] = None


class RedshiftMetadata(BaseModel):
    """
    Describes the <code>DataSource</code> details specific to Amazon Redshift.
    """

    RedshiftDatabase: Optional[RedshiftDatabase] = None
    DatabaseUserName: Optional[RedshiftDatabaseUsername] = None
    SelectSqlQuery: Optional[RedshiftSelectSqlQuery] = None


class RDSMetadata(BaseModel):
    """
    The datasource details that are specific to Amazon RDS.
    """

    Database: Optional[RDSDatabase] = None
    DatabaseUserName: Optional[RDSDatabaseUsername] = None
    SelectSqlQuery: Optional[RDSSelectSqlQuery] = None
    ResourceRole: Optional[EDPResourceRole] = None
    ServiceRole: Optional[EDPServiceRole] = None
    DataPipelineId: Optional[EDPPipelineId] = None


class DataSource(BaseModel):
    """
    <p> Represents the output of the <code>GetDataSource</code> operation. </p> <p> The content consists of the detailed metadata and data file information and the current status of the <code>DataSource</code>. </p>
    """

    DataSourceId: Optional[EntityId] = None
    DataLocationS3: Optional[S3Url] = None
    DataRearrangement: Optional[DataRearrangement] = None
    CreatedByIamUser: Optional[AwsUserArn] = None
    CreatedAt: Optional[EpochTime] = None
    LastUpdatedAt: Optional[EpochTime] = None
    DataSizeInBytes: Optional[LongType] = None
    NumberOfFiles: Optional[LongType] = None
    Name: Optional[EntityName] = None
    Status: Optional[EntityStatus] = None
    Message: Optional[Message] = None
    RedshiftMetadata: Optional[RedshiftMetadata] = None
    RDSMetadata: Optional[RDSMetadata] = None
    RoleARN: Optional[RoleARN] = None
    ComputeStatistics: Optional[ComputeStatistics] = None
    ComputeTime: Optional[LongType] = None
    FinishedAt: Optional[EpochTime] = None
    StartedAt: Optional[EpochTime] = None


class DataSources(BaseModel):
    __root__: List[DataSource]


class Evaluations(BaseModel):
    __root__: List[Evaluation]


class MLModels(BaseModel):
    __root__: List[MLModel]


class CreateDataSourceFromRDSInput(BaseModel):
    DataSourceId: EntityId
    DataSourceName: Optional[EntityName] = None
    RDSData: RDSDataSpec
    RoleARN: RoleARN
    ComputeStatistics: Optional[ComputeStatistics] = None


class CreateDataSourceFromRedshiftInput(BaseModel):
    DataSourceId: EntityId
    DataSourceName: Optional[EntityName] = None
    DataSpec: RedshiftDataSpec
    RoleARN: RoleARN
    ComputeStatistics: Optional[ComputeStatistics] = None


class DescribeDataSourcesOutput(BaseModel):
    """
    Represents the query results from a <a>DescribeDataSources</a> operation. The content is essentially a list of <code>DataSource</code>.
    """

    Results: Optional[DataSources] = None
    NextToken: Optional[StringType] = None


class DescribeEvaluationsOutput(BaseModel):
    """
    Represents the query results from a <code>DescribeEvaluations</code> operation. The content is essentially a list of <code>Evaluation</code>.
    """

    Results: Optional[Evaluations] = None
    NextToken: Optional[StringType] = None


class DescribeMLModelsOutput(BaseModel):
    """
    Represents the output of a <code>DescribeMLModels</code> operation. The content is essentially a list of <code>MLModel</code>.
    """

    Results: Optional[MLModels] = None
    NextToken: Optional[StringType] = None


class GetDataSourceOutput(BaseModel):
    """
    Represents the output of a <code>GetDataSource</code> operation and describes a <code>DataSource</code>.
    """

    DataSourceId: Optional[EntityId] = None
    DataLocationS3: Optional[S3Url] = None
    DataRearrangement: Optional[DataRearrangement] = None
    CreatedByIamUser: Optional[AwsUserArn] = None
    CreatedAt: Optional[EpochTime] = None
    LastUpdatedAt: Optional[EpochTime] = None
    DataSizeInBytes: Optional[LongType] = None
    NumberOfFiles: Optional[LongType] = None
    Name: Optional[EntityName] = None
    Status: Optional[EntityStatus] = None
    LogUri: Optional[PresignedS3Url] = None
    Message: Optional[Message] = None
    RedshiftMetadata: Optional[RedshiftMetadata] = None
    RDSMetadata: Optional[RDSMetadata] = None
    RoleARN: Optional[RoleARN] = None
    ComputeStatistics: Optional[ComputeStatistics] = None
    ComputeTime: Optional[LongType] = None
    FinishedAt: Optional[EpochTime] = None
    StartedAt: Optional[EpochTime] = None
    DataSourceSchema: Optional[DataSchema] = None
