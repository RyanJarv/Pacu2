# generated by datamodel-codegen:
#   filename:  openapi.yaml
#   timestamp: 2021-12-31T02:46:54+00:00

from __future__ import annotations

from datetime import datetime
from enum import Enum
from typing import Annotated, Any, List, Optional

from pydantic import BaseModel, Field


class InvalidRequestException(BaseModel):
    __root__: Any


class TooManyRequestsException(InvalidRequestException):
    pass


class ResourceNotFoundException(InvalidRequestException):
    pass


class InternalServerException(InvalidRequestException):
    pass


class ServiceUnavailableException(InvalidRequestException):
    pass


class InvalidEncodingException(InvalidRequestException):
    pass


class TextSizeLimitExceededException(InvalidRequestException):
    pass


class ValidationException(InvalidRequestException):
    pass


class AnyLengthString(BaseModel):
    __root__: str


class EntitySubType(Enum):
    NAME = 'NAME'
    DOSAGE = 'DOSAGE'
    ROUTE_OR_MODE = 'ROUTE_OR_MODE'
    FORM = 'FORM'
    FREQUENCY = 'FREQUENCY'
    DURATION = 'DURATION'
    GENERIC_NAME = 'GENERIC_NAME'
    BRAND_NAME = 'BRAND_NAME'
    STRENGTH = 'STRENGTH'
    RATE = 'RATE'
    ACUITY = 'ACUITY'
    TEST_NAME = 'TEST_NAME'
    TEST_VALUE = 'TEST_VALUE'
    TEST_UNITS = 'TEST_UNITS'
    PROCEDURE_NAME = 'PROCEDURE_NAME'
    TREATMENT_NAME = 'TREATMENT_NAME'
    DATE = 'DATE'
    AGE = 'AGE'
    CONTACT_POINT = 'CONTACT_POINT'
    EMAIL = 'EMAIL'
    IDENTIFIER = 'IDENTIFIER'
    URL = 'URL'
    ADDRESS = 'ADDRESS'
    PROFESSION = 'PROFESSION'
    SYSTEM_ORGAN_SITE = 'SYSTEM_ORGAN_SITE'
    DIRECTION = 'DIRECTION'
    QUALITY = 'QUALITY'
    QUANTITY = 'QUANTITY'
    TIME_EXPRESSION = 'TIME_EXPRESSION'
    TIME_TO_MEDICATION_NAME = 'TIME_TO_MEDICATION_NAME'
    TIME_TO_DX_NAME = 'TIME_TO_DX_NAME'
    TIME_TO_TEST_NAME = 'TIME_TO_TEST_NAME'
    TIME_TO_PROCEDURE_NAME = 'TIME_TO_PROCEDURE_NAME'
    TIME_TO_TREATMENT_NAME = 'TIME_TO_TREATMENT_NAME'


class Float(BaseModel):
    __root__: float


class RelationshipType(Enum):
    EVERY = 'EVERY'
    WITH_DOSAGE = 'WITH_DOSAGE'
    ADMINISTERED_VIA = 'ADMINISTERED_VIA'
    FOR = 'FOR'
    NEGATIVE = 'NEGATIVE'
    OVERLAP = 'OVERLAP'
    DOSAGE = 'DOSAGE'
    ROUTE_OR_MODE = 'ROUTE_OR_MODE'
    FORM = 'FORM'
    FREQUENCY = 'FREQUENCY'
    DURATION = 'DURATION'
    STRENGTH = 'STRENGTH'
    RATE = 'RATE'
    ACUITY = 'ACUITY'
    TEST_VALUE = 'TEST_VALUE'
    TEST_UNITS = 'TEST_UNITS'
    DIRECTION = 'DIRECTION'
    SYSTEM_ORGAN_SITE = 'SYSTEM_ORGAN_SITE'


class Integer(BaseModel):
    __root__: int


class String(BaseModel):
    __root__: Annotated[str, Field(min_length=1)]


class EntityType(Enum):
    MEDICATION = 'MEDICATION'
    MEDICAL_CONDITION = 'MEDICAL_CONDITION'
    PROTECTED_HEALTH_INFORMATION = 'PROTECTED_HEALTH_INFORMATION'
    TEST_TREATMENT_PROCEDURE = 'TEST_TREATMENT_PROCEDURE'
    ANATOMY = 'ANATOMY'
    TIME_EXPRESSION = 'TIME_EXPRESSION'


class AttributeName(Enum):
    SIGN = 'SIGN'
    SYMPTOM = 'SYMPTOM'
    DIAGNOSIS = 'DIAGNOSIS'
    NEGATION = 'NEGATION'


class BoundedLengthString(BaseModel):
    __root__: Annotated[str, Field(max_length=20000, min_length=1)]


class ClientRequestTokenString(BaseModel):
    __root__: Annotated[
        str, Field(max_length=64, min_length=1, regex='^[a-zA-Z0-9-]+$')
    ]


class JobName(BaseModel):
    __root__: Annotated[
        str,
        Field(
            max_length=256, min_length=1, regex='^([\\p{L}\\p{Z}\\p{N}_.:/=+\\-%@]*)$'
        ),
    ]


class JobStatus(Enum):
    SUBMITTED = 'SUBMITTED'
    IN_PROGRESS = 'IN_PROGRESS'
    COMPLETED = 'COMPLETED'
    PARTIAL_SUCCESS = 'PARTIAL_SUCCESS'
    FAILED = 'FAILED'
    STOP_REQUESTED = 'STOP_REQUESTED'
    STOPPED = 'STOPPED'


class Timestamp(BaseModel):
    __root__: datetime


class ComprehendMedicalAsyncJobFilter(BaseModel):
    """
    Provides information for filtering a list of detection jobs.
    """

    JobName: Optional[JobName] = None
    JobStatus: Optional[JobStatus] = None
    SubmitTimeBefore: Optional[Timestamp] = None
    SubmitTimeAfter: Optional[Timestamp] = None


class JobId(BaseModel):
    __root__: Annotated[
        str,
        Field(
            max_length=32, min_length=1, regex='^([\\p{L}\\p{Z}\\p{N}_.:/=+\\-%@]*)$'
        ),
    ]


class LanguageCode(Enum):
    en = 'en'


class IamRoleArn(BaseModel):
    __root__: Annotated[
        str,
        Field(
            max_length=2048,
            min_length=20,
            regex='arn:aws(-[^:]+)?:iam::[0-9]{12}:role/.+',
        ),
    ]


class ManifestFilePath(BaseModel):
    __root__: Annotated[str, Field(max_length=4096, min_length=1)]


class KMSKey(BaseModel):
    __root__: Annotated[str, Field(max_length=2048, min_length=1, regex='.*')]


class ModelVersion5(AnyLengthString):
    pass


class ICD10CMAttributeType(Enum):
    ACUITY = 'ACUITY'
    DIRECTION = 'DIRECTION'
    SYSTEM_ORGAN_SITE = 'SYSTEM_ORGAN_SITE'
    QUALITY = 'QUALITY'
    QUANTITY = 'QUANTITY'
    TIME_TO_DX_NAME = 'TIME_TO_DX_NAME'
    TIME_EXPRESSION = 'TIME_EXPRESSION'


class ICD10CMEntityType(Enum):
    DX_NAME = 'DX_NAME'
    TIME_EXPRESSION = 'TIME_EXPRESSION'


class ICD10CMRelationshipType(Enum):
    OVERLAP = 'OVERLAP'
    SYSTEM_ORGAN_SITE = 'SYSTEM_ORGAN_SITE'


class ICD10CMConcept(BaseModel):
    """
    The ICD-10-CM concepts that the entity could refer to, along with a score indicating the likelihood of the match.
    """

    Description: Optional[String] = None
    Code: Optional[String] = None
    Score: Optional[Float] = None


class ICD10CMConceptList(BaseModel):
    __root__: List[ICD10CMConcept]


class OntologyLinkingBoundedLengthString(BaseModel):
    __root__: Annotated[str, Field(max_length=10000, min_length=1)]


class ICD10CMEntityCategory(Enum):
    MEDICAL_CONDITION = 'MEDICAL_CONDITION'


class ICD10CMTraitName(Enum):
    NEGATION = 'NEGATION'
    DIAGNOSIS = 'DIAGNOSIS'
    SIGN = 'SIGN'
    SYMPTOM = 'SYMPTOM'


class ICD10CMTrait(BaseModel):
    """
    Contextual information for the entity. The traits recognized by InferICD10CM are <code>DIAGNOSIS</code>, <code>SIGN</code>, <code>SYMPTOM</code>, and <code>NEGATION</code>.
    """

    Name: Optional[ICD10CMTraitName] = None
    Score: Optional[Float] = None


class S3Bucket(BaseModel):
    __root__: Annotated[
        str, Field(max_length=63, min_length=3, regex='^[0-9a-z\\.\\-_]*(?!\\.)$')
    ]


class S3Key(BaseModel):
    __root__: Annotated[str, Field(max_length=1024, regex='.*')]


class MaxResultsInteger(BaseModel):
    __root__: Annotated[int, Field(ge=1.0, le=500.0)]


class RxNormAttributeType(Enum):
    DOSAGE = 'DOSAGE'
    DURATION = 'DURATION'
    FORM = 'FORM'
    FREQUENCY = 'FREQUENCY'
    RATE = 'RATE'
    ROUTE_OR_MODE = 'ROUTE_OR_MODE'
    STRENGTH = 'STRENGTH'


class RxNormConcept(ICD10CMConcept):
    """
    The RxNorm concept that the entity could refer to, along with a score indicating the likelihood of the match.
    """

    pass


class RxNormConceptList(BaseModel):
    __root__: List[RxNormConcept]


class RxNormEntityCategory(Enum):
    MEDICATION = 'MEDICATION'


class RxNormEntityType(Enum):
    BRAND_NAME = 'BRAND_NAME'
    GENERIC_NAME = 'GENERIC_NAME'


class RxNormTraitName(Enum):
    NEGATION = 'NEGATION'


class RxNormTrait(BaseModel):
    """
    The contextual information for the entity. InferRxNorm recognizes the trait <code>NEGATION</code>, which is any indication that the patient is not taking a medication.
    """

    Name: Optional[RxNormTraitName] = None
    Score: Optional[Float] = None


class Trait(BaseModel):
    """
    Provides contextual information about the extracted entity.
    """

    Name: Optional[AttributeName] = None
    Score: Optional[Float] = None


class DescribeEntitiesDetectionV2JobRequest(BaseModel):
    JobId: JobId


class DescribeICD10CMInferenceJobRequest(BaseModel):
    JobId: JobId


class DescribePHIDetectionJobRequest(BaseModel):
    JobId: JobId


class DescribeRxNormInferenceJobRequest(BaseModel):
    JobId: JobId


class DetectEntitiesRequest(BaseModel):
    Text: BoundedLengthString


class DetectEntitiesV2Request(BaseModel):
    Text: BoundedLengthString


class DetectPHIRequest(BaseModel):
    Text: BoundedLengthString


class InferICD10CMRequest(BaseModel):
    Text: OntologyLinkingBoundedLengthString


class InferRxNormRequest(BaseModel):
    Text: OntologyLinkingBoundedLengthString


class ListEntitiesDetectionV2JobsRequest(BaseModel):
    Filter: Optional[ComprehendMedicalAsyncJobFilter] = None
    NextToken: Optional[String] = None
    MaxResults: Optional[MaxResultsInteger] = None


class ListICD10CMInferenceJobsRequest(BaseModel):
    Filter: Optional[ComprehendMedicalAsyncJobFilter] = None
    NextToken: Optional[String] = None
    MaxResults: Optional[MaxResultsInteger] = None


class ListPHIDetectionJobsRequest(BaseModel):
    Filter: Optional[ComprehendMedicalAsyncJobFilter] = None
    NextToken: Optional[String] = None
    MaxResults: Optional[MaxResultsInteger] = None


class ListRxNormInferenceJobsRequest(BaseModel):
    Filter: Optional[ComprehendMedicalAsyncJobFilter] = None
    NextToken: Optional[String] = None
    MaxResults: Optional[MaxResultsInteger] = None


class StartEntitiesDetectionV2JobResponse(BaseModel):
    JobId: Optional[JobId] = None


class StartICD10CMInferenceJobResponse(StartEntitiesDetectionV2JobResponse):
    pass


class StartPHIDetectionJobResponse(StartEntitiesDetectionV2JobResponse):
    pass


class StartRxNormInferenceJobResponse(StartEntitiesDetectionV2JobResponse):
    pass


class StopEntitiesDetectionV2JobResponse(StartEntitiesDetectionV2JobResponse):
    pass


class StopEntitiesDetectionV2JobRequest(BaseModel):
    JobId: JobId


class StopICD10CMInferenceJobResponse(StartEntitiesDetectionV2JobResponse):
    pass


class StopICD10CMInferenceJobRequest(BaseModel):
    JobId: JobId


class StopPHIDetectionJobResponse(StartEntitiesDetectionV2JobResponse):
    pass


class StopPHIDetectionJobRequest(BaseModel):
    JobId: JobId


class StopRxNormInferenceJobResponse(StartEntitiesDetectionV2JobResponse):
    pass


class StopRxNormInferenceJobRequest(BaseModel):
    JobId: JobId


class TraitList(BaseModel):
    __root__: List[Trait]


class Attribute(BaseModel):
    """
    An extracted segment of the text that is an attribute of an entity, or otherwise related to an entity, such as the dosage of a medication taken. It contains information about the attribute such as id, begin and end offset within the input text, and the segment of the input text.
    """

    Type: Optional[EntitySubType] = None
    Score: Optional[Float] = None
    RelationshipScore: Optional[Float] = None
    RelationshipType: Optional[RelationshipType] = None
    Id: Optional[Integer] = None
    BeginOffset: Optional[Integer] = None
    EndOffset: Optional[Integer] = None
    Text: Optional[String] = None
    Category: Optional[EntityType] = None
    Traits: Optional[TraitList] = None


class AttributeList(BaseModel):
    __root__: List[Attribute]


class InputDataConfig(BaseModel):
    """
    The input properties for an entities detection job. This includes the name of the S3 bucket and the path to the files to be analyzed.
    """

    S3Bucket: S3Bucket
    S3Key: Optional[S3Key] = None


class OutputDataConfig(InputDataConfig):
    """
    The output properties for a detection job.
    """

    pass


class ComprehendMedicalAsyncJobProperties(BaseModel):
    """
    Provides information about a detection job.
    """

    JobId: Optional[JobId] = None
    JobName: Optional[JobName] = None
    JobStatus: Optional[JobStatus] = None
    Message: Optional[AnyLengthString] = None
    SubmitTime: Optional[Timestamp] = None
    EndTime: Optional[Timestamp] = None
    ExpirationTime: Optional[Timestamp] = None
    InputDataConfig: Optional[InputDataConfig] = None
    OutputDataConfig: Optional[OutputDataConfig] = None
    LanguageCode: Optional[LanguageCode] = None
    DataAccessRoleArn: Optional[IamRoleArn] = None
    ManifestFilePath: Optional[ManifestFilePath] = None
    KMSKey: Optional[KMSKey] = None
    ModelVersion: Optional[ModelVersion5] = None


class ComprehendMedicalAsyncJobPropertiesList(BaseModel):
    __root__: List[ComprehendMedicalAsyncJobProperties]


class Entity(BaseModel):
    """
    Provides information about an extracted medical entity.
    """

    Id: Optional[Integer] = None
    BeginOffset: Optional[Integer] = None
    EndOffset: Optional[Integer] = None
    Score: Optional[Float] = None
    Text: Optional[String] = None
    Category: Optional[EntityType] = None
    Type: Optional[EntitySubType] = None
    Traits: Optional[TraitList] = None
    Attributes: Optional[AttributeList] = None


class ICD10CMTraitList(BaseModel):
    __root__: List[ICD10CMTrait]


class ICD10CMAttribute(BaseModel):
    """
    The detected attributes that relate to an entity. This includes an extracted segment of the text that is an attribute of an entity, or otherwise related to an entity. InferICD10CM detects the following attributes: <code>Direction</code>, <code>System, Organ or Site</code>, and <code>Acuity</code>.
    """

    Type: Optional[ICD10CMAttributeType] = None
    Score: Optional[Float] = None
    RelationshipScore: Optional[Float] = None
    Id: Optional[Integer] = None
    BeginOffset: Optional[Integer] = None
    EndOffset: Optional[Integer] = None
    Text: Optional[String] = None
    Traits: Optional[ICD10CMTraitList] = None
    Category: Optional[ICD10CMEntityType] = None
    RelationshipType: Optional[ICD10CMRelationshipType] = None


class ICD10CMAttributeList(BaseModel):
    __root__: List[ICD10CMAttribute]


class ICD10CMEntity(BaseModel):
    """
    The collection of medical entities extracted from the input text and their associated information. For each entity, the response provides the entity text, the entity category, where the entity text begins and ends, and the level of confidence that Amazon Comprehend Medical has in the detection and analysis. Attributes and traits of the entity are also returned.
    """

    Id: Optional[Integer] = None
    Text: Optional[OntologyLinkingBoundedLengthString] = None
    Category: Optional[ICD10CMEntityCategory] = None
    Type: Optional[ICD10CMEntityType] = None
    Score: Optional[Float] = None
    BeginOffset: Optional[Integer] = None
    EndOffset: Optional[Integer] = None
    Attributes: Optional[ICD10CMAttributeList] = None
    Traits: Optional[ICD10CMTraitList] = None
    ICD10CMConcepts: Optional[ICD10CMConceptList] = None


class ICD10CMEntityList(BaseModel):
    __root__: List[ICD10CMEntity]


class RxNormTraitList(BaseModel):
    __root__: List[RxNormTrait]


class RxNormAttribute(BaseModel):
    """
    The extracted attributes that relate to this entity. The attributes recognized by InferRxNorm are <code>DOSAGE</code>, <code>DURATION</code>, <code>FORM</code>, <code>FREQUENCY</code>, <code>RATE</code>, <code>ROUTE_OR_MODE</code>.
    """

    Type: Optional[RxNormAttributeType] = None
    Score: Optional[Float] = None
    RelationshipScore: Optional[Float] = None
    Id: Optional[Integer] = None
    BeginOffset: Optional[Integer] = None
    EndOffset: Optional[Integer] = None
    Text: Optional[String] = None
    Traits: Optional[RxNormTraitList] = None


class RxNormAttributeList(BaseModel):
    __root__: List[RxNormAttribute]


class RxNormEntity(BaseModel):
    """
    The collection of medical entities extracted from the input text and their associated information. For each entity, the response provides the entity text, the entity category, where the entity text begins and ends, and the level of confidence that Amazon Comprehend Medical has in the detection and analysis. Attributes and traits of the entity are also returned.
    """

    Id: Optional[Integer] = None
    Text: Optional[OntologyLinkingBoundedLengthString] = None
    Category: Optional[RxNormEntityCategory] = None
    Type: Optional[RxNormEntityType] = None
    Score: Optional[Float] = None
    BeginOffset: Optional[Integer] = None
    EndOffset: Optional[Integer] = None
    Attributes: Optional[RxNormAttributeList] = None
    Traits: Optional[RxNormTraitList] = None
    RxNormConcepts: Optional[RxNormConceptList] = None


class UnmappedAttribute(BaseModel):
    """
    An attribute that we extracted, but were unable to relate to an entity.
    """

    Type: Optional[EntityType] = None
    Attribute: Optional[Attribute] = None


class DescribeEntitiesDetectionV2JobResponse(BaseModel):
    ComprehendMedicalAsyncJobProperties: Optional[
        ComprehendMedicalAsyncJobProperties
    ] = None


class DescribeICD10CMInferenceJobResponse(DescribeEntitiesDetectionV2JobResponse):
    pass


class DescribePHIDetectionJobResponse(DescribeEntitiesDetectionV2JobResponse):
    pass


class DescribeRxNormInferenceJobResponse(DescribeEntitiesDetectionV2JobResponse):
    pass


class InferICD10CMResponse(BaseModel):
    Entities: ICD10CMEntityList
    PaginationToken: Optional[String] = None
    ModelVersion: Optional[String] = None


class ListEntitiesDetectionV2JobsResponse(BaseModel):
    ComprehendMedicalAsyncJobPropertiesList: Optional[
        ComprehendMedicalAsyncJobPropertiesList
    ] = None
    NextToken: Optional[String] = None


class ListICD10CMInferenceJobsResponse(ListEntitiesDetectionV2JobsResponse):
    pass


class ListPHIDetectionJobsResponse(ListEntitiesDetectionV2JobsResponse):
    pass


class ListRxNormInferenceJobsResponse(ListEntitiesDetectionV2JobsResponse):
    pass


class StartEntitiesDetectionV2JobRequest(BaseModel):
    InputDataConfig: InputDataConfig
    OutputDataConfig: OutputDataConfig
    DataAccessRoleArn: IamRoleArn
    JobName: Optional[JobName] = None
    ClientRequestToken: Optional[ClientRequestTokenString] = None
    KMSKey: Optional[KMSKey] = None
    LanguageCode: LanguageCode


class StartICD10CMInferenceJobRequest(BaseModel):
    InputDataConfig: InputDataConfig
    OutputDataConfig: OutputDataConfig
    DataAccessRoleArn: IamRoleArn
    JobName: Optional[JobName] = None
    ClientRequestToken: Optional[ClientRequestTokenString] = None
    KMSKey: Optional[KMSKey] = None
    LanguageCode: LanguageCode


class StartPHIDetectionJobRequest(BaseModel):
    InputDataConfig: InputDataConfig
    OutputDataConfig: OutputDataConfig
    DataAccessRoleArn: IamRoleArn
    JobName: Optional[JobName] = None
    ClientRequestToken: Optional[ClientRequestTokenString] = None
    KMSKey: Optional[KMSKey] = None
    LanguageCode: LanguageCode


class StartRxNormInferenceJobRequest(BaseModel):
    InputDataConfig: InputDataConfig
    OutputDataConfig: OutputDataConfig
    DataAccessRoleArn: IamRoleArn
    JobName: Optional[JobName] = None
    ClientRequestToken: Optional[ClientRequestTokenString] = None
    KMSKey: Optional[KMSKey] = None
    LanguageCode: LanguageCode


class EntityList(BaseModel):
    __root__: List[Entity]


class UnmappedAttributeList(BaseModel):
    __root__: List[UnmappedAttribute]


class RxNormEntityList(BaseModel):
    __root__: List[RxNormEntity]


class DetectEntitiesResponse(BaseModel):
    Entities: EntityList
    UnmappedAttributes: Optional[UnmappedAttributeList] = None
    PaginationToken: Optional[String] = None
    ModelVersion: String


class DetectEntitiesV2Response(DetectEntitiesResponse):
    pass


class DetectPHIResponse(BaseModel):
    Entities: EntityList
    PaginationToken: Optional[String] = None
    ModelVersion: String


class InferRxNormResponse(BaseModel):
    Entities: RxNormEntityList
    PaginationToken: Optional[String] = None
    ModelVersion: Optional[String] = None
