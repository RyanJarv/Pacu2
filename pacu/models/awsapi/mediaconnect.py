# generated by datamodel-codegen:
#   filename:  openapi.yaml
#   timestamp: 2021-12-31T02:52:14+00:00

from __future__ import annotations

from enum import Enum
from typing import Annotated, Any, List, Optional

from pydantic import BaseModel, Extra, Field


class BadRequestException(BaseModel):
    __root__: Any


class InternalServerErrorException(BadRequestException):
    pass


class ForbiddenException(BadRequestException):
    pass


class NotFoundException(BadRequestException):
    pass


class ServiceUnavailableException(BadRequestException):
    pass


class TooManyRequestsException(BadRequestException):
    pass


class AddFlowOutputs420Exception(BadRequestException):
    pass


class _String(BaseModel):
    __root__: str


class _Integer(BaseModel):
    __root__: int


class Protocol(Enum):
    zixi_push = 'zixi-push'
    rtp_fec = 'rtp-fec'
    rtp = 'rtp'
    zixi_pull = 'zixi-pull'
    rist = 'rist'
    st2110_jpegxs = 'st2110-jpegxs'
    cdi = 'cdi'
    srt_listener = 'srt-listener'


class FailoverMode(Enum):
    MERGE = 'MERGE'
    FAILOVER = 'FAILOVER'


class SourcePriority(BaseModel):
    """
    The priority you want to assign to a source. You can have a primary stream and a backup stream or two equally prioritized streams.
    """

    PrimarySource: Optional[_String] = None


class State(Enum):
    ENABLED = 'ENABLED'
    DISABLED = 'DISABLED'


class CreateFlow420Exception(BadRequestException):
    pass


class GrantFlowEntitlements420Exception(BadRequestException):
    pass


class RemoveFlowMediaStreamResponse(BaseModel):
    FlowArn: Optional[_String] = None
    MediaStreamName: Optional[_String] = None


class RemoveFlowOutputResponse(BaseModel):
    FlowArn: Optional[_String] = None
    OutputArn: Optional[_String] = None


class RemoveFlowSourceResponse(BaseModel):
    FlowArn: Optional[_String] = None
    SourceArn: Optional[_String] = None


class RevokeFlowEntitlementResponse(BaseModel):
    EntitlementArn: Optional[_String] = None
    FlowArn: Optional[_String] = None


class Algorithm(Enum):
    aes128 = 'aes128'
    aes192 = 'aes192'
    aes256 = 'aes256'


class KeyType(Enum):
    speke = 'speke'
    static_key = 'static-key'
    srt_password = 'srt-password'


class MediaStreamType(Enum):
    video = 'video'
    audio = 'audio'
    ancillary_data = 'ancillary-data'


class _ListOfString(BaseModel):
    __root__: List[_String]


class VpcInterfaceAttachment(BaseModel):
    """
    The settings for attaching a VPC interface to an output.
    """

    VpcInterfaceName: Optional[_String] = None


class Colorimetry(Enum):
    BT601 = 'BT601'
    BT709 = 'BT709'
    BT2020 = 'BT2020'
    BT2100 = 'BT2100'
    ST2065_1 = 'ST2065-1'
    ST2065_3 = 'ST2065-3'
    XYZ = 'XYZ'


class FailoverConfig(BaseModel):
    """
    The settings for source failover
    """

    FailoverMode: Optional[FailoverMode] = None
    RecoveryWindow: Optional[_Integer] = None
    SourcePriority: Optional[SourcePriority] = None
    State: Optional[State] = None


class DeleteFlowRequest(BaseModel):
    pass


class Status(Enum):
    STANDBY = 'STANDBY'
    ACTIVE = 'ACTIVE'
    UPDATING = 'UPDATING'
    DELETING = 'DELETING'
    STARTING = 'STARTING'
    STOPPING = 'STOPPING'
    ERROR = 'ERROR'


class DescribeFlowRequest(BaseModel):
    pass


class Messages(BaseModel):
    """
    Messages that provide the state of the flow.
    """

    Errors: _ListOfString


class DescribeOfferingRequest(BaseModel):
    pass


class DescribeReservationRequest(BaseModel):
    pass


class Interface(BaseModel):
    """
    The VPC interface that is used for the media stream associated with the source or output.
    """

    Name: _String


class DestinationConfiguration(BaseModel):
    """
    The transport parameters that are associated with an outbound media stream.
    """

    DestinationIp: _String
    DestinationPort: _Integer
    Interface: Interface
    OutboundIp: _String


class InterfaceRequest(Interface):
    """
    The VPC interface that you want to designate where the media stream is coming from or going to.
    """

    pass


class DestinationConfigurationRequest(BaseModel):
    """
    The transport parameters that you want to associate with an outbound media stream.
    """

    DestinationIp: _String
    DestinationPort: _Integer
    Interface: InterfaceRequest


class DurationUnits(Enum):
    MONTHS = 'MONTHS'


class EncoderProfile(Enum):
    main = 'main'
    high = 'high'


class EncodingName(Enum):
    jxsv = 'jxsv'
    raw = 'raw'
    smpte291 = 'smpte291'
    pcm = 'pcm'


class _Double(BaseModel):
    __root__: float


class EncodingParameters1(BaseModel):
    """
    A collection of parameters that determine how MediaConnect will convert the content. These fields only apply to outputs on flows that have a CDI source.
    """

    CompressionFactor: _Double
    EncoderProfile: EncoderProfile


class EncodingParametersRequest(EncodingParameters1):
    """
    A collection of parameters that determine how MediaConnect will convert the content. These fields only apply to outputs on flows that have a CDI source.
    """

    pass


class Range(Enum):
    NARROW = 'NARROW'
    FULL = 'FULL'
    FULLPROTECT = 'FULLPROTECT'


class ScanMode(Enum):
    progressive = 'progressive'
    interlace = 'interlace'
    progressive_segmented_frame = 'progressive-segmented-frame'


class Tcs(Enum):
    SDR = 'SDR'
    PQ = 'PQ'
    HLG = 'HLG'
    LINEAR = 'LINEAR'
    BT2100LINPQ = 'BT2100LINPQ'
    BT2100LINHLG = 'BT2100LINHLG'
    ST2065_1 = 'ST2065-1'
    ST428_1 = 'ST428-1'
    DENSITY = 'DENSITY'


class Fmtp1(BaseModel):
    """
    FMTP
    """

    ChannelOrder: Optional[_String] = None
    Colorimetry: Optional[Colorimetry] = None
    ExactFramerate: Optional[_String] = None
    Par: Optional[_String] = None
    Range: Optional[Range] = None
    ScanMode: Optional[ScanMode] = None
    Tcs: Optional[Tcs] = None


class InputConfiguration(BaseModel):
    """
    The transport parameters that are associated with an incoming media stream.
    """

    InputIp: _String
    InputPort: _Integer
    Interface: Interface


class InputConfigurationRequest(BaseModel):
    """
    The transport parameters that you want to associate with an incoming media stream.
    """

    InputPort: _Integer
    Interface: InterfaceRequest


class MaxResults(BaseModel):
    __root__: Annotated[int, Field(ge=1.0, le=1000.0)]


class ListEntitlementsRequest(BaseModel):
    pass


class ListFlowsRequest(BaseModel):
    pass


class ListOfferingsRequest(BaseModel):
    pass


class ListReservationsRequest(BaseModel):
    pass


class ListTagsForResourceRequest(BaseModel):
    pass


class _MapOfString(BaseModel):
    pass

    class Config:
        extra = Extra.allow


class ListedEntitlement(BaseModel):
    """
    An entitlement that has been granted to you from other AWS accounts.
    """

    DataTransferSubscriberFeePercent: Optional[_Integer] = None
    EntitlementArn: _String
    EntitlementName: _String


class SourceType(Enum):
    OWNED = 'OWNED'
    ENTITLED = 'ENTITLED'


class ListedFlow(BaseModel):
    """
    Provides a summary of a flow, including its ARN, Availability Zone, and source type.
    """

    AvailabilityZone: _String
    Description: _String
    FlowArn: _String
    Name: _String
    SourceType: SourceType
    Status: Status


class MediaStreamAttributes(BaseModel):
    """
    Attributes that are related to the media stream.
    """

    Fmtp: Fmtp1
    Lang: Optional[_String] = None


class MediaStream(BaseModel):
    """
    A single track or stream of media that contains video, audio, or ancillary data. After you add a media stream to a flow, you can associate it with sources and outputs on that flow, as long as they use the CDI protocol or the ST 2110 JPEG XS protocol. Each source or output can consist of one or many media streams.
    """

    Attributes: Optional[MediaStreamAttributes] = None
    ClockRate: Optional[_Integer] = None
    Description: Optional[_String] = None
    Fmt: _Integer
    MediaStreamId: _Integer
    MediaStreamName: _String
    MediaStreamType: MediaStreamType
    VideoFormat: Optional[_String] = None


class _ListOfDestinationConfiguration(BaseModel):
    __root__: List[DestinationConfiguration]


class MediaStreamOutputConfiguration(BaseModel):
    """
    The media stream that is associated with the output, and the parameters for that association.
    """

    DestinationConfigurations: Optional[_ListOfDestinationConfiguration] = None
    EncodingName: EncodingName
    EncodingParameters: Optional[EncodingParameters1] = None
    MediaStreamName: _String


class _ListOfDestinationConfigurationRequest(BaseModel):
    __root__: List[DestinationConfigurationRequest]


class _ListOfInputConfiguration(BaseModel):
    __root__: List[InputConfiguration]


class MediaStreamSourceConfiguration(BaseModel):
    """
    The media stream that is associated with the source, and the parameters for that association.
    """

    EncodingName: EncodingName
    InputConfigurations: Optional[_ListOfInputConfiguration] = None
    MediaStreamName: _String


class _ListOfInputConfigurationRequest(BaseModel):
    __root__: List[InputConfigurationRequest]


class NetworkInterfaceType(Enum):
    ena = 'ena'
    efa = 'efa'


class PriceUnits(Enum):
    HOURLY = 'HOURLY'


class _ListOfMediaStreamOutputConfiguration(BaseModel):
    __root__: List[MediaStreamOutputConfiguration]


class Transport(BaseModel):
    """
    Attributes related to the transport stream that are used in a source or output.
    """

    CidrAllowList: Optional[_ListOfString] = None
    MaxBitrate: Optional[_Integer] = None
    MaxLatency: Optional[_Integer] = None
    MaxSyncBuffer: Optional[_Integer] = None
    MinLatency: Optional[_Integer] = None
    Protocol: Protocol
    RemoteId: Optional[_String] = None
    SmoothingLatency: Optional[_Integer] = None
    StreamId: Optional[_String] = None


class PurchaseOfferingRequest(BaseModel):
    """
    A request to purchase a offering.
    """

    ReservationName: _String
    Start: _String


class RemoveFlowMediaStreamRequest(BaseModel):
    pass


class RemoveFlowOutputRequest(BaseModel):
    pass


class RemoveFlowSourceRequest(BaseModel):
    pass


class RemoveFlowVpcInterfaceRequest(BaseModel):
    pass


class ReservationState(Enum):
    ACTIVE = 'ACTIVE'
    EXPIRED = 'EXPIRED'
    PROCESSING = 'PROCESSING'
    CANCELED = 'CANCELED'


class ResourceType(Enum):
    Mbps_Outbound_Bandwidth = 'Mbps_Outbound_Bandwidth'


class RevokeFlowEntitlementRequest(BaseModel):
    pass


class _ListOfMediaStreamSourceConfiguration(BaseModel):
    __root__: List[MediaStreamSourceConfiguration]


class StartFlowRequest(BaseModel):
    pass


class StopFlowRequest(BaseModel):
    pass


class TagResourceRequest(BaseModel):
    """
    The tags to add to the resource. A tag is an array of key-value pairs. Tag keys can have a maximum character length of 128 characters, and tag values can have a maximum length of 256 characters.
    """

    Tags: _MapOfString


class UntagResourceRequest(BaseModel):
    pass


class UpdateEncryption(BaseModel):
    """
    Information about the encryption of the flow.
    """

    Algorithm: Optional[Algorithm] = None
    ConstantInitializationVector: Optional[_String] = None
    DeviceId: Optional[_String] = None
    KeyType: Optional[KeyType] = None
    Region: Optional[_String] = None
    ResourceId: Optional[_String] = None
    RoleArn: Optional[_String] = None
    SecretArn: Optional[_String] = None
    Url: Optional[_String] = None


class UpdateFailoverConfig(FailoverConfig):
    """
    The settings for source failover
    """

    pass


class UpdateFlowEntitlementRequest(BaseModel):
    """
    The entitlement fields that you want to update.
    """

    Description: Optional[_String] = None
    Encryption: Optional[UpdateEncryption] = None
    EntitlementStatus: Optional[State] = None
    Subscribers: Optional[_ListOfString] = None


class UpdateFlowRequest(BaseModel):
    """
    A request to update flow.
    """

    SourceFailoverConfig: Optional[UpdateFailoverConfig] = None


class VpcInterface(BaseModel):
    """
    The settings for a VPC Source.
    """

    Name: _String
    NetworkInterfaceIds: _ListOfString
    NetworkInterfaceType: NetworkInterfaceType
    RoleArn: _String
    SecurityGroupIds: _ListOfString
    SubnetId: _String


class VpcInterfaceRequest(BaseModel):
    """
    Desired VPC Interface for a Flow
    """

    Name: _String
    NetworkInterfaceType: Optional[NetworkInterfaceType] = None
    RoleArn: _String
    SecurityGroupIds: _ListOfString
    SubnetId: _String


class Encryption(BaseModel):
    """
    Information about the encryption of the flow.
    """

    Algorithm: Optional[Algorithm] = None
    ConstantInitializationVector: Optional[_String] = None
    DeviceId: Optional[_String] = None
    KeyType: Optional[KeyType] = None
    Region: Optional[_String] = None
    ResourceId: Optional[_String] = None
    RoleArn: _String
    SecretArn: Optional[_String] = None
    Url: Optional[_String] = None


class DeleteFlowResponse(BaseModel):
    FlowArn: Optional[_String] = None
    Status: Optional[Status] = None


class ListTagsForResourceResponse(BaseModel):
    Tags: Optional[_MapOfString] = None


class RemoveFlowVpcInterfaceResponse(BaseModel):
    FlowArn: Optional[_String] = None
    NonDeletedNetworkInterfaceIds: Optional[_ListOfString] = None
    VpcInterfaceName: Optional[_String] = None


class StartFlowResponse(DeleteFlowResponse):
    pass


class StopFlowResponse(DeleteFlowResponse):
    pass


class UpdateFlowMediaStreamResponse(BaseModel):
    FlowArn: Optional[_String] = None
    MediaStream: Optional[MediaStream] = None


class FmtpRequest(Fmtp1):
    """
    The settings that you want to use to define the media stream.
    """

    pass


class MediaStreamOutputConfigurationRequest(BaseModel):
    """
    The media stream that you want to associate with the output, and the parameters for that association.
    """

    DestinationConfigurations: Optional[_ListOfDestinationConfigurationRequest] = None
    EncodingName: EncodingName
    EncodingParameters: Optional[EncodingParametersRequest] = None
    MediaStreamName: _String


class MediaStreamSourceConfigurationRequest(BaseModel):
    """
    The definition of a media stream that you want to associate with the source.
    """

    EncodingName: EncodingName
    InputConfigurations: Optional[_ListOfInputConfigurationRequest] = None
    MediaStreamName: _String


class _ListOfMediaStream(BaseModel):
    __root__: List[MediaStream]


class _ListOfVpcInterfaceRequest(BaseModel):
    __root__: List[VpcInterfaceRequest]


class AddFlowVpcInterfacesRequest(BaseModel):
    """
    A request to add VPC interfaces to the flow.
    """

    VpcInterfaces: _ListOfVpcInterfaceRequest


class _ListOfVpcInterface(BaseModel):
    __root__: List[VpcInterface]


class MediaStreamAttributesRequest(BaseModel):
    """
    Attributes that are related to the media stream.
    """

    Fmtp: Optional[FmtpRequest] = None
    Lang: Optional[_String] = None


class _ListOfMediaStreamOutputConfigurationRequest(BaseModel):
    __root__: List[MediaStreamOutputConfigurationRequest]


class Entitlement(BaseModel):
    """
    The settings for a flow entitlement.
    """

    DataTransferSubscriberFeePercent: Optional[_Integer] = None
    Description: Optional[_String] = None
    Encryption: Optional[Encryption] = None
    EntitlementArn: _String
    EntitlementStatus: Optional[State] = None
    Name: _String
    Subscribers: _ListOfString


class _ListOfEntitlement(BaseModel):
    __root__: List[Entitlement]


class Source(BaseModel):
    """
    The settings for the source of the flow.
    """

    DataTransferSubscriberFeePercent: Optional[_Integer] = None
    Decryption: Optional[Encryption] = None
    Description: Optional[_String] = None
    EntitlementArn: Optional[_String] = None
    IngestIp: Optional[_String] = None
    IngestPort: Optional[_Integer] = None
    MediaStreamSourceConfigurations: Optional[
        _ListOfMediaStreamSourceConfiguration
    ] = None
    Name: _String
    SourceArn: _String
    Transport: Optional[Transport] = None
    VpcInterfaceName: Optional[_String] = None
    WhitelistCidr: Optional[_String] = None


class _ListOfListedEntitlement(BaseModel):
    __root__: List[ListedEntitlement]


class _ListOfListedFlow(BaseModel):
    __root__: List[ListedFlow]


class ResourceSpecification(BaseModel):
    """
    A definition of what is being billed for, including the type and amount.
    """

    ReservedBitrate: Optional[_Integer] = None
    ResourceType: ResourceType


class Output(BaseModel):
    """
    The settings for an output.
    """

    DataTransferSubscriberFeePercent: Optional[_Integer] = None
    Description: Optional[_String] = None
    Destination: Optional[_String] = None
    Encryption: Optional[Encryption] = None
    EntitlementArn: Optional[_String] = None
    ListenerAddress: Optional[_String] = None
    MediaLiveInputArn: Optional[_String] = None
    MediaStreamOutputConfigurations: Optional[
        _ListOfMediaStreamOutputConfiguration
    ] = None
    Name: _String
    OutputArn: _String
    Port: Optional[_Integer] = None
    Transport: Optional[Transport] = None
    VpcInterfaceAttachment: Optional[VpcInterfaceAttachment] = None


class UpdateFlowMediaStreamRequest(BaseModel):
    """
    The fields that you want to update in the media stream.
    """

    Attributes: Optional[MediaStreamAttributesRequest] = None
    ClockRate: Optional[_Integer] = None
    Description: Optional[_String] = None
    MediaStreamType: Optional[MediaStreamType] = None
    VideoFormat: Optional[_String] = None


class UpdateFlowOutputRequest(BaseModel):
    """
    The fields that you want to update in the output.
    """

    CidrAllowList: Optional[_ListOfString] = None
    Description: Optional[_String] = None
    Destination: Optional[_String] = None
    Encryption: Optional[UpdateEncryption] = None
    MaxLatency: Optional[_Integer] = None
    MediaStreamOutputConfigurations: Optional[
        _ListOfMediaStreamOutputConfigurationRequest
    ] = None
    MinLatency: Optional[_Integer] = None
    Port: Optional[_Integer] = None
    Protocol: Optional[Protocol] = None
    RemoteId: Optional[_String] = None
    SmoothingLatency: Optional[_Integer] = None
    StreamId: Optional[_String] = None
    VpcInterfaceAttachment: Optional[VpcInterfaceAttachment] = None


class AddFlowMediaStreamsResponse(BaseModel):
    FlowArn: Optional[_String] = None
    MediaStreams: Optional[_ListOfMediaStream] = None


class AddMediaStreamRequest(BaseModel):
    """
    The media stream that you want to add to the flow.
    """

    Attributes: Optional[MediaStreamAttributesRequest] = None
    ClockRate: Optional[_Integer] = None
    Description: Optional[_String] = None
    MediaStreamId: _Integer
    MediaStreamName: _String
    MediaStreamType: MediaStreamType
    VideoFormat: Optional[_String] = None


class AddOutputRequest(BaseModel):
    """
    The output that you want to add to this flow.
    """

    CidrAllowList: Optional[_ListOfString] = None
    Description: Optional[_String] = None
    Destination: Optional[_String] = None
    Encryption: Optional[Encryption] = None
    MaxLatency: Optional[_Integer] = None
    MediaStreamOutputConfigurations: Optional[
        _ListOfMediaStreamOutputConfigurationRequest
    ] = None
    MinLatency: Optional[_Integer] = None
    Name: Optional[_String] = None
    Port: Optional[_Integer] = None
    Protocol: Protocol
    RemoteId: Optional[_String] = None
    SmoothingLatency: Optional[_Integer] = None
    StreamId: Optional[_String] = None
    VpcInterfaceAttachment: Optional[VpcInterfaceAttachment] = None


class AddFlowVpcInterfacesResponse(BaseModel):
    FlowArn: Optional[_String] = None
    VpcInterfaces: Optional[_ListOfVpcInterface] = None


class GrantEntitlementRequest(BaseModel):
    """
    The entitlements that you want to grant on a flow.
    """

    DataTransferSubscriberFeePercent: Optional[_Integer] = None
    Description: Optional[_String] = None
    Encryption: Optional[Encryption] = None
    EntitlementStatus: Optional[State] = None
    Name: Optional[_String] = None
    Subscribers: _ListOfString


class _ListOfMediaStreamSourceConfigurationRequest(BaseModel):
    __root__: List[MediaStreamSourceConfigurationRequest]


class GrantFlowEntitlementsResponse(BaseModel):
    Entitlements: Optional[_ListOfEntitlement] = None
    FlowArn: Optional[_String] = None


class ListEntitlementsResponse(BaseModel):
    Entitlements: Optional[_ListOfListedEntitlement] = None
    NextToken: Optional[_String] = None


class ListFlowsResponse(BaseModel):
    Flows: Optional[_ListOfListedFlow] = None
    NextToken: Optional[_String] = None


class UpdateFlowEntitlementResponse(BaseModel):
    Entitlement: Optional[Entitlement] = None
    FlowArn: Optional[_String] = None


class UpdateFlowOutputResponse(BaseModel):
    FlowArn: Optional[_String] = None
    Output: Optional[Output] = None


class UpdateFlowSourceResponse(BaseModel):
    FlowArn: Optional[_String] = None
    Source: Optional[Source] = None


class _ListOfAddMediaStreamRequest(BaseModel):
    __root__: List[AddMediaStreamRequest]


class AddFlowMediaStreamsRequest(BaseModel):
    """
    A request to add media streams to the flow.
    """

    MediaStreams: _ListOfAddMediaStreamRequest


class _ListOfAddOutputRequest(BaseModel):
    __root__: List[AddOutputRequest]


class AddFlowOutputsRequest(BaseModel):
    """
    A request to add outputs to the specified flow.
    """

    Outputs: _ListOfAddOutputRequest


class _ListOfOutput(BaseModel):
    __root__: List[Output]


class _ListOfSource(BaseModel):
    __root__: List[Source]


class _ListOfGrantEntitlementRequest(BaseModel):
    __root__: List[GrantEntitlementRequest]


class Flow(BaseModel):
    """
    The settings for a flow, including its source, outputs, and entitlements.
    """

    AvailabilityZone: _String
    Description: Optional[_String] = None
    EgressIp: Optional[_String] = None
    Entitlements: _ListOfEntitlement
    FlowArn: _String
    MediaStreams: Optional[_ListOfMediaStream] = None
    Name: _String
    Outputs: _ListOfOutput
    Source: Source
    SourceFailoverConfig: Optional[FailoverConfig] = None
    Sources: Optional[_ListOfSource] = None
    Status: Status
    VpcInterfaces: Optional[_ListOfVpcInterface] = None


class Offering(BaseModel):
    """
    A savings plan that reserves a certain amount of outbound bandwidth usage at a discounted rate each month over a period of time.
    """

    CurrencyCode: _String
    Duration: _Integer
    DurationUnits: DurationUnits
    OfferingArn: _String
    OfferingDescription: _String
    PricePerUnit: _String
    PriceUnits: PriceUnits
    ResourceSpecification: ResourceSpecification


class Reservation(BaseModel):
    """
    A pricing agreement for a discounted rate for a specific outbound bandwidth that your MediaConnect account will use each month over a specific time period. The discounted rate in the reservation applies to outbound bandwidth for all flows from your account until your account reaches the amount of bandwidth in your reservation. If you use more outbound bandwidth than the agreed upon amount in a single month, the overage is charged at the on-demand rate.
    """

    CurrencyCode: _String
    Duration: _Integer
    DurationUnits: DurationUnits
    End: _String
    OfferingArn: _String
    OfferingDescription: _String
    PricePerUnit: _String
    PriceUnits: PriceUnits
    ReservationArn: _String
    ReservationName: _String
    ReservationState: ReservationState
    ResourceSpecification: ResourceSpecification
    Start: _String


class GrantFlowEntitlementsRequest(BaseModel):
    """
    A request to grant entitlements on a flow.
    """

    Entitlements: _ListOfGrantEntitlementRequest


class _ListOfOffering(BaseModel):
    __root__: List[Offering]


class _ListOfReservation(BaseModel):
    __root__: List[Reservation]


class UpdateFlowSourceRequest(BaseModel):
    """
    A request to update the source of a flow.
    """

    Decryption: Optional[UpdateEncryption] = None
    Description: Optional[_String] = None
    EntitlementArn: Optional[_String] = None
    IngestPort: Optional[_Integer] = None
    MaxBitrate: Optional[_Integer] = None
    MaxLatency: Optional[_Integer] = None
    MaxSyncBuffer: Optional[_Integer] = None
    MediaStreamSourceConfigurations: Optional[
        _ListOfMediaStreamSourceConfigurationRequest
    ] = None
    MinLatency: Optional[_Integer] = None
    Protocol: Optional[Protocol] = None
    StreamId: Optional[_String] = None
    VpcInterfaceName: Optional[_String] = None
    WhitelistCidr: Optional[_String] = None


class AddFlowOutputsResponse(BaseModel):
    FlowArn: Optional[_String] = None
    Outputs: Optional[_ListOfOutput] = None


class AddFlowSourcesResponse(BaseModel):
    FlowArn: Optional[_String] = None
    Sources: Optional[_ListOfSource] = None


class SetSourceRequest(BaseModel):
    """
    The settings for the source of the flow.
    """

    Decryption: Optional[Encryption] = None
    Description: Optional[_String] = None
    EntitlementArn: Optional[_String] = None
    IngestPort: Optional[_Integer] = None
    MaxBitrate: Optional[_Integer] = None
    MaxLatency: Optional[_Integer] = None
    MaxSyncBuffer: Optional[_Integer] = None
    MediaStreamSourceConfigurations: Optional[
        _ListOfMediaStreamSourceConfigurationRequest
    ] = None
    MinLatency: Optional[_Integer] = None
    Name: Optional[_String] = None
    Protocol: Optional[Protocol] = None
    StreamId: Optional[_String] = None
    VpcInterfaceName: Optional[_String] = None
    WhitelistCidr: Optional[_String] = None


class CreateFlowResponse(BaseModel):
    Flow: Optional[Flow] = None


class DescribeFlowResponse(BaseModel):
    Flow: Optional[Flow] = None
    Messages: Optional[Messages] = None


class DescribeOfferingResponse(BaseModel):
    Offering: Optional[Offering] = None


class DescribeReservationResponse(BaseModel):
    Reservation: Optional[Reservation] = None


class ListOfferingsResponse(BaseModel):
    NextToken: Optional[_String] = None
    Offerings: Optional[_ListOfOffering] = None


class ListReservationsResponse(BaseModel):
    NextToken: Optional[_String] = None
    Reservations: Optional[_ListOfReservation] = None


class PurchaseOfferingResponse(DescribeReservationResponse):
    pass


class UpdateFlowResponse(CreateFlowResponse):
    pass


class _ListOfSetSourceRequest(BaseModel):
    __root__: List[SetSourceRequest]


class AddFlowSourcesRequest(BaseModel):
    """
    A request to add sources to the flow.
    """

    Sources: _ListOfSetSourceRequest


class CreateFlowRequest(BaseModel):
    """
    Creates a new flow. The request must include one source. The request optionally can include outputs (up to 50) and entitlements (up to 50).
    """

    AvailabilityZone: Optional[_String] = None
    Entitlements: Optional[_ListOfGrantEntitlementRequest] = None
    MediaStreams: Optional[_ListOfAddMediaStreamRequest] = None
    Name: _String
    Outputs: Optional[_ListOfAddOutputRequest] = None
    Source: Optional[SetSourceRequest] = None
    SourceFailoverConfig: Optional[FailoverConfig] = None
    Sources: Optional[_ListOfSetSourceRequest] = None
    VpcInterfaces: Optional[_ListOfVpcInterfaceRequest] = None
