# generated by datamodel-codegen:
#   filename:  openapi.yaml
#   timestamp: 2021-12-31T02:54:03+00:00

from __future__ import annotations

from datetime import datetime
from enum import Enum
from typing import Annotated, Any, List, Optional

from pydantic import BaseModel, Extra, Field


class CreateConfigurationSetResponse(BaseModel):
    """
    An HTTP 200 response if the request succeeds, or an error message if the request fails.
    """

    pass


class CustomRedirectDomain(BaseModel):
    __root__: Annotated[
        str,
        Field(
            description='The domain that you want to use for tracking open and click events.'
        ),
    ]


class TlsPolicy(Enum):
    """
    Specifies whether messages that use the configuration set are required to use Transport Layer Security (TLS). If the value is <code>Require</code>, messages are only delivered if a TLS connection can be established. If the value is <code>Optional</code>, messages can be delivered in plain text if a TLS connection can't be established.
    """

    REQUIRE = 'REQUIRE'
    OPTIONAL = 'OPTIONAL'


class PoolName(BaseModel):
    __root__: Annotated[str, Field(description='The name of a dedicated IP pool.')]


class Enabled(BaseModel):
    __root__: bool


class LastFreshStart(BaseModel):
    __root__: Annotated[
        datetime,
        Field(
            description='The date and time (in Unix time) when the reputation metrics were last given a fresh start. When your account is given a fresh start, your reputation metrics are calculated starting from the date of the fresh start.'
        ),
    ]


class AlreadyExistsException(BaseModel):
    __root__: Any


class NotFoundException(AlreadyExistsException):
    pass


class TooManyRequestsException(AlreadyExistsException):
    pass


class LimitExceededException(AlreadyExistsException):
    pass


class BadRequestException(AlreadyExistsException):
    pass


class ConcurrentModificationException(AlreadyExistsException):
    pass


class CreateConfigurationSetEventDestinationResponse(CreateConfigurationSetResponse):
    """
    An HTTP 200 response if the request succeeds, or an error message if the request fails.
    """

    pass


class CreateDedicatedIpPoolResponse(CreateConfigurationSetResponse):
    """
    An HTTP 200 response if the request succeeds, or an error message if the request fails.
    """

    pass


class AccountSuspendedException(AlreadyExistsException):
    pass


class SendingPausedException(AlreadyExistsException):
    pass


class MessageRejected(AlreadyExistsException):
    pass


class MailFromDomainNotVerifiedException(AlreadyExistsException):
    pass


class DeleteConfigurationSetResponse(CreateConfigurationSetResponse):
    """
    An HTTP 200 response if the request succeeds, or an error message if the request fails.
    """

    pass


class DeleteConfigurationSetEventDestinationResponse(CreateConfigurationSetResponse):
    """
    An HTTP 200 response if the request succeeds, or an error message if the request fails.
    """

    pass


class DeleteDedicatedIpPoolResponse(CreateConfigurationSetResponse):
    """
    An HTTP 200 response if the request succeeds, or an error message if the request fails.
    """

    pass


class DeleteEmailIdentityResponse(CreateConfigurationSetResponse):
    """
    An HTTP 200 response if the request succeeds, or an error message if the request fails.
    """

    pass


class BlacklistItemName(BaseModel):
    __root__: Annotated[
        str,
        Field(
            description='An IP address that you want to obtain blacklist information for.'
        ),
    ]


class PutAccountDedicatedIpWarmupAttributesResponse(CreateConfigurationSetResponse):
    """
    An HTTP 200 response if the request succeeds, or an error message if the request fails.
    """

    pass


class PutAccountSendingAttributesResponse(CreateConfigurationSetResponse):
    """
    An HTTP 200 response if the request succeeds, or an error message if the request fails.
    """

    pass


class PutConfigurationSetDeliveryOptionsResponse(CreateConfigurationSetResponse):
    """
    An HTTP 200 response if the request succeeds, or an error message if the request fails.
    """

    pass


class PutConfigurationSetReputationOptionsResponse(CreateConfigurationSetResponse):
    """
    An HTTP 200 response if the request succeeds, or an error message if the request fails.
    """

    pass


class PutConfigurationSetSendingOptionsResponse(CreateConfigurationSetResponse):
    """
    An HTTP 200 response if the request succeeds, or an error message if the request fails.
    """

    pass


class PutConfigurationSetTrackingOptionsResponse(CreateConfigurationSetResponse):
    """
    An HTTP 200 response if the request succeeds, or an error message if the request fails.
    """

    pass


class PutDedicatedIpInPoolResponse(CreateConfigurationSetResponse):
    """
    An HTTP 200 response if the request succeeds, or an error message if the request fails.
    """

    pass


class PutDedicatedIpWarmupAttributesResponse(CreateConfigurationSetResponse):
    """
    An HTTP 200 response if the request succeeds, or an error message if the request fails.
    """

    pass


class PutDeliverabilityDashboardOptionResponse(CreateConfigurationSetResponse):
    """
    A response that indicates whether the Deliverability dashboard is enabled for your Amazon Pinpoint account.
    """

    pass


class PutEmailIdentityDkimAttributesResponse(CreateConfigurationSetResponse):
    """
    An HTTP 200 response if the request succeeds, or an error message if the request fails.
    """

    pass


class PutEmailIdentityFeedbackAttributesResponse(CreateConfigurationSetResponse):
    """
    An HTTP 200 response if the request succeeds, or an error message if the request fails.
    """

    pass


class PutEmailIdentityMailFromAttributesResponse(CreateConfigurationSetResponse):
    """
    An HTTP 200 response if the request succeeds, or an error message if the request fails.
    """

    pass


class EmailAddress(BaseModel):
    __root__: str


class TagResourceResponse(CreateConfigurationSetResponse):
    pass


class UntagResourceResponse(CreateConfigurationSetResponse):
    pass


class TagKey(EmailAddress):
    pass


class UpdateConfigurationSetEventDestinationResponse(CreateConfigurationSetResponse):
    """
    An HTTP 200 response if the request succeeds, or an error message if the request fails.
    """

    pass


class AmazonResourceName(EmailAddress):
    pass


class BehaviorOnMxFailure(Enum):
    """
    <p>The action that you want Amazon Pinpoint to take if it can't read the required MX record for a custom MAIL FROM domain. When you set this value to <code>UseDefaultValue</code>, Amazon Pinpoint uses <i>amazonses.com</i> as the MAIL FROM domain. When you set this value to <code>RejectMessage</code>, Amazon Pinpoint returns a <code>MailFromDomainNotVerified</code> error, and doesn't attempt to deliver the email.</p> <p>These behaviors are taken when the custom MAIL FROM domain configuration is in the <code>Pending</code>, <code>Failed</code>, and <code>TemporaryFailure</code> states.</p>
    """

    USE_DEFAULT_VALUE = 'USE_DEFAULT_VALUE'
    REJECT_MESSAGE = 'REJECT_MESSAGE'


class RblName(BaseModel):
    __root__: Annotated[
        str,
        Field(description='The name of a blacklist that an IP address was found on.'),
    ]


class Timestamp(BaseModel):
    __root__: datetime


class BlacklistingDescription(BaseModel):
    __root__: Annotated[
        str, Field(description='A description of the blacklisting event.')
    ]


class BlacklistItemNames(BaseModel):
    __root__: List[BlacklistItemName]


class BlacklistReport(BaseModel):
    pass

    class Config:
        extra = Extra.allow


class CampaignId(EmailAddress):
    pass


class Charset(EmailAddress):
    pass


class DimensionName(BaseModel):
    __root__: Annotated[
        str,
        Field(
            description='<p>The name of an Amazon CloudWatch dimension associated with an email sending metric. The name has to meet the following criteria:</p> <ul> <li> <p>It can only contain ASCII letters (a-z, A-Z), numbers (0-9), underscores (_), or dashes (-).</p> </li> <li> <p>It can contain no more than 256 characters.</p> </li> </ul>'
        ),
    ]


class DimensionValueSource(Enum):
    """
    The location where Amazon Pinpoint finds the value of a dimension to publish to Amazon CloudWatch. If you want Amazon Pinpoint to use the message tags that you specify using an X-SES-MESSAGE-TAGS header or a parameter to the SendEmail/SendRawEmail API, choose <code>messageTag</code>. If you want Amazon Pinpoint to use your own email headers, choose <code>emailHeader</code>. If you want Amazon Pinpoint to use link tags, choose <code>linkTags</code>.
    """

    MESSAGE_TAG = 'MESSAGE_TAG'
    EMAIL_HEADER = 'EMAIL_HEADER'
    LINK_TAG = 'LINK_TAG'


class DefaultDimensionValue(BaseModel):
    __root__: Annotated[
        str,
        Field(
            description="<p>The default value of the dimension that is published to Amazon CloudWatch if you don't provide the value of the dimension when you send an email. This value has to meet the following criteria:</p> <ul> <li> <p>It can only contain ASCII letters (a-z, A-Z), numbers (0-9), underscores (_), or dashes (-).</p> </li> <li> <p>It can contain no more than 256 characters.</p> </li> </ul>"
        ),
    ]


class CloudWatchDimensionConfiguration(BaseModel):
    """
    An object that defines the dimension configuration to use when you send Amazon Pinpoint email events to Amazon CloudWatch.
    """

    DimensionName: DimensionName
    DimensionValueSource: DimensionValueSource
    DefaultDimensionValue: DefaultDimensionValue


class ConfigurationSetName(BaseModel):
    __root__: Annotated[
        str,
        Field(
            description='<p>The name of a configuration set.</p> <p>In Amazon Pinpoint, <i>configuration sets</i> are groups of rules that you can apply to the emails you send. You apply a configuration set to an email by including a reference to the configuration set in the headers of the email. When you apply a configuration set to an email, all of the rules in that configuration set are applied to the email.</p>'
        ),
    ]


class ConfigurationSetNameList(BaseModel):
    __root__: List[ConfigurationSetName]


class MessageData(EmailAddress):
    pass


class EventDestinationName(BaseModel):
    __root__: Annotated[
        str,
        Field(
            description='<p>The name of an event destination.</p> <p>In Amazon Pinpoint, <i>events</i> include message sends, deliveries, opens, clicks, bounces, and complaints. <i>Event destinations</i> are places that you can send information about these events to. For example, you can send event data to Amazon SNS to receive notifications when you receive bounces or complaints, or you can use Amazon Kinesis Data Firehose to stream data to Amazon S3 for long-term storage.</p>'
        ),
    ]


class TrackingOptions(BaseModel):
    """
    <p>An object that defines the tracking options for a configuration set. When you use Amazon Pinpoint to send an email, it contains an invisible image that's used to track when recipients open your email. If your email contains links, those links are changed slightly in order to track when recipients click them.</p> <p>These images and links include references to a domain operated by AWS. You can optionally configure Amazon Pinpoint to use a domain that you operate for these images and links.</p>
    """

    CustomRedirectDomain: CustomRedirectDomain


class DeliveryOptions(BaseModel):
    """
    Used to associate a configuration set with a dedicated IP pool.
    """

    TlsPolicy: Optional[TlsPolicy] = None
    SendingPoolName: Optional[PoolName] = None


class ReputationOptions(BaseModel):
    """
    Enable or disable collection of reputation metrics for emails that you send using this configuration set in the current AWS Region.
    """

    ReputationMetricsEnabled: Optional[Enabled] = None
    LastFreshStart: Optional[LastFreshStart] = None


class SendingOptions(BaseModel):
    """
    Used to enable or disable email sending for messages that use this configuration set in the current AWS Region.
    """

    SendingEnabled: Optional[Enabled] = None


class ReportName(BaseModel):
    __root__: Annotated[
        str,
        Field(
            description='A name that helps you identify a report generated by the Deliverability dashboard.'
        ),
    ]


class ReportId(BaseModel):
    __root__: Annotated[
        str,
        Field(
            description='A unique string that identifies a Deliverability dashboard report.'
        ),
    ]


class DeliverabilityTestStatus(Enum):
    """
    The status of a predictive inbox placement test. If the status is <code>IN_PROGRESS</code>, then the predictive inbox placement test is currently running. Predictive inbox placement tests are usually complete within 24 hours of creating the test. If the status is <code>COMPLETE</code>, then the test is finished, and you can use the <code>GetDeliverabilityTestReport</code> operation to view the results of the test.
    """

    IN_PROGRESS = 'IN_PROGRESS'
    COMPLETED = 'COMPLETED'


class Identity(EmailAddress):
    pass


class IdentityType(Enum):
    """
    <p>The email identity type. The identity type can be one of the following:</p> <ul> <li> <p> <code>EMAIL_ADDRESS</code> – The identity is an email address.</p> </li> <li> <p> <code>DOMAIN</code> – The identity is a domain.</p> </li> </ul>
    """

    EMAIL_ADDRESS = 'EMAIL_ADDRESS'
    DOMAIN = 'DOMAIN'
    MANAGED_DOMAIN = 'MANAGED_DOMAIN'


class Ip(BaseModel):
    __root__: Annotated[
        str,
        Field(
            description='A dedicated IP address that is associated with your Amazon Pinpoint account.'
        ),
    ]


class WarmupStatus(Enum):
    """
    The warmup status of a dedicated IP.
    """

    IN_PROGRESS = 'IN_PROGRESS'
    DONE = 'DONE'


class Percentage100Wrapper(BaseModel):
    __root__: int


class DedicatedIp(BaseModel):
    """
    <p>Contains information about a dedicated IP address that is associated with your Amazon Pinpoint account.</p> <p/>
    """

    Ip: Ip
    WarmupStatus: WarmupStatus
    WarmupPercentage: Percentage100Wrapper
    PoolName: Optional[PoolName] = None


class DedicatedIpList(BaseModel):
    """
    A list of dedicated IP addresses that are associated with your Amazon Pinpoint account.
    """

    __root__: Annotated[
        List[DedicatedIp],
        Field(
            description='A list of dedicated IP addresses that are associated with your Amazon Pinpoint account.'
        ),
    ]


class DeleteConfigurationSetEventDestinationRequest(BaseModel):
    """
    A request to delete an event destination from a configuration set.
    """

    pass


class DeleteConfigurationSetRequest(BaseModel):
    """
    A request to delete a configuration set.
    """

    pass


class DeleteDedicatedIpPoolRequest(BaseModel):
    """
    A request to delete a dedicated IP pool.
    """

    pass


class DeleteEmailIdentityRequest(BaseModel):
    """
    A request to delete an existing email identity. When you delete an identity, you lose the ability to use Amazon Pinpoint to send email from that identity. You can restore your ability to send email by completing the verification process for the identity again.
    """

    pass


class DeliverabilityDashboardAccountStatus(Enum):
    """
    The current status of your Deliverability dashboard subscription. If this value is <code>PENDING_EXPIRATION</code>, your subscription is scheduled to expire at the end of the current calendar month.
    """

    ACTIVE = 'ACTIVE'
    PENDING_EXPIRATION = 'PENDING_EXPIRATION'
    DISABLED = 'DISABLED'


class DeliverabilityTestSubject(BaseModel):
    __root__: Annotated[
        str,
        Field(
            description='The subject line for an email that you submitted in a predictive inbox placement test.'
        ),
    ]


class DeliverabilityTestReport(BaseModel):
    """
    An object that contains metadata related to a predictive inbox placement test.
    """

    ReportId: Optional[ReportId] = None
    ReportName: Optional[ReportName] = None
    Subject: Optional[DeliverabilityTestSubject] = None
    FromEmailAddress: Optional[EmailAddress] = None
    CreateDate: Optional[Timestamp] = None
    DeliverabilityTestStatus: Optional[DeliverabilityTestStatus] = None


class DeliverabilityTestReports(BaseModel):
    __root__: List[DeliverabilityTestReport]


class DkimStatus(Enum):
    """
    <p>The DKIM authentication status of the identity. The status can be one of the following:</p> <ul> <li> <p> <code>PENDING</code> – The DKIM verification process was initiated, and Amazon Pinpoint is still waiting for the required CNAME records to appear in the DNS configuration for the domain.</p> </li> <li> <p> <code>SUCCESS</code> – The DKIM authentication process completed successfully.</p> </li> <li> <p> <code>FAILED</code> – The DKIM authentication process failed. This can happen when Amazon Pinpoint fails to find the required CNAME records in the DNS configuration of the domain.</p> </li> <li> <p> <code>TEMPORARY_FAILURE</code> – A temporary issue is preventing Amazon Pinpoint from determining the DKIM authentication status of the domain.</p> </li> <li> <p> <code>NOT_STARTED</code> – The DKIM verification process hasn't been initiated for the domain.</p> </li> </ul>
    """

    PENDING = 'PENDING'
    SUCCESS = 'SUCCESS'
    FAILED = 'FAILED'
    TEMPORARY_FAILURE = 'TEMPORARY_FAILURE'
    NOT_STARTED = 'NOT_STARTED'


class DnsToken(EmailAddress):
    pass


class Domain(EmailAddress):
    pass


class ImageUrl(EmailAddress):
    pass


class Subject2(EmailAddress):
    pass


class IpList(BaseModel):
    __root__: List[Ip]


class Volume(BaseModel):
    __root__: Annotated[
        int,
        Field(
            description='An object that contains information about inbox placement volume.'
        ),
    ]


class Percentage(BaseModel):
    __root__: Annotated[
        float,
        Field(
            description='An object that contains information about inbox placement percentages.'
        ),
    ]


class IspName(BaseModel):
    __root__: Annotated[str, Field(description='The name of an email provider.')]


class DomainIspPlacement(BaseModel):
    """
    An object that contains inbox placement data for email sent from one of your email domains to a specific email provider.
    """

    IspName: Optional[IspName] = None
    InboxRawCount: Optional[Volume] = None
    SpamRawCount: Optional[Volume] = None
    InboxPercentage: Optional[Percentage] = None
    SpamPercentage: Optional[Percentage] = None


class Esp(EmailAddress):
    pass


class EventType(Enum):
    """
    An email sending event type. For example, email sends, opens, and bounces are all email events.
    """

    SEND = 'SEND'
    REJECT = 'REJECT'
    BOUNCE = 'BOUNCE'
    COMPLAINT = 'COMPLAINT'
    DELIVERY = 'DELIVERY'
    OPEN = 'OPEN'
    CLICK = 'CLICK'
    RENDERING_FAILURE = 'RENDERING_FAILURE'


class GeneralEnforcementStatus(EmailAddress):
    pass


class GetAccountRequest(BaseModel):
    """
    A request to obtain information about the email-sending capabilities of your Amazon Pinpoint account.
    """

    pass


class GetBlacklistReportsRequest(BaseModel):
    """
    A request to retrieve a list of the blacklists that your dedicated IP addresses appear on.
    """

    pass


class GetConfigurationSetEventDestinationsRequest(BaseModel):
    """
    A request to obtain information about the event destinations for a configuration set.
    """

    pass


class GetConfigurationSetRequest(BaseModel):
    """
    A request to obtain information about a configuration set.
    """

    pass


class GetDedicatedIpRequest(BaseModel):
    """
    A request to obtain more information about a dedicated IP address.
    """

    pass


class NextToken(EmailAddress):
    pass


class MaxItems(Percentage100Wrapper):
    pass


class GetDedicatedIpsRequest(BaseModel):
    """
    A request to obtain more information about dedicated IP pools.
    """

    pass


class GetDeliverabilityDashboardOptionsRequest(BaseModel):
    """
    <p>Retrieve information about the status of the Deliverability dashboard for your Amazon Pinpoint account. When the Deliverability dashboard is enabled, you gain access to reputation, deliverability, and other metrics for the domains that you use to send email using Amazon Pinpoint. You also gain the ability to perform predictive inbox placement tests.</p> <p>When you use the Deliverability dashboard, you pay a monthly subscription charge, in addition to any other fees that you accrue by using Amazon Pinpoint. For more information about the features and cost of a Deliverability dashboard subscription, see <a href="http://aws.amazon.com/pinpoint/pricing/">Amazon Pinpoint Pricing</a>.</p>
    """

    pass


class GetDeliverabilityTestReportRequest(BaseModel):
    """
    A request to retrieve the results of a predictive inbox placement test.
    """

    pass


class PlacementStatistics(BaseModel):
    """
    An object that contains inbox placement data for an email provider.
    """

    InboxPercentage: Optional[Percentage] = None
    SpamPercentage: Optional[Percentage] = None
    MissingPercentage: Optional[Percentage] = None
    SpfPercentage: Optional[Percentage] = None
    DkimPercentage: Optional[Percentage] = None


class MessageContent(BaseModel):
    __root__: Annotated[str, Field(description='The body of an email message.')]


class GetDomainDeliverabilityCampaignRequest(BaseModel):
    """
    Retrieve all the deliverability data for a specific campaign. This data is available for a campaign only if the campaign sent email by using a domain that the Deliverability dashboard is enabled for (<code>PutDeliverabilityDashboardOption</code> operation).
    """

    pass


class GetDomainStatisticsReportRequest(BaseModel):
    """
    A request to obtain deliverability metrics for a domain.
    """

    pass


class GetEmailIdentityRequest(BaseModel):
    """
    A request to return details about an email identity.
    """

    pass


class IdentityInfo(BaseModel):
    """
    Information about an email identity.
    """

    IdentityType: Optional[IdentityType] = None
    IdentityName: Optional[Identity] = None
    SendingEnabled: Optional[Enabled] = None


class IdentityInfoList(BaseModel):
    __root__: List[IdentityInfo]


class IspNameList(BaseModel):
    __root__: List[IspName]


class IspPlacement(BaseModel):
    """
    An object that describes how email sent during the predictive inbox placement test was handled by a certain email provider.
    """

    IspName: Optional[IspName] = None
    PlacementStatistics: Optional[PlacementStatistics] = None


class ListConfigurationSetsRequest(BaseModel):
    """
    A request to obtain a list of configuration sets for your Amazon Pinpoint account in the current AWS Region.
    """

    pass


class ListDedicatedIpPoolsRequest(BaseModel):
    """
    A request to obtain a list of dedicated IP pools.
    """

    pass


class ListOfDedicatedIpPools(BaseModel):
    """
    A list of dedicated IP pools that are associated with your Amazon Pinpoint account.
    """

    __root__: Annotated[
        List[PoolName],
        Field(
            description='A list of dedicated IP pools that are associated with your Amazon Pinpoint account.'
        ),
    ]


class ListDeliverabilityTestReportsRequest(BaseModel):
    """
    A request to list all of the predictive inbox placement tests that you've performed.
    """

    pass


class ListDomainDeliverabilityCampaignsRequest(BaseModel):
    """
    Retrieve deliverability data for all the campaigns that used a specific domain to send email during a specified time range. This data is available for a domain only if you enabled the Deliverability dashboard (<code>PutDeliverabilityDashboardOption</code> operation) for the domain.
    """

    pass


class ListEmailIdentitiesRequest(BaseModel):
    """
    A request to list all of the email identities associated with your Amazon Pinpoint account. This list includes identities that you've already verified, identities that are unverified, and identities that were verified in the past, but are no longer verified.
    """

    pass


class ListTagsForResourceRequest(BaseModel):
    pass


class MailFromDomainName(BaseModel):
    __root__: Annotated[
        str, Field(description='The domain that you want to use as a MAIL FROM domain.')
    ]


class MailFromDomainStatus(Enum):
    """
    <p>The status of the MAIL FROM domain. This status can have the following values:</p> <ul> <li> <p> <code>PENDING</code> – Amazon Pinpoint hasn't started searching for the MX record yet.</p> </li> <li> <p> <code>SUCCESS</code> – Amazon Pinpoint detected the required MX record for the MAIL FROM domain.</p> </li> <li> <p> <code>FAILED</code> – Amazon Pinpoint can't find the required MX record, or the record no longer exists.</p> </li> <li> <p> <code>TEMPORARY_FAILURE</code> – A temporary issue occurred, which prevented Amazon Pinpoint from determining the status of the MAIL FROM domain.</p> </li> </ul>
    """

    PENDING = 'PENDING'
    SUCCESS = 'SUCCESS'
    FAILED = 'FAILED'
    TEMPORARY_FAILURE = 'TEMPORARY_FAILURE'


class Max24HourSend(BaseModel):
    __root__: float


class MaxSendRate(Max24HourSend):
    pass


class MessageTagName(BaseModel):
    __root__: Annotated[
        str,
        Field(
            description='<p>The name of the message tag. The message tag name has to meet the following criteria:</p> <ul> <li> <p>It can only contain ASCII letters (a–z, A–Z), numbers (0–9), underscores (_), or dashes (-).</p> </li> <li> <p>It can contain no more than 256 characters.</p> </li> </ul>'
        ),
    ]


class MessageTagValue(BaseModel):
    __root__: Annotated[
        str,
        Field(
            description='<p>The value of the message tag. The message tag value has to meet the following criteria:</p> <ul> <li> <p>It can only contain ASCII letters (a–z, A–Z), numbers (0–9), underscores (_), or dashes (-).</p> </li> <li> <p>It can contain no more than 256 characters.</p> </li> </ul>'
        ),
    ]


class OutboundMessageId(EmailAddress):
    pass


class PutAccountDedicatedIpWarmupAttributesRequest(BaseModel):
    """
    A request to enable or disable the automatic IP address warm-up feature.
    """

    AutoWarmupEnabled: Optional[Enabled] = None


class PutAccountSendingAttributesRequest(BaseModel):
    """
    A request to change the ability of your account to send email.
    """

    SendingEnabled: Optional[Enabled] = None


class SendingPoolName1(BaseModel):
    __root__: Annotated[
        str,
        Field(
            description='The name of the dedicated IP pool that you want to associate with the configuration set.'
        ),
    ]


class PutConfigurationSetDeliveryOptionsRequest(BaseModel):
    """
    A request to associate a configuration set with a dedicated IP pool.
    """

    TlsPolicy: Optional[TlsPolicy] = None
    SendingPoolName: Optional[SendingPoolName1] = None


class PutConfigurationSetReputationOptionsRequest(BaseModel):
    """
    A request to enable or disable tracking of reputation metrics for a configuration set.
    """

    ReputationMetricsEnabled: Optional[Enabled] = None


class PutConfigurationSetSendingOptionsRequest(BaseModel):
    """
    A request to enable or disable the ability of Amazon Pinpoint to send emails that use a specific configuration set.
    """

    SendingEnabled: Optional[Enabled] = None


class PutConfigurationSetTrackingOptionsRequest(BaseModel):
    """
    A request to add a custom domain for tracking open and click events to a configuration set.
    """

    CustomRedirectDomain: Optional[CustomRedirectDomain] = None


class PutDedicatedIpInPoolRequest(BaseModel):
    """
    A request to move a dedicated IP address to a dedicated IP pool.
    """

    DestinationPoolName: PoolName


class PutDedicatedIpWarmupAttributesRequest(BaseModel):
    """
    A request to change the warm-up attributes for a dedicated IP address. This operation is useful when you want to resume the warm-up process for an existing IP address.
    """

    WarmupPercentage: Percentage100Wrapper


class PutEmailIdentityDkimAttributesRequest(BaseModel):
    """
    A request to enable or disable DKIM signing of email that you send from an email identity.
    """

    SigningEnabled: Optional[Enabled] = None


class PutEmailIdentityFeedbackAttributesRequest(BaseModel):
    """
    A request to set the attributes that control how bounce and complaint events are processed.
    """

    EmailForwardingEnabled: Optional[Enabled] = None


class PutEmailIdentityMailFromAttributesRequest(BaseModel):
    """
    A request to configure the custom MAIL FROM domain for a verified identity.
    """

    MailFromDomain: Optional[MailFromDomainName] = None
    BehaviorOnMxFailure: Optional[BehaviorOnMxFailure] = None


class RawMessageData(BaseModel):
    __root__: Annotated[
        str,
        Field(
            description='<p>The raw email message. The message has to meet the following criteria:</p> <ul> <li> <p>The message has to contain a header and a body, separated by one blank line.</p> </li> <li> <p>All of the required header fields must be present in the message.</p> </li> <li> <p>Each part of a multipart MIME message must be formatted properly.</p> </li> <li> <p>Attachments must be in a file format that Amazon Pinpoint supports. </p> </li> <li> <p>The entire message must be Base64 encoded.</p> </li> <li> <p>If any of the MIME parts in your message contain content that is outside of the 7-bit ASCII character range, you should encode that content to ensure that recipients\' email clients render the message properly.</p> </li> <li> <p>The length of any single line of text in the message can\'t exceed 1,000 characters. This restriction is defined in <a href="https://tools.ietf.org/html/rfc5321">RFC 5321</a>.</p> </li> </ul>'
        ),
    ]


class SentLast24Hours(Max24HourSend):
    pass


class TagValue(EmailAddress):
    pass


class TagKeyList(BaseModel):
    __root__: List[TagKey]


class TemplateArn(EmailAddress):
    pass


class TemplateData(BaseModel):
    __root__: Annotated[str, Field(max_length=262144)]


class UntagResourceRequest(BaseModel):
    pass


class Tag(BaseModel):
    """
    <p>An object that defines the tags that are associated with a resource. A <i>tag</i> is a label that you optionally define and associate with a resource in Amazon Pinpoint. Tags can help you categorize and manage resources in different ways, such as by purpose, owner, environment, or other criteria. A resource can have as many as 50 tags.</p> <p>Each tag consists of a required <i>tag key</i> and an associated <i>tag value</i>, both of which you define. A tag key is a general label that acts as a category for a more specific tag value. A tag value acts as a descriptor within a tag key. A tag key can contain as many as 128 characters. A tag value can contain as many as 256 characters. The characters can be Unicode letters, digits, white space, or one of the following symbols: _ . : / = + -. The following additional restrictions apply to tags:</p> <ul> <li> <p>Tag keys and values are case sensitive.</p> </li> <li> <p>For each associated resource, each tag key must be unique and it can have only one value.</p> </li> <li> <p>The <code>aws:</code> prefix is reserved for use by AWS; you can’t use it in any tag keys or values that you define. In addition, you can't edit or remove tag keys or values that use this prefix. Tags that use this prefix don’t count against the limit of 50 tags per resource.</p> </li> <li> <p>You can associate tags with public or shared resources, but the tags are available only for your AWS account, not any other accounts that share the resource. In addition, the tags are available only for resources that are located in the specified AWS Region for your AWS account.</p> </li> </ul>
    """

    Key: TagKey
    Value: TagValue


class EventTypes(BaseModel):
    __root__: List[EventType]


class KinesisFirehoseDestination(BaseModel):
    """
    An object that defines an Amazon Kinesis Data Firehose destination for email events. You can use Amazon Kinesis Data Firehose to stream data to other services, such as Amazon S3 and Amazon Redshift.
    """

    IamRoleArn: AmazonResourceName
    DeliveryStreamArn: AmazonResourceName


class SnsDestination(BaseModel):
    """
    An object that defines an Amazon SNS destination for email events. You can use Amazon SNS to send notification when certain email events occur.
    """

    TopicArn: AmazonResourceName


class PinpointDestination(BaseModel):
    """
    An object that defines a Amazon Pinpoint destination for email events. You can use Amazon Pinpoint events to create attributes in Amazon Pinpoint projects. You can use these attributes to create segments for your campaigns.
    """

    ApplicationArn: Optional[AmazonResourceName] = None


class CreateDeliverabilityTestReportResponse(BaseModel):
    """
    Information about the predictive inbox placement test that you created.
    """

    ReportId: ReportId
    DeliverabilityTestStatus: DeliverabilityTestStatus


class RawMessage(BaseModel):
    """
    The raw email message.
    """

    Data: RawMessageData


class Template(BaseModel):
    TemplateArn: Optional[TemplateArn] = None
    TemplateData: Optional[TemplateData] = None


class GetBlacklistReportsResponse(BaseModel):
    """
    An object that contains information about blacklist events.
    """

    BlacklistReport: BlacklistReport


class GetDedicatedIpResponse(BaseModel):
    """
    Information about a dedicated IP address.
    """

    DedicatedIp: Optional[DedicatedIp] = None


class GetDedicatedIpsResponse(BaseModel):
    """
    Information about the dedicated IP addresses that are associated with your Amazon Pinpoint account.
    """

    DedicatedIps: Optional[DedicatedIpList] = None
    NextToken: Optional[NextToken] = None


class ListConfigurationSetsResponse(BaseModel):
    """
    A list of configuration sets in your Amazon Pinpoint account in the current AWS Region.
    """

    ConfigurationSets: Optional[ConfigurationSetNameList] = None
    NextToken: Optional[NextToken] = None


class ListDedicatedIpPoolsResponse(BaseModel):
    """
    A list of dedicated IP pools.
    """

    DedicatedIpPools: Optional[ListOfDedicatedIpPools] = None
    NextToken: Optional[NextToken] = None


class ListDeliverabilityTestReportsResponse(BaseModel):
    """
    A list of the predictive inbox placement test reports that are available for your account, regardless of whether or not those tests are complete.
    """

    DeliverabilityTestReports: DeliverabilityTestReports
    NextToken: Optional[NextToken] = None


class ListEmailIdentitiesResponse(BaseModel):
    """
    A list of all of the identities that you've attempted to verify for use with Amazon Pinpoint, regardless of whether or not those identities were successfully verified.
    """

    EmailIdentities: Optional[IdentityInfoList] = None
    NextToken: Optional[NextToken] = None


class SendEmailResponse(BaseModel):
    """
    A unique message ID that you receive when Amazon Pinpoint accepts an email for sending.
    """

    MessageId: Optional[OutboundMessageId] = None


class EmailAddressList(BaseModel):
    __root__: List[EmailAddress]


class MessageTag(BaseModel):
    """
    Contains the name and value of a tag that you apply to an email. You can use message tags when you publish email sending events.
    """

    Name: MessageTagName
    Value: MessageTagValue


class BlacklistEntry(BaseModel):
    """
    An object that contains information about a blacklisting event that impacts one of the dedicated IP addresses that is associated with your account.
    """

    RblName: Optional[RblName] = None
    ListingTime: Optional[Timestamp] = None
    Description: Optional[BlacklistingDescription] = None


class BlacklistEntries(BaseModel):
    __root__: List[BlacklistEntry]


class Content(BaseModel):
    """
    An object that represents the content of the email, and optionally a character set specification.
    """

    Data: MessageData
    Charset: Optional[Charset] = None


class Body(BaseModel):
    """
    Represents the body of the email message.
    """

    Text: Optional[Content] = None
    Html: Optional[Content] = None


class CloudWatchDimensionConfigurations(BaseModel):
    __root__: List[CloudWatchDimensionConfiguration]


class TagList(BaseModel):
    __root__: List[Tag]


class CreateConfigurationSetRequest(BaseModel):
    """
    A request to create a configuration set.
    """

    ConfigurationSetName: ConfigurationSetName
    TrackingOptions: Optional[TrackingOptions] = None
    DeliveryOptions: Optional[DeliveryOptions] = None
    ReputationOptions: Optional[ReputationOptions] = None
    SendingOptions: Optional[SendingOptions] = None
    Tags: Optional[TagList] = None


class CreateDedicatedIpPoolRequest(BaseModel):
    """
    A request to create a new dedicated IP pool.
    """

    PoolName: PoolName
    Tags: Optional[TagList] = None


class CreateEmailIdentityRequest(BaseModel):
    """
    A request to begin the verification process for an email identity (an email address or domain).
    """

    EmailIdentity: Identity
    Tags: Optional[TagList] = None


class VolumeStatistics(BaseModel):
    """
    An object that contains information about the amount of email that was delivered to recipients.
    """

    InboxRawCount: Optional[Volume] = None
    SpamRawCount: Optional[Volume] = None
    ProjectedInbox: Optional[Volume] = None
    ProjectedSpam: Optional[Volume] = None


class DomainIspPlacements(BaseModel):
    __root__: List[DomainIspPlacement]


class DailyVolume(BaseModel):
    """
    An object that contains information about the volume of email sent on each day of the analysis period.
    """

    StartDate: Optional[Timestamp] = None
    VolumeStatistics: Optional[VolumeStatistics] = None
    DomainIspPlacements: Optional[DomainIspPlacements] = None


class DailyVolumes(BaseModel):
    __root__: List[DailyVolume]


class Destination(BaseModel):
    """
    An object that describes the recipients for an email.
    """

    ToAddresses: Optional[EmailAddressList] = None
    CcAddresses: Optional[EmailAddressList] = None
    BccAddresses: Optional[EmailAddressList] = None


class DnsTokenList(BaseModel):
    __root__: List[DnsToken]


class Esps(BaseModel):
    __root__: List[Esp]


class DomainDeliverabilityCampaign(BaseModel):
    """
    An object that contains the deliverability data for a specific campaign. This data is available for a campaign only if the campaign sent email by using a domain that the Deliverability dashboard is enabled for (<code>PutDeliverabilityDashboardOption</code> operation).
    """

    CampaignId: Optional[CampaignId] = None
    ImageUrl: Optional[ImageUrl] = None
    Subject: Optional[Subject2] = None
    FromAddress: Optional[Identity] = None
    SendingIps: Optional[IpList] = None
    FirstSeenDateTime: Optional[Timestamp] = None
    LastSeenDateTime: Optional[Timestamp] = None
    InboxCount: Optional[Volume] = None
    SpamCount: Optional[Volume] = None
    ReadRate: Optional[Percentage] = None
    DeleteRate: Optional[Percentage] = None
    ReadDeleteRate: Optional[Percentage] = None
    ProjectedVolume: Optional[Volume] = None
    Esps: Optional[Esps] = None


class DomainDeliverabilityCampaignList(BaseModel):
    """
    <p/>
    """

    __root__: Annotated[List[DomainDeliverabilityCampaign], Field(description='<p/>')]


class InboxPlacementTrackingOption(BaseModel):
    """
    An object that contains information about the inbox placement data settings for a verified domain that’s associated with your AWS account. This data is available only if you enabled the Deliverability dashboard for the domain (<code>PutDeliverabilityDashboardOption</code> operation).
    """

    Global: Optional[Enabled] = None
    TrackedIsps: Optional[IspNameList] = None


class SendQuota(BaseModel):
    """
    An object that contains information about the per-day and per-second sending limits for your Amazon Pinpoint account in the current AWS Region.
    """

    Max24HourSend: Optional[Max24HourSend] = None
    MaxSendRate: Optional[MaxSendRate] = None
    SentLast24Hours: Optional[SentLast24Hours] = None


class IspPlacements(BaseModel):
    __root__: List[IspPlacement]


class OverallVolume(BaseModel):
    """
    An object that contains information about email that was sent from the selected domain.
    """

    VolumeStatistics: Optional[VolumeStatistics] = None
    ReadRatePercent: Optional[Percentage] = None
    DomainIspPlacements: Optional[DomainIspPlacements] = None


class MailFromAttributes(BaseModel):
    """
    A list of attributes that are associated with a MAIL FROM domain.
    """

    MailFromDomain: MailFromDomainName
    MailFromDomainStatus: MailFromDomainStatus
    BehaviorOnMxFailure: BehaviorOnMxFailure


class MessageTagList(BaseModel):
    """
    A list of message tags.
    """

    __root__: Annotated[List[MessageTag], Field(description='A list of message tags.')]


class TagResourceRequest(BaseModel):
    ResourceArn: AmazonResourceName
    Tags: TagList


class CloudWatchDestination(BaseModel):
    """
    An object that defines an Amazon CloudWatch destination for email events. You can use Amazon CloudWatch to monitor and gain insights on your email sending metrics.
    """

    DimensionConfigurations: CloudWatchDimensionConfigurations


class Message(BaseModel):
    """
    Represents the email message that you're sending. The <code>Message</code> object consists of a subject line and a message body.
    """

    Subject: Content
    Body: Body


class GetAccountResponse(BaseModel):
    """
    A list of details about the email-sending capabilities of your Amazon Pinpoint account in the current AWS Region.
    """

    SendQuota: Optional[SendQuota] = None
    SendingEnabled: Optional[Enabled] = None
    DedicatedIpAutoWarmupEnabled: Optional[Enabled] = None
    EnforcementStatus: Optional[GeneralEnforcementStatus] = None
    ProductionAccessEnabled: Optional[Enabled] = None


class GetConfigurationSetResponse(BaseModel):
    """
    Information about a configuration set.
    """

    ConfigurationSetName: Optional[ConfigurationSetName] = None
    TrackingOptions: Optional[TrackingOptions] = None
    DeliveryOptions: Optional[DeliveryOptions] = None
    ReputationOptions: Optional[ReputationOptions] = None
    SendingOptions: Optional[SendingOptions] = None
    Tags: Optional[TagList] = None


class GetDeliverabilityTestReportResponse(BaseModel):
    """
    The results of the predictive inbox placement test.
    """

    DeliverabilityTestReport: DeliverabilityTestReport
    OverallPlacement: PlacementStatistics
    IspPlacements: IspPlacements
    Message: Optional[MessageContent] = None
    Tags: Optional[TagList] = None


class GetDomainDeliverabilityCampaignResponse(BaseModel):
    """
    An object that contains all the deliverability data for a specific campaign. This data is available for a campaign only if the campaign sent email by using a domain that the Deliverability dashboard is enabled for (<code>PutDeliverabilityDashboardOption</code> operation).
    """

    DomainDeliverabilityCampaign: DomainDeliverabilityCampaign


class GetDomainStatisticsReportResponse(BaseModel):
    """
    An object that includes statistics that are related to the domain that you specified.
    """

    OverallVolume: OverallVolume
    DailyVolumes: DailyVolumes


class ListDomainDeliverabilityCampaignsResponse(BaseModel):
    """
    An array of objects that provide deliverability data for all the campaigns that used a specific domain to send email during a specified time range. This data is available for a domain only if you enabled the Deliverability dashboard (<code>PutDeliverabilityDashboardOption</code> operation) for the domain.
    """

    DomainDeliverabilityCampaigns: DomainDeliverabilityCampaignList
    NextToken: Optional[NextToken] = None


class ListTagsForResourceResponse(BaseModel):
    Tags: TagList


class DomainDeliverabilityTrackingOption(BaseModel):
    """
    An object that contains information about the Deliverability dashboard subscription for a verified domain that you use to send email and currently has an active Deliverability dashboard subscription. If a Deliverability dashboard subscription is active for a domain, you gain access to reputation, inbox placement, and other metrics for the domain.
    """

    Domain: Optional[Domain] = None
    SubscriptionStartDate: Optional[Timestamp] = None
    InboxPlacementTrackingOption: Optional[InboxPlacementTrackingOption] = None


class EventDestinationDefinition(BaseModel):
    """
    An object that defines the event destination. Specifically, it defines which services receive events from emails sent using the configuration set that the event destination is associated with. Also defines the types of events that are sent to the event destination.
    """

    Enabled: Optional[Enabled] = None
    MatchingEventTypes: Optional[EventTypes] = None
    KinesisFirehoseDestination: Optional[KinesisFirehoseDestination] = None
    CloudWatchDestination: Optional[CloudWatchDestination] = None
    SnsDestination: Optional[SnsDestination] = None
    PinpointDestination: Optional[PinpointDestination] = None


class CreateConfigurationSetEventDestinationRequest(BaseModel):
    """
    A request to add an event destination to a configuration set.
    """

    EventDestinationName: EventDestinationName
    EventDestination: EventDestinationDefinition


class EmailContent(BaseModel):
    """
    An object that defines the entire content of the email, including the message headers and the body content. You can create a simple email message, in which you specify the subject and the text and HTML versions of the message body. You can also create raw messages, in which you specify a complete MIME-formatted message. Raw messages can include attachments and custom headers.
    """

    Simple: Optional[Message] = None
    Raw: Optional[RawMessage] = None
    Template: Optional[Template] = None


class CreateDeliverabilityTestReportRequest(BaseModel):
    """
    A request to perform a predictive inbox placement test. Predictive inbox placement tests can help you predict how your messages will be handled by various email providers around the world. When you perform a predictive inbox placement test, you provide a sample message that contains the content that you plan to send to your customers. Amazon Pinpoint then sends that message to special email addresses spread across several major email providers. After about 24 hours, the test is complete, and you can use the <code>GetDeliverabilityTestReport</code> operation to view the results of the test.
    """

    ReportName: Optional[ReportName] = None
    FromEmailAddress: EmailAddress
    Content: EmailContent
    Tags: Optional[TagList] = None


class DkimAttributes(BaseModel):
    """
    An object that contains information about the DKIM configuration for an email identity.
    """

    SigningEnabled: Optional[Enabled] = None
    Status: Optional[DkimStatus] = None
    Tokens: Optional[DnsTokenList] = None


class DomainDeliverabilityTrackingOptions(BaseModel):
    """
    An object that contains information about the Deliverability dashboard subscription for a verified domain that you use to send email and currently has an active Deliverability dashboard subscription. If a Deliverability dashboard subscription is active for a domain, you gain access to reputation, inbox placement, and other metrics for the domain.
    """

    __root__: Annotated[
        List[DomainDeliverabilityTrackingOption],
        Field(
            description='An object that contains information about the Deliverability dashboard subscription for a verified domain that you use to send email and currently has an active Deliverability dashboard subscription. If a Deliverability dashboard subscription is active for a domain, you gain access to reputation, inbox placement, and other metrics for the domain.'
        ),
    ]


class EventDestination1(BaseModel):
    """
    In Amazon Pinpoint, <i>events</i> include message sends, deliveries, opens, clicks, bounces, and complaints. <i>Event destinations</i> are places that you can send information about these events to. For example, you can send event data to Amazon SNS to receive notifications when you receive bounces or complaints, or you can use Amazon Kinesis Data Firehose to stream data to Amazon S3 for long-term storage.
    """

    Name: EventDestinationName
    Enabled: Optional[Enabled] = None
    MatchingEventTypes: EventTypes
    KinesisFirehoseDestination: Optional[KinesisFirehoseDestination] = None
    CloudWatchDestination: Optional[CloudWatchDestination] = None
    SnsDestination: Optional[SnsDestination] = None
    PinpointDestination: Optional[PinpointDestination] = None


class EventDestinations(BaseModel):
    __root__: List[EventDestination1]


class PutDeliverabilityDashboardOptionRequest(BaseModel):
    """
    <p>Enable or disable the Deliverability dashboard for your Amazon Pinpoint account. When you enable the Deliverability dashboard, you gain access to reputation, deliverability, and other metrics for the domains that you use to send email using Amazon Pinpoint. You also gain the ability to perform predictive inbox placement tests.</p> <p>When you use the Deliverability dashboard, you pay a monthly subscription charge, in addition to any other fees that you accrue by using Amazon Pinpoint. For more information about the features and cost of a Deliverability dashboard subscription, see <a href="http://aws.amazon.com/pinpoint/pricing/">Amazon Pinpoint Pricing</a>.</p>
    """

    DashboardEnabled: Enabled
    SubscribedDomains: Optional[DomainDeliverabilityTrackingOptions] = None


class SendEmailRequest(BaseModel):
    """
    A request to send an email message.
    """

    FromEmailAddress: Optional[EmailAddress] = None
    Destination: Destination
    ReplyToAddresses: Optional[EmailAddressList] = None
    FeedbackForwardingEmailAddress: Optional[EmailAddress] = None
    Content: EmailContent
    EmailTags: Optional[MessageTagList] = None
    ConfigurationSetName: Optional[ConfigurationSetName] = None


class UpdateConfigurationSetEventDestinationRequest(BaseModel):
    """
    A request to change the settings for an event destination for a configuration set.
    """

    EventDestination: EventDestinationDefinition


class CreateEmailIdentityResponse(BaseModel):
    """
    <p>If the email identity is a domain, this object contains tokens that you can use to create a set of CNAME records. To sucessfully verify your domain, you have to add these records to the DNS configuration for your domain.</p> <p>If the email identity is an email address, this object is empty. </p>
    """

    IdentityType: Optional[IdentityType] = None
    VerifiedForSendingStatus: Optional[Enabled] = None
    DkimAttributes: Optional[DkimAttributes] = None


class GetConfigurationSetEventDestinationsResponse(BaseModel):
    """
    Information about an event destination for a configuration set.
    """

    EventDestinations: Optional[EventDestinations] = None


class GetDeliverabilityDashboardOptionsResponse(BaseModel):
    """
    An object that shows the status of the Deliverability dashboard for your Amazon Pinpoint account.
    """

    DashboardEnabled: Enabled
    SubscriptionExpiryDate: Optional[Timestamp] = None
    AccountStatus: Optional[DeliverabilityDashboardAccountStatus] = None
    ActiveSubscribedDomains: Optional[DomainDeliverabilityTrackingOptions] = None
    PendingExpirationSubscribedDomains: Optional[
        DomainDeliverabilityTrackingOptions
    ] = None


class GetEmailIdentityResponse(BaseModel):
    """
    Details about an email identity.
    """

    IdentityType: Optional[IdentityType] = None
    FeedbackForwardingStatus: Optional[Enabled] = None
    VerifiedForSendingStatus: Optional[Enabled] = None
    DkimAttributes: Optional[DkimAttributes] = None
    MailFromAttributes: Optional[MailFromAttributes] = None
    Tags: Optional[TagList] = None
