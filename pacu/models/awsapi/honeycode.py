# generated by datamodel-codegen:
#   filename:  openapi.yaml
#   timestamp: 2021-12-31T02:50:18+00:00

from __future__ import annotations

from datetime import datetime
from enum import Enum
from typing import Annotated, Any, List, Optional

from pydantic import BaseModel, Extra, Field, SecretStr


class AccessDeniedException(BaseModel):
    __root__: Any


class InternalServerException(AccessDeniedException):
    pass


class RequestTimeoutException(AccessDeniedException):
    pass


class ResourceNotFoundException(AccessDeniedException):
    pass


class ServiceQuotaExceededException(AccessDeniedException):
    pass


class ServiceUnavailableException(AccessDeniedException):
    pass


class ThrottlingException(AccessDeniedException):
    pass


class ValidationException(AccessDeniedException):
    pass


class RowId(BaseModel):
    __root__: Annotated[
        str,
        Field(
            max_length=77,
            min_length=77,
            regex='row:[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}\\/[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}',
        ),
    ]


class AutomationExecutionException(AccessDeniedException):
    pass


class AutomationExecutionTimeoutException(AccessDeniedException):
    pass


class Formula(BaseModel):
    __root__: Annotated[SecretStr, Field(max_length=8192, min_length=0, regex='^=.*')]


class AwsUserArn(BaseModel):
    __root__: Annotated[str, Field(max_length=2048, min_length=20)]


class ResourceId(BaseModel):
    __root__: Annotated[
        str,
        Field(
            max_length=36,
            min_length=36,
            regex='[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}',
        ),
    ]


class ClientRequestToken(BaseModel):
    __root__: Annotated[str, Field(max_length=64, min_length=32, regex='^(?!\\s*$).+')]


class WorkbookCursor(BaseModel):
    __root__: int


class CreatedRowsMap(BaseModel):
    pass

    class Config:
        extra = Extra.allow


class RowIdList(BaseModel):
    __root__: Annotated[List[RowId], Field(max_items=100, min_items=1)]


class BatchDeleteTableRowsRequest(BaseModel):
    rowIds: RowIdList
    clientRequestToken: Optional[ClientRequestToken] = None


class BatchErrorMessage(BaseModel):
    __root__: Annotated[str, Field(regex='^(?!\\s*$).+')]


class BatchItemId(BaseModel):
    __root__: Annotated[str, Field(max_length=64, min_length=1, regex='^(?!\\s*$).+')]


class UpsertRowsResultMap(BaseModel):
    pass

    class Config:
        extra = Extra.allow


class Format(Enum):
    AUTO = 'AUTO'
    NUMBER = 'NUMBER'
    CURRENCY = 'CURRENCY'
    DATE = 'DATE'
    TIME = 'TIME'
    DATE_TIME = 'DATE_TIME'
    PERCENTAGE = 'PERCENTAGE'
    TEXT = 'TEXT'
    ACCOUNTING = 'ACCOUNTING'
    CONTACT = 'CONTACT'
    ROWLINK = 'ROWLINK'


class RawValue(BaseModel):
    __root__: Annotated[str, Field(max_length=32767, min_length=0, regex='[\\s\\S]*')]


class FormattedValue(BaseModel):
    __root__: Annotated[str, Field(max_length=8192, min_length=0, regex='[\\s\\S]*')]


class Cell(BaseModel):
    """
    An object that represents a single cell in a table.
    """

    formula: Optional[Formula] = None
    format: Optional[Format] = None
    rawValue: Optional[RawValue] = None
    formattedValue: Optional[FormattedValue] = None


class Fact(BaseModel):
    __root__: Annotated[
        SecretStr, Field(max_length=8192, min_length=0, regex='[\\s\\S]*')
    ]


class CellInput(BaseModel):
    """
    CellInput object contains the data needed to create or update cells in a table.
    """

    fact: Optional[Fact] = None


class Cells(BaseModel):
    __root__: List[Cell]


class Name(BaseModel):
    __root__: SecretStr


class ColumnMetadata(BaseModel):
    """
    Metadata for column in the table.
    """

    name: Name
    format: Format


class RowDataInput(BaseModel):
    pass

    class Config:
        extra = Extra.allow


class DataItem(BaseModel):
    """
    The data in a particular data cell defined on the screen.
    """

    overrideFormat: Optional[Format] = None
    rawValue: Optional[RawValue] = None
    formattedValue: Optional[FormattedValue] = None


class DataItems(BaseModel):
    __root__: List[DataItem]


class DelimitedTextDelimiter(BaseModel):
    __root__: Annotated[
        str,
        Field(
            max_length=1,
            min_length=1,
            regex='^[^\\n\\r\\x00\\x08\\x0B\\x0C\\x0E\\x1F]?$',
        ),
    ]


class HasHeaderRow(BaseModel):
    __root__: bool


class IgnoreEmptyRows(HasHeaderRow):
    pass


class ImportDataCharacterEncoding(Enum):
    UTF_8 = 'UTF-8'
    US_ASCII = 'US-ASCII'
    ISO_8859_1 = 'ISO-8859-1'
    UTF_16BE = 'UTF-16BE'
    UTF_16LE = 'UTF-16LE'
    UTF_16 = 'UTF-16'


class JobId(BaseModel):
    __root__: Annotated[
        str,
        Field(
            max_length=100,
            min_length=1,
            regex='^[^\\n\\r\\x00\\x08\\x0B\\x0C\\x0E\\x1F]*$',
        ),
    ]


class DescribeTableDataImportJobRequest(BaseModel):
    pass


class TableDataImportJobStatus(Enum):
    SUBMITTED = 'SUBMITTED'
    IN_PROGRESS = 'IN_PROGRESS'
    COMPLETED = 'COMPLETED'
    FAILED = 'FAILED'


class TableDataImportJobMessage(BaseModel):
    __root__: str


class ImportColumnMap(BaseModel):
    pass

    class Config:
        extra = Extra.allow


class Email(BaseModel):
    __root__: Annotated[
        SecretStr,
        Field(
            max_length=254,
            min_length=3,
            regex='^([a-zA-Z0-9_\\-\\.]+)@([a-zA-Z0-9_\\-\\.]+)\\.([a-zA-Z]{2,5})$',
        ),
    ]


class FailedBatchItem(BaseModel):
    """
    A single item in a batch that failed to perform the intended action because of an error preventing it from succeeding.
    """

    id: BatchItemId
    errorMessage: BatchErrorMessage


class Filter(BaseModel):
    """
    An object that represents a filter formula along with the id of the context row under which the filter function needs to evaluate.
    """

    formula: Formula
    contextRowId: Optional[RowId] = None


class VariableValueMap(BaseModel):
    pass

    class Config:
        extra = Extra.allow


class MaxResults(BaseModel):
    __root__: Annotated[int, Field(ge=1.0, le=100.0)]


class PaginationToken(BaseModel):
    __root__: Annotated[str, Field(max_length=1024, min_length=1, regex='^(?!\\s*$).+')]


class GetScreenDataRequest(BaseModel):
    workbookId: ResourceId
    appId: ResourceId
    screenId: ResourceId
    variables: Optional[VariableValueMap] = None
    maxResults: Optional[MaxResults] = None
    nextToken: Optional[PaginationToken] = None


class ResultSetMap(BaseModel):
    pass

    class Config:
        extra = Extra.allow


class SecureURL(BaseModel):
    __root__: Annotated[
        str,
        Field(
            max_length=8000,
            min_length=1,
            regex='^https:\\/\\/[^\\n\\r\\x00\\x08\\x0B\\x0C\\x0E\\x1F]*$',
        ),
    ]


class ImportJobSubmitter(BaseModel):
    """
    An object that contains the attributes of the submitter of the import job.
    """

    email: Optional[Email] = None
    userArn: Optional[AwsUserArn] = None


class ImportSourceDataFormat(Enum):
    DELIMITED_TEXT = 'DELIMITED_TEXT'


class InvokeScreenAutomationRequest(BaseModel):
    variables: Optional[VariableValueMap] = None
    rowId: Optional[RowId] = None
    clientRequestToken: Optional[ClientRequestToken] = None


class ListTableColumnsRequest(BaseModel):
    pass


class ListTableRowsRequest(BaseModel):
    rowIds: Optional[RowIdList] = None
    maxResults: Optional[MaxResults] = None
    nextToken: Optional[PaginationToken] = None


class ResourceIds(BaseModel):
    __root__: Annotated[List[ResourceId], Field(max_items=100, min_items=1)]


class ListTablesRequest(BaseModel):
    pass


class QueryTableRowsRequest(BaseModel):
    filterFormula: Filter
    maxResults: Optional[MaxResults] = None
    nextToken: Optional[PaginationToken] = None


class ResultHeader(BaseModel):
    __root__: List[ColumnMetadata]


class ResultRow(BaseModel):
    """
    A single row in the ResultSet.
    """

    rowId: Optional[RowId] = None
    dataItems: DataItems


class ResultRows(BaseModel):
    __root__: List[ResultRow]


class ResultSet(BaseModel):
    """
    ResultSet contains the results of the request for a single block or list defined on the screen.
    """

    headers: ResultHeader
    rows: ResultRows


class SourceDataColumnIndex(BaseModel):
    __root__: Annotated[int, Field(ge=1.0)]


class TableName(TableDataImportJobMessage):
    pass


class Table(BaseModel):
    """
    An object representing the properties of a table in a workbook.
    """

    tableId: Optional[ResourceId] = None
    tableName: Optional[TableName] = None


class TableColumnName(TableDataImportJobMessage):
    pass


class TableColumn(BaseModel):
    """
    An object that contains attributes about a single column in a table
    """

    tableColumnId: Optional[ResourceId] = None
    tableColumnName: Optional[TableColumnName] = None
    format: Optional[Format] = None


class TimestampInMillis(BaseModel):
    __root__: datetime


class TableRow(BaseModel):
    """
    An object that contains attributes about a single row in a table
    """

    rowId: RowId
    cells: Cells


class UpsertAction(Enum):
    UPDATED = 'UPDATED'
    APPENDED = 'APPENDED'


class UpsertRowsResult(BaseModel):
    """
    An object that represents the result of a single upsert row request.
    """

    rowIds: RowIdList
    upsertAction: UpsertAction


class VariableName(BaseModel):
    __root__: Annotated[SecretStr, Field(regex='^(?!\\s*$).+')]


class CreateRowData(BaseModel):
    """
    Data needed to create a single row in a table as part of the BatchCreateTableRows request.
    """

    batchItemId: BatchItemId
    cellsToCreate: RowDataInput


class UpdateRowData(BaseModel):
    """
    Data needed to create a single row in a table as part of the BatchCreateTableRows request.
    """

    rowId: RowId
    cellsToUpdate: RowDataInput


class UpsertRowData(BaseModel):
    """
    Data needed to upsert rows in a table as part of a single item in the BatchUpsertTableRows request.
    """

    batchItemId: BatchItemId
    filter: Filter
    cellsToUpdate: RowDataInput


class GetScreenDataResult(BaseModel):
    results: ResultSetMap
    workbookCursor: WorkbookCursor
    nextToken: Optional[PaginationToken] = None


class VariableValue(BaseModel):
    """
    The input variables to the app to be used by the InvokeScreenAutomation action request.
    """

    rawValue: RawValue


class InvokeScreenAutomationResult(BaseModel):
    workbookCursor: WorkbookCursor


class StartTableDataImportJobResult(BaseModel):
    jobId: JobId
    jobStatus: TableDataImportJobStatus


class ImportDataSourceConfig(BaseModel):
    """
    An object that contains the configuration parameters for the data source of an import request.
    """

    dataSourceUrl: Optional[SecureURL] = None


class DestinationOptions(BaseModel):
    """
    An object that contains the options relating to the destination of the import request.
    """

    columnMap: Optional[ImportColumnMap] = None


class DelimitedTextImportOptions(BaseModel):
    """
    An object that contains the options relating to parsing delimited text as part of an import request.
    """

    delimiter: DelimitedTextDelimiter
    hasHeaderRow: Optional[HasHeaderRow] = None
    ignoreEmptyRows: Optional[IgnoreEmptyRows] = None
    dataCharacterEncoding: Optional[ImportDataCharacterEncoding] = None


class CreateRowDataList(BaseModel):
    __root__: Annotated[List[CreateRowData], Field(max_items=100, min_items=1)]


class BatchCreateTableRowsRequest(BaseModel):
    rowsToCreate: CreateRowDataList
    clientRequestToken: Optional[ClientRequestToken] = None


class FailedBatchItems(BaseModel):
    __root__: Annotated[List[FailedBatchItem], Field(max_items=100, min_items=0)]


class UpdateRowDataList(BaseModel):
    __root__: Annotated[List[UpdateRowData], Field(max_items=100, min_items=1)]


class BatchUpdateTableRowsRequest(BaseModel):
    rowsToUpdate: UpdateRowDataList
    clientRequestToken: Optional[ClientRequestToken] = None


class UpsertRowDataList(BaseModel):
    __root__: List[UpsertRowData]


class BatchUpsertTableRowsRequest(BaseModel):
    rowsToUpsert: UpsertRowDataList
    clientRequestToken: Optional[ClientRequestToken] = None


class SourceDataColumnProperties(BaseModel):
    """
    An object that contains the properties for importing data to a specific column in a table.
    """

    columnIndex: Optional[SourceDataColumnIndex] = None


class ImportDataSource(BaseModel):
    """
    An object that has details about the source of the data that was submitted for import.
    """

    dataSourceConfig: ImportDataSourceConfig


class ImportOptions(BaseModel):
    """
    An object that contains the options specified by the sumitter of the import request.
    """

    destinationOptions: Optional[DestinationOptions] = None
    delimitedTextOptions: Optional[DelimitedTextImportOptions] = None


class TableColumns(BaseModel):
    __root__: List[TableColumn]


class TableRows(BaseModel):
    __root__: List[TableRow]


class Tables(BaseModel):
    __root__: List[Table]


class StartTableDataImportJobRequest(BaseModel):
    dataSource: ImportDataSource
    dataFormat: ImportSourceDataFormat
    importOptions: ImportOptions
    clientRequestToken: ClientRequestToken


class BatchCreateTableRowsResult(BaseModel):
    workbookCursor: WorkbookCursor
    createdRows: CreatedRowsMap
    failedBatchItems: Optional[FailedBatchItems] = None


class BatchDeleteTableRowsResult(BaseModel):
    workbookCursor: WorkbookCursor
    failedBatchItems: Optional[FailedBatchItems] = None


class BatchUpdateTableRowsResult(BatchDeleteTableRowsResult):
    pass


class BatchUpsertTableRowsResult(BaseModel):
    rows: UpsertRowsResultMap
    workbookCursor: WorkbookCursor
    failedBatchItems: Optional[FailedBatchItems] = None


class ListTableColumnsResult(BaseModel):
    tableColumns: TableColumns
    nextToken: Optional[PaginationToken] = None
    workbookCursor: Optional[WorkbookCursor] = None


class ListTableRowsResult(BaseModel):
    columnIds: ResourceIds
    rows: TableRows
    rowIdsNotFound: Optional[RowIdList] = None
    nextToken: Optional[PaginationToken] = None
    workbookCursor: WorkbookCursor


class ListTablesResult(BaseModel):
    tables: Tables
    nextToken: Optional[PaginationToken] = None
    workbookCursor: Optional[WorkbookCursor] = None


class QueryTableRowsResult(BaseModel):
    columnIds: ResourceIds
    rows: TableRows
    nextToken: Optional[PaginationToken] = None
    workbookCursor: WorkbookCursor


class TableDataImportJobMetadata(BaseModel):
    """
    The metadata associated with the table data import job that was submitted.
    """

    submitter: ImportJobSubmitter
    submitTime: TimestampInMillis
    importOptions: ImportOptions
    dataSource: ImportDataSource


class DescribeTableDataImportJobResult(BaseModel):
    jobStatus: TableDataImportJobStatus
    message: TableDataImportJobMessage
    jobMetadata: TableDataImportJobMetadata
