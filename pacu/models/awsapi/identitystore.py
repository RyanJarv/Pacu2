# generated by datamodel-codegen:
#   filename:  openapi.yaml
#   timestamp: 2021-12-31T02:50:26+00:00

from __future__ import annotations

from typing import Annotated, Any, List, Optional

from pydantic import BaseModel, Field, SecretStr


class ResourceNotFoundException(BaseModel):
    __root__: Any


class ValidationException(ResourceNotFoundException):
    pass


class AccessDeniedException(ResourceNotFoundException):
    pass


class ThrottlingException(ResourceNotFoundException):
    pass


class InternalServerException(ResourceNotFoundException):
    pass


class AttributePath(BaseModel):
    __root__: Annotated[
        str,
        Field(
            max_length=255, min_length=1, regex='[\\p{L}\\p{M}\\p{S}\\p{N}\\p{P} \xa0]+'
        ),
    ]


class IdentityStoreId(BaseModel):
    __root__: Annotated[
        str, Field(max_length=12, min_length=1, regex='^d-[0-9a-f]{10}$')
    ]


class ResourceId(BaseModel):
    __root__: Annotated[
        str,
        Field(
            max_length=47,
            min_length=1,
            regex='^([0-9a-f]{10}-|)[A-Fa-f0-9]{8}-[A-Fa-f0-9]{4}-[A-Fa-f0-9]{4}-[A-Fa-f0-9]{4}-[A-Fa-f0-9]{12}$',
        ),
    ]


class GroupDisplayName(BaseModel):
    __root__: Annotated[
        str,
        Field(
            max_length=1024,
            min_length=1,
            regex='[\\p{L}\\p{M}\\p{S}\\p{N}\\p{P}\\t\\n\\r \xa0]+',
        ),
    ]


class UserName(BaseModel):
    __root__: Annotated[
        SecretStr,
        Field(max_length=128, min_length=1, regex='[\\p{L}\\p{M}\\p{S}\\p{N}\\p{P}]+'),
    ]


class SensitiveStringType(BaseModel):
    __root__: Annotated[
        SecretStr,
        Field(
            max_length=1024,
            min_length=1,
            regex='[\\p{L}\\p{M}\\p{S}\\p{N}\\p{P}\\t\\n\\r \xa0]+',
        ),
    ]


class Filter(BaseModel):
    """
    A query filter used by <code>ListUsers</code> and <code>ListGroup</code>. This filter object provides the attribute name and attribute value to search users or groups.
    """

    AttributePath: AttributePath
    AttributeValue: SensitiveStringType


class Filters(BaseModel):
    __root__: List[Filter]


class Group(BaseModel):
    """
    A group object, which contains a specified group’s metadata and attributes.
    """

    GroupId: ResourceId
    DisplayName: GroupDisplayName


class Groups(BaseModel):
    __root__: List[Group]


class MaxResults(BaseModel):
    __root__: Annotated[int, Field(ge=1.0, le=50.0)]


class NextToken(BaseModel):
    __root__: Annotated[
        str, Field(max_length=65535, min_length=1, regex='^[-a-zA-Z0-9+=/:]*')
    ]


class User(BaseModel):
    """
    A user object, which contains a specified user’s metadata and attributes.
    """

    UserName: UserName
    UserId: ResourceId


class DescribeGroupResponse(Group):
    pass


class DescribeGroupRequest(BaseModel):
    IdentityStoreId: IdentityStoreId
    GroupId: ResourceId


class DescribeUserResponse(User):
    pass


class DescribeUserRequest(BaseModel):
    IdentityStoreId: IdentityStoreId
    UserId: ResourceId


class ListGroupsResponse(BaseModel):
    Groups: Groups
    NextToken: Optional[NextToken] = None


class ListGroupsRequest(BaseModel):
    IdentityStoreId: IdentityStoreId
    MaxResults: Optional[MaxResults] = None
    NextToken: Optional[NextToken] = None
    Filters: Optional[Filters] = None


class ListUsersRequest(BaseModel):
    IdentityStoreId: IdentityStoreId
    MaxResults: Optional[MaxResults] = None
    NextToken: Optional[NextToken] = None
    Filters: Optional[Filters] = None


class Users(BaseModel):
    __root__: List[User]


class ListUsersResponse(BaseModel):
    Users: Users
    NextToken: Optional[NextToken] = None
