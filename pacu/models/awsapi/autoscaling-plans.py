# generated by datamodel-codegen:
#   filename:  openapi.yaml
#   timestamp: 2021-12-31T02:45:30+00:00

from __future__ import annotations

from datetime import datetime
from enum import Enum
from typing import Annotated, Any, List, Optional

from pydantic import BaseModel, Field


class ValidationException(BaseModel):
    __root__: Any


class LimitExceededException(ValidationException):
    pass


class ConcurrentUpdateException(ValidationException):
    pass


class InternalServiceException(ValidationException):
    pass


class DeleteScalingPlanResponse(BaseModel):
    pass


class ObjectNotFoundException(ValidationException):
    pass


class InvalidNextTokenException(ValidationException):
    pass


class UpdateScalingPlanResponse(DeleteScalingPlanResponse):
    pass


class XmlString(BaseModel):
    __root__: str


class Cooldown(BaseModel):
    __root__: int


class ScalingPlanName(BaseModel):
    __root__: Annotated[
        str, Field(max_length=128, min_length=1, regex='[\\p{Print}&&[^|:/]]+')
    ]


class ScalingPlanVersion(Cooldown):
    pass


class MetricName(XmlString):
    pass


class MetricNamespace(XmlString):
    pass


class MetricStatistic(Enum):
    Average = 'Average'
    Minimum = 'Minimum'
    Maximum = 'Maximum'
    SampleCount = 'SampleCount'
    Sum = 'Sum'


class MetricUnit(XmlString):
    pass


class TimestampType(BaseModel):
    __root__: datetime


class MetricScale(BaseModel):
    __root__: float


class Datapoint(BaseModel):
    """
    Represents a single value in the forecast data used for predictive scaling.
    """

    Timestamp: Optional[TimestampType] = None
    Value: Optional[MetricScale] = None


class Datapoints(BaseModel):
    __root__: List[Datapoint]


class MaxResults(Cooldown):
    pass


class NextToken(XmlString):
    pass


class ScalingPlanNames(BaseModel):
    __root__: List[ScalingPlanName]


class DisableDynamicScaling(BaseModel):
    __root__: bool


class DisableScaleIn(DisableDynamicScaling):
    pass


class ForecastDataType(Enum):
    CapacityForecast = 'CapacityForecast'
    LoadForecast = 'LoadForecast'
    ScheduledActionMinCapacity = 'ScheduledActionMinCapacity'
    ScheduledActionMaxCapacity = 'ScheduledActionMaxCapacity'


class ServiceNamespace(Enum):
    autoscaling = 'autoscaling'
    ecs = 'ecs'
    ec2 = 'ec2'
    rds = 'rds'
    dynamodb = 'dynamodb'


class ScalableDimension(Enum):
    autoscaling_autoScalingGroup_DesiredCapacity = (
        'autoscaling:autoScalingGroup:DesiredCapacity'
    )
    ecs_service_DesiredCount = 'ecs:service:DesiredCount'
    ec2_spot_fleet_request_TargetCapacity = 'ec2:spot-fleet-request:TargetCapacity'
    rds_cluster_ReadReplicaCount = 'rds:cluster:ReadReplicaCount'
    dynamodb_table_ReadCapacityUnits = 'dynamodb:table:ReadCapacityUnits'
    dynamodb_table_WriteCapacityUnits = 'dynamodb:table:WriteCapacityUnits'
    dynamodb_index_ReadCapacityUnits = 'dynamodb:index:ReadCapacityUnits'
    dynamodb_index_WriteCapacityUnits = 'dynamodb:index:WriteCapacityUnits'


class LoadMetricType(Enum):
    ASGTotalCPUUtilization = 'ASGTotalCPUUtilization'
    ASGTotalNetworkIn = 'ASGTotalNetworkIn'
    ASGTotalNetworkOut = 'ASGTotalNetworkOut'
    ALBTargetGroupRequestCount = 'ALBTargetGroupRequestCount'


class MetricDimensionName(XmlString):
    pass


class MetricDimensionValue(XmlString):
    pass


class MetricDimension(BaseModel):
    """
    Represents a dimension for a customized metric.
    """

    Name: MetricDimensionName
    Value: MetricDimensionValue


class PolicyName(BaseModel):
    __root__: Annotated[str, Field(max_length=256, min_length=1, regex='\\p{Print}+')]


class PolicyType(Enum):
    TargetTrackingScaling = 'TargetTrackingScaling'


class ResourceLabel(BaseModel):
    __root__: Annotated[str, Field(max_length=1023, min_length=1)]


class PredefinedLoadMetricSpecification(BaseModel):
    """
    <p>Represents a predefined metric that can be used for predictive scaling.</p> <p>After creating your scaling plan, you can use the AWS Auto Scaling console to visualize forecasts for the specified metric. For more information, see <a href="https://docs.aws.amazon.com/autoscaling/plans/userguide/gs-create-scaling-plan.html#gs-view-resource">View Scaling Information for a Resource</a> in the <i>AWS Auto Scaling User Guide</i>.</p>
    """

    PredefinedLoadMetricType: LoadMetricType
    ResourceLabel: Optional[ResourceLabel] = None


class ScalingMetricType(Enum):
    ASGAverageCPUUtilization = 'ASGAverageCPUUtilization'
    ASGAverageNetworkIn = 'ASGAverageNetworkIn'
    ASGAverageNetworkOut = 'ASGAverageNetworkOut'
    DynamoDBReadCapacityUtilization = 'DynamoDBReadCapacityUtilization'
    DynamoDBWriteCapacityUtilization = 'DynamoDBWriteCapacityUtilization'
    ECSServiceAverageCPUUtilization = 'ECSServiceAverageCPUUtilization'
    ECSServiceAverageMemoryUtilization = 'ECSServiceAverageMemoryUtilization'
    ALBRequestCountPerTarget = 'ALBRequestCountPerTarget'
    RDSReaderAverageCPUUtilization = 'RDSReaderAverageCPUUtilization'
    RDSReaderAverageDatabaseConnections = 'RDSReaderAverageDatabaseConnections'
    EC2SpotFleetRequestAverageCPUUtilization = (
        'EC2SpotFleetRequestAverageCPUUtilization'
    )
    EC2SpotFleetRequestAverageNetworkIn = 'EC2SpotFleetRequestAverageNetworkIn'
    EC2SpotFleetRequestAverageNetworkOut = 'EC2SpotFleetRequestAverageNetworkOut'


class PredefinedScalingMetricSpecification(BaseModel):
    """
    Represents a predefined metric that can be used for dynamic scaling as part of a target tracking scaling policy.
    """

    PredefinedScalingMetricType: ScalingMetricType
    ResourceLabel: Optional[ResourceLabel] = None


class PredictiveScalingMaxCapacityBehavior(Enum):
    SetForecastCapacityToMaxCapacity = 'SetForecastCapacityToMaxCapacity'
    SetMaxCapacityToForecastCapacity = 'SetMaxCapacityToForecastCapacity'
    SetMaxCapacityAboveForecastCapacity = 'SetMaxCapacityAboveForecastCapacity'


class PredictiveScalingMode(Enum):
    ForecastAndScale = 'ForecastAndScale'
    ForecastOnly = 'ForecastOnly'


class ResourceCapacity(Cooldown):
    pass


class ResourceIdMaxLen1600(BaseModel):
    __root__: Annotated[str, Field(max_length=1600, min_length=1)]


class ScheduledActionBufferTime(BaseModel):
    __root__: Annotated[int, Field(ge=0.0)]


class ScalingPolicyUpdateBehavior(Enum):
    KeepExternalPolicies = 'KeepExternalPolicies'
    ReplaceExternalPolicies = 'ReplaceExternalPolicies'


class ScalingPlanStatusCode(Enum):
    Active = 'Active'
    ActiveWithProblems = 'ActiveWithProblems'
    CreationInProgress = 'CreationInProgress'
    CreationFailed = 'CreationFailed'
    DeletionInProgress = 'DeletionInProgress'
    DeletionFailed = 'DeletionFailed'
    UpdateInProgress = 'UpdateInProgress'
    UpdateFailed = 'UpdateFailed'


class ScalingStatusCode(Enum):
    Inactive = 'Inactive'
    PartiallyActive = 'PartiallyActive'
    Active = 'Active'


class XmlStringMaxLen128(BaseModel):
    __root__: Annotated[str, Field(max_length=128, min_length=1)]


class XmlStringMaxLen256(BaseModel):
    __root__: Annotated[str, Field(max_length=256, min_length=1)]


class CreateScalingPlanResponse(BaseModel):
    ScalingPlanVersion: ScalingPlanVersion


class DeleteScalingPlanRequest(BaseModel):
    ScalingPlanName: ScalingPlanName
    ScalingPlanVersion: ScalingPlanVersion


class DescribeScalingPlanResourcesRequest(BaseModel):
    ScalingPlanName: ScalingPlanName
    ScalingPlanVersion: ScalingPlanVersion
    MaxResults: Optional[MaxResults] = None
    NextToken: Optional[NextToken] = None


class GetScalingPlanResourceForecastDataResponse(BaseModel):
    Datapoints: Datapoints


class GetScalingPlanResourceForecastDataRequest(BaseModel):
    ScalingPlanName: ScalingPlanName
    ScalingPlanVersion: ScalingPlanVersion
    ServiceNamespace: ServiceNamespace
    ResourceId: XmlString
    ScalableDimension: ScalableDimension
    ForecastDataType: ForecastDataType
    StartTime: TimestampType
    EndTime: TimestampType


class MetricDimensions(BaseModel):
    __root__: List[MetricDimension]


class CustomizedLoadMetricSpecification(BaseModel):
    """
    <p>Represents a CloudWatch metric of your choosing that can be used for predictive scaling. </p> <p>For predictive scaling to work with a customized load metric specification, AWS Auto Scaling needs access to the <code>Sum</code> and <code>Average</code> statistics that CloudWatch computes from metric data.</p> <p>When you choose a load metric, make sure that the required <code>Sum</code> and <code>Average</code> statistics for your metric are available in CloudWatch and that they provide relevant data for predictive scaling. The <code>Sum</code> statistic must represent the total load on the resource, and the <code>Average</code> statistic must represent the average load per capacity unit of the resource. For example, there is a metric that counts the number of requests processed by your Auto Scaling group. If the <code>Sum</code> statistic represents the total request count processed by the group, then the <code>Average</code> statistic for the specified metric must represent the average request count processed by each instance of the group. </p> <p>If you publish your own metrics, you can aggregate the data points at a given interval and then publish the aggregated data points to CloudWatch. Before AWS Auto Scaling generates the forecast, it sums up all the metric data points that occurred within each hour to match the granularity period that is used in the forecast (60 minutes).</p> <p>For information about terminology, available metrics, or how to publish new metrics, see <a href="https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/cloudwatch_concepts.html">Amazon CloudWatch Concepts</a> in the <i>Amazon CloudWatch User Guide</i>. </p> <p>After creating your scaling plan, you can use the AWS Auto Scaling console to visualize forecasts for the specified metric. For more information, see <a href="https://docs.aws.amazon.com/autoscaling/plans/userguide/gs-create-scaling-plan.html#gs-view-resource">View Scaling Information for a Resource</a> in the <i>AWS Auto Scaling User Guide</i>.</p>
    """

    MetricName: MetricName
    Namespace: MetricNamespace
    Dimensions: Optional[MetricDimensions] = None
    Statistic: MetricStatistic
    Unit: Optional[MetricUnit] = None


class CustomizedScalingMetricSpecification(CustomizedLoadMetricSpecification):
    """
    <p>Represents a CloudWatch metric of your choosing that can be used for dynamic scaling as part of a target tracking scaling policy. </p> <p>To create your customized scaling metric specification:</p> <ul> <li> <p>Add values for each required parameter from CloudWatch. You can use an existing metric, or a new metric that you create. To use your own metric, you must first publish the metric to CloudWatch. For more information, see <a href="https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/publishingMetrics.html">Publish Custom Metrics</a> in the <i>Amazon CloudWatch User Guide</i>.</p> </li> <li> <p>Choose a metric that changes proportionally with capacity. The value of the metric should increase or decrease in inverse proportion to the number of capacity units. That is, the value of the metric should decrease when capacity increases. </p> </li> </ul> <p>For information about terminology, available metrics, or how to publish new metrics, see <a href="https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/cloudwatch_concepts.html">Amazon CloudWatch Concepts</a> in the <i>Amazon CloudWatch User Guide</i>. </p>
    """

    pass


class TargetTrackingConfiguration(BaseModel):
    """
    Describes a target tracking configuration to use with AWS Auto Scaling. Used with <a>ScalingInstruction</a> and <a>ScalingPolicy</a>.
    """

    PredefinedScalingMetricSpecification: Optional[
        PredefinedScalingMetricSpecification
    ] = None
    CustomizedScalingMetricSpecification: Optional[
        CustomizedScalingMetricSpecification
    ] = None
    TargetValue: MetricScale
    DisableScaleIn: Optional[DisableScaleIn] = None
    ScaleOutCooldown: Optional[Cooldown] = None
    ScaleInCooldown: Optional[Cooldown] = None
    EstimatedInstanceWarmup: Optional[Cooldown] = None


class TagValues(BaseModel):
    __root__: List[XmlStringMaxLen256]


class TagFilter(BaseModel):
    """
    Represents a tag.
    """

    Key: Optional[XmlStringMaxLen128] = None
    Values: Optional[TagValues] = None


class TagFilters(BaseModel):
    __root__: List[TagFilter]


class ApplicationSource(BaseModel):
    """
    Represents an application source.
    """

    CloudFormationStackARN: Optional[XmlString] = None
    TagFilters: Optional[TagFilters] = None


class ApplicationSources(BaseModel):
    __root__: List[ApplicationSource]


class TargetTrackingConfigurations(BaseModel):
    __root__: List[TargetTrackingConfiguration]


class ScalingInstruction(BaseModel):
    """
    <p>Describes a scaling instruction for a scalable resource in a scaling plan. Each scaling instruction applies to one resource.</p> <p>AWS Auto Scaling creates target tracking scaling policies based on the scaling instructions. Target tracking scaling policies adjust the capacity of your scalable resource as required to maintain resource utilization at the target value that you specified. </p> <p>AWS Auto Scaling also configures predictive scaling for your Amazon EC2 Auto Scaling groups using a subset of parameters, including the load metric, the scaling metric, the target value for the scaling metric, the predictive scaling mode (forecast and scale or forecast only), and the desired behavior when the forecast capacity exceeds the maximum capacity of the resource. With predictive scaling, AWS Auto Scaling generates forecasts with traffic predictions for the two days ahead and schedules scaling actions that proactively add and remove resource capacity to match the forecast. </p> <important> <p>We recommend waiting a minimum of 24 hours after creating an Auto Scaling group to configure predictive scaling. At minimum, there must be 24 hours of historical data to generate a forecast. For more information, see <a href="https://docs.aws.amazon.com/autoscaling/plans/userguide/gs-best-practices.html">Best Practices for AWS Auto Scaling</a> in the <i>AWS Auto Scaling User Guide</i>.</p> </important>
    """

    ServiceNamespace: ServiceNamespace
    ResourceId: ResourceIdMaxLen1600
    ScalableDimension: ScalableDimension
    MinCapacity: ResourceCapacity
    MaxCapacity: ResourceCapacity
    TargetTrackingConfigurations: TargetTrackingConfigurations
    PredefinedLoadMetricSpecification: Optional[
        PredefinedLoadMetricSpecification
    ] = None
    CustomizedLoadMetricSpecification: Optional[
        CustomizedLoadMetricSpecification
    ] = None
    ScheduledActionBufferTime: Optional[ScheduledActionBufferTime] = None
    PredictiveScalingMaxCapacityBehavior: Optional[
        PredictiveScalingMaxCapacityBehavior
    ] = None
    PredictiveScalingMaxCapacityBuffer: Optional[ResourceCapacity] = None
    PredictiveScalingMode: Optional[PredictiveScalingMode] = None
    ScalingPolicyUpdateBehavior: Optional[ScalingPolicyUpdateBehavior] = None
    DisableDynamicScaling: Optional[DisableDynamicScaling] = None


class ScalingPolicy(BaseModel):
    """
    Represents a scaling policy.
    """

    PolicyName: PolicyName
    PolicyType: PolicyType
    TargetTrackingConfiguration: Optional[TargetTrackingConfiguration] = None


class DescribeScalingPlansRequest(BaseModel):
    ScalingPlanNames: Optional[ScalingPlanNames] = None
    ScalingPlanVersion: Optional[ScalingPlanVersion] = None
    ApplicationSources: Optional[ApplicationSources] = None
    MaxResults: Optional[MaxResults] = None
    NextToken: Optional[NextToken] = None


class ScalingInstructions(BaseModel):
    __root__: List[ScalingInstruction]


class ScalingPlan(BaseModel):
    """
    Represents a scaling plan.
    """

    ScalingPlanName: ScalingPlanName
    ScalingPlanVersion: ScalingPlanVersion
    ApplicationSource: ApplicationSource
    ScalingInstructions: ScalingInstructions
    StatusCode: ScalingPlanStatusCode
    StatusMessage: Optional[XmlString] = None
    StatusStartTime: Optional[TimestampType] = None
    CreationTime: Optional[TimestampType] = None


class ScalingPolicies(BaseModel):
    __root__: List[ScalingPolicy]


class ScalingPlanResource(BaseModel):
    """
    Represents a scalable resource.
    """

    ScalingPlanName: ScalingPlanName
    ScalingPlanVersion: ScalingPlanVersion
    ServiceNamespace: ServiceNamespace
    ResourceId: ResourceIdMaxLen1600
    ScalableDimension: ScalableDimension
    ScalingPolicies: Optional[ScalingPolicies] = None
    ScalingStatusCode: ScalingStatusCode
    ScalingStatusMessage: Optional[XmlString] = None


class CreateScalingPlanRequest(BaseModel):
    ScalingPlanName: ScalingPlanName
    ApplicationSource: ApplicationSource
    ScalingInstructions: ScalingInstructions


class UpdateScalingPlanRequest(BaseModel):
    ScalingPlanName: ScalingPlanName
    ScalingPlanVersion: ScalingPlanVersion
    ApplicationSource: Optional[ApplicationSource] = None
    ScalingInstructions: Optional[ScalingInstructions] = None


class ScalingPlanResources(BaseModel):
    __root__: List[ScalingPlanResource]


class ScalingPlans(BaseModel):
    __root__: List[ScalingPlan]


class DescribeScalingPlanResourcesResponse(BaseModel):
    ScalingPlanResources: Optional[ScalingPlanResources] = None
    NextToken: Optional[NextToken] = None


class DescribeScalingPlansResponse(BaseModel):
    ScalingPlans: Optional[ScalingPlans] = None
    NextToken: Optional[NextToken] = None
