# generated by datamodel-codegen:
#   filename:  openapi.yaml
#   timestamp: 2021-12-31T02:50:50+00:00

from __future__ import annotations

from datetime import datetime
from enum import Enum
from typing import Annotated, Any, List, Optional

from pydantic import BaseModel, Extra, Field


class ResourceNotFoundException(BaseModel):
    __root__: Any


class InvalidRequestException(ResourceNotFoundException):
    pass


class InternalFailureException(ResourceNotFoundException):
    pass


class ServiceUnavailableException(ResourceNotFoundException):
    pass


class ThrottlingException(ResourceNotFoundException):
    pass


class CancelPipelineReprocessingResponse(BaseModel):
    pass


class ServiceManagedChannelS3Storage(CancelPipelineReprocessingResponse):
    """
    Used to store channel data in an S3 bucket managed by IoT Analytics. You can't change the choice of S3 storage after the data store is created.
    """

    pass


class UnlimitedRetentionPeriod(BaseModel):
    __root__: bool


class RetentionPeriodInDays(BaseModel):
    __root__: Annotated[int, Field(ge=1.0)]


class ResourceAlreadyExistsException(ResourceNotFoundException):
    pass


class LimitExceededException(ResourceNotFoundException):
    pass


class UnlimitedVersioning(UnlimitedRetentionPeriod):
    pass


class MaxVersions(BaseModel):
    __root__: Annotated[int, Field(ge=1.0, le=1000.0)]


class ServiceManagedDatastoreS3Storage(CancelPipelineReprocessingResponse):
    """
    Used to store data in an Amazon S3 bucket managed by IoT Analytics. You can't change the choice of Amazon S3 storage after your data store is created.
    """

    pass


class JsonConfiguration(CancelPipelineReprocessingResponse):
    """
    Contains the configuration information of the JSON format.
    """

    pass


class RoleArn(BaseModel):
    __root__: Annotated[str, Field(max_length=2048, min_length=20)]


class LoggingLevel(Enum):
    ERROR = 'ERROR'


class LoggingEnabled(UnlimitedRetentionPeriod):
    pass


class MessagePayload(BaseModel):
    __root__: str


class TagResourceResponse(CancelPipelineReprocessingResponse):
    pass


class UntagResourceResponse(CancelPipelineReprocessingResponse):
    pass


class TagKey(BaseModel):
    __root__: Annotated[str, Field(max_length=256, min_length=1)]


class ActivityBatchSize(MaxVersions):
    pass


class ActivityName(BaseModel):
    __root__: Annotated[str, Field(max_length=128, min_length=1)]


class AttributeNameMapping(BaseModel):
    pass

    class Config:
        extra = Extra.allow


class AttributeName(TagKey):
    pass


class AttributeNames(BaseModel):
    __root__: Annotated[List[AttributeName], Field(max_items=50, min_items=1)]


class MessageId(BaseModel):
    __root__: Annotated[str, Field(max_length=128, min_length=1, regex='\\p{ASCII}*')]


class ErrorCode(MessagePayload):
    pass


class ErrorMessage(MessagePayload):
    pass


class ChannelName(BaseModel):
    __root__: Annotated[
        str, Field(max_length=128, min_length=1, regex='(^(?!_{2}))(^[a-zA-Z0-9_]+$)')
    ]


class BucketKeyExpression(BaseModel):
    __root__: Annotated[
        str, Field(max_length=255, min_length=1, regex="^[a-zA-Z0-9!_.*'()/{}:-]*$")
    ]


class BucketName(BaseModel):
    __root__: Annotated[
        str, Field(max_length=255, min_length=3, regex='^[a-zA-Z0-9.\\-_]*$')
    ]


class PipelineName(ChannelName):
    pass


class ReprocessingId(MessagePayload):
    pass


class CancelPipelineReprocessingRequest(BaseModel):
    pass


class ChannelArn(MessagePayload):
    pass


class ChannelStatus(Enum):
    CREATING = 'CREATING'
    ACTIVE = 'ACTIVE'
    DELETING = 'DELETING'


class RetentionPeriod(BaseModel):
    """
    How long, in days, message data is kept.
    """

    unlimited: Optional[UnlimitedRetentionPeriod] = None
    numberOfDays: Optional[RetentionPeriodInDays] = None


class Timestamp(BaseModel):
    __root__: datetime


class ServiceManagedChannelS3StorageSummary(CancelPipelineReprocessingResponse):
    """
    Used to store channel data in an S3 bucket managed by IoT Analytics.
    """

    pass


class ColumnName(BaseModel):
    __root__: Annotated[
        str,
        Field(
            max_length=255,
            min_length=1,
            regex='^[A-Za-z_]([A-Za-z0-9]*|[A-Za-z0-9][A-Za-z0-9_]*)$',
        ),
    ]


class ColumnDataType(BaseModel):
    __root__: Annotated[str, Field(max_length=131072, min_length=1)]


class Column(BaseModel):
    """
    Contains information about a column that stores your data.
    """

    name: ColumnName
    type: ColumnDataType


class Columns(BaseModel):
    __root__: List[Column]


class ComputeType(Enum):
    ACU_1 = 'ACU_1'
    ACU_2 = 'ACU_2'


class Image(BaseModel):
    __root__: Annotated[str, Field(max_length=255)]


class DatasetName(ChannelName):
    pass


class DatasetContentVersion(BaseModel):
    __root__: Annotated[str, Field(max_length=36, min_length=7)]


class CreateDatasetContentRequest(BaseModel):
    versionId: Optional[DatasetContentVersion] = None


class VersioningConfiguration(BaseModel):
    """
    Information about the versioning of dataset contents.
    """

    unlimited: Optional[UnlimitedVersioning] = None
    maxVersions: Optional[MaxVersions] = None


class DatasetArn(MessagePayload):
    pass


class DatastoreName(ChannelName):
    pass


class DatastoreArn(MessagePayload):
    pass


class PipelineArn(MessagePayload):
    pass


class S3KeyPrefix(BaseModel):
    __root__: Annotated[
        str, Field(max_length=255, min_length=1, regex="^[a-zA-Z0-9!_.*'()/{}:-]*/$")
    ]


class CustomerManagedDatastoreS3StorageSummary(BaseModel):
    """
    Contains information about the data store that you manage.
    """

    bucket: Optional[BucketName] = None
    keyPrefix: Optional[S3KeyPrefix] = None
    roleArn: Optional[RoleArn] = None


class DatasetActionName(BaseModel):
    __root__: Annotated[
        str, Field(max_length=128, min_length=1, regex='^[a-zA-Z0-9_]+$')
    ]


class DatasetActionType(Enum):
    QUERY = 'QUERY'
    CONTAINER = 'CONTAINER'


class EntryName(MessagePayload):
    pass


class DatasetContentState(Enum):
    CREATING = 'CREATING'
    SUCCEEDED = 'SUCCEEDED'
    FAILED = 'FAILED'


class Reason(MessagePayload):
    pass


class DatasetContentStatus(BaseModel):
    """
    The state of the dataset contents and the reason they are in this state.
    """

    state: Optional[DatasetContentState] = None
    reason: Optional[Reason] = None


class DatasetContentSummary(BaseModel):
    """
    Summary information about dataset contents.
    """

    version: Optional[DatasetContentVersion] = None
    status: Optional[DatasetContentStatus] = None
    creationTime: Optional[Timestamp] = None
    scheduleTime: Optional[Timestamp] = None
    completionTime: Optional[Timestamp] = None


class DatasetContentSummaries(BaseModel):
    __root__: List[DatasetContentSummary]


class DatasetContentVersionValue(BaseModel):
    """
    The dataset whose latest contents are used as input to the notebook or application.
    """

    datasetName: DatasetName


class PresignedURI(MessagePayload):
    pass


class TriggeringDataset(BaseModel):
    """
    Information about the dataset whose content generation triggers the new dataset content generation.
    """

    name: DatasetName


class IotSiteWiseCustomerManagedDatastoreS3Storage(BaseModel):
    """
    Used to store data used by IoT SiteWise in an Amazon S3 bucket that you manage. You can't change the choice of Amazon S3 storage after your data store is created.
    """

    bucket: BucketName
    keyPrefix: Optional[S3KeyPrefix] = None


class IotSiteWiseCustomerManagedDatastoreS3StorageSummary(BaseModel):
    """
    Contains information about the data store that you manage, which stores data used by IoT SiteWise.
    """

    bucket: Optional[BucketName] = None
    keyPrefix: Optional[S3KeyPrefix] = None


class DatastoreIotSiteWiseMultiLayerStorageSummary(BaseModel):
    """
    Contains information about the data store that you manage, which stores data used by IoT SiteWise.
    """

    customerManagedS3Storage: Optional[
        IotSiteWiseCustomerManagedDatastoreS3StorageSummary
    ] = None


class ServiceManagedDatastoreS3StorageSummary(CancelPipelineReprocessingResponse):
    """
    Contains information about the data store that is managed by IoT Analytics.
    """

    pass


class DatastoreStorageSummary(BaseModel):
    """
    Contains information about your data store.
    """

    serviceManagedS3: Optional[ServiceManagedDatastoreS3StorageSummary] = None
    customerManagedS3: Optional[CustomerManagedDatastoreS3StorageSummary] = None
    iotSiteWiseMultiLayerStorage: Optional[
        DatastoreIotSiteWiseMultiLayerStorageSummary
    ] = None


class FileFormatType(Enum):
    JSON = 'JSON'
    PARQUET = 'PARQUET'


class DeleteChannelRequest(BaseModel):
    pass


class DeleteDatasetContentRequest(BaseModel):
    pass


class DeleteDatasetRequest(BaseModel):
    pass


class DeleteDatastoreRequest(BaseModel):
    pass


class DeletePipelineRequest(BaseModel):
    pass


class OffsetSeconds(BaseModel):
    __root__: int


class TimeExpression(MessagePayload):
    pass


class DeltaTime(BaseModel):
    """
    Used to limit data to that which has arrived since the last execution of the action.
    """

    offsetSeconds: OffsetSeconds
    timeExpression: TimeExpression


class SessionTimeoutInMinutes(BaseModel):
    __root__: Annotated[int, Field(ge=1.0, le=60.0)]


class DeltaTimeSessionWindowConfiguration(BaseModel):
    """
    <p>A structure that contains the configuration information of a delta time session window.</p> <p> <a href="https://docs.aws.amazon.com/iotanalytics/latest/APIReference/API_DeltaTime.html"> <code>DeltaTime</code> </a> specifies a time interval. You can use <code>DeltaTime</code> to create dataset contents with data that has arrived in the data store since the last execution. For an example of <code>DeltaTime</code>, see <a href="https://docs.aws.amazon.com/iotanalytics/latest/userguide/automate-create-dataset.html#automate-example6"> Creating a SQL dataset with a delta window (CLI)</a> in the <i>IoT Analytics User Guide</i>.</p>
    """

    timeoutInMinutes: SessionTimeoutInMinutes


class IncludeStatisticsFlag(UnlimitedRetentionPeriod):
    pass


class DescribeChannelRequest(BaseModel):
    pass


class DescribeDatasetRequest(BaseModel):
    pass


class DescribeDatastoreRequest(BaseModel):
    pass


class DescribeLoggingOptionsRequest(BaseModel):
    pass


class LoggingOptions(BaseModel):
    """
    Information about logging options.
    """

    roleArn: RoleArn
    level: LoggingLevel
    enabled: LoggingEnabled


class DescribePipelineRequest(BaseModel):
    pass


class DoubleValue(BaseModel):
    __root__: float


class EndTime(Timestamp):
    pass


class SizeInBytes(DoubleValue):
    pass


class FilterExpression(TagKey):
    pass


class GetDatasetContentRequest(BaseModel):
    pass


class GlueTableName(BaseModel):
    __root__: Annotated[str, Field(max_length=150, min_length=1)]


class GlueDatabaseName(GlueTableName):
    pass


class GlueConfiguration(BaseModel):
    """
    Configuration information for coordination with Glue, a fully managed extract, transform and load (ETL) service.
    """

    tableName: GlueTableName
    databaseName: GlueDatabaseName


class IotEventsInputName(BaseModel):
    __root__: Annotated[
        str, Field(max_length=128, min_length=1, regex='^[a-zA-Z][a-zA-Z0-9_]*$')
    ]


class LambdaName(BaseModel):
    __root__: Annotated[
        str, Field(max_length=64, min_length=1, regex='^[a-zA-Z0-9_-]+$')
    ]


class LateDataRuleName(DatasetActionName):
    pass


class LateDataRuleConfiguration(BaseModel):
    """
    The information needed to configure a delta time session window.
    """

    deltaTimeSessionWindowConfiguration: Optional[
        DeltaTimeSessionWindowConfiguration
    ] = None


class NextToken(MessagePayload):
    pass


class MaxResults(BaseModel):
    __root__: Annotated[int, Field(ge=1.0, le=250.0)]


class ListChannelsRequest(BaseModel):
    pass


class ListDatasetContentsRequest(BaseModel):
    pass


class ListDatasetsRequest(BaseModel):
    pass


class ListDatastoresRequest(BaseModel):
    pass


class ListPipelinesRequest(BaseModel):
    pass


class ResourceArn(RoleArn):
    pass


class ListTagsForResourceRequest(BaseModel):
    pass


class LogResult(MessagePayload):
    pass


class MathExpression(TagKey):
    pass


class MaxMessages(BaseModel):
    __root__: Annotated[int, Field(ge=1.0, le=10.0)]


class MessagePayloads(BaseModel):
    __root__: Annotated[List[MessagePayload], Field(max_items=10, min_items=1)]


class OutputFileName(BaseModel):
    __root__: Annotated[str, Field(regex='[\\w\\.-]{1,255}')]


class OutputFileUriValue(BaseModel):
    """
    The value of the variable as a structure that specifies an output file URI.
    """

    fileName: OutputFileName


class SchemaDefinition(BaseModel):
    """
    Information needed to define a schema.
    """

    columns: Optional[Columns] = None


class PartitionAttributeName(DatasetActionName):
    pass


class PutLoggingOptionsRequest(BaseModel):
    loggingOptions: LoggingOptions


class QueryFilter(BaseModel):
    """
    Information that is used to filter message data, to segregate it according to the timeframe in which it arrives.
    """

    deltaTime: Optional[DeltaTime] = None


class QueryFilters(BaseModel):
    __root__: Annotated[List[QueryFilter], Field(max_items=1, min_items=0)]


class ReprocessingStatus(Enum):
    RUNNING = 'RUNNING'
    SUCCEEDED = 'SUCCEEDED'
    CANCELLED = 'CANCELLED'
    FAILED = 'FAILED'


class ReprocessingSummary(BaseModel):
    """
    Information about pipeline reprocessing.
    """

    id: Optional[ReprocessingId] = None
    status: Optional[ReprocessingStatus] = None
    creationTime: Optional[Timestamp] = None


class VolumeSizeInGB(BaseModel):
    __root__: Annotated[int, Field(ge=1.0, le=50.0)]


class S3PathChannelMessage(BaseModel):
    __root__: Annotated[
        str,
        Field(
            max_length=1024,
            min_length=1,
            regex="^[a-zA-Z0-9/_!'(){}\\*\\s\\.\\-\\=\\:]+$",
        ),
    ]


class StartTime(Timestamp):
    pass


class SampleChannelDataRequest(BaseModel):
    pass


class ScheduleExpression(MessagePayload):
    pass


class SqlQuery(MessagePayload):
    pass


class StringValue(BaseModel):
    __root__: Annotated[str, Field(max_length=1024, min_length=0)]


class TagValue(TagKey):
    pass


class TagKeyList(BaseModel):
    __root__: Annotated[List[TagKey], Field(max_items=50, min_items=1)]


class TimestampFormat(BaseModel):
    __root__: Annotated[
        str, Field(max_length=50, min_length=1, regex="^[a-zA-Z0-9\\s\\[\\]_,.'/:-]*$")
    ]


class UntagResourceRequest(BaseModel):
    pass


class VariableName(TagKey):
    pass


class Variable(BaseModel):
    """
    An instance of a variable to be passed to the <code>containerAction</code> execution. Each variable must have a name and a value given by one of <code>stringValue</code>, <code>datasetContentVersionValue</code>, or <code>outputFileUriValue</code>.
    """

    name: VariableName
    stringValue: Optional[StringValue] = None
    doubleValue: Optional[DoubleValue] = None
    datasetContentVersionValue: Optional[DatasetContentVersionValue] = None
    outputFileUriValue: Optional[OutputFileUriValue] = None


class Message(BaseModel):
    """
    Information about a message.
    """

    messageId: MessageId
    payload: MessagePayload


class CreateChannelResponse(BaseModel):
    channelName: Optional[ChannelName] = None
    channelArn: Optional[ChannelArn] = None
    retentionPeriod: Optional[RetentionPeriod] = None


class CustomerManagedChannelS3Storage(BaseModel):
    """
    Used to store channel data in an S3 bucket that you manage. If customer-managed storage is selected, the <code>retentionPeriod</code> parameter is ignored. You can't change the choice of S3 storage after the data store is created.
    """

    bucket: BucketName
    keyPrefix: Optional[S3KeyPrefix] = None
    roleArn: RoleArn


class Tag(BaseModel):
    """
    A set of key-value pairs that are used to manage the resource.
    """

    key: TagKey
    value: TagValue


class CreateDatasetResponse(BaseModel):
    datasetName: Optional[DatasetName] = None
    datasetArn: Optional[DatasetArn] = None
    retentionPeriod: Optional[RetentionPeriod] = None


class LateDataRule(BaseModel):
    """
    A structure that contains the name and configuration information of a late data rule.
    """

    ruleName: Optional[LateDataRuleName] = None
    ruleConfiguration: LateDataRuleConfiguration


class CreateDatasetContentResponse(BaseModel):
    versionId: Optional[DatasetContentVersion] = None


class CreateDatastoreResponse(BaseModel):
    datastoreName: Optional[DatastoreName] = None
    datastoreArn: Optional[DatastoreArn] = None
    retentionPeriod: Optional[RetentionPeriod] = None


class CustomerManagedDatastoreS3Storage(CustomerManagedChannelS3Storage):
    """
    S3-customer-managed; When you choose customer-managed storage, the <code>retentionPeriod</code> parameter is ignored. You can't change the choice of Amazon S3 storage after your data store is created.
    """

    pass


class DatastoreIotSiteWiseMultiLayerStorage(BaseModel):
    """
    Used to store data used by IoT SiteWise in an Amazon S3 bucket that you manage. You can't change the choice of Amazon S3 storage after your data store is created.
    """

    customerManagedS3Storage: IotSiteWiseCustomerManagedDatastoreS3Storage


class ParquetConfiguration(BaseModel):
    """
    Contains the configuration information of the Parquet format.
    """

    schemaDefinition: Optional[SchemaDefinition] = None


class CreatePipelineResponse(BaseModel):
    pipelineName: Optional[PipelineName] = None
    pipelineArn: Optional[PipelineArn] = None


class DescribeLoggingOptionsResponse(BaseModel):
    loggingOptions: Optional[LoggingOptions] = None


class ListDatasetContentsResponse(BaseModel):
    datasetContentSummaries: Optional[DatasetContentSummaries] = None
    nextToken: Optional[NextToken] = None


class RunPipelineActivityResponse(BaseModel):
    payloads: Optional[MessagePayloads] = None
    logResult: Optional[LogResult] = None


class ChannelActivity(BaseModel):
    """
    The activity that determines the source of the messages to be processed.
    """

    name: ActivityName
    channelName: ChannelName
    next: Optional[ActivityName] = None


class LambdaActivity(BaseModel):
    """
    An activity that runs a Lambda function to modify the message.
    """

    name: ActivityName
    lambdaName: LambdaName
    batchSize: ActivityBatchSize
    next: Optional[ActivityName] = None


class DatastoreActivity(BaseModel):
    """
    The datastore activity that specifies where to store the processed data.
    """

    name: ActivityName
    datastoreName: DatastoreName


class AddAttributesActivity(BaseModel):
    """
    An activity that adds other attributes based on existing attributes in the message.
    """

    name: ActivityName
    attributes: AttributeNameMapping
    next: Optional[ActivityName] = None


class RemoveAttributesActivity(BaseModel):
    """
    An activity that removes attributes from a message.
    """

    name: ActivityName
    attributes: AttributeNames
    next: Optional[ActivityName] = None


class SelectAttributesActivity(RemoveAttributesActivity):
    """
    Used to create a new message using only the specified attributes from the original message.
    """

    pass


class FilterActivity(BaseModel):
    """
    An activity that filters a message based on its attributes.
    """

    name: ActivityName
    filter: FilterExpression
    next: Optional[ActivityName] = None


class MathActivity(BaseModel):
    """
    An activity that computes an arithmetic expression using the message's attributes.
    """

    name: ActivityName
    attribute: AttributeName
    math: MathExpression
    next: Optional[ActivityName] = None


class DeviceRegistryEnrichActivity(BaseModel):
    """
    An activity that adds data from the IoT device registry to your message.
    """

    name: ActivityName
    attribute: AttributeName
    thingName: AttributeName
    roleArn: RoleArn
    next: Optional[ActivityName] = None


class DeviceShadowEnrichActivity(DeviceRegistryEnrichActivity):
    """
    An activity that adds information from the IoT Device Shadow service to a message.
    """

    pass


class SampleChannelDataResponse(BaseModel):
    payloads: Optional[MessagePayloads] = None


class StartPipelineReprocessingResponse(BaseModel):
    reprocessingId: Optional[ReprocessingId] = None


class S3PathChannelMessages(BaseModel):
    __root__: Annotated[List[S3PathChannelMessage], Field(max_items=100, min_items=1)]


class BatchPutMessageErrorEntry(BaseModel):
    """
    Contains informations about errors.
    """

    messageId: Optional[MessageId] = None
    errorCode: Optional[ErrorCode] = None
    errorMessage: Optional[ErrorMessage] = None


class BatchPutMessageErrorEntries(BaseModel):
    __root__: List[BatchPutMessageErrorEntry]


class Messages(BaseModel):
    __root__: List[Message]


class BatchPutMessageRequest(BaseModel):
    channelName: ChannelName
    messages: Messages


class ChannelStorage(BaseModel):
    """
    Where channel data is stored. You may choose one of <code>serviceManagedS3</code>, <code>customerManagedS3</code> storage. If not specified, the default is <code>serviceManagedS3</code>. This can't be changed after creation of the channel.
    """

    serviceManagedS3: Optional[ServiceManagedChannelS3Storage] = None
    customerManagedS3: Optional[CustomerManagedChannelS3Storage] = None


class Channel(BaseModel):
    """
    A collection of data from an MQTT topic. Channels archive the raw, unprocessed messages before publishing the data to a pipeline.
    """

    name: Optional[ChannelName] = None
    storage: Optional[ChannelStorage] = None
    arn: Optional[ChannelArn] = None
    status: Optional[ChannelStatus] = None
    retentionPeriod: Optional[RetentionPeriod] = None
    creationTime: Optional[Timestamp] = None
    lastUpdateTime: Optional[Timestamp] = None
    lastMessageArrivalTime: Optional[Timestamp] = None


class ChannelMessages(BaseModel):
    """
    Specifies one or more sets of channel messages.
    """

    s3Paths: Optional[S3PathChannelMessages] = None


class EstimatedResourceSize(BaseModel):
    """
    The estimated size of the resource.
    """

    estimatedSizeInBytes: Optional[SizeInBytes] = None
    estimatedOn: Optional[Timestamp] = None


class ChannelStatistics(BaseModel):
    """
    Statistics information about the channel.
    """

    size: Optional[EstimatedResourceSize] = None


class CustomerManagedChannelS3StorageSummary(CustomerManagedDatastoreS3StorageSummary):
    """
    Used to store channel data in an S3 bucket that you manage.
    """

    pass


class ChannelStorageSummary(BaseModel):
    """
    Where channel data is stored.
    """

    serviceManagedS3: Optional[ServiceManagedChannelS3StorageSummary] = None
    customerManagedS3: Optional[CustomerManagedChannelS3StorageSummary] = None


class ChannelSummary(BaseModel):
    """
    A summary of information about a channel.
    """

    channelName: Optional[ChannelName] = None
    channelStorage: Optional[ChannelStorageSummary] = None
    status: Optional[ChannelStatus] = None
    creationTime: Optional[Timestamp] = None
    lastUpdateTime: Optional[Timestamp] = None
    lastMessageArrivalTime: Optional[Timestamp] = None


class ChannelSummaries(BaseModel):
    __root__: List[ChannelSummary]


class ResourceConfiguration(BaseModel):
    """
    The configuration of the resource used to execute the <code>containerAction</code>.
    """

    computeType: ComputeType
    volumeSizeInGB: VolumeSizeInGB


class Variables(BaseModel):
    __root__: Annotated[List[Variable], Field(max_items=50, min_items=0)]


class ContainerDatasetAction(BaseModel):
    """
    Information required to run the <code>containerAction</code> to produce dataset contents.
    """

    image: Image
    executionRoleArn: RoleArn
    resourceConfiguration: ResourceConfiguration
    variables: Optional[Variables] = None


class TagList(BaseModel):
    __root__: Annotated[List[Tag], Field(max_items=50, min_items=1)]


class CreateChannelRequest(BaseModel):
    channelName: ChannelName
    channelStorage: Optional[ChannelStorage] = None
    retentionPeriod: Optional[RetentionPeriod] = None
    tags: Optional[TagList] = None


class LateDataRules(BaseModel):
    __root__: Annotated[List[LateDataRule], Field(max_items=1, min_items=1)]


class DatastoreStorage(BaseModel):
    """
    Where data in a data store is stored.. You can choose <code>serviceManagedS3</code> storage, <code>customerManagedS3</code> storage, or <code>iotSiteWiseMultiLayerStorage</code> storage. The default is <code>serviceManagedS3</code>. You can't change the choice of Amazon S3 storage after your data store is created.
    """

    serviceManagedS3: Optional[ServiceManagedDatastoreS3Storage] = None
    customerManagedS3: Optional[CustomerManagedDatastoreS3Storage] = None
    iotSiteWiseMultiLayerStorage: Optional[DatastoreIotSiteWiseMultiLayerStorage] = None


class FileFormatConfiguration(BaseModel):
    """
    <p>Contains the configuration information of file formats. IoT Analytics data stores support JSON and <a href="https://parquet.apache.org/">Parquet</a>.</p> <p>The default file format is JSON. You can specify only one format.</p> <p>You can't change the file format after you create the data store.</p>
    """

    jsonConfiguration: Optional[JsonConfiguration] = None
    parquetConfiguration: Optional[ParquetConfiguration] = None


class SqlQueryDatasetAction(BaseModel):
    """
    The SQL query to modify the message.
    """

    sqlQuery: SqlQuery
    filters: Optional[QueryFilters] = None


class DatasetActionSummary(BaseModel):
    """
    Information about the action that automatically creates the dataset's contents.
    """

    actionName: Optional[DatasetActionName] = None
    actionType: Optional[DatasetActionType] = None


class DatasetActionSummaries(BaseModel):
    __root__: Annotated[List[DatasetActionSummary], Field(max_items=1, min_items=1)]


class IotEventsDestinationConfiguration(BaseModel):
    """
    Configuration information for delivery of dataset contents to IoT Events.
    """

    inputName: IotEventsInputName
    roleArn: RoleArn


class S3DestinationConfiguration(BaseModel):
    """
    Configuration information for delivery of dataset contents to Amazon Simple Storage Service (Amazon S3).
    """

    bucket: BucketName
    key: BucketKeyExpression
    glueConfiguration: Optional[GlueConfiguration] = None
    roleArn: RoleArn


class DatasetContentDeliveryDestination(BaseModel):
    """
    The destination to which dataset contents are delivered.
    """

    iotEventsDestinationConfiguration: Optional[
        IotEventsDestinationConfiguration
    ] = None
    s3DestinationConfiguration: Optional[S3DestinationConfiguration] = None


class DatasetEntry(BaseModel):
    """
    The reference to a dataset entry.
    """

    entryName: Optional[EntryName] = None
    dataURI: Optional[PresignedURI] = None


class DatasetEntries(BaseModel):
    __root__: List[DatasetEntry]


class Schedule(BaseModel):
    """
    The schedule for when to trigger an update.
    """

    expression: Optional[ScheduleExpression] = None


class Partition(BaseModel):
    """
    A partition dimension defined by an attribute.
    """

    attributeName: PartitionAttributeName


class TimestampPartition(BaseModel):
    """
    A partition dimension defined by a timestamp attribute.
    """

    attributeName: PartitionAttributeName
    timestampFormat: Optional[TimestampFormat] = None


class DatastorePartition(BaseModel):
    """
    A single dimension to partition a data store. The dimension must be an <code>AttributePartition</code> or a <code>TimestampPartition</code>.
    """

    attributePartition: Optional[Partition] = None
    timestampPartition: Optional[TimestampPartition] = None


class DatastoreStatistics(ChannelStatistics):
    """
    Statistical information about the data store.
    """

    pass


class ReprocessingSummaries(BaseModel):
    __root__: List[ReprocessingSummary]


class PipelineSummary(BaseModel):
    """
    A summary of information about a pipeline.
    """

    pipelineName: Optional[PipelineName] = None
    reprocessingSummaries: Optional[ReprocessingSummaries] = None
    creationTime: Optional[Timestamp] = None
    lastUpdateTime: Optional[Timestamp] = None


class StartPipelineReprocessingRequest(BaseModel):
    startTime: Optional[StartTime] = None
    endTime: Optional[EndTime] = None
    channelMessages: Optional[ChannelMessages] = None


class TagResourceRequest(BaseModel):
    tags: TagList


class UpdateChannelRequest(BaseModel):
    channelStorage: Optional[ChannelStorage] = None
    retentionPeriod: Optional[RetentionPeriod] = None


class UpdateDatastoreRequest(BaseModel):
    retentionPeriod: Optional[RetentionPeriod] = None
    datastoreStorage: Optional[DatastoreStorage] = None
    fileFormatConfiguration: Optional[FileFormatConfiguration] = None


class BatchPutMessageResponse(BaseModel):
    batchPutMessageErrorEntries: Optional[BatchPutMessageErrorEntries] = None


class DatasetAction(BaseModel):
    """
    A <code>DatasetAction</code> object that specifies how dataset contents are automatically created.
    """

    actionName: Optional[DatasetActionName] = None
    queryAction: Optional[SqlQueryDatasetAction] = None
    containerAction: Optional[ContainerDatasetAction] = None


class DatasetTrigger(BaseModel):
    """
    The <code>DatasetTrigger</code> that specifies when the dataset is automatically updated.
    """

    schedule: Optional[Schedule] = None
    dataset: Optional[TriggeringDataset] = None


class DatasetContentDeliveryRule(BaseModel):
    """
    When dataset contents are created, they are delivered to destination specified here.
    """

    entryName: Optional[EntryName] = None
    destination: DatasetContentDeliveryDestination


class Partitions(BaseModel):
    __root__: Annotated[List[DatastorePartition], Field(max_items=25, min_items=0)]


class PipelineActivity(BaseModel):
    """
    An activity that performs a transformation on a message.
    """

    channel: Optional[ChannelActivity] = None
    lambda_: Annotated[Optional[LambdaActivity], Field(alias='lambda')] = None
    datastore: Optional[DatastoreActivity] = None
    addAttributes: Optional[AddAttributesActivity] = None
    removeAttributes: Optional[RemoveAttributesActivity] = None
    selectAttributes: Optional[SelectAttributesActivity] = None
    filter: Optional[FilterActivity] = None
    math: Optional[MathActivity] = None
    deviceRegistryEnrich: Optional[DeviceRegistryEnrichActivity] = None
    deviceShadowEnrich: Optional[DeviceShadowEnrichActivity] = None


class DescribeChannelResponse(BaseModel):
    channel: Optional[Channel] = None
    statistics: Optional[ChannelStatistics] = None


class GetDatasetContentResponse(BaseModel):
    entries: Optional[DatasetEntries] = None
    timestamp: Optional[Timestamp] = None
    status: Optional[DatasetContentStatus] = None


class ListChannelsResponse(BaseModel):
    channelSummaries: Optional[ChannelSummaries] = None
    nextToken: Optional[NextToken] = None


class ListTagsForResourceResponse(BaseModel):
    tags: Optional[TagList] = None


class DatasetActions(BaseModel):
    __root__: Annotated[List[DatasetAction], Field(max_items=1, min_items=1)]


class DatasetTriggers(BaseModel):
    __root__: Annotated[List[DatasetTrigger], Field(max_items=5, min_items=0)]


class DatasetContentDeliveryRules(BaseModel):
    __root__: Annotated[
        List[DatasetContentDeliveryRule], Field(max_items=20, min_items=0)
    ]


class CreateDatasetRequest(BaseModel):
    datasetName: DatasetName
    actions: DatasetActions
    triggers: Optional[DatasetTriggers] = None
    contentDeliveryRules: Optional[DatasetContentDeliveryRules] = None
    retentionPeriod: Optional[RetentionPeriod] = None
    versioningConfiguration: Optional[VersioningConfiguration] = None
    tags: Optional[TagList] = None
    lateDataRules: Optional[LateDataRules] = None


class DatastorePartitions(BaseModel):
    """
    Contains information about the partition dimensions in a data store.
    """

    partitions: Optional[Partitions] = None


class CreateDatastoreRequest(BaseModel):
    datastoreName: DatastoreName
    datastoreStorage: Optional[DatastoreStorage] = None
    retentionPeriod: Optional[RetentionPeriod] = None
    tags: Optional[TagList] = None
    fileFormatConfiguration: Optional[FileFormatConfiguration] = None
    datastorePartitions: Optional[DatastorePartitions] = None


class PipelineActivities(BaseModel):
    __root__: Annotated[List[PipelineActivity], Field(max_items=25, min_items=1)]


class CreatePipelineRequest(BaseModel):
    pipelineName: PipelineName
    pipelineActivities: PipelineActivities
    tags: Optional[TagList] = None


class Dataset(BaseModel):
    """
    Information about a dataset.
    """

    name: Optional[DatasetName] = None
    arn: Optional[DatasetArn] = None
    actions: Optional[DatasetActions] = None
    triggers: Optional[DatasetTriggers] = None
    contentDeliveryRules: Optional[DatasetContentDeliveryRules] = None
    status: Optional[ChannelStatus] = None
    creationTime: Optional[Timestamp] = None
    lastUpdateTime: Optional[Timestamp] = None
    retentionPeriod: Optional[RetentionPeriod] = None
    versioningConfiguration: Optional[VersioningConfiguration] = None
    lateDataRules: Optional[LateDataRules] = None


class DatasetSummary(BaseModel):
    """
    A summary of information about a dataset.
    """

    datasetName: Optional[DatasetName] = None
    status: Optional[ChannelStatus] = None
    creationTime: Optional[Timestamp] = None
    lastUpdateTime: Optional[Timestamp] = None
    triggers: Optional[DatasetTriggers] = None
    actions: Optional[DatasetActionSummaries] = None


class DatasetSummaries(BaseModel):
    __root__: List[DatasetSummary]


class Datastore(BaseModel):
    """
    Information about a data store.
    """

    name: Optional[DatastoreName] = None
    storage: Optional[DatastoreStorage] = None
    arn: Optional[DatastoreArn] = None
    status: Optional[ChannelStatus] = None
    retentionPeriod: Optional[RetentionPeriod] = None
    creationTime: Optional[Timestamp] = None
    lastUpdateTime: Optional[Timestamp] = None
    lastMessageArrivalTime: Optional[Timestamp] = None
    fileFormatConfiguration: Optional[FileFormatConfiguration] = None
    datastorePartitions: Optional[DatastorePartitions] = None


class DatastoreSummary(BaseModel):
    """
    A summary of information about a data store.
    """

    datastoreName: Optional[DatastoreName] = None
    datastoreStorage: Optional[DatastoreStorageSummary] = None
    status: Optional[ChannelStatus] = None
    creationTime: Optional[Timestamp] = None
    lastUpdateTime: Optional[Timestamp] = None
    lastMessageArrivalTime: Optional[Timestamp] = None
    fileFormatType: Optional[FileFormatType] = None
    datastorePartitions: Optional[DatastorePartitions] = None


class DatastoreSummaries(BaseModel):
    __root__: List[DatastoreSummary]


class Pipeline(BaseModel):
    """
    Contains information about a pipeline.
    """

    name: Optional[PipelineName] = None
    arn: Optional[PipelineArn] = None
    activities: Optional[PipelineActivities] = None
    reprocessingSummaries: Optional[ReprocessingSummaries] = None
    creationTime: Optional[Timestamp] = None
    lastUpdateTime: Optional[Timestamp] = None


class PipelineSummaries(BaseModel):
    __root__: List[PipelineSummary]


class RunPipelineActivityRequest(BaseModel):
    pipelineActivity: PipelineActivity
    payloads: MessagePayloads


class UpdateDatasetRequest(BaseModel):
    actions: DatasetActions
    triggers: Optional[DatasetTriggers] = None
    contentDeliveryRules: Optional[DatasetContentDeliveryRules] = None
    retentionPeriod: Optional[RetentionPeriod] = None
    versioningConfiguration: Optional[VersioningConfiguration] = None
    lateDataRules: Optional[LateDataRules] = None


class UpdatePipelineRequest(BaseModel):
    pipelineActivities: PipelineActivities


class DescribeDatasetResponse(BaseModel):
    dataset: Optional[Dataset] = None


class DescribeDatastoreResponse(BaseModel):
    datastore: Optional[Datastore] = None
    statistics: Optional[DatastoreStatistics] = None


class DescribePipelineResponse(BaseModel):
    pipeline: Optional[Pipeline] = None


class ListDatasetsResponse(BaseModel):
    datasetSummaries: Optional[DatasetSummaries] = None
    nextToken: Optional[NextToken] = None


class ListDatastoresResponse(BaseModel):
    datastoreSummaries: Optional[DatastoreSummaries] = None
    nextToken: Optional[NextToken] = None


class ListPipelinesResponse(BaseModel):
    pipelineSummaries: Optional[PipelineSummaries] = None
    nextToken: Optional[NextToken] = None
