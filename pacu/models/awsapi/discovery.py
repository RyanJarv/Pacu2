# generated by datamodel-codegen:
#   filename:  openapi.yaml
#   timestamp: 2021-12-31T02:47:33+00:00

from __future__ import annotations

from datetime import datetime
from enum import Enum
from typing import Annotated, Any, List, Optional

from pydantic import BaseModel, Extra, Field


class AssociateConfigurationItemsToApplicationResponse(BaseModel):
    pass


class AuthorizationErrorException(BaseModel):
    __root__: Any


class InvalidParameterException(AuthorizationErrorException):
    pass


class InvalidParameterValueException(AuthorizationErrorException):
    pass


class ServerInternalErrorException(AuthorizationErrorException):
    pass


class HomeRegionNotSetException(AuthorizationErrorException):
    pass


class CreateTagsResponse(AssociateConfigurationItemsToApplicationResponse):
    pass


class ResourceNotFoundException(AuthorizationErrorException):
    pass


class DeleteApplicationsResponse(AssociateConfigurationItemsToApplicationResponse):
    pass


class DeleteTagsResponse(AssociateConfigurationItemsToApplicationResponse):
    pass


class OperationNotPermittedException(AuthorizationErrorException):
    pass


class DisassociateConfigurationItemsFromApplicationResponse(
    AssociateConfigurationItemsToApplicationResponse
):
    pass


class GetDiscoverySummaryRequest(BaseModel):
    pass


class StartContinuousExportRequest(BaseModel):
    pass


class ConflictErrorException(AuthorizationErrorException):
    pass


class ResourceInUseException(AuthorizationErrorException):
    pass


class UpdateApplicationResponse(AssociateConfigurationItemsToApplicationResponse):
    pass


class String(BaseModel):
    __root__: str


class Boolean(BaseModel):
    __root__: bool


class AgentConfigurationStatus(BaseModel):
    """
    Information about agents or connectors that were instructed to start collecting data. Information includes the agent/connector ID, a description of the operation, and whether the agent/connector configuration was updated.
    """

    agentId: Optional[String] = None
    operationSucceeded: Optional[Boolean] = None
    description: Optional[String] = None


class AgentConfigurationStatusList(BaseModel):
    __root__: List[AgentConfigurationStatus]


class AgentId1(String):
    pass


class AgentIds(BaseModel):
    __root__: List[AgentId1]


class AgentStatus(Enum):
    HEALTHY = 'HEALTHY'
    UNHEALTHY = 'UNHEALTHY'
    RUNNING = 'RUNNING'
    UNKNOWN = 'UNKNOWN'
    BLACKLISTED = 'BLACKLISTED'
    SHUTDOWN = 'SHUTDOWN'


class AgentNetworkInfo(BaseModel):
    """
    Network details about the host where the agent/connector resides.
    """

    ipAddress: Optional[String] = None
    macAddress: Optional[String] = None


class ApplicationId(String):
    pass


class ApplicationIdsList(BaseModel):
    __root__: List[ApplicationId]


class ImportTaskIdentifier(String):
    pass


class BatchDeleteImportDataErrorCode(Enum):
    NOT_FOUND = 'NOT_FOUND'
    INTERNAL_SERVER_ERROR = 'INTERNAL_SERVER_ERROR'
    OVER_LIMIT = 'OVER_LIMIT'


class BatchDeleteImportDataErrorDescription(String):
    pass


class BatchDeleteImportDataError(BaseModel):
    """
    Error messages returned for each import task that you deleted as a response for this command.
    """

    importTaskId: Optional[ImportTaskIdentifier] = None
    errorCode: Optional[BatchDeleteImportDataErrorCode] = None
    errorDescription: Optional[BatchDeleteImportDataErrorDescription] = None


class BatchDeleteImportDataErrorList(BaseModel):
    __root__: List[BatchDeleteImportDataError]


class ToDeleteIdentifierList(BaseModel):
    __root__: Annotated[List[ImportTaskIdentifier], Field(max_items=10, min_items=1)]


class BoxedInteger(BaseModel):
    __root__: int


class ClientRequestToken(BaseModel):
    __root__: Annotated[str, Field(max_length=100, min_length=1)]


class Condition(String):
    pass


class Configuration(BaseModel):
    pass

    class Config:
        extra = Extra.allow


class ConfigurationId(String):
    pass


class ConfigurationItemType(Enum):
    SERVER = 'SERVER'
    PROCESS = 'PROCESS'
    CONNECTION = 'CONNECTION'
    APPLICATION = 'APPLICATION'


class TagKey(String):
    pass


class TagValue(String):
    pass


class TimeStamp(BaseModel):
    __root__: datetime


class ConfigurationTag(BaseModel):
    """
    Tags for a configuration item. Tags are metadata that help you categorize IT assets.
    """

    configurationType: Optional[ConfigurationItemType] = None
    configurationId: Optional[ConfigurationId] = None
    key: Optional[TagKey] = None
    value: Optional[TagValue] = None
    timeOfCreation: Optional[TimeStamp] = None


class ConfigurationTagSet(BaseModel):
    __root__: List[ConfigurationTag]


class Configurations(BaseModel):
    __root__: List[Configuration]


class ConfigurationsDownloadUrl(String):
    pass


class ConfigurationsExportId(String):
    pass


class ContinuousExportStatus(Enum):
    START_IN_PROGRESS = 'START_IN_PROGRESS'
    START_FAILED = 'START_FAILED'
    ACTIVE = 'ACTIVE'
    ERROR = 'ERROR'
    STOP_IN_PROGRESS = 'STOP_IN_PROGRESS'
    STOP_FAILED = 'STOP_FAILED'
    INACTIVE = 'INACTIVE'


class StringMax255(BaseModel):
    __root__: Annotated[str, Field(max_length=255, min_length=1)]


class S3Bucket(String):
    pass


class DataSource(Enum):
    AGENT = 'AGENT'


class SchemaStorageConfig(Configuration):
    pass


class ContinuousExportDescription(BaseModel):
    """
    A list of continuous export descriptions.
    """

    exportId: Optional[ConfigurationsExportId] = None
    status: Optional[ContinuousExportStatus] = None
    statusDetail: Optional[StringMax255] = None
    s3Bucket: Optional[S3Bucket] = None
    startTime: Optional[TimeStamp] = None
    stopTime: Optional[TimeStamp] = None
    dataSource: Optional[DataSource] = None
    schemaStorageConfig: Optional[SchemaStorageConfig] = None


class ContinuousExportDescriptions(BaseModel):
    __root__: List[ContinuousExportDescription]


class ContinuousExportIds(BaseModel):
    __root__: List[ConfigurationsExportId]


class Integer(BoxedInteger):
    pass


class CustomerAgentInfo(BaseModel):
    """
    Inventory data for installed discovery agents.
    """

    activeAgents: Integer
    healthyAgents: Integer
    blackListedAgents: Integer
    shutdownAgents: Integer
    unhealthyAgents: Integer
    totalAgents: Integer
    unknownAgents: Integer


class CustomerConnectorInfo(BaseModel):
    """
    Inventory data for installed discovery connectors.
    """

    activeConnectors: Integer
    healthyConnectors: Integer
    blackListedConnectors: Integer
    shutdownConnectors: Integer
    unhealthyConnectors: Integer
    totalConnectors: Integer
    unknownConnectors: Integer


class DatabaseName(BaseModel):
    __root__: Annotated[str, Field(max_length=252, min_length=1)]


class NextToken(String):
    pass


class DescribeConfigurationsAttribute(Configuration):
    pass


class DescribeConfigurationsAttributes(BaseModel):
    __root__: List[DescribeConfigurationsAttribute]


class DescribeContinuousExportsMaxResults(BaseModel):
    __root__: Annotated[int, Field(ge=1.0, le=100.0)]


class ExportIds(ContinuousExportIds):
    pass


class DescribeImportTasksMaxResults(DescribeContinuousExportsMaxResults):
    pass


class ExportDataFormat1(Enum):
    CSV = 'CSV'
    GRAPHML = 'GRAPHML'


class ExportDataFormats(BaseModel):
    __root__: List[ExportDataFormat1]


class FilterName(String):
    pass


class ExportStatus(Enum):
    FAILED = 'FAILED'
    SUCCEEDED = 'SUCCEEDED'
    IN_PROGRESS = 'IN_PROGRESS'


class ExportStatusMessage(String):
    pass


class ExportRequestTime(TimeStamp):
    pass


class ExportInfo(BaseModel):
    """
    Information regarding the export status of discovered data. The value is an array of objects.
    """

    exportId: ConfigurationsExportId
    exportStatus: ExportStatus
    statusMessage: ExportStatusMessage
    configurationsDownloadUrl: Optional[ConfigurationsDownloadUrl] = None
    exportRequestTime: ExportRequestTime
    isTruncated: Optional[Boolean] = None
    requestedStartTime: Optional[TimeStamp] = None
    requestedEndTime: Optional[TimeStamp] = None


class FilterValue(String):
    pass


class Long(BoxedInteger):
    pass


class ImportStatus(Enum):
    IMPORT_IN_PROGRESS = 'IMPORT_IN_PROGRESS'
    IMPORT_COMPLETE = 'IMPORT_COMPLETE'
    IMPORT_COMPLETE_WITH_ERRORS = 'IMPORT_COMPLETE_WITH_ERRORS'
    IMPORT_FAILED = 'IMPORT_FAILED'
    IMPORT_FAILED_SERVER_LIMIT_EXCEEDED = 'IMPORT_FAILED_SERVER_LIMIT_EXCEEDED'
    IMPORT_FAILED_RECORD_LIMIT_EXCEEDED = 'IMPORT_FAILED_RECORD_LIMIT_EXCEEDED'
    DELETE_IN_PROGRESS = 'DELETE_IN_PROGRESS'
    DELETE_COMPLETE = 'DELETE_COMPLETE'
    DELETE_FAILED = 'DELETE_FAILED'
    DELETE_FAILED_LIMIT_EXCEEDED = 'DELETE_FAILED_LIMIT_EXCEEDED'
    INTERNAL_ERROR = 'INTERNAL_ERROR'


class ImportTaskName(ClientRequestToken):
    pass


class ImportURL(BaseModel):
    __root__: Annotated[str, Field(max_length=4000, min_length=1)]


class S3PresignedUrl(String):
    pass


class ImportTask(BaseModel):
    """
    An array of information related to the import task request that includes status information, times, IDs, the Amazon S3 Object URL for the import file, and more.
    """

    importTaskId: Optional[ImportTaskIdentifier] = None
    clientRequestToken: Optional[ClientRequestToken] = None
    name: Optional[ImportTaskName] = None
    importUrl: Optional[ImportURL] = None
    status: Optional[ImportStatus] = None
    importRequestTime: Optional[TimeStamp] = None
    importCompletionTime: Optional[TimeStamp] = None
    importDeletedTime: Optional[TimeStamp] = None
    serverImportSuccess: Optional[Integer] = None
    serverImportFailure: Optional[Integer] = None
    applicationImportSuccess: Optional[Integer] = None
    applicationImportFailure: Optional[Integer] = None
    errorsAndFailedEntriesZip: Optional[S3PresignedUrl] = None


class ImportTaskFilterName(Enum):
    IMPORT_TASK_ID = 'IMPORT_TASK_ID'
    STATUS = 'STATUS'
    NAME = 'NAME'


class ImportTaskFilterValue(ClientRequestToken):
    pass


class NeighborConnectionDetail(BaseModel):
    """
    Details about neighboring servers.
    """

    sourceServerId: ConfigurationId
    destinationServerId: ConfigurationId
    destinationPort: Optional[BoxedInteger] = None
    transportProtocol: Optional[String] = None
    connectionsCount: Long


class OrderString(Enum):
    ASC = 'ASC'
    DESC = 'DESC'


class OrderByElement(BaseModel):
    """
    A field and direction for ordered output.
    """

    fieldName: String
    sortOrder: Optional[OrderString] = None


class Tag(BaseModel):
    """
    Metadata that help you categorize IT assets.
    """

    key: TagKey
    value: TagValue


class BatchDeleteImportDataResponse(BaseModel):
    errors: Optional[BatchDeleteImportDataErrorList] = None


class BatchDeleteImportDataRequest(BaseModel):
    importTaskIds: ToDeleteIdentifierList


class CreateApplicationResponse(BaseModel):
    configurationId: Optional[String] = None


class CreateApplicationRequest(BaseModel):
    name: String
    description: Optional[String] = None


class DeleteApplicationsRequest(BaseModel):
    configurationIds: ApplicationIdsList


class DescribeConfigurationsResponse(BaseModel):
    configurations: Optional[DescribeConfigurationsAttributes] = None


class DescribeContinuousExportsResponse(BaseModel):
    descriptions: Optional[ContinuousExportDescriptions] = None
    nextToken: Optional[NextToken] = None


class DescribeContinuousExportsRequest(BaseModel):
    exportIds: Optional[ContinuousExportIds] = None
    maxResults: Optional[DescribeContinuousExportsMaxResults] = None
    nextToken: Optional[NextToken] = None


class DescribeExportConfigurationsRequest(BaseModel):
    exportIds: Optional[ExportIds] = None
    maxResults: Optional[Integer] = None
    nextToken: Optional[NextToken] = None


class DescribeTagsResponse(BaseModel):
    tags: Optional[ConfigurationTagSet] = None
    nextToken: Optional[NextToken] = None


class ExportConfigurationsResponse(BaseModel):
    exportId: Optional[ConfigurationsExportId] = None


class GetDiscoverySummaryResponse(BaseModel):
    servers: Optional[Long] = None
    applications: Optional[Long] = None
    serversMappedToApplications: Optional[Long] = None
    serversMappedtoTags: Optional[Long] = None
    agentSummary: Optional[CustomerAgentInfo] = None
    connectorSummary: Optional[CustomerConnectorInfo] = None


class ListConfigurationsResponse(BaseModel):
    configurations: Optional[Configurations] = None
    nextToken: Optional[NextToken] = None


class StartContinuousExportResponse(BaseModel):
    exportId: Optional[ConfigurationsExportId] = None
    s3Bucket: Optional[S3Bucket] = None
    startTime: Optional[TimeStamp] = None
    dataSource: Optional[DataSource] = None
    schemaStorageConfig: Optional[SchemaStorageConfig] = None


class StartDataCollectionByAgentIdsResponse(BaseModel):
    agentsConfigurationStatus: Optional[AgentConfigurationStatusList] = None


class StartDataCollectionByAgentIdsRequest(BaseModel):
    agentIds: AgentIds


class StartExportTaskResponse(ExportConfigurationsResponse):
    pass


class StartImportTaskResponse(BaseModel):
    task: Optional[ImportTask] = None


class StartImportTaskRequest(BaseModel):
    clientRequestToken: Optional[ClientRequestToken] = None
    name: ImportTaskName
    importUrl: ImportURL


class StopContinuousExportResponse(BaseModel):
    startTime: Optional[TimeStamp] = None
    stopTime: Optional[TimeStamp] = None


class StopContinuousExportRequest(BaseModel):
    exportId: ConfigurationsExportId


class StopDataCollectionByAgentIdsResponse(StartDataCollectionByAgentIdsResponse):
    pass


class StopDataCollectionByAgentIdsRequest(BaseModel):
    agentIds: AgentIds


class UpdateApplicationRequest(BaseModel):
    configurationId: ApplicationId
    name: Optional[String] = None
    description: Optional[String] = None


class AgentNetworkInfoList(BaseModel):
    __root__: List[AgentNetworkInfo]


class AgentInfo(BaseModel):
    """
    Information about agents or connectors associated with the user’s AWS account. Information includes agent or connector IDs, IP addresses, media access control (MAC) addresses, agent or connector health, hostname where the agent or connector resides, and agent version for each agent.
    """

    agentId: Optional[AgentId1] = None
    hostName: Optional[String] = None
    agentNetworkInfoList: Optional[AgentNetworkInfoList] = None
    connectorId: Optional[String] = None
    version: Optional[String] = None
    health: Optional[AgentStatus] = None
    lastHealthPingTime: Optional[String] = None
    collectionStatus: Optional[String] = None
    agentType: Optional[String] = None
    registeredTime: Optional[String] = None


class AgentsInfo(BaseModel):
    __root__: List[AgentInfo]


class ConfigurationIdList(BaseModel):
    __root__: List[ConfigurationId]


class TagSet(BaseModel):
    __root__: List[Tag]


class ExportsInfo(BaseModel):
    __root__: List[ExportInfo]


class ImportTaskList(BaseModel):
    __root__: List[ImportTask]


class FilterValues(BaseModel):
    __root__: List[FilterValue]


class ExportFilter(BaseModel):
    """
    Used to select which agent's data is to be exported. A single agent ID may be selected for export using the <a href="http://docs.aws.amazon.com/application-discovery/latest/APIReference/API_StartExportTask.html">StartExportTask</a> action.
    """

    name: FilterName
    values: FilterValues
    condition: Condition


class Filter(BaseModel):
    """
    <p>A filter that can use conditional operators.</p> <p>For more information about filters, see <a href="https://docs.aws.amazon.com/application-discovery/latest/userguide/discovery-api-queries.html">Querying Discovered Configuration Items</a> in the <i>AWS Application Discovery Service User Guide</i>. </p>
    """

    name: String
    values: FilterValues
    condition: Condition


class ImportTaskFilterValueList(BaseModel):
    __root__: Annotated[List[ImportTaskFilterValue], Field(max_items=100, min_items=1)]


class OrderByList(BaseModel):
    __root__: List[OrderByElement]


class NeighborDetailsList(BaseModel):
    __root__: List[NeighborConnectionDetail]


class TagFilter(BaseModel):
    """
    The tag filter. Valid names are: <code>tagKey</code>, <code>tagValue</code>, <code>configurationId</code>.
    """

    name: FilterName
    values: FilterValues


class AssociateConfigurationItemsToApplicationRequest(BaseModel):
    applicationConfigurationId: ApplicationId
    configurationIds: ConfigurationIdList


class CreateTagsRequest(BaseModel):
    configurationIds: ConfigurationIdList
    tags: TagSet


class DeleteTagsRequest(BaseModel):
    configurationIds: ConfigurationIdList
    tags: Optional[TagSet] = None


class DescribeAgentsResponse(BaseModel):
    agentsInfo: Optional[AgentsInfo] = None
    nextToken: Optional[NextToken] = None


class DescribeConfigurationsRequest(BaseModel):
    configurationIds: ConfigurationIdList


class DescribeExportConfigurationsResponse(BaseModel):
    exportsInfo: Optional[ExportsInfo] = None
    nextToken: Optional[NextToken] = None


class DescribeExportTasksResponse(DescribeExportConfigurationsResponse):
    pass


class DescribeImportTasksResponse(BaseModel):
    nextToken: Optional[NextToken] = None
    tasks: Optional[ImportTaskList] = None


class DisassociateConfigurationItemsFromApplicationRequest(BaseModel):
    applicationConfigurationId: ApplicationId
    configurationIds: ConfigurationIdList


class ListServerNeighborsResponse(BaseModel):
    neighbors: NeighborDetailsList
    nextToken: Optional[String] = None
    knownDependencyCount: Optional[Long] = None


class ListServerNeighborsRequest(BaseModel):
    configurationId: ConfigurationId
    portInformationNeeded: Optional[Boolean] = None
    neighborConfigurationIds: Optional[ConfigurationIdList] = None
    maxResults: Optional[Integer] = None
    nextToken: Optional[String] = None


class Filters(BaseModel):
    __root__: List[Filter]


class ExportFilters(BaseModel):
    __root__: List[ExportFilter]


class ImportTaskFilter(BaseModel):
    """
    <p>A name-values pair of elements you can use to filter the results when querying your import tasks. Currently, wildcards are not supported for filters.</p> <note> <p>When filtering by import status, all other filter values are ignored.</p> </note>
    """

    name: Optional[ImportTaskFilterName] = None
    values: Optional[ImportTaskFilterValueList] = None


class DescribeImportTasksFilterList(BaseModel):
    __root__: List[ImportTaskFilter]


class TagFilters(BaseModel):
    __root__: List[TagFilter]


class DescribeAgentsRequest(BaseModel):
    agentIds: Optional[AgentIds] = None
    filters: Optional[Filters] = None
    maxResults: Optional[Integer] = None
    nextToken: Optional[NextToken] = None


class DescribeExportTasksRequest(BaseModel):
    exportIds: Optional[ExportIds] = None
    filters: Optional[ExportFilters] = None
    maxResults: Optional[Integer] = None
    nextToken: Optional[NextToken] = None


class DescribeImportTasksRequest(BaseModel):
    filters: Optional[DescribeImportTasksFilterList] = None
    maxResults: Optional[DescribeImportTasksMaxResults] = None
    nextToken: Optional[NextToken] = None


class DescribeTagsRequest(BaseModel):
    filters: Optional[TagFilters] = None
    maxResults: Optional[Integer] = None
    nextToken: Optional[NextToken] = None


class ListConfigurationsRequest(BaseModel):
    configurationType: ConfigurationItemType
    filters: Optional[Filters] = None
    maxResults: Optional[Integer] = None
    nextToken: Optional[NextToken] = None
    orderBy: Optional[OrderByList] = None


class StartExportTaskRequest(BaseModel):
    exportDataFormat: Optional[ExportDataFormats] = None
    filters: Optional[ExportFilters] = None
    startTime: Optional[TimeStamp] = None
    endTime: Optional[TimeStamp] = None
