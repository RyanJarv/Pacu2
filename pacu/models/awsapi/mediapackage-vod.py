# generated by datamodel-codegen:
#   filename:  openapi.yaml
#   timestamp: 2021-12-31T02:52:53+00:00

from __future__ import annotations

from enum import Enum
from typing import Annotated, Any, List, Optional

from pydantic import BaseModel, Extra, Field


class _String(BaseModel):
    __root__: str


class UnprocessableEntityException(BaseModel):
    __root__: Any


class InternalServerErrorException(UnprocessableEntityException):
    pass


class ForbiddenException(UnprocessableEntityException):
    pass


class NotFoundException(UnprocessableEntityException):
    pass


class ServiceUnavailableException(UnprocessableEntityException):
    pass


class TooManyRequestsException(UnprocessableEntityException):
    pass


class _Boolean(BaseModel):
    __root__: bool


class _Integer(BaseModel):
    __root__: int


class SegmentTemplateFormat(Enum):
    NUMBER_WITH_TIMELINE = 'NUMBER_WITH_TIMELINE'
    TIME_WITH_TIMELINE = 'TIME_WITH_TIMELINE'
    NUMBER_WITH_DURATION = 'NUMBER_WITH_DURATION'


class DeleteAssetResponse(BaseModel):
    pass


class DeletePackagingConfigurationResponse(DeleteAssetResponse):
    pass


class DeletePackagingGroupResponse(DeleteAssetResponse):
    pass


class AdMarkers(Enum):
    NONE = 'NONE'
    SCTE35_ENHANCED = 'SCTE35_ENHANCED'
    PASSTHROUGH = 'PASSTHROUGH'


class Tags(BaseModel):
    """
    A collection of tags associated with a resource
    """

    pass

    class Config:
        extra = Extra.allow


class AssetShallow(BaseModel):
    """
    A MediaPackage VOD Asset resource.
    """

    Arn: Optional[_String] = None
    CreatedAt: Optional[_String] = None
    Id: Optional[_String] = None
    PackagingGroupId: Optional[_String] = None
    ResourceId: Optional[_String] = None
    SourceArn: Optional[_String] = None
    SourceRoleArn: Optional[_String] = None
    Tags: Optional[Tags] = None


class Authorization(BaseModel):
    """
    CDN Authorization credentials
    """

    CdnIdentifierSecret: _String
    SecretsRoleArn: _String


class EgressAccessLogs(BaseModel):
    """
    Configure egress access logging.
    """

    LogGroupName: Optional[_String] = None


class ConfigureLogsRequest(BaseModel):
    """
    The option to configure log subscription.
    """

    EgressAccessLogs: Optional[EgressAccessLogs] = None


class CreateAssetRequest(BaseModel):
    """
    A new MediaPackage VOD Asset configuration.
    """

    Id: _String
    PackagingGroupId: _String
    ResourceId: Optional[_String] = None
    SourceArn: _String
    SourceRoleArn: _String
    Tags: Optional[Tags] = None


class CreatePackagingGroupRequest(BaseModel):
    """
    A new MediaPackage VOD PackagingGroup resource configuration.
    """

    Authorization: Optional[Authorization] = None
    EgressAccessLogs: Optional[EgressAccessLogs] = None
    Id: _String
    Tags: Optional[Tags] = None


class ManifestLayout(Enum):
    FULL = 'FULL'
    COMPACT = 'COMPACT'


class Profile(Enum):
    NONE = 'NONE'
    HBBTV_1_5 = 'HBBTV_1_5'


class DeleteAssetRequest(BaseModel):
    pass


class DeletePackagingConfigurationRequest(BaseModel):
    pass


class DeletePackagingGroupRequest(BaseModel):
    pass


class DescribeAssetRequest(BaseModel):
    pass


class DescribePackagingConfigurationRequest(BaseModel):
    pass


class DescribePackagingGroupRequest(BaseModel):
    pass


class EgressEndpoint(BaseModel):
    """
    The endpoint URL used to access an Asset using one PackagingConfiguration.
    """

    PackagingConfigurationId: Optional[_String] = None
    Url: Optional[_String] = None


class EncryptionMethod(Enum):
    AES_128 = 'AES_128'
    SAMPLE_AES = 'SAMPLE_AES'


class MaxResults(BaseModel):
    __root__: Annotated[int, Field(ge=1.0, le=1000.0)]


class ListAssetsRequest(BaseModel):
    pass


class _ListOfAssetShallow(BaseModel):
    __root__: List[AssetShallow]


class ListPackagingConfigurationsRequest(BaseModel):
    pass


class ListPackagingGroupsRequest(BaseModel):
    pass


class ListTagsForResourceRequest(BaseModel):
    pass


class _MapOfString(Tags):
    pass


class PackagingGroup(BaseModel):
    """
    A MediaPackage VOD PackagingGroup resource.
    """

    Arn: Optional[_String] = None
    Authorization: Optional[Authorization] = None
    DomainName: Optional[_String] = None
    EgressAccessLogs: Optional[EgressAccessLogs] = None
    Id: Optional[_String] = None
    Tags: Optional[Tags] = None


class _ListOfString(BaseModel):
    __root__: List[_String]


class StreamOrder(Enum):
    ORIGINAL = 'ORIGINAL'
    VIDEO_BITRATE_ASCENDING = 'VIDEO_BITRATE_ASCENDING'
    VIDEO_BITRATE_DESCENDING = 'VIDEO_BITRATE_DESCENDING'


class TagResourceRequest(BaseModel):
    Tags: _MapOfString


class UntagResourceRequest(BaseModel):
    pass


class UpdatePackagingGroupRequest(BaseModel):
    """
    A MediaPackage VOD PackagingGroup resource configuration.
    """

    Authorization: Optional[Authorization] = None


class _PeriodTriggersElement(Enum):
    ADS = 'ADS'


class ConfigureLogsResponse(PackagingGroup):
    pass


class _ListOfPeriodTriggersElement(BaseModel):
    __root__: List[_PeriodTriggersElement]


class CreatePackagingGroupResponse(PackagingGroup):
    pass


class DescribePackagingGroupResponse(PackagingGroup):
    pass


class ListAssetsResponse(BaseModel):
    Assets: Optional[_ListOfAssetShallow] = None
    NextToken: Optional[_String] = None


class ListTagsForResourceResponse(BaseModel):
    Tags: Optional[_MapOfString] = None


class UpdatePackagingGroupResponse(PackagingGroup):
    pass


class SpekeKeyProvider(BaseModel):
    """
    A configuration for accessing an external Secure Packager and Encoder Key Exchange (SPEKE) service that will provide encryption keys.
    """

    RoleArn: _String
    SystemIds: _ListOfString
    Url: _String


class _ListOfEgressEndpoint(BaseModel):
    __root__: List[EgressEndpoint]


class StreamSelection(BaseModel):
    """
    A StreamSelection configuration.
    """

    MaxVideoBitsPerSecond: Optional[_Integer] = None
    MinVideoBitsPerSecond: Optional[_Integer] = None
    StreamOrder: Optional[StreamOrder] = None


class DashManifest(BaseModel):
    """
    A DASH manifest configuration.
    """

    ManifestLayout: Optional[ManifestLayout] = None
    ManifestName: Optional[_String] = None
    MinBufferTimeSeconds: Optional[_Integer] = None
    Profile: Optional[Profile] = None
    StreamSelection: Optional[StreamSelection] = None


class HlsManifest(BaseModel):
    """
    An HTTP Live Streaming (HLS) manifest configuration.
    """

    AdMarkers: Optional[AdMarkers] = None
    IncludeIframeOnlyStream: Optional[_Boolean] = None
    ManifestName: Optional[_String] = None
    ProgramDateTimeIntervalSeconds: Optional[_Integer] = None
    RepeatExtXKey: Optional[_Boolean] = None
    StreamSelection: Optional[StreamSelection] = None


class _ListOfPackagingGroup(BaseModel):
    __root__: List[PackagingGroup]


class MssManifest(BaseModel):
    """
    A Microsoft Smooth Streaming (MSS) manifest configuration.
    """

    ManifestName: Optional[_String] = None
    StreamSelection: Optional[StreamSelection] = None


class CreateAssetResponse(BaseModel):
    Arn: Optional[_String] = None
    CreatedAt: Optional[_String] = None
    EgressEndpoints: Optional[_ListOfEgressEndpoint] = None
    Id: Optional[_String] = None
    PackagingGroupId: Optional[_String] = None
    ResourceId: Optional[_String] = None
    SourceArn: Optional[_String] = None
    SourceRoleArn: Optional[_String] = None
    Tags: Optional[Tags] = None


class CmafEncryption(BaseModel):
    """
    A CMAF encryption configuration.
    """

    ConstantInitializationVector: Optional[_String] = None
    SpekeKeyProvider: SpekeKeyProvider


class _ListOfHlsManifest(BaseModel):
    __root__: List[HlsManifest]


class _ListOfDashManifest(BaseModel):
    __root__: List[DashManifest]


class DashEncryption(BaseModel):
    """
    A Dynamic Adaptive Streaming over HTTP (DASH) encryption configuration.
    """

    SpekeKeyProvider: SpekeKeyProvider


class HlsEncryption(BaseModel):
    """
    An HTTP Live Streaming (HLS) encryption configuration.
    """

    ConstantInitializationVector: Optional[_String] = None
    EncryptionMethod: Optional[EncryptionMethod] = None
    SpekeKeyProvider: SpekeKeyProvider


class MssEncryption(DashEncryption):
    """
    A Microsoft Smooth Streaming (MSS) encryption configuration.
    """

    pass


class _ListOfMssManifest(BaseModel):
    __root__: List[MssManifest]


class DescribeAssetResponse(CreateAssetResponse):
    pass


class ListPackagingGroupsResponse(BaseModel):
    NextToken: Optional[_String] = None
    PackagingGroups: Optional[_ListOfPackagingGroup] = None


class CmafPackage(BaseModel):
    """
    A CMAF packaging configuration.
    """

    Encryption: Optional[CmafEncryption] = None
    HlsManifests: _ListOfHlsManifest
    IncludeEncoderConfigurationInSegments: Optional[_Boolean] = None
    SegmentDurationSeconds: Optional[_Integer] = None


class DashPackage(BaseModel):
    """
    A Dynamic Adaptive Streaming over HTTP (DASH) packaging configuration.
    """

    DashManifests: _ListOfDashManifest
    Encryption: Optional[DashEncryption] = None
    IncludeEncoderConfigurationInSegments: Optional[_Boolean] = None
    PeriodTriggers: Optional[_ListOfPeriodTriggersElement] = None
    SegmentDurationSeconds: Optional[_Integer] = None
    SegmentTemplateFormat: Optional[SegmentTemplateFormat] = None


class HlsPackage(BaseModel):
    """
    An HTTP Live Streaming (HLS) packaging configuration.
    """

    Encryption: Optional[HlsEncryption] = None
    HlsManifests: _ListOfHlsManifest
    SegmentDurationSeconds: Optional[_Integer] = None
    UseAudioRenditionGroup: Optional[_Boolean] = None


class MssPackage(BaseModel):
    """
    A Microsoft Smooth Streaming (MSS) PackagingConfiguration.
    """

    Encryption: Optional[MssEncryption] = None
    MssManifests: _ListOfMssManifest
    SegmentDurationSeconds: Optional[_Integer] = None


class CreatePackagingConfigurationRequest(BaseModel):
    """
    A new MediaPackage VOD PackagingConfiguration resource configuration.
    """

    CmafPackage: Optional[CmafPackage] = None
    DashPackage: Optional[DashPackage] = None
    HlsPackage: Optional[HlsPackage] = None
    Id: _String
    MssPackage: Optional[MssPackage] = None
    PackagingGroupId: _String
    Tags: Optional[Tags] = None


class PackagingConfiguration(BaseModel):
    """
    A MediaPackage VOD PackagingConfiguration resource.
    """

    Arn: Optional[_String] = None
    CmafPackage: Optional[CmafPackage] = None
    DashPackage: Optional[DashPackage] = None
    HlsPackage: Optional[HlsPackage] = None
    Id: Optional[_String] = None
    MssPackage: Optional[MssPackage] = None
    PackagingGroupId: Optional[_String] = None
    Tags: Optional[Tags] = None


class CreatePackagingConfigurationResponse(PackagingConfiguration):
    pass


class DescribePackagingConfigurationResponse(PackagingConfiguration):
    pass


class _ListOfPackagingConfiguration(BaseModel):
    __root__: List[PackagingConfiguration]


class ListPackagingConfigurationsResponse(BaseModel):
    NextToken: Optional[_String] = None
    PackagingConfigurations: Optional[_ListOfPackagingConfiguration] = None
