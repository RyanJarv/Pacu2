# generated by datamodel-codegen:
#   filename:  openapi.yaml
#   timestamp: 2021-12-31T02:47:46+00:00

from __future__ import annotations

from datetime import datetime
from enum import Enum
from typing import Annotated, Any, List, Optional

from pydantic import BaseModel, Field, SecretStr


class InvalidParameterException(BaseModel):
    __root__: Any


class EntityDoesNotExistException(InvalidParameterException):
    pass


class DirectoryAlreadySharedException(InvalidParameterException):
    pass


class ClientException(InvalidParameterException):
    pass


class ServiceException(InvalidParameterException):
    pass


class AddIpRoutesResult(BaseModel):
    pass


class EntityAlreadyExistsException(InvalidParameterException):
    pass


class DirectoryUnavailableException(InvalidParameterException):
    pass


class IpRouteLimitExceededException(InvalidParameterException):
    pass


class AddRegionResult(AddIpRoutesResult):
    pass


class DirectoryAlreadyInRegionException(InvalidParameterException):
    pass


class UnsupportedOperationException(InvalidParameterException):
    pass


class DirectoryDoesNotExistException(InvalidParameterException):
    pass


class RegionLimitExceededException(InvalidParameterException):
    pass


class AccessDeniedException(InvalidParameterException):
    pass


class AddTagsToResourceResult(AddIpRoutesResult):
    pass


class TagLimitExceededException(InvalidParameterException):
    pass


class CancelSchemaExtensionResult(AddIpRoutesResult):
    pass


class DirectoryLimitExceededException(InvalidParameterException):
    pass


class AuthenticationFailedException(InvalidParameterException):
    pass


class CreateConditionalForwarderResult(AddIpRoutesResult):
    """
    The result of a CreateConditinalForwarder request.
    """

    pass


class CreateLogSubscriptionResult(AddIpRoutesResult):
    pass


class InsufficientPermissionsException(InvalidParameterException):
    pass


class SnapshotLimitExceededException(InvalidParameterException):
    pass


class DeleteConditionalForwarderResult(AddIpRoutesResult):
    """
    The result of a DeleteConditionalForwarder request.
    """

    pass


class DeleteLogSubscriptionResult(AddIpRoutesResult):
    pass


class DeregisterCertificateResult(AddIpRoutesResult):
    pass


class CertificateDoesNotExistException(InvalidParameterException):
    pass


class CertificateInUseException(InvalidParameterException):
    pass


class DeregisterEventTopicResult(AddIpRoutesResult):
    """
    The result of a DeregisterEventTopic request.
    """

    pass


class InvalidNextTokenException(InvalidParameterException):
    pass


class DisableClientAuthenticationResult(AddIpRoutesResult):
    pass


class InvalidClientAuthStatusException(InvalidParameterException):
    pass


class DisableLDAPSResult(AddIpRoutesResult):
    pass


class InvalidLDAPSStatusException(InvalidParameterException):
    pass


class DisableRadiusResult(AddIpRoutesResult):
    """
    Contains the results of the <a>DisableRadius</a> operation.
    """

    pass


class DisableSsoResult(AddIpRoutesResult):
    """
    Contains the results of the <a>DisableSso</a> operation.
    """

    pass


class EnableClientAuthenticationResult(AddIpRoutesResult):
    pass


class NoAvailableCertificateException(InvalidParameterException):
    pass


class EnableLDAPSResult(AddIpRoutesResult):
    pass


class EnableRadiusResult(AddIpRoutesResult):
    """
    Contains the results of the <a>EnableRadius</a> operation.
    """

    pass


class EnableSsoResult(AddIpRoutesResult):
    """
    Contains the results of the <a>EnableSso</a> operation.
    """

    pass


class GetDirectoryLimitsRequest(BaseModel):
    """
    Contains the inputs for the <a>GetDirectoryLimits</a> operation.
    """

    pass


class InvalidCertificateException(InvalidParameterException):
    pass


class CertificateLimitExceededException(InvalidParameterException):
    pass


class CertificateAlreadyExistsException(InvalidParameterException):
    pass


class RegisterEventTopicResult(AddIpRoutesResult):
    """
    The result of a RegisterEventTopic request.
    """

    pass


class RemoveIpRoutesResult(AddIpRoutesResult):
    pass


class RemoveRegionResult(AddIpRoutesResult):
    pass


class RemoveTagsFromResourceResult(AddIpRoutesResult):
    pass


class ResetUserPasswordResult(AddIpRoutesResult):
    pass


class UserDoesNotExistException(InvalidParameterException):
    pass


class InvalidPasswordException(InvalidParameterException):
    pass


class RestoreFromSnapshotResult(AddIpRoutesResult):
    """
    Contains the results of the <a>RestoreFromSnapshot</a> operation.
    """

    pass


class InvalidTargetException(InvalidParameterException):
    pass


class ShareLimitExceededException(InvalidParameterException):
    pass


class OrganizationsException(InvalidParameterException):
    pass


class DirectoryNotSharedException(InvalidParameterException):
    pass


class UpdateConditionalForwarderResult(AddIpRoutesResult):
    """
    The result of an UpdateConditionalForwarder request.
    """

    pass


class UpdateNumberOfDomainControllersResult(AddIpRoutesResult):
    pass


class DomainControllerLimitExceededException(InvalidParameterException):
    pass


class UpdateRadiusResult(AddIpRoutesResult):
    """
    Contains the results of the <a>UpdateRadius</a> operation.
    """

    pass


class DirectoryId(BaseModel):
    __root__: Annotated[str, Field(regex='^d-[0-9a-f]{10}$')]


class AccessUrl(BaseModel):
    __root__: Annotated[str, Field(max_length=128, min_length=1)]


class UpdateSecurityGroupForDirectoryControllers(BaseModel):
    __root__: bool


class RegionName(BaseModel):
    __root__: Annotated[str, Field(max_length=32, min_length=8)]


class ResourceId(BaseModel):
    __root__: Annotated[str, Field(regex='^[d]-[0-9a-f]{10}$')]


class AddedDateTime(BaseModel):
    __root__: datetime


class AdditionalRegions(BaseModel):
    __root__: List[RegionName]


class AliasName(BaseModel):
    __root__: Annotated[
        str,
        Field(
            max_length=62,
            min_length=1,
            regex='^(?!D-|d-)([\\da-zA-Z]+)([-]*[\\da-zA-Z])*',
        ),
    ]


class AttributeName(BaseModel):
    __root__: Annotated[str, Field(min_length=1)]


class AttributeValue(BaseModel):
    __root__: str


class Attribute(BaseModel):
    """
    Represents a named directory attribute.
    """

    Name: Optional[AttributeName] = None
    Value: Optional[AttributeValue] = None


class Attributes(BaseModel):
    __root__: List[Attribute]


class AvailabilityZone(AttributeValue):
    pass


class AvailabilityZones(BaseModel):
    __root__: List[AvailabilityZone]


class SchemaExtensionId(BaseModel):
    __root__: Annotated[str, Field(regex='^e-[0-9a-f]{10}$')]


class CertificateId(BaseModel):
    __root__: Annotated[str, Field(regex='^c-[0-9a-f]{10}$')]


class CertificateState(Enum):
    Registering = 'Registering'
    Registered = 'Registered'
    RegisterFailed = 'RegisterFailed'
    Deregistering = 'Deregistering'
    Deregistered = 'Deregistered'
    DeregisterFailed = 'DeregisterFailed'


class CertificateStateReason(AttributeValue):
    pass


class CertificateCN(AttributeValue):
    pass


class CertificateRegisteredDateTime(AddedDateTime):
    pass


class CertificateExpiryDateTime(AddedDateTime):
    pass


class CertificateType(Enum):
    ClientCertAuth = 'ClientCertAuth'
    ClientLDAPS = 'ClientLDAPS'


class CertificateData(BaseModel):
    __root__: Annotated[str, Field(max_length=8192, min_length=1)]


class CertificateInfo(BaseModel):
    """
    Contains general information about a certificate.
    """

    CertificateId: Optional[CertificateId] = None
    CommonName: Optional[CertificateCN] = None
    State: Optional[CertificateState] = None
    ExpiryDateTime: Optional[CertificateExpiryDateTime] = None
    Type: Optional[CertificateType] = None


class CertificatesInfo(BaseModel):
    __root__: List[CertificateInfo]


class CidrIp(BaseModel):
    __root__: Annotated[
        str,
        Field(
            regex='^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\\/([1-9]|[1-2][0-9]|3[0-2]))$'
        ),
    ]


class CidrIps(BaseModel):
    __root__: List[CidrIp]


class ClientAuthenticationType(Enum):
    SmartCard = 'SmartCard'


class ClientAuthenticationStatus(Enum):
    Enabled = 'Enabled'
    Disabled = 'Disabled'


class LastUpdatedDateTime(AddedDateTime):
    pass


class ClientAuthenticationSettingInfo(BaseModel):
    """
    Contains information about a client authentication method for a directory.
    """

    Type: Optional[ClientAuthenticationType] = None
    Status: Optional[ClientAuthenticationStatus] = None
    LastUpdatedDateTime: Optional[LastUpdatedDateTime] = None


class ClientAuthenticationSettingsInfo(BaseModel):
    __root__: List[ClientAuthenticationSettingInfo]


class OCSPUrl(BaseModel):
    __root__: Annotated[
        str,
        Field(
            max_length=1024,
            min_length=1,
            regex='^(https?|ftp|file|ldaps?)://[-a-zA-Z0-9+&@#/%?=~_|!:,.;()]*[-a-zA-Z0-9+&@#/%=~_|()]',
        ),
    ]


class CloudOnlyDirectoriesLimitReached(UpdateSecurityGroupForDirectoryControllers):
    pass


class SID(BaseModel):
    __root__: Annotated[str, Field(max_length=256, min_length=1, regex='[&\\w+-.@]+')]


class ComputerName(BaseModel):
    __root__: Annotated[str, Field(max_length=15, min_length=1)]


class Computer(BaseModel):
    """
    Contains information about a computer account in a directory.
    """

    ComputerId: Optional[SID] = None
    ComputerName: Optional[ComputerName] = None
    ComputerAttributes: Optional[Attributes] = None


class ComputerPassword(BaseModel):
    __root__: Annotated[
        SecretStr, Field(max_length=64, min_length=8, regex='[\\u0020-\\u00FF]+')
    ]


class RemoteDomainName(BaseModel):
    __root__: Annotated[str, Field(regex='^([a-zA-Z0-9]+[\\\\.-])+([a-zA-Z0-9])+[.]?$')]


class ReplicationScope(Enum):
    Domain = 'Domain'


class DirectoryName(BaseModel):
    __root__: Annotated[str, Field(regex='^([a-zA-Z0-9]+[\\\\.-])+([a-zA-Z0-9])+$')]


class DirectoryShortName(BaseModel):
    __root__: Annotated[str, Field(regex='^[^\\\\/:*?"<>|.]+[^\\\\/:*?"<>|]*$')]


class ConnectPassword(BaseModel):
    __root__: Annotated[SecretStr, Field(max_length=128, min_length=1)]


class Description(BaseModel):
    __root__: Annotated[
        str,
        Field(
            max_length=128,
            min_length=0,
            regex='^([a-zA-Z0-9_])[\\\\a-zA-Z0-9_@#%*+=:?./!\\s-]*$',
        ),
    ]


class DirectorySize(Enum):
    Small = 'Small'
    Large = 'Large'


class ConnectedDirectoriesLimitReached(UpdateSecurityGroupForDirectoryControllers):
    pass


class OrganizationalUnitDN(BaseModel):
    __root__: Annotated[str, Field(max_length=2000, min_length=1)]


class Password(BaseModel):
    __root__: Annotated[
        SecretStr,
        Field(
            regex='(?=^.{8,64}$)((?=.*\\d)(?=.*[A-Z])(?=.*[a-z])|(?=.*\\d)(?=.*[^A-Za-z0-9\\s])(?=.*[a-z])|(?=.*[^A-Za-z0-9\\s])(?=.*[A-Z])(?=.*[a-z])|(?=.*\\d)(?=.*[A-Z])(?=.*[^A-Za-z0-9\\s]))^.*'
        ),
    ]


class LogGroupName(BaseModel):
    __root__: Annotated[
        str, Field(max_length=512, min_length=1, regex='[-._/#A-Za-z0-9]+')
    ]


class DirectoryEdition(Enum):
    Enterprise = 'Enterprise'
    Standard = 'Standard'


class CreateSnapshotBeforeSchemaExtension(UpdateSecurityGroupForDirectoryControllers):
    pass


class SnapshotName(Description):
    pass


class SnapshotId(BaseModel):
    __root__: Annotated[str, Field(regex='^s-[0-9a-f]{10}$')]


class TrustPassword(BaseModel):
    __root__: Annotated[
        SecretStr, Field(max_length=128, min_length=1, regex='(.|\\s)*\\S(.|\\s)*')
    ]


class TrustDirection(Enum):
    One_Way__Outgoing = 'One-Way: Outgoing'
    One_Way__Incoming = 'One-Way: Incoming'
    Two_Way = 'Two-Way'


class TrustType(Enum):
    Forest = 'Forest'
    External = 'External'


class TrustId(BaseModel):
    __root__: Annotated[str, Field(regex='^t-[0-9a-f]{10}$')]


class CreatedDateTime(AddedDateTime):
    pass


class CustomerId(BaseModel):
    __root__: Annotated[str, Field(regex='^(\\d{12})$')]


class CustomerUserName(BaseModel):
    __root__: Annotated[
        str,
        Field(
            max_length=64,
            min_length=1,
            regex='^(?!.*\\\\|.*"|.*\\/|.*\\[|.*\\]|.*:|.*;|.*\\||.*=|.*,|.*\\+|.*\\*|.*\\?|.*<|.*>|.*@).*$',
        ),
    ]


class DeleteAssociatedConditionalForwarder(UpdateSecurityGroupForDirectoryControllers):
    pass


class TopicName(BaseModel):
    __root__: Annotated[
        str, Field(max_length=256, min_length=1, regex='[a-zA-Z0-9_-]+')
    ]


class NextToken(AttributeValue):
    pass


class PageLimit(BaseModel):
    __root__: Annotated[int, Field(ge=1.0, le=50.0)]


class RemoteDomainNames(BaseModel):
    __root__: List[RemoteDomainName]


class DirectoryIds(BaseModel):
    """
    A list of directory identifiers.
    """

    __root__: Annotated[
        List[DirectoryId], Field(description='A list of directory identifiers.')
    ]


class Limit(BaseModel):
    __root__: Annotated[int, Field(ge=0.0)]


class TopicNames(BaseModel):
    __root__: List[TopicName]


class LDAPSType(Enum):
    Client = 'Client'


class SnapshotIds(BaseModel):
    """
    A list of directory snapshot identifiers.
    """

    __root__: Annotated[
        List[SnapshotId], Field(description='A list of directory snapshot identifiers.')
    ]


class TrustIds(BaseModel):
    __root__: List[TrustId]


class DesiredNumberOfDomainControllers(BaseModel):
    __root__: Annotated[int, Field(ge=2.0)]


class VpcId(BaseModel):
    __root__: Annotated[str, Field(regex='^(vpc-[0-9a-f]{8}|vpc-[0-9a-f]{17})$')]


class UserName(BaseModel):
    __root__: Annotated[str, Field(min_length=1, regex='[a-zA-Z0-9._-]+')]


class SecurityGroupId(BaseModel):
    __root__: Annotated[str, Field(regex='^(sg-[0-9a-f]{8}|sg-[0-9a-f]{17})$')]


class DirectoryStage(Enum):
    Requested = 'Requested'
    Creating = 'Creating'
    Created = 'Created'
    Active = 'Active'
    Inoperable = 'Inoperable'
    Impaired = 'Impaired'
    Restoring = 'Restoring'
    RestoreFailed = 'RestoreFailed'
    Deleting = 'Deleting'
    Deleted = 'Deleted'
    Failed = 'Failed'


class ShareStatus(Enum):
    Shared = 'Shared'
    PendingAcceptance = 'PendingAcceptance'
    Rejected = 'Rejected'
    Rejecting = 'Rejecting'
    RejectFailed = 'RejectFailed'
    Sharing = 'Sharing'
    ShareFailed = 'ShareFailed'
    Deleted = 'Deleted'
    Deleting = 'Deleting'


class ShareMethod(Enum):
    ORGANIZATIONS = 'ORGANIZATIONS'
    HANDSHAKE = 'HANDSHAKE'


class Notes(BaseModel):
    __root__: Annotated[SecretStr, Field(max_length=1024)]


class LaunchTime(AddedDateTime):
    pass


class DirectoryType(Enum):
    SimpleAD = 'SimpleAD'
    ADConnector = 'ADConnector'
    MicrosoftAD = 'MicrosoftAD'
    SharedMicrosoftAD = 'SharedMicrosoftAD'


class RadiusStatus(Enum):
    Creating = 'Creating'
    Completed = 'Completed'
    Failed = 'Failed'


class StageReason(AttributeValue):
    pass


class SsoEnabled(UpdateSecurityGroupForDirectoryControllers):
    pass


class RegionsInfo(BaseModel):
    """
    Provides information about the Regions that are configured for multi-Region replication.
    """

    PrimaryRegion: Optional[RegionName] = None
    AdditionalRegions: Optional[AdditionalRegions] = None


class DirectoryLimits(BaseModel):
    """
    Contains directory limit information for a Region.
    """

    CloudOnlyDirectoriesLimit: Optional[Limit] = None
    CloudOnlyDirectoriesCurrentCount: Optional[Limit] = None
    CloudOnlyDirectoriesLimitReached: Optional[CloudOnlyDirectoriesLimitReached] = None
    CloudOnlyMicrosoftADLimit: Optional[Limit] = None
    CloudOnlyMicrosoftADCurrentCount: Optional[Limit] = None
    CloudOnlyMicrosoftADLimitReached: Optional[CloudOnlyDirectoriesLimitReached] = None
    ConnectedDirectoriesLimit: Optional[Limit] = None
    ConnectedDirectoriesCurrentCount: Optional[Limit] = None
    ConnectedDirectoriesLimitReached: Optional[ConnectedDirectoriesLimitReached] = None


class IpAddr(BaseModel):
    __root__: Annotated[
        str,
        Field(
            regex='^(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$'
        ),
    ]


class DomainControllerId(BaseModel):
    __root__: Annotated[str, Field(regex='^dc-[0-9a-f]{10}$')]


class SubnetId(BaseModel):
    __root__: Annotated[str, Field(regex='^(subnet-[0-9a-f]{8}|subnet-[0-9a-f]{17})$')]


class DomainControllerStatus(Enum):
    Creating = 'Creating'
    Active = 'Active'
    Impaired = 'Impaired'
    Restoring = 'Restoring'
    Deleting = 'Deleting'
    Deleted = 'Deleted'
    Failed = 'Failed'


class DomainControllerStatusReason(AttributeValue):
    pass


class DomainController(BaseModel):
    """
    Contains information about the domain controllers for a specified directory.
    """

    DirectoryId: Optional[DirectoryId] = None
    DomainControllerId: Optional[DomainControllerId] = None
    DnsIpAddr: Optional[IpAddr] = None
    VpcId: Optional[VpcId] = None
    SubnetId: Optional[SubnetId] = None
    AvailabilityZone: Optional[AvailabilityZone] = None
    Status: Optional[DomainControllerStatus] = None
    StatusReason: Optional[DomainControllerStatusReason] = None
    LaunchTime: Optional[LaunchTime] = None
    StatusLastUpdatedDateTime: Optional[LastUpdatedDateTime] = None


class EndDateTime(AddedDateTime):
    pass


class TopicArn(AttributeValue):
    pass


class TopicStatus(Enum):
    Registered = 'Registered'
    Topic_not_found = 'Topic not found'
    Failed = 'Failed'
    Deleted = 'Deleted'


class EventTopic(BaseModel):
    """
    Information about Amazon SNS topic and Directory Service directory associations.
    """

    DirectoryId: Optional[DirectoryId] = None
    TopicName: Optional[TopicName] = None
    TopicArn: Optional[TopicArn] = None
    CreatedDateTime: Optional[CreatedDateTime] = None
    Status: Optional[TopicStatus] = None


class IpRoute(BaseModel):
    """
    IP address block. This is often the address block of the DNS server used for your self-managed domain.
    """

    CidrIp: Optional[CidrIp] = None
    Description: Optional[Description] = None


class IpRouteStatusMsg(Enum):
    Adding = 'Adding'
    Added = 'Added'
    Removing = 'Removing'
    Removed = 'Removed'
    AddFailed = 'AddFailed'
    RemoveFailed = 'RemoveFailed'


class IpRouteStatusReason(AttributeValue):
    pass


class IpRouteInfo(BaseModel):
    """
    Information about one or more IP address blocks.
    """

    DirectoryId: Optional[DirectoryId] = None
    CidrIp: Optional[CidrIp] = None
    IpRouteStatusMsg: Optional[IpRouteStatusMsg] = None
    AddedDateTime: Optional[AddedDateTime] = None
    IpRouteStatusReason: Optional[IpRouteStatusReason] = None
    Description: Optional[Description] = None


class IpRoutesInfo(BaseModel):
    __root__: List[IpRouteInfo]


class LDAPSStatus(Enum):
    Enabling = 'Enabling'
    Enabled = 'Enabled'
    EnableFailed = 'EnableFailed'
    Disabled = 'Disabled'


class LDAPSStatusReason(AttributeValue):
    pass


class LDAPSSettingInfo(BaseModel):
    """
    Contains general information about the LDAPS settings.
    """

    LDAPSStatus: Optional[LDAPSStatus] = None
    LDAPSStatusReason: Optional[LDAPSStatusReason] = None
    LastUpdatedDateTime: Optional[LastUpdatedDateTime] = None


class LdifContent(BaseModel):
    __root__: Annotated[str, Field(max_length=500000, min_length=1)]


class SubscriptionCreatedDateTime(AddedDateTime):
    pass


class LogSubscription(BaseModel):
    """
    Represents a log subscription, which tracks real-time data from a chosen log group to a specified destination.
    """

    DirectoryId: Optional[DirectoryId] = None
    LogGroupName: Optional[LogGroupName] = None
    SubscriptionCreatedDateTime: Optional[SubscriptionCreatedDateTime] = None


class ManualSnapshotsLimitReached(UpdateSecurityGroupForDirectoryControllers):
    pass


class PortNumber(BaseModel):
    __root__: Annotated[int, Field(ge=1025.0, le=65535.0)]


class RadiusAuthenticationProtocol(Enum):
    PAP = 'PAP'
    CHAP = 'CHAP'
    MS_CHAPv1 = 'MS-CHAPv1'
    MS_CHAPv2 = 'MS-CHAPv2'


class RadiusDisplayLabel(BaseModel):
    __root__: Annotated[str, Field(max_length=64, min_length=1)]


class RadiusRetries(BaseModel):
    __root__: Annotated[int, Field(ge=0.0, le=10.0)]


class RadiusTimeout(BaseModel):
    __root__: Annotated[int, Field(ge=1.0, le=20.0)]


class RadiusSharedSecret(BaseModel):
    __root__: Annotated[
        SecretStr,
        Field(max_length=512, min_length=8, regex='^(\\p{LD}|\\p{Punct}| )+$'),
    ]


class UseSameUsername(UpdateSecurityGroupForDirectoryControllers):
    pass


class RegionType(Enum):
    Primary = 'Primary'
    Additional = 'Additional'


class StateLastUpdatedDateTime(AddedDateTime):
    pass


class RequestId(BaseModel):
    __root__: Annotated[
        str,
        Field(
            description='The Amazon Web Services request identifier.',
            regex='^([A-Fa-f0-9]{8}-[A-Fa-f0-9]{4}-[A-Fa-f0-9]{4}-[A-Fa-f0-9]{4}-[A-Fa-f0-9]{12})$',
        ),
    ]


class UserPassword(BaseModel):
    __root__: Annotated[SecretStr, Field(max_length=127, min_length=1)]


class SchemaExtensionStatus(Enum):
    Initializing = 'Initializing'
    CreatingSnapshot = 'CreatingSnapshot'
    UpdatingSchema = 'UpdatingSchema'
    Replicating = 'Replicating'
    CancelInProgress = 'CancelInProgress'
    RollbackInProgress = 'RollbackInProgress'
    Cancelled = 'Cancelled'
    Failed = 'Failed'
    Completed = 'Completed'


class SchemaExtensionStatusReason(AttributeValue):
    pass


class StartDateTime(AddedDateTime):
    pass


class SchemaExtensionInfo(BaseModel):
    """
    Information about a schema extension.
    """

    DirectoryId: Optional[DirectoryId] = None
    SchemaExtensionId: Optional[SchemaExtensionId] = None
    Description: Optional[Description] = None
    SchemaExtensionStatus: Optional[SchemaExtensionStatus] = None
    SchemaExtensionStatusReason: Optional[SchemaExtensionStatusReason] = None
    StartDateTime: Optional[StartDateTime] = None
    EndDateTime: Optional[EndDateTime] = None


class Server(BaseModel):
    __root__: Annotated[str, Field(max_length=256, min_length=1)]


class TargetId(RadiusDisplayLabel):
    pass


class TargetType(Enum):
    ACCOUNT = 'ACCOUNT'


class SnapshotType(Enum):
    Auto = 'Auto'
    Manual = 'Manual'


class StartTime(AddedDateTime):
    pass


class Snapshot(BaseModel):
    """
    Describes a directory snapshot.
    """

    DirectoryId: Optional[DirectoryId] = None
    SnapshotId: Optional[SnapshotId] = None
    Type: Optional[SnapshotType] = None
    Name: Optional[SnapshotName] = None
    Status: Optional[RadiusStatus] = None
    StartTime: Optional[StartTime] = None


class TagKey(BaseModel):
    __root__: Annotated[
        str,
        Field(
            max_length=128, min_length=1, regex='^([\\p{L}\\p{Z}\\p{N}_.:/=+\\-@]*)$'
        ),
    ]


class TagValue(BaseModel):
    __root__: Annotated[
        str,
        Field(
            max_length=256, min_length=0, regex='^([\\p{L}\\p{Z}\\p{N}_.:/=+\\-@]*)$'
        ),
    ]


class Tag(BaseModel):
    """
    Metadata assigned to a directory consisting of a key-value pair.
    """

    Key: TagKey
    Value: TagValue


class TrustState(Enum):
    Creating = 'Creating'
    Created = 'Created'
    Verifying = 'Verifying'
    VerifyFailed = 'VerifyFailed'
    Verified = 'Verified'
    Updating = 'Updating'
    UpdateFailed = 'UpdateFailed'
    Updated = 'Updated'
    Deleting = 'Deleting'
    Deleted = 'Deleted'
    Failed = 'Failed'


class TrustStateReason(AttributeValue):
    pass


class Trust(BaseModel):
    """
    Describes a trust relationship between an Managed Microsoft AD directory and an external domain.
    """

    DirectoryId: Optional[DirectoryId] = None
    TrustId: Optional[TrustId] = None
    RemoteDomainName: Optional[RemoteDomainName] = None
    TrustType: Optional[TrustType] = None
    TrustDirection: Optional[TrustDirection] = None
    TrustState: Optional[TrustState] = None
    CreatedDateTime: Optional[CreatedDateTime] = None
    LastUpdatedDateTime: Optional[LastUpdatedDateTime] = None
    StateLastUpdatedDateTime: Optional[StateLastUpdatedDateTime] = None
    TrustStateReason: Optional[TrustStateReason] = None
    SelectiveAuth: Optional[ClientAuthenticationStatus] = None


class UnshareTarget(BaseModel):
    """
    Identifier that contains details about the directory consumer account with whom the directory is being unshared.
    """

    Id: TargetId
    Type: TargetType


class AcceptSharedDirectoryRequest(BaseModel):
    SharedDirectoryId: DirectoryId


class CancelSchemaExtensionRequest(BaseModel):
    DirectoryId: DirectoryId
    SchemaExtensionId: SchemaExtensionId


class ConnectDirectoryResult(BaseModel):
    """
    Contains the results of the <a>ConnectDirectory</a> operation.
    """

    DirectoryId: Optional[DirectoryId] = None


class CreateAliasResult(BaseModel):
    """
    Contains the results of the <a>CreateAlias</a> operation.
    """

    DirectoryId: Optional[DirectoryId] = None
    Alias: Optional[AliasName] = None


class CreateAliasRequest(BaseModel):
    """
    Contains the inputs for the <a>CreateAlias</a> operation.
    """

    DirectoryId: DirectoryId
    Alias: AliasName


class CreateComputerResult(BaseModel):
    """
    Contains the results for the <a>CreateComputer</a> operation.
    """

    Computer: Optional[Computer] = None


class CreateComputerRequest(BaseModel):
    """
    Contains the inputs for the <a>CreateComputer</a> operation.
    """

    DirectoryId: DirectoryId
    ComputerName: ComputerName
    Password: ComputerPassword
    OrganizationalUnitDistinguishedName: Optional[OrganizationalUnitDN] = None
    ComputerAttributes: Optional[Attributes] = None


class CreateDirectoryResult(ConnectDirectoryResult):
    """
    Contains the results of the <a>CreateDirectory</a> operation.
    """

    pass


class CreateLogSubscriptionRequest(BaseModel):
    DirectoryId: DirectoryId
    LogGroupName: LogGroupName


class CreateMicrosoftADResult(ConnectDirectoryResult):
    """
    Result of a CreateMicrosoftAD request.
    """

    pass


class CreateSnapshotResult(BaseModel):
    """
    Contains the results of the <a>CreateSnapshot</a> operation.
    """

    SnapshotId: Optional[SnapshotId] = None


class CreateSnapshotRequest(BaseModel):
    """
    Contains the inputs for the <a>CreateSnapshot</a> operation.
    """

    DirectoryId: DirectoryId
    Name: Optional[SnapshotName] = None


class CreateTrustResult(BaseModel):
    """
    The result of a CreateTrust request.
    """

    TrustId: Optional[TrustId] = None


class DeleteConditionalForwarderRequest(BaseModel):
    """
    Deletes a conditional forwarder.
    """

    DirectoryId: DirectoryId
    RemoteDomainName: RemoteDomainName


class DeleteDirectoryResult(ConnectDirectoryResult):
    """
    Contains the results of the <a>DeleteDirectory</a> operation.
    """

    pass


class DeleteDirectoryRequest(BaseModel):
    """
    Contains the inputs for the <a>DeleteDirectory</a> operation.
    """

    DirectoryId: DirectoryId


class DeleteLogSubscriptionRequest(BaseModel):
    DirectoryId: DirectoryId


class DeleteSnapshotResult(CreateSnapshotResult):
    """
    Contains the results of the <a>DeleteSnapshot</a> operation.
    """

    pass


class DeleteSnapshotRequest(BaseModel):
    """
    Contains the inputs for the <a>DeleteSnapshot</a> operation.
    """

    SnapshotId: SnapshotId


class DeleteTrustResult(CreateTrustResult):
    """
    The result of a DeleteTrust request.
    """

    pass


class DeleteTrustRequest(BaseModel):
    """
    Deletes the local side of an existing trust relationship between the Managed Microsoft AD directory and the external domain.
    """

    TrustId: TrustId
    DeleteAssociatedConditionalForwarder: Optional[
        DeleteAssociatedConditionalForwarder
    ] = None


class DeregisterCertificateRequest(BaseModel):
    DirectoryId: DirectoryId
    CertificateId: CertificateId


class DeregisterEventTopicRequest(BaseModel):
    """
    Removes the specified directory as a publisher to the specified Amazon SNS topic.
    """

    DirectoryId: DirectoryId
    TopicName: TopicName


class DescribeCertificateRequest(BaseModel):
    DirectoryId: DirectoryId
    CertificateId: CertificateId


class DescribeClientAuthenticationSettingsResult(BaseModel):
    ClientAuthenticationSettingsInfo: Optional[ClientAuthenticationSettingsInfo] = None
    NextToken: Optional[NextToken] = None


class DescribeClientAuthenticationSettingsRequest(BaseModel):
    DirectoryId: DirectoryId
    Type: Optional[ClientAuthenticationType] = None
    NextToken: Optional[NextToken] = None
    Limit: Optional[PageLimit] = None


class DescribeConditionalForwardersRequest(BaseModel):
    """
    Describes a conditional forwarder.
    """

    DirectoryId: DirectoryId
    RemoteDomainNames: Optional[RemoteDomainNames] = None


class DescribeDirectoriesRequest(BaseModel):
    """
    Contains the inputs for the <a>DescribeDirectories</a> operation.
    """

    DirectoryIds: Optional[DirectoryIds] = None
    NextToken: Optional[NextToken] = None
    Limit: Optional[Limit] = None


class DescribeEventTopicsRequest(BaseModel):
    """
    Describes event topics.
    """

    DirectoryId: Optional[DirectoryId] = None
    TopicNames: Optional[TopicNames] = None


class DescribeLDAPSSettingsRequest(BaseModel):
    DirectoryId: DirectoryId
    Type: Optional[LDAPSType] = None
    NextToken: Optional[NextToken] = None
    Limit: Optional[PageLimit] = None


class DescribeRegionsRequest(BaseModel):
    DirectoryId: DirectoryId
    RegionName: Optional[RegionName] = None
    NextToken: Optional[NextToken] = None


class DescribeSharedDirectoriesRequest(BaseModel):
    OwnerDirectoryId: DirectoryId
    SharedDirectoryIds: Optional[DirectoryIds] = None
    NextToken: Optional[NextToken] = None
    Limit: Optional[Limit] = None


class DescribeSnapshotsRequest(BaseModel):
    """
    Contains the inputs for the <a>DescribeSnapshots</a> operation.
    """

    DirectoryId: Optional[DirectoryId] = None
    SnapshotIds: Optional[SnapshotIds] = None
    NextToken: Optional[NextToken] = None
    Limit: Optional[Limit] = None


class DescribeTrustsRequest(BaseModel):
    """
    Describes the trust relationships for a particular Managed Microsoft AD directory. If no input parameters are provided, such as directory ID or trust ID, this request describes all the trust relationships.
    """

    DirectoryId: Optional[DirectoryId] = None
    TrustIds: Optional[TrustIds] = None
    NextToken: Optional[NextToken] = None
    Limit: Optional[Limit] = None


class DisableClientAuthenticationRequest(BaseModel):
    DirectoryId: DirectoryId
    Type: ClientAuthenticationType


class DisableLDAPSRequest(BaseModel):
    DirectoryId: DirectoryId
    Type: LDAPSType


class DisableRadiusRequest(BaseModel):
    """
    Contains the inputs for the <a>DisableRadius</a> operation.
    """

    DirectoryId: DirectoryId


class DisableSsoRequest(BaseModel):
    """
    Contains the inputs for the <a>DisableSso</a> operation.
    """

    DirectoryId: DirectoryId
    UserName: Optional[UserName] = None
    Password: Optional[ConnectPassword] = None


class EnableClientAuthenticationRequest(BaseModel):
    DirectoryId: DirectoryId
    Type: ClientAuthenticationType


class EnableLDAPSRequest(BaseModel):
    DirectoryId: DirectoryId
    Type: LDAPSType


class EnableSsoRequest(BaseModel):
    """
    Contains the inputs for the <a>EnableSso</a> operation.
    """

    DirectoryId: DirectoryId
    UserName: Optional[UserName] = None
    Password: Optional[ConnectPassword] = None


class GetDirectoryLimitsResult(BaseModel):
    """
    Contains the results of the <a>GetDirectoryLimits</a> operation.
    """

    DirectoryLimits: Optional[DirectoryLimits] = None


class GetSnapshotLimitsRequest(BaseModel):
    """
    Contains the inputs for the <a>GetSnapshotLimits</a> operation.
    """

    DirectoryId: DirectoryId


class ListCertificatesResult(BaseModel):
    NextToken: Optional[NextToken] = None
    CertificatesInfo: Optional[CertificatesInfo] = None


class ListCertificatesRequest(BaseModel):
    DirectoryId: DirectoryId
    NextToken: Optional[NextToken] = None
    Limit: Optional[PageLimit] = None


class ListIpRoutesResult(BaseModel):
    IpRoutesInfo: Optional[IpRoutesInfo] = None
    NextToken: Optional[NextToken] = None


class ListIpRoutesRequest(BaseModel):
    DirectoryId: DirectoryId
    NextToken: Optional[NextToken] = None
    Limit: Optional[Limit] = None


class ListLogSubscriptionsRequest(BaseModel):
    DirectoryId: Optional[DirectoryId] = None
    NextToken: Optional[NextToken] = None
    Limit: Optional[Limit] = None


class ListSchemaExtensionsRequest(BaseModel):
    DirectoryId: DirectoryId
    NextToken: Optional[NextToken] = None
    Limit: Optional[Limit] = None


class ListTagsForResourceRequest(BaseModel):
    ResourceId: ResourceId
    NextToken: Optional[NextToken] = None
    Limit: Optional[Limit] = None


class RegisterCertificateResult(BaseModel):
    CertificateId: Optional[CertificateId] = None


class RegisterEventTopicRequest(BaseModel):
    """
    Registers a new event topic.
    """

    DirectoryId: DirectoryId
    TopicName: TopicName


class RejectSharedDirectoryResult(BaseModel):
    SharedDirectoryId: Optional[DirectoryId] = None


class RejectSharedDirectoryRequest(BaseModel):
    SharedDirectoryId: DirectoryId


class RemoveIpRoutesRequest(BaseModel):
    DirectoryId: DirectoryId
    CidrIps: CidrIps


class RemoveRegionRequest(BaseModel):
    DirectoryId: DirectoryId


class ResetUserPasswordRequest(BaseModel):
    DirectoryId: DirectoryId
    UserName: CustomerUserName
    NewPassword: UserPassword


class RestoreFromSnapshotRequest(BaseModel):
    """
    An object representing the inputs for the <a>RestoreFromSnapshot</a> operation.
    """

    SnapshotId: SnapshotId


class ShareDirectoryResult(RejectSharedDirectoryResult):
    pass


class StartSchemaExtensionResult(BaseModel):
    SchemaExtensionId: Optional[SchemaExtensionId] = None


class StartSchemaExtensionRequest(BaseModel):
    DirectoryId: DirectoryId
    CreateSnapshotBeforeSchemaExtension: CreateSnapshotBeforeSchemaExtension
    LdifContent: LdifContent
    Description: Description


class UnshareDirectoryResult(RejectSharedDirectoryResult):
    pass


class UnshareDirectoryRequest(BaseModel):
    DirectoryId: DirectoryId
    UnshareTarget: UnshareTarget


class UpdateNumberOfDomainControllersRequest(BaseModel):
    DirectoryId: DirectoryId
    DesiredNumber: DesiredNumberOfDomainControllers


class UpdateTrustResult(BaseModel):
    RequestId: Optional[RequestId] = None
    TrustId: Optional[TrustId] = None


class UpdateTrustRequest(BaseModel):
    TrustId: TrustId
    SelectiveAuth: Optional[ClientAuthenticationStatus] = None


class VerifyTrustResult(CreateTrustResult):
    """
    Result of a VerifyTrust request.
    """

    pass


class VerifyTrustRequest(BaseModel):
    """
    Initiates the verification of an existing trust relationship between an Managed Microsoft AD directory and an external domain.
    """

    TrustId: TrustId


class SharedDirectory(BaseModel):
    """
    Details about the shared directory in the directory owner account for which the share request in the directory consumer account has been accepted.
    """

    OwnerAccountId: Optional[CustomerId] = None
    OwnerDirectoryId: Optional[DirectoryId] = None
    ShareMethod: Optional[ShareMethod] = None
    SharedAccountId: Optional[CustomerId] = None
    SharedDirectoryId: Optional[DirectoryId] = None
    ShareStatus: Optional[ShareStatus] = None
    ShareNotes: Optional[Notes] = None
    CreatedDateTime: Optional[CreatedDateTime] = None
    LastUpdatedDateTime: Optional[LastUpdatedDateTime] = None


class IpRoutes(BaseModel):
    __root__: List[IpRoute]


class Tags(BaseModel):
    __root__: List[Tag]


class ClientCertAuthSettings(BaseModel):
    """
    Contains information about the client certificate authentication settings for the <code>RegisterCertificate</code> and <code>DescribeCertificate</code> operations.
    """

    OCSPUrl: Optional[OCSPUrl] = None


class Certificate(BaseModel):
    """
    Information about the certificate.
    """

    CertificateId: Optional[CertificateId] = None
    State: Optional[CertificateState] = None
    StateReason: Optional[CertificateStateReason] = None
    CommonName: Optional[CertificateCN] = None
    RegisteredDateTime: Optional[CertificateRegisteredDateTime] = None
    ExpiryDateTime: Optional[CertificateExpiryDateTime] = None
    Type: Optional[CertificateType] = None
    ClientCertAuthSettings: Optional[ClientCertAuthSettings] = None


class DnsIpAddrs(BaseModel):
    __root__: List[IpAddr]


class ConditionalForwarder(BaseModel):
    """
    Points to a remote domain with which you are setting up a trust relationship. Conditional forwarders are required in order to set up a trust relationship with another domain.
    """

    RemoteDomainName: Optional[RemoteDomainName] = None
    DnsIpAddrs: Optional[DnsIpAddrs] = None
    ReplicationScope: Optional[ReplicationScope] = None


class ConditionalForwarders(BaseModel):
    __root__: List[ConditionalForwarder]


class DomainControllerIds(BaseModel):
    __root__: List[DomainControllerId]


class DomainControllers(BaseModel):
    __root__: List[DomainController]


class EventTopics(BaseModel):
    __root__: List[EventTopic]


class LDAPSSettingsInfo(BaseModel):
    __root__: List[LDAPSSettingInfo]


class SharedDirectories(BaseModel):
    __root__: List[SharedDirectory]


class Snapshots(BaseModel):
    """
    A list of descriptions of directory snapshots.
    """

    __root__: Annotated[
        List[Snapshot],
        Field(description='A list of descriptions of directory snapshots.'),
    ]


class Trusts(BaseModel):
    __root__: List[Trust]


class SubnetIds(BaseModel):
    __root__: List[SubnetId]


class IpAddrs(DnsIpAddrs):
    pass


class DirectoryConnectSettingsDescription(BaseModel):
    """
    Contains information about an AD Connector directory.
    """

    VpcId: Optional[VpcId] = None
    SubnetIds: Optional[SubnetIds] = None
    CustomerUserName: Optional[UserName] = None
    SecurityGroupId: Optional[SecurityGroupId] = None
    AvailabilityZones: Optional[AvailabilityZones] = None
    ConnectIps: Optional[IpAddrs] = None


class DirectoryVpcSettingsDescription(BaseModel):
    """
    Contains information about the directory.
    """

    VpcId: Optional[VpcId] = None
    SubnetIds: Optional[SubnetIds] = None
    SecurityGroupId: Optional[SecurityGroupId] = None
    AvailabilityZones: Optional[AvailabilityZones] = None


class SnapshotLimits(BaseModel):
    """
    Contains manual snapshot limit information for a directory.
    """

    ManualSnapshotsLimit: Optional[Limit] = None
    ManualSnapshotsCurrentCount: Optional[Limit] = None
    ManualSnapshotsLimitReached: Optional[ManualSnapshotsLimitReached] = None


class LogSubscriptions(BaseModel):
    __root__: List[LogSubscription]


class SchemaExtensionsInfo(BaseModel):
    __root__: List[SchemaExtensionInfo]


class Servers(BaseModel):
    __root__: List[Server]


class TagKeys(BaseModel):
    __root__: List[TagKey]


class ShareTarget(UnshareTarget):
    """
    Identifier that contains details about the directory consumer account.
    """

    pass


class AcceptSharedDirectoryResult(BaseModel):
    SharedDirectory: Optional[SharedDirectory] = None


class AddIpRoutesRequest(BaseModel):
    DirectoryId: DirectoryId
    IpRoutes: IpRoutes
    UpdateSecurityGroupForDirectoryControllers: Optional[
        UpdateSecurityGroupForDirectoryControllers
    ] = None


class AddTagsToResourceRequest(BaseModel):
    ResourceId: ResourceId
    Tags: Tags


class CreateConditionalForwarderRequest(BaseModel):
    """
    Initiates the creation of a conditional forwarder for your Directory Service for Microsoft Active Directory. Conditional forwarders are required in order to set up a trust relationship with another domain.
    """

    DirectoryId: DirectoryId
    RemoteDomainName: RemoteDomainName
    DnsIpAddrs: DnsIpAddrs


class CreateTrustRequest(BaseModel):
    """
    <p>Directory Service for Microsoft Active Directory allows you to configure trust relationships. For example, you can establish a trust between your Managed Microsoft AD directory, and your existing self-managed Microsoft Active Directory. This would allow you to provide users and groups access to resources in either domain, with a single set of credentials.</p> <p>This action initiates the creation of the Amazon Web Services side of a trust relationship between an Managed Microsoft AD directory and an external domain.</p>
    """

    DirectoryId: DirectoryId
    RemoteDomainName: RemoteDomainName
    TrustPassword: TrustPassword
    TrustDirection: TrustDirection
    TrustType: Optional[TrustType] = None
    ConditionalForwarderIpAddrs: Optional[DnsIpAddrs] = None
    SelectiveAuth: Optional[ClientAuthenticationStatus] = None


class DescribeCertificateResult(BaseModel):
    Certificate: Optional[Certificate] = None


class DescribeConditionalForwardersResult(BaseModel):
    """
    The result of a DescribeConditionalForwarder request.
    """

    ConditionalForwarders: Optional[ConditionalForwarders] = None


class DescribeDomainControllersResult(BaseModel):
    DomainControllers: Optional[DomainControllers] = None
    NextToken: Optional[NextToken] = None


class DescribeDomainControllersRequest(BaseModel):
    DirectoryId: DirectoryId
    DomainControllerIds: Optional[DomainControllerIds] = None
    NextToken: Optional[NextToken] = None
    Limit: Optional[Limit] = None


class DescribeEventTopicsResult(BaseModel):
    """
    The result of a DescribeEventTopic request.
    """

    EventTopics: Optional[EventTopics] = None


class DescribeLDAPSSettingsResult(BaseModel):
    LDAPSSettingsInfo: Optional[LDAPSSettingsInfo] = None
    NextToken: Optional[NextToken] = None


class DescribeSharedDirectoriesResult(BaseModel):
    SharedDirectories: Optional[SharedDirectories] = None
    NextToken: Optional[NextToken] = None


class DescribeSnapshotsResult(BaseModel):
    """
    Contains the results of the <a>DescribeSnapshots</a> operation.
    """

    Snapshots: Optional[Snapshots] = None
    NextToken: Optional[NextToken] = None


class DescribeTrustsResult(BaseModel):
    """
    The result of a DescribeTrust request.
    """

    Trusts: Optional[Trusts] = None
    NextToken: Optional[NextToken] = None


class GetSnapshotLimitsResult(BaseModel):
    """
    Contains the results of the <a>GetSnapshotLimits</a> operation.
    """

    SnapshotLimits: Optional[SnapshotLimits] = None


class ListLogSubscriptionsResult(BaseModel):
    LogSubscriptions: Optional[LogSubscriptions] = None
    NextToken: Optional[NextToken] = None


class ListSchemaExtensionsResult(BaseModel):
    SchemaExtensionsInfo: Optional[SchemaExtensionsInfo] = None
    NextToken: Optional[NextToken] = None


class ListTagsForResourceResult(BaseModel):
    Tags: Optional[Tags] = None
    NextToken: Optional[NextToken] = None


class RegisterCertificateRequest(BaseModel):
    DirectoryId: DirectoryId
    CertificateData: CertificateData
    Type: Optional[CertificateType] = None
    ClientCertAuthSettings: Optional[ClientCertAuthSettings] = None


class RemoveTagsFromResourceRequest(BaseModel):
    ResourceId: ResourceId
    TagKeys: TagKeys


class ShareDirectoryRequest(BaseModel):
    DirectoryId: DirectoryId
    ShareNotes: Optional[Notes] = None
    ShareTarget: ShareTarget
    ShareMethod: ShareMethod


class UpdateConditionalForwarderRequest(BaseModel):
    """
    Updates a conditional forwarder.
    """

    DirectoryId: DirectoryId
    RemoteDomainName: RemoteDomainName
    DnsIpAddrs: DnsIpAddrs


class DirectoryVpcSettings(BaseModel):
    """
    Contains VPC information for the <a>CreateDirectory</a> or <a>CreateMicrosoftAD</a> operation.
    """

    VpcId: VpcId
    SubnetIds: SubnetIds


class DirectoryConnectSettings(BaseModel):
    """
    Contains information for the <a>ConnectDirectory</a> operation when an AD Connector directory is being created.
    """

    VpcId: VpcId
    SubnetIds: SubnetIds
    CustomerDnsIps: DnsIpAddrs
    CustomerUserName: UserName


class RadiusSettings(BaseModel):
    """
    Contains information about a Remote Authentication Dial In User Service (RADIUS) server.
    """

    RadiusServers: Optional[Servers] = None
    RadiusPort: Optional[PortNumber] = None
    RadiusTimeout: Optional[RadiusTimeout] = None
    RadiusRetries: Optional[RadiusRetries] = None
    SharedSecret: Optional[RadiusSharedSecret] = None
    AuthenticationProtocol: Optional[RadiusAuthenticationProtocol] = None
    DisplayLabel: Optional[RadiusDisplayLabel] = None
    UseSameUsername: Optional[UseSameUsername] = None


class OwnerDirectoryDescription(BaseModel):
    """
    Describes the directory owner account details that have been shared to the directory consumer account.
    """

    DirectoryId: Optional[DirectoryId] = None
    AccountId: Optional[CustomerId] = None
    DnsIpAddrs: Optional[DnsIpAddrs] = None
    VpcSettings: Optional[DirectoryVpcSettingsDescription] = None
    RadiusSettings: Optional[RadiusSettings] = None
    RadiusStatus: Optional[RadiusStatus] = None


class DirectoryDescription(BaseModel):
    """
    Contains information about an Directory Service directory.
    """

    DirectoryId: Optional[DirectoryId] = None
    Name: Optional[DirectoryName] = None
    ShortName: Optional[DirectoryShortName] = None
    Size: Optional[DirectorySize] = None
    Edition: Optional[DirectoryEdition] = None
    Alias: Optional[AliasName] = None
    AccessUrl: Optional[AccessUrl] = None
    Description: Optional[Description] = None
    DnsIpAddrs: Optional[DnsIpAddrs] = None
    Stage: Optional[DirectoryStage] = None
    ShareStatus: Optional[ShareStatus] = None
    ShareMethod: Optional[ShareMethod] = None
    ShareNotes: Optional[Notes] = None
    LaunchTime: Optional[LaunchTime] = None
    StageLastUpdatedDateTime: Optional[LastUpdatedDateTime] = None
    Type: Optional[DirectoryType] = None
    VpcSettings: Optional[DirectoryVpcSettingsDescription] = None
    ConnectSettings: Optional[DirectoryConnectSettingsDescription] = None
    RadiusSettings: Optional[RadiusSettings] = None
    RadiusStatus: Optional[RadiusStatus] = None
    StageReason: Optional[StageReason] = None
    SsoEnabled: Optional[SsoEnabled] = None
    DesiredNumberOfDomainControllers: Optional[DesiredNumberOfDomainControllers] = None
    OwnerDirectoryDescription: Optional[OwnerDirectoryDescription] = None
    RegionsInfo: Optional[RegionsInfo] = None


class RegionDescription(BaseModel):
    """
    The replicated Region information for a directory.
    """

    DirectoryId: Optional[DirectoryId] = None
    RegionName: Optional[RegionName] = None
    RegionType: Optional[RegionType] = None
    Status: Optional[DirectoryStage] = None
    VpcSettings: Optional[DirectoryVpcSettings] = None
    DesiredNumberOfDomainControllers: Optional[DesiredNumberOfDomainControllers] = None
    LaunchTime: Optional[LaunchTime] = None
    StatusLastUpdatedDateTime: Optional[StateLastUpdatedDateTime] = None
    LastUpdatedDateTime: Optional[LastUpdatedDateTime] = None


class AddRegionRequest(BaseModel):
    DirectoryId: DirectoryId
    RegionName: RegionName
    VPCSettings: DirectoryVpcSettings


class ConnectDirectoryRequest(BaseModel):
    """
    Contains the inputs for the <a>ConnectDirectory</a> operation.
    """

    Name: DirectoryName
    ShortName: Optional[DirectoryShortName] = None
    Password: ConnectPassword
    Description: Optional[Description] = None
    Size: DirectorySize
    ConnectSettings: DirectoryConnectSettings
    Tags: Optional[Tags] = None


class CreateDirectoryRequest(BaseModel):
    """
    Contains the inputs for the <a>CreateDirectory</a> operation.
    """

    Name: DirectoryName
    ShortName: Optional[DirectoryShortName] = None
    Password: Password
    Description: Optional[Description] = None
    Size: DirectorySize
    VpcSettings: Optional[DirectoryVpcSettings] = None
    Tags: Optional[Tags] = None


class CreateMicrosoftADRequest(BaseModel):
    """
    Creates an Managed Microsoft AD directory.
    """

    Name: DirectoryName
    ShortName: Optional[DirectoryShortName] = None
    Password: Password
    Description: Optional[Description] = None
    VpcSettings: DirectoryVpcSettings
    Edition: Optional[DirectoryEdition] = None
    Tags: Optional[Tags] = None


class EnableRadiusRequest(BaseModel):
    """
    Contains the inputs for the <a>EnableRadius</a> operation.
    """

    DirectoryId: DirectoryId
    RadiusSettings: RadiusSettings


class UpdateRadiusRequest(BaseModel):
    """
    Contains the inputs for the <a>UpdateRadius</a> operation.
    """

    DirectoryId: DirectoryId
    RadiusSettings: RadiusSettings


class DirectoryDescriptions(BaseModel):
    """
    A list of directory descriptions.
    """

    __root__: Annotated[
        List[DirectoryDescription],
        Field(description='A list of directory descriptions.'),
    ]


class RegionsDescription(BaseModel):
    __root__: List[RegionDescription]


class DescribeDirectoriesResult(BaseModel):
    """
    Contains the results of the <a>DescribeDirectories</a> operation.
    """

    DirectoryDescriptions: Optional[DirectoryDescriptions] = None
    NextToken: Optional[NextToken] = None


class DescribeRegionsResult(BaseModel):
    RegionsDescription: Optional[RegionsDescription] = None
    NextToken: Optional[NextToken] = None
