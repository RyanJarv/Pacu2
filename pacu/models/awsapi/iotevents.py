# generated by datamodel-codegen:
#   filename:  openapi.yaml
#   timestamp: 2021-12-31T02:50:56+00:00

from __future__ import annotations

from datetime import datetime
from enum import Enum
from typing import Annotated, Any, List, Optional

from pydantic import BaseModel, Field


class InvalidRequestException(BaseModel):
    __root__: Any


class ResourceInUseException(InvalidRequestException):
    pass


class ResourceAlreadyExistsException(InvalidRequestException):
    pass


class LimitExceededException(InvalidRequestException):
    pass


class ThrottlingException(InvalidRequestException):
    pass


class InternalFailureException(InvalidRequestException):
    pass


class ServiceUnavailableException(InvalidRequestException):
    pass


class StateName(BaseModel):
    __root__: Annotated[str, Field(max_length=128, min_length=1)]


class DeleteAlarmModelResponse(BaseModel):
    pass


class ResourceNotFoundException(InvalidRequestException):
    pass


class DeleteDetectorModelResponse(DeleteAlarmModelResponse):
    pass


class DeleteInputResponse(DeleteAlarmModelResponse):
    pass


class UnsupportedOperationException(InvalidRequestException):
    pass


class AmazonResourceName(BaseModel):
    __root__: Annotated[str, Field(max_length=2048, min_length=1)]


class LoggingLevel(Enum):
    ERROR = 'ERROR'
    INFO = 'INFO'
    DEBUG = 'DEBUG'


class LoggingEnabled(BaseModel):
    __root__: bool


class TagResourceResponse(DeleteAlarmModelResponse):
    pass


class UntagResourceResponse(DeleteAlarmModelResponse):
    pass


class TagKey(StateName):
    pass


class AcknowledgeFlowEnabled(LoggingEnabled):
    pass


class AlarmModelArn(BaseModel):
    __root__: str


class AlarmModelDescription(BaseModel):
    __root__: Annotated[str, Field(max_length=128)]


class AlarmModelName(BaseModel):
    __root__: Annotated[
        str, Field(max_length=128, min_length=1, regex='^[a-zA-Z0-9_-]+$')
    ]


class Timestamp(BaseModel):
    __root__: datetime


class AlarmModelVersion(StateName):
    pass


class AlarmModelVersionStatus(Enum):
    ACTIVE = 'ACTIVE'
    ACTIVATING = 'ACTIVATING'
    INACTIVE = 'INACTIVE'
    FAILED = 'FAILED'


class StatusMessage(AlarmModelArn):
    pass


class AnalysisId(AlarmModelArn):
    pass


class AnalysisMessage(AlarmModelArn):
    pass


class AnalysisType(AlarmModelArn):
    pass


class AnalysisResultLevel(Enum):
    INFO = 'INFO'
    WARNING = 'WARNING'
    ERROR = 'ERROR'


class AnalysisResultLocationPath(AlarmModelArn):
    pass


class AnalysisResultLocation(BaseModel):
    """
    Contains information that you can use to locate the field in your detector model that the analysis result references.
    """

    path: Optional[AnalysisResultLocationPath] = None


class AnalysisStatus(Enum):
    RUNNING = 'RUNNING'
    COMPLETE = 'COMPLETE'
    FAILED = 'FAILED'


class AssetId(AlarmModelArn):
    pass


class AssetModelId(AlarmModelArn):
    pass


class AssetPropertyAlias(AlarmModelArn):
    pass


class AssetPropertyBooleanValue(AlarmModelArn):
    pass


class AssetPropertyDoubleValue(AlarmModelArn):
    pass


class AssetPropertyEntryId(AlarmModelArn):
    pass


class AssetPropertyId(AlarmModelArn):
    pass


class AssetPropertyIntegerValue(AlarmModelArn):
    pass


class AssetPropertyOffsetInNanos(AlarmModelArn):
    pass


class AssetPropertyQuality(AlarmModelArn):
    pass


class AssetPropertyStringValue(AlarmModelArn):
    pass


class AssetPropertyTimeInSeconds(AlarmModelArn):
    pass


class AssetPropertyTimestamp(BaseModel):
    """
    <p>A structure that contains timestamp information. For more information, see <a href="https://docs.aws.amazon.com/iot-sitewise/latest/APIReference/API_TimeInNanos.html">TimeInNanos</a> in the <i>AWS IoT SiteWise API Reference</i>.</p> <p>You must use expressions for all parameters in <code>AssetPropertyTimestamp</code>. The expressions accept literals, operators, functions, references, and substitution templates.</p> <p class="title"> <b>Examples</b> </p> <ul> <li> <p>For literal values, the expressions must contain single quotes. For example, the value for the <code>timeInSeconds</code> parameter can be <code>'1586400675'</code>.</p> </li> <li> <p>For references, you must specify either variables or input values. For example, the value for the <code>offsetInNanos</code> parameter can be <code>$variable.time</code>.</p> </li> <li> <p>For a substitution template, you must use <code>${}</code>, and the template must be in single quotes. A substitution template can also contain a combination of literals, operators, functions, references, and substitution templates.</p> <p>In the following example, the value for the <code>timeInSeconds</code> parameter uses a substitution template.</p> <p> <code>'${$input.TemperatureInput.sensorData.timestamp / 1000}'</code> </p> </li> </ul> <p>For more information, see <a href="https://docs.aws.amazon.com/iotevents/latest/developerguide/iotevents-expressions.html">Expressions</a> in the <i>AWS IoT Events Developer Guide</i>.</p>
    """

    timeInSeconds: AssetPropertyTimeInSeconds
    offsetInNanos: Optional[AssetPropertyOffsetInNanos] = None


class AssetPropertyVariant(BaseModel):
    """
    <p>A structure that contains an asset property value. For more information, see <a href="https://docs.aws.amazon.com/iot-sitewise/latest/APIReference/API_Variant.html">Variant</a> in the <i>AWS IoT SiteWise API Reference</i>.</p> <p>You must use expressions for all parameters in <code>AssetPropertyVariant</code>. The expressions accept literals, operators, functions, references, and substitution templates.</p> <p class="title"> <b>Examples</b> </p> <ul> <li> <p>For literal values, the expressions must contain single quotes. For example, the value for the <code>integerValue</code> parameter can be <code>'100'</code>.</p> </li> <li> <p>For references, you must specify either variables or parameters. For example, the value for the <code>booleanValue</code> parameter can be <code>$variable.offline</code>.</p> </li> <li> <p>For a substitution template, you must use <code>${}</code>, and the template must be in single quotes. A substitution template can also contain a combination of literals, operators, functions, references, and substitution templates. </p> <p>In the following example, the value for the <code>doubleValue</code> parameter uses a substitution template. </p> <p> <code>'${$input.TemperatureInput.sensorData.temperature * 6 / 5 + 32}'</code> </p> </li> </ul> <p>For more information, see <a href="https://docs.aws.amazon.com/iotevents/latest/developerguide/iotevents-expressions.html">Expressions</a> in the <i>AWS IoT Events Developer Guide</i>.</p> <p>You must specify one of the following value types, depending on the <code>dataType</code> of the specified asset property. For more information, see <a href="https://docs.aws.amazon.com/iot-sitewise/latest/APIReference/API_AssetProperty.html">AssetProperty</a> in the <i>AWS IoT SiteWise API Reference</i>.</p>
    """

    stringValue: Optional[AssetPropertyStringValue] = None
    integerValue: Optional[AssetPropertyIntegerValue] = None
    doubleValue: Optional[AssetPropertyDoubleValue] = None
    booleanValue: Optional[AssetPropertyBooleanValue] = None


class AssetPropertyValue(BaseModel):
    """
    <p>A structure that contains value information. For more information, see <a href="https://docs.aws.amazon.com/iot-sitewise/latest/APIReference/API_AssetPropertyValue.html">AssetPropertyValue</a> in the <i>AWS IoT SiteWise API Reference</i>.</p> <p>You must use expressions for all parameters in <code>AssetPropertyValue</code>. The expressions accept literals, operators, functions, references, and substitution templates.</p> <p class="title"> <b>Examples</b> </p> <ul> <li> <p>For literal values, the expressions must contain single quotes. For example, the value for the <code>quality</code> parameter can be <code>'GOOD'</code>.</p> </li> <li> <p>For references, you must specify either variables or input values. For example, the value for the <code>quality</code> parameter can be <code>$input.TemperatureInput.sensorData.quality</code>.</p> </li> </ul> <p>For more information, see <a href="https://docs.aws.amazon.com/iotevents/latest/developerguide/iotevents-expressions.html">Expressions</a> in the <i>AWS IoT Events Developer Guide</i>.</p>
    """

    value: Optional[AssetPropertyVariant] = None
    timestamp: Optional[AssetPropertyTimestamp] = None
    quality: Optional[AssetPropertyQuality] = None


class AttributeJsonPath(BaseModel):
    __root__: Annotated[
        str,
        Field(
            max_length=128,
            min_length=1,
            regex='^((`[\\w\\- ]+`)|([\\w\\-]+))(\\.((`[\\w- ]+`)|([\\w\\-]+)))*$',
        ),
    ]


class Attribute(BaseModel):
    """
    The attributes from the JSON payload that are made available by the input. Inputs are derived from messages sent to the AWS IoT Events system using <code>BatchPutMessage</code>. Each such message contains a JSON payload. Those attributes (and their paired values) specified here are available for use in the <code>condition</code> expressions used by detectors.
    """

    jsonPath: AttributeJsonPath


class TimerName(StateName):
    pass


class ComparisonOperator(Enum):
    GREATER = 'GREATER'
    GREATER_OR_EQUAL = 'GREATER_OR_EQUAL'
    LESS = 'LESS'
    LESS_OR_EQUAL = 'LESS_OR_EQUAL'
    EQUAL = 'EQUAL'
    NOT_EQUAL = 'NOT_EQUAL'


class Condition(BaseModel):
    __root__: Annotated[str, Field(max_length=512)]


class ContentExpression(BaseModel):
    __root__: Annotated[str, Field(min_length=1)]


class Severity(BaseModel):
    __root__: Annotated[int, Field(ge=0.0, le=2147483647.0)]


class DetectorModelName(AlarmModelName):
    pass


class DetectorModelDescription(AlarmModelDescription):
    pass


class EvaluationMethod(Enum):
    BATCH = 'BATCH'
    SERIAL = 'SERIAL'


class InputName(BaseModel):
    __root__: Annotated[
        str, Field(max_length=128, min_length=1, regex='^[a-zA-Z][a-zA-Z0-9_]*$')
    ]


class InputDescription(AlarmModelDescription):
    pass


class DeleteAlarmModelRequest(BaseModel):
    pass


class DeleteDetectorModelRequest(BaseModel):
    pass


class DeleteInputRequest(BaseModel):
    pass


class DeliveryStreamName(AlarmModelArn):
    pass


class DescribeAlarmModelRequest(BaseModel):
    pass


class DescribeDetectorModelAnalysisRequest(BaseModel):
    pass


class DetectorModelVersion(StateName):
    pass


class DescribeDetectorModelRequest(BaseModel):
    pass


class DescribeInputRequest(BaseModel):
    pass


class DescribeLoggingOptionsRequest(BaseModel):
    pass


class KeyValue(BaseModel):
    __root__: Annotated[
        str, Field(max_length=128, min_length=1, regex='^[a-zA-Z0-9\\-_:]+$')
    ]


class DetectorDebugOption(BaseModel):
    """
    The detector model and the specific detectors (instances) for which the logging level is given.
    """

    detectorModelName: DetectorModelName
    keyValue: Optional[KeyValue] = None


class DetectorModelArn(AlarmModelArn):
    pass


class DetectorModelVersionStatus(Enum):
    ACTIVE = 'ACTIVE'
    ACTIVATING = 'ACTIVATING'
    INACTIVE = 'INACTIVE'
    DEPRECATED = 'DEPRECATED'
    DRAFT = 'DRAFT'
    PAUSED = 'PAUSED'
    FAILED = 'FAILED'


class DetectorModelSummary(BaseModel):
    """
    Information about the detector model.
    """

    detectorModelName: Optional[DetectorModelName] = None
    detectorModelDescription: Optional[DetectorModelDescription] = None
    creationTime: Optional[Timestamp] = None


class DetectorModelSummaries(BaseModel):
    __root__: List[DetectorModelSummary]


class DetectorModelVersionSummary(BaseModel):
    """
    Information about the detector model version.
    """

    detectorModelName: Optional[DetectorModelName] = None
    detectorModelVersion: Optional[DetectorModelVersion] = None
    detectorModelArn: Optional[DetectorModelArn] = None
    roleArn: Optional[AmazonResourceName] = None
    creationTime: Optional[Timestamp] = None
    lastUpdateTime: Optional[Timestamp] = None
    status: Optional[DetectorModelVersionStatus] = None
    evaluationMethod: Optional[EvaluationMethod] = None


class DetectorModelVersionSummaries(BaseModel):
    __root__: List[DetectorModelVersionSummary]


class DisabledOnInitialization(LoggingEnabled):
    pass


class DynamoKeyType(AlarmModelArn):
    pass


class DynamoKeyField(AlarmModelArn):
    pass


class DynamoKeyValue(AlarmModelArn):
    pass


class DynamoOperation(AlarmModelArn):
    pass


class DynamoTableName(AlarmModelArn):
    pass


class FromEmail(AlarmModelArn):
    pass


class EmailSubject(AlarmModelArn):
    pass


class NotificationAdditionalMessage(AlarmModelArn):
    pass


class EventName(AlarmModelDescription):
    pass


class FirehoseSeparator(BaseModel):
    __root__: Annotated[str, Field(regex='([\\n\\t])|(\\r\\n)|(,)')]


class NextToken(AlarmModelArn):
    pass


class MaxAnalysisResults(BaseModel):
    __root__: int


class GetDetectorModelAnalysisResultsRequest(BaseModel):
    pass


class IdentityStoreId(AlarmModelArn):
    pass


class InputArn(AlarmModelArn):
    pass


class InputStatus(Enum):
    CREATING = 'CREATING'
    UPDATING = 'UPDATING'
    ACTIVE = 'ACTIVE'
    DELETING = 'DELETING'


class InputProperty(BaseModel):
    __root__: Annotated[str, Field(max_length=512, min_length=1)]


class InputSummary(BaseModel):
    """
    Information about the input.
    """

    inputName: Optional[InputName] = None
    inputDescription: Optional[InputDescription] = None
    inputArn: Optional[InputArn] = None
    creationTime: Optional[Timestamp] = None
    lastUpdateTime: Optional[Timestamp] = None
    status: Optional[InputStatus] = None


class InputSummaries(BaseModel):
    __root__: List[InputSummary]


class IotSiteWiseAssetModelPropertyIdentifier(BaseModel):
    """
    The asset model property identifer of the input routed from AWS IoT SiteWise.
    """

    assetModelId: AssetModelId
    propertyId: AssetPropertyId


class MQTTTopic(StateName):
    pass


class MaxResults(BaseModel):
    __root__: Annotated[int, Field(ge=1.0, le=250.0)]


class ListAlarmModelVersionsRequest(BaseModel):
    pass


class ListAlarmModelsRequest(BaseModel):
    pass


class ListDetectorModelVersionsRequest(BaseModel):
    pass


class ListDetectorModelsRequest(BaseModel):
    pass


class ListInputsRequest(BaseModel):
    pass


class ListTagsForResourceRequest(BaseModel):
    pass


class PayloadType(Enum):
    STRING = 'STRING'
    JSON = 'JSON'


class QueueUrl(AlarmModelArn):
    pass


class ResourceName(AlarmModelArn):
    pass


class RoutedResource(BaseModel):
    """
    Contains information about the routed resource.
    """

    name: Optional[ResourceName] = None
    arn: Optional[AmazonResourceName] = None


class SMSSenderId(AlarmModelArn):
    pass


class SSOReferenceId(AlarmModelArn):
    pass


class Seconds(BaseModel):
    __root__: Annotated[int, Field(ge=1.0, le=31622400.0)]


class VariableValue(BaseModel):
    __root__: Annotated[str, Field(max_length=1024, min_length=1)]


class VariableName(InputName):
    pass


class Threshold(InputProperty):
    pass


class UseBase64(LoggingEnabled):
    pass


class TagValue(BaseModel):
    __root__: Annotated[str, Field(max_length=256, min_length=0)]


class TagKeys(BaseModel):
    __root__: List[TagKey]


class UntagResourceRequest(BaseModel):
    pass


class CreateAlarmModelResponse(BaseModel):
    creationTime: Optional[Timestamp] = None
    alarmModelArn: Optional[AlarmModelArn] = None
    alarmModelVersion: Optional[AlarmModelVersion] = None
    lastUpdateTime: Optional[Timestamp] = None
    status: Optional[AlarmModelVersionStatus] = None


class Tag(BaseModel):
    """
    Metadata that can be used to manage the resource.
    """

    key: TagKey
    value: TagValue


class SimpleRule(BaseModel):
    """
    A rule that compares an input property value to a threshold value with a comparison operator.
    """

    inputProperty: InputProperty
    comparisonOperator: ComparisonOperator
    threshold: Threshold


class InitializationConfiguration(BaseModel):
    """
    Specifies the default alarm state. The configuration applies to all alarms that were created based on this alarm model.
    """

    disabledOnInitialization: DisabledOnInitialization


class AcknowledgeFlow(BaseModel):
    """
    Specifies whether to get notified for alarm state changes.
    """

    enabled: AcknowledgeFlowEnabled


class Attributes(BaseModel):
    __root__: Annotated[List[Attribute], Field(max_items=200, min_items=1)]


class DescribeDetectorModelAnalysisResponse(BaseModel):
    status: Optional[AnalysisStatus] = None


class ListDetectorModelVersionsResponse(BaseModel):
    detectorModelVersionSummaries: Optional[DetectorModelVersionSummaries] = None
    nextToken: Optional[NextToken] = None


class ListDetectorModelsResponse(BaseModel):
    detectorModelSummaries: Optional[DetectorModelSummaries] = None
    nextToken: Optional[NextToken] = None


class IotEventsInputIdentifier(BaseModel):
    """
    The identifier of the input routed to AWS IoT Events.
    """

    inputName: InputName


class IotSiteWiseInputIdentifier(BaseModel):
    """
    The identifer of the input routed from AWS IoT SiteWise.
    """

    iotSiteWiseAssetModelPropertyIdentifier: Optional[
        IotSiteWiseAssetModelPropertyIdentifier
    ] = None


class ListInputsResponse(BaseModel):
    inputSummaries: Optional[InputSummaries] = None
    nextToken: Optional[NextToken] = None


class DetectorDebugOptions(BaseModel):
    __root__: Annotated[List[DetectorDebugOption], Field(min_items=1)]


class StartDetectorModelAnalysisResponse(BaseModel):
    analysisId: Optional[AnalysisId] = None


class UpdateAlarmModelResponse(CreateAlarmModelResponse):
    pass


class SetVariableAction(BaseModel):
    """
    Information about the variable and its new value.
    """

    variableName: VariableName
    value: VariableValue


class SetTimerAction(BaseModel):
    """
    Information needed to set the timer.
    """

    timerName: TimerName
    seconds: Optional[Seconds] = None
    durationExpression: Optional[VariableValue] = None


class ClearTimerAction(BaseModel):
    """
    Information needed to clear the timer.
    """

    timerName: TimerName


class ResetTimerAction(ClearTimerAction):
    """
    Information required to reset the timer. The timer is reset to the previously evaluated result of the duration. The duration expression isn't reevaluated when you reset the timer.
    """

    pass


class IotSiteWiseAction(BaseModel):
    """
    <p>Sends information about the detector model instance and the event that triggered the action to a specified asset property in AWS IoT SiteWise.</p> <p>You must use expressions for all parameters in <code>IotSiteWiseAction</code>. The expressions accept literals, operators, functions, references, and substitutions templates.</p> <p class="title"> <b>Examples</b> </p> <ul> <li> <p>For literal values, the expressions must contain single quotes. For example, the value for the <code>propertyAlias</code> parameter can be <code>'/company/windfarm/3/turbine/7/temperature'</code>.</p> </li> <li> <p>For references, you must specify either variables or input values. For example, the value for the <code>assetId</code> parameter can be <code>$input.TurbineInput.assetId1</code>.</p> </li> <li> <p>For a substitution template, you must use <code>${}</code>, and the template must be in single quotes. A substitution template can also contain a combination of literals, operators, functions, references, and substitution templates.</p> <p>In the following example, the value for the <code>propertyAlias</code> parameter uses a substitution template. </p> <p> <code>'company/windfarm/${$input.TemperatureInput.sensorData.windfarmID}/turbine/ ${$input.TemperatureInput.sensorData.turbineID}/temperature'</code> </p> </li> </ul> <p>You must specify either <code>propertyAlias</code> or both <code>assetId</code> and <code>propertyId</code> to identify the target asset property in AWS IoT SiteWise.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/iotevents/latest/developerguide/iotevents-expressions.html">Expressions</a> in the <i>AWS IoT Events Developer Guide</i>.</p>
    """

    entryId: Optional[AssetPropertyEntryId] = None
    assetId: Optional[AssetId] = None
    propertyId: Optional[AssetPropertyId] = None
    propertyAlias: Optional[AssetPropertyAlias] = None
    propertyValue: Optional[AssetPropertyValue] = None


class AlarmCapabilities(BaseModel):
    """
    Contains the configuration information of alarm state changes.
    """

    initializationConfiguration: Optional[InitializationConfiguration] = None
    acknowledgeFlow: Optional[AcknowledgeFlow] = None


class AlarmModelSummary(BaseModel):
    """
    Contains a summary of an alarm model.
    """

    creationTime: Optional[Timestamp] = None
    alarmModelDescription: Optional[AlarmModelDescription] = None
    alarmModelName: Optional[AlarmModelName] = None


class AlarmModelSummaries(BaseModel):
    __root__: List[AlarmModelSummary]


class AlarmModelVersionSummary(BaseModel):
    """
    Contains a summary of an alarm model version.
    """

    alarmModelName: Optional[AlarmModelName] = None
    alarmModelArn: Optional[AlarmModelArn] = None
    alarmModelVersion: Optional[AlarmModelVersion] = None
    roleArn: Optional[AmazonResourceName] = None
    creationTime: Optional[Timestamp] = None
    lastUpdateTime: Optional[Timestamp] = None
    status: Optional[AlarmModelVersionStatus] = None
    statusMessage: Optional[StatusMessage] = None


class AlarmModelVersionSummaries(BaseModel):
    __root__: List[AlarmModelVersionSummary]


class AlarmRule(BaseModel):
    """
    Defines when your alarm is invoked.
    """

    simpleRule: Optional[SimpleRule] = None


class AnalysisResultLocations(BaseModel):
    __root__: List[AnalysisResultLocation]


class AnalysisResult(BaseModel):
    """
    Contains the result of the analysis.
    """

    type: Optional[AnalysisType] = None
    level: Optional[AnalysisResultLevel] = None
    message: Optional[AnalysisMessage] = None
    locations: Optional[AnalysisResultLocations] = None


class AnalysisResults(BaseModel):
    __root__: List[AnalysisResult]


class Tags(BaseModel):
    __root__: List[Tag]


class DetectorModelConfiguration(BaseModel):
    """
    Information about how the detector model is configured.
    """

    detectorModelName: Optional[DetectorModelName] = None
    detectorModelVersion: Optional[DetectorModelVersion] = None
    detectorModelDescription: Optional[DetectorModelDescription] = None
    detectorModelArn: Optional[DetectorModelArn] = None
    roleArn: Optional[AmazonResourceName] = None
    creationTime: Optional[Timestamp] = None
    lastUpdateTime: Optional[Timestamp] = None
    status: Optional[DetectorModelVersionStatus] = None
    key: Optional[AttributeJsonPath] = None
    evaluationMethod: Optional[EvaluationMethod] = None


class InputDefinition(BaseModel):
    """
    The definition of the input.
    """

    attributes: Attributes


class CreateInputRequest(BaseModel):
    inputName: InputName
    inputDescription: Optional[InputDescription] = None
    inputDefinition: InputDefinition
    tags: Optional[Tags] = None


class InputConfiguration(BaseModel):
    """
    Information about the configuration of an input.
    """

    inputName: InputName
    inputDescription: Optional[InputDescription] = None
    inputArn: InputArn
    creationTime: Timestamp
    lastUpdateTime: Timestamp
    status: InputStatus


class Input(BaseModel):
    """
    Information about the input.
    """

    inputConfiguration: Optional[InputConfiguration] = None
    inputDefinition: Optional[InputDefinition] = None


class LoggingOptions(BaseModel):
    """
    The values of the AWS IoT Events logging options.
    """

    roleArn: AmazonResourceName
    level: LoggingLevel
    enabled: LoggingEnabled
    detectorDebugOptions: Optional[DetectorDebugOptions] = None


class Payload(BaseModel):
    """
    <p>Information needed to configure the payload.</p> <p>By default, AWS IoT Events generates a standard payload in JSON for any action. This action payload contains all attribute-value pairs that have the information about the detector model instance and the event triggered the action. To configure the action payload, you can use <code>contentExpression</code>.</p>
    """

    contentExpression: ContentExpression
    type: PayloadType


class EmailContent(BaseModel):
    """
    Contains the subject and message of an email.
    """

    subject: Optional[EmailSubject] = None
    additionalMessage: Optional[NotificationAdditionalMessage] = None


class InputIdentifier(BaseModel):
    """
    The identifer of the input.
    """

    iotEventsInputIdentifier: Optional[IotEventsInputIdentifier] = None
    iotSiteWiseInputIdentifier: Optional[IotSiteWiseInputIdentifier] = None


class ListInputRoutingsRequest(BaseModel):
    inputIdentifier: InputIdentifier
    maxResults: Optional[MaxResults] = None
    nextToken: Optional[NextToken] = None


class RoutedResources(BaseModel):
    __root__: List[RoutedResource]


class PutLoggingOptionsRequest(BaseModel):
    loggingOptions: LoggingOptions


class SSOIdentity(BaseModel):
    """
    Contains information about your identity source in AWS Single Sign-On. For more information, see the <a href="https://docs.aws.amazon.com/singlesignon/latest/userguide/what-is.html">AWS Single Sign-On User Guide</a>.
    """

    identityStoreId: IdentityStoreId
    userId: Optional[SSOReferenceId] = None


class RecipientDetail(BaseModel):
    """
    The information that identifies the recipient.
    """

    ssoIdentity: Optional[SSOIdentity] = None


class TagResourceRequest(BaseModel):
    tags: Tags


class UpdateInputRequest(BaseModel):
    inputDescription: Optional[InputDescription] = None
    inputDefinition: InputDefinition


class CreateDetectorModelResponse(BaseModel):
    detectorModelConfiguration: Optional[DetectorModelConfiguration] = None


class CreateInputResponse(BaseModel):
    inputConfiguration: Optional[InputConfiguration] = None


class DescribeInputResponse(BaseModel):
    input: Optional[Input] = None


class DescribeLoggingOptionsResponse(BaseModel):
    loggingOptions: Optional[LoggingOptions] = None


class GetDetectorModelAnalysisResultsResponse(BaseModel):
    analysisResults: Optional[AnalysisResults] = None
    nextToken: Optional[NextToken] = None


class ListAlarmModelVersionsResponse(BaseModel):
    alarmModelVersionSummaries: Optional[AlarmModelVersionSummaries] = None
    nextToken: Optional[NextToken] = None


class ListAlarmModelsResponse(BaseModel):
    alarmModelSummaries: Optional[AlarmModelSummaries] = None
    nextToken: Optional[NextToken] = None


class ListInputRoutingsResponse(BaseModel):
    routedResources: Optional[RoutedResources] = None
    nextToken: Optional[NextToken] = None


class ListTagsForResourceResponse(BaseModel):
    tags: Optional[Tags] = None


class UpdateDetectorModelResponse(CreateDetectorModelResponse):
    pass


class UpdateInputResponse(CreateInputResponse):
    pass


class SNSTopicPublishAction(BaseModel):
    """
    Information required to publish the Amazon SNS message.
    """

    targetArn: AmazonResourceName
    payload: Optional[Payload] = None


class IotTopicPublishAction(BaseModel):
    """
    Information required to publish the MQTT message through the AWS IoT message broker.
    """

    mqttTopic: MQTTTopic
    payload: Optional[Payload] = None


class LambdaAction(BaseModel):
    """
    Calls a Lambda function, passing in information about the detector model instance and the event that triggered the action.
    """

    functionArn: AmazonResourceName
    payload: Optional[Payload] = None


class IotEventsAction(BaseModel):
    """
    Sends an AWS IoT Events input, passing in information about the detector model instance and the event that triggered the action.
    """

    inputName: InputName
    payload: Optional[Payload] = None


class SqsAction(BaseModel):
    """
    Sends information about the detector model instance and the event that triggered the action to an Amazon SQS queue.
    """

    queueUrl: QueueUrl
    useBase64: Optional[UseBase64] = None
    payload: Optional[Payload] = None


class FirehoseAction(BaseModel):
    """
    Sends information about the detector model instance and the event that triggered the action to an Amazon Kinesis Data Firehose delivery stream.
    """

    deliveryStreamName: DeliveryStreamName
    separator: Optional[FirehoseSeparator] = None
    payload: Optional[Payload] = None


class DynamoDBAction(BaseModel):
    """
    <p>Defines an action to write to the Amazon DynamoDB table that you created. The standard action payload contains all the information about the detector model instance and the event that triggered the action. You can customize the <a href="https://docs.aws.amazon.com/iotevents/latest/apireference/API_Payload.html">payload</a>. One column of the DynamoDB table receives all attribute-value pairs in the payload that you specify.</p> <p>You must use expressions for all parameters in <code>DynamoDBAction</code>. The expressions accept literals, operators, functions, references, and substitution templates.</p> <p class="title"> <b>Examples</b> </p> <ul> <li> <p>For literal values, the expressions must contain single quotes. For example, the value for the <code>hashKeyType</code> parameter can be <code>'STRING'</code>.</p> </li> <li> <p>For references, you must specify either variables or input values. For example, the value for the <code>hashKeyField</code> parameter can be <code>$input.GreenhouseInput.name</code>.</p> </li> <li> <p>For a substitution template, you must use <code>${}</code>, and the template must be in single quotes. A substitution template can also contain a combination of literals, operators, functions, references, and substitution templates.</p> <p>In the following example, the value for the <code>hashKeyValue</code> parameter uses a substitution template. </p> <p> <code>'${$input.GreenhouseInput.temperature * 6 / 5 + 32} in Fahrenheit'</code> </p> </li> <li> <p>For a string concatenation, you must use <code>+</code>. A string concatenation can also contain a combination of literals, operators, functions, references, and substitution templates.</p> <p>In the following example, the value for the <code>tableName</code> parameter uses a string concatenation. </p> <p> <code>'GreenhouseTemperatureTable ' + $input.GreenhouseInput.date</code> </p> </li> </ul> <p>For more information, see <a href="https://docs.aws.amazon.com/iotevents/latest/developerguide/iotevents-expressions.html">Expressions</a> in the <i>AWS IoT Events Developer Guide</i>.</p> <p>If the defined payload type is a string, <code>DynamoDBAction</code> writes non-JSON data to the DynamoDB table as binary data. The DynamoDB console displays the data as Base64-encoded text. The value for the <code>payloadField</code> parameter is <code>&lt;payload-field&gt;_raw</code>.</p>
    """

    hashKeyType: Optional[DynamoKeyType] = None
    hashKeyField: DynamoKeyField
    hashKeyValue: DynamoKeyValue
    rangeKeyType: Optional[DynamoKeyType] = None
    rangeKeyField: Optional[DynamoKeyField] = None
    rangeKeyValue: Optional[DynamoKeyValue] = None
    operation: Optional[DynamoOperation] = None
    payloadField: Optional[DynamoKeyField] = None
    tableName: DynamoTableName
    payload: Optional[Payload] = None


class DynamoDBv2Action(BaseModel):
    """
    <p>Defines an action to write to the Amazon DynamoDB table that you created. The default action payload contains all the information about the detector model instance and the event that triggered the action. You can customize the <a href="https://docs.aws.amazon.com/iotevents/latest/apireference/API_Payload.html">payload</a>. A separate column of the DynamoDB table receives one attribute-value pair in the payload that you specify.</p> <p>You must use expressions for all parameters in <code>DynamoDBv2Action</code>. The expressions accept literals, operators, functions, references, and substitution templates.</p> <p class="title"> <b>Examples</b> </p> <ul> <li> <p>For literal values, the expressions must contain single quotes. For example, the value for the <code>tableName</code> parameter can be <code>'GreenhouseTemperatureTable'</code>.</p> </li> <li> <p>For references, you must specify either variables or input values. For example, the value for the <code>tableName</code> parameter can be <code>$variable.ddbtableName</code>.</p> </li> <li> <p>For a substitution template, you must use <code>${}</code>, and the template must be in single quotes. A substitution template can also contain a combination of literals, operators, functions, references, and substitution templates.</p> <p>In the following example, the value for the <code>contentExpression</code> parameter in <code>Payload</code> uses a substitution template. </p> <p> <code>'{\"sensorID\": \"${$input.GreenhouseInput.sensor_id}\", \"temperature\": \"${$input.GreenhouseInput.temperature * 9 / 5 + 32}\"}'</code> </p> </li> <li> <p>For a string concatenation, you must use <code>+</code>. A string concatenation can also contain a combination of literals, operators, functions, references, and substitution templates.</p> <p>In the following example, the value for the <code>tableName</code> parameter uses a string concatenation. </p> <p> <code>'GreenhouseTemperatureTable ' + $input.GreenhouseInput.date</code> </p> </li> </ul> <p>For more information, see <a href="https://docs.aws.amazon.com/iotevents/latest/developerguide/iotevents-expressions.html">Expressions</a> in the <i>AWS IoT Events Developer Guide</i>.</p> <p>The value for the <code>type</code> parameter in <code>Payload</code> must be <code>JSON</code>.</p>
    """

    tableName: DynamoTableName
    payload: Optional[Payload] = None


class Action(BaseModel):
    """
    An action to be performed when the <code>condition</code> is TRUE.
    """

    setVariable: Optional[SetVariableAction] = None
    sns: Optional[SNSTopicPublishAction] = None
    iotTopicPublish: Optional[IotTopicPublishAction] = None
    setTimer: Optional[SetTimerAction] = None
    clearTimer: Optional[ClearTimerAction] = None
    resetTimer: Optional[ResetTimerAction] = None
    lambda_: Annotated[Optional[LambdaAction], Field(alias='lambda')] = None
    iotEvents: Optional[IotEventsAction] = None
    sqs: Optional[SqsAction] = None
    firehose: Optional[FirehoseAction] = None
    dynamoDB: Optional[DynamoDBAction] = None
    dynamoDBv2: Optional[DynamoDBv2Action] = None
    iotSiteWise: Optional[IotSiteWiseAction] = None


class Actions(BaseModel):
    __root__: List[Action]


class AlarmAction(BaseModel):
    """
    Specifies one of the following actions to receive notifications when the alarm state changes.
    """

    sns: Optional[SNSTopicPublishAction] = None
    iotTopicPublish: Optional[IotTopicPublishAction] = None
    lambda_: Annotated[Optional[LambdaAction], Field(alias='lambda')] = None
    iotEvents: Optional[IotEventsAction] = None
    sqs: Optional[SqsAction] = None
    firehose: Optional[FirehoseAction] = None
    dynamoDB: Optional[DynamoDBAction] = None
    dynamoDBv2: Optional[DynamoDBv2Action] = None
    iotSiteWise: Optional[IotSiteWiseAction] = None


class RecipientDetails(BaseModel):
    __root__: Annotated[List[RecipientDetail], Field(min_items=1)]


class Event(BaseModel):
    """
    Specifies the <code>actions</code> to be performed when the <code>condition</code> evaluates to TRUE.
    """

    eventName: EventName
    condition: Optional[Condition] = None
    actions: Optional[Actions] = None


class Events(BaseModel):
    __root__: List[Event]


class NotificationTargetActions(BaseModel):
    """
    Specifies an AWS Lambda function to manage alarm notifications. You can create one or use the <a href="https://docs.aws.amazon.com/iotevents/latest/developerguide/lambda-support.html">AWS Lambda function provided by AWS IoT Events</a>.
    """

    lambdaAction: Optional[LambdaAction] = None


class OnEnterLifecycle(BaseModel):
    """
    When entering this state, perform these <code>actions</code> if the <code>condition</code> is TRUE.
    """

    events: Optional[Events] = None


class OnExitLifecycle(OnEnterLifecycle):
    """
    When exiting this state, perform these <code>actions</code> if the specified <code>condition</code> is <code>TRUE</code>.
    """

    pass


class SMSConfiguration(BaseModel):
    """
    Contains the configuration information of SMS notifications.
    """

    senderId: Optional[SMSSenderId] = None
    additionalMessage: Optional[NotificationAdditionalMessage] = None
    recipients: RecipientDetails


class TransitionEvent(BaseModel):
    """
    Specifies the actions performed and the next state entered when a <code>condition</code> evaluates to TRUE.
    """

    eventName: EventName
    condition: Condition
    actions: Optional[Actions] = None
    nextState: StateName


class AlarmActions(BaseModel):
    __root__: List[AlarmAction]


class AlarmEventActions(BaseModel):
    """
    Contains information about one or more alarm actions.
    """

    alarmActions: Optional[AlarmActions] = None


class EmailRecipients(BaseModel):
    """
    <p>Contains the information of one or more recipients who receive the emails.</p> <important> <p>You must <a href="https://docs.aws.amazon.com/singlesignon/latest/userguide/addusers.html">add the users that receive emails to your AWS SSO store</a>.</p> </important>
    """

    to: Optional[RecipientDetails] = None


class EmailConfiguration(BaseModel):
    """
    Contains the configuration information of email notifications.
    """

    from_: Annotated[FromEmail, Field(alias='from')]
    content: Optional[EmailContent] = None
    recipients: EmailRecipients


class EmailConfigurations(BaseModel):
    __root__: Annotated[List[EmailConfiguration], Field(min_items=1)]


class SMSConfigurations(BaseModel):
    __root__: Annotated[List[SMSConfiguration], Field(min_items=1)]


class NotificationAction(BaseModel):
    """
    Contains the notification settings of an alarm model. The settings apply to all alarms that were created based on this alarm model.
    """

    action: NotificationTargetActions
    smsConfigurations: Optional[SMSConfigurations] = None
    emailConfigurations: Optional[EmailConfigurations] = None


class TransitionEvents(BaseModel):
    __root__: List[TransitionEvent]


class OnInputLifecycle(BaseModel):
    """
    Specifies the actions performed when the <code>condition</code> evaluates to TRUE.
    """

    events: Optional[Events] = None
    transitionEvents: Optional[TransitionEvents] = None


class State(BaseModel):
    """
    Information that defines a state of a detector.
    """

    stateName: StateName
    onInput: Optional[OnInputLifecycle] = None
    onEnter: Optional[OnEnterLifecycle] = None
    onExit: Optional[OnExitLifecycle] = None


class NotificationActions(BaseModel):
    __root__: Annotated[List[NotificationAction], Field(min_items=1)]


class States(BaseModel):
    __root__: Annotated[List[State], Field(min_items=1)]


class AlarmNotification(BaseModel):
    """
    Contains information about one or more notification actions.
    """

    notificationActions: Optional[NotificationActions] = None


class CreateAlarmModelRequest(BaseModel):
    alarmModelName: AlarmModelName
    alarmModelDescription: Optional[AlarmModelDescription] = None
    roleArn: AmazonResourceName
    tags: Optional[Tags] = None
    key: Optional[AttributeJsonPath] = None
    severity: Optional[Severity] = None
    alarmRule: AlarmRule
    alarmNotification: Optional[AlarmNotification] = None
    alarmEventActions: Optional[AlarmEventActions] = None
    alarmCapabilities: Optional[AlarmCapabilities] = None


class DetectorModelDefinition(BaseModel):
    """
    Information that defines how a detector operates.
    """

    states: States
    initialStateName: StateName


class CreateDetectorModelRequest(BaseModel):
    detectorModelName: DetectorModelName
    detectorModelDefinition: DetectorModelDefinition
    detectorModelDescription: Optional[DetectorModelDescription] = None
    key: Optional[AttributeJsonPath] = None
    roleArn: AmazonResourceName
    tags: Optional[Tags] = None
    evaluationMethod: Optional[EvaluationMethod] = None


class DetectorModel(BaseModel):
    """
    Information about the detector model.
    """

    detectorModelDefinition: Optional[DetectorModelDefinition] = None
    detectorModelConfiguration: Optional[DetectorModelConfiguration] = None


class StartDetectorModelAnalysisRequest(BaseModel):
    detectorModelDefinition: DetectorModelDefinition


class UpdateAlarmModelRequest(BaseModel):
    alarmModelDescription: Optional[AlarmModelDescription] = None
    roleArn: AmazonResourceName
    severity: Optional[Severity] = None
    alarmRule: AlarmRule
    alarmNotification: Optional[AlarmNotification] = None
    alarmEventActions: Optional[AlarmEventActions] = None
    alarmCapabilities: Optional[AlarmCapabilities] = None


class UpdateDetectorModelRequest(BaseModel):
    detectorModelDefinition: DetectorModelDefinition
    detectorModelDescription: Optional[DetectorModelDescription] = None
    roleArn: AmazonResourceName
    evaluationMethod: Optional[EvaluationMethod] = None


class DescribeAlarmModelResponse(BaseModel):
    creationTime: Optional[Timestamp] = None
    alarmModelArn: Optional[AlarmModelArn] = None
    alarmModelVersion: Optional[AlarmModelVersion] = None
    lastUpdateTime: Optional[Timestamp] = None
    status: Optional[AlarmModelVersionStatus] = None
    statusMessage: Optional[StatusMessage] = None
    alarmModelName: Optional[AlarmModelName] = None
    alarmModelDescription: Optional[AlarmModelDescription] = None
    roleArn: Optional[AmazonResourceName] = None
    key: Optional[AttributeJsonPath] = None
    severity: Optional[Severity] = None
    alarmRule: Optional[AlarmRule] = None
    alarmNotification: Optional[AlarmNotification] = None
    alarmEventActions: Optional[AlarmEventActions] = None
    alarmCapabilities: Optional[AlarmCapabilities] = None


class DescribeDetectorModelResponse(BaseModel):
    detectorModel: Optional[DetectorModel] = None
