# generated by datamodel-codegen:
#   filename:  openapi.yaml
#   timestamp: 2021-12-31T02:57:17+00:00

from __future__ import annotations

from enum import Enum
from typing import Annotated, Any, List, Optional

from pydantic import BaseModel, Extra, Field, SecretStr


class NotFoundException(BaseModel):
    __root__: Any


class BadRequestException(NotFoundException):
    pass


class LimitExceededException(NotFoundException):
    pass


class InternalFailureException(NotFoundException):
    pass


class ConflictException(NotFoundException):
    pass


class UnsupportedMediaTypeException(NotFoundException):
    pass


class NotAcceptableException(NotFoundException):
    pass


class RequestTimeoutException(NotFoundException):
    pass


class DependencyFailedException(NotFoundException):
    pass


class BadGatewayException(NotFoundException):
    pass


class LoopDetectedException(NotFoundException):
    pass


class String(BaseModel):
    __root__: str


class DialogActionType(Enum):
    ElicitIntent = 'ElicitIntent'
    ConfirmIntent = 'ConfirmIntent'
    ElicitSlot = 'ElicitSlot'
    Close = 'Close'
    Delegate = 'Delegate'


class IntentName(String):
    pass


class StringMap(BaseModel):
    pass

    class Config:
        extra = Extra.allow


class FulfillmentState(Enum):
    Fulfilled = 'Fulfilled'
    Failed = 'Failed'
    ReadyForFulfillment = 'ReadyForFulfillment'


class Text(BaseModel):
    __root__: Annotated[SecretStr, Field(max_length=1024, min_length=1)]


class MessageFormatType(Enum):
    PlainText = 'PlainText'
    CustomPayload = 'CustomPayload'
    SSML = 'SSML'
    Composite = 'Composite'


class Accept(String):
    pass


class ActiveContextName(BaseModel):
    __root__: Annotated[
        str, Field(max_length=100, min_length=1, regex='^([A-Za-z]_?)+$')
    ]


class ActiveContextParametersMap(BaseModel):
    pass

    class Config:
        extra = Extra.allow


class ActiveContextTimeToLiveInSeconds(BaseModel):
    __root__: Annotated[int, Field(ge=5.0, le=86400.0)]


class ActiveContextTurnsToLive(BaseModel):
    __root__: Annotated[int, Field(ge=1.0, le=20.0)]


class ActiveContextsString(BaseModel):
    __root__: SecretStr


class AttributesString(ActiveContextsString):
    pass


class BlobStream(String):
    pass


class BotAlias(String):
    pass


class BotName(String):
    pass


class BotVersion(BaseModel):
    __root__: Annotated[
        str, Field(max_length=64, min_length=1, regex='[0-9]+|\\$LATEST')
    ]


class ButtonTextStringWithLength(BaseModel):
    __root__: Annotated[str, Field(max_length=15, min_length=1)]


class ButtonValueStringWithLength(BaseModel):
    __root__: Annotated[str, Field(max_length=1000, min_length=1)]


class Button(BaseModel):
    """
    Represents an option to be shown on the client platform (Facebook, Slack, etc.)
    """

    text: ButtonTextStringWithLength
    value: ButtonValueStringWithLength


class ConfirmationStatus(Enum):
    None_ = 'None'
    Confirmed = 'Confirmed'
    Denied = 'Denied'


class ContentType(Enum):
    application_vnd_amazonaws_card_generic = 'application/vnd.amazonaws.card.generic'


class UserId(BaseModel):
    __root__: Annotated[
        str, Field(max_length=100, min_length=2, regex='[0-9a-zA-Z._:-]+')
    ]


class DeleteSessionRequest(BaseModel):
    pass


class DialogAction(BaseModel):
    """
    Describes the next action that the bot should take in its interaction with the user and provides information about the context in which the action takes place. Use the <code>DialogAction</code> data type to set the interaction to a specific state, or to return the interaction to a previous state.
    """

    type: DialogActionType
    intentName: Optional[IntentName] = None
    slots: Optional[StringMap] = None
    slotToElicit: Optional[String] = None
    fulfillmentState: Optional[FulfillmentState] = None
    message: Optional[Text] = None
    messageFormat: Optional[MessageFormatType] = None


class DialogState(Enum):
    ElicitIntent = 'ElicitIntent'
    ConfirmIntent = 'ConfirmIntent'
    ElicitSlot = 'ElicitSlot'
    Fulfilled = 'Fulfilled'
    ReadyForFulfillment = 'ReadyForFulfillment'
    Failed = 'Failed'


class Double(BaseModel):
    __root__: float


class StringWithLength(BaseModel):
    __root__: Annotated[str, Field(max_length=80, min_length=1)]


class StringUrlWithLength(BaseModel):
    __root__: Annotated[str, Field(max_length=2048, min_length=1)]


class ListOfButtons(BaseModel):
    __root__: Annotated[List[Button], Field(max_items=5, min_items=0)]


class GenericAttachment(BaseModel):
    """
    Represents an option rendered to the user when a prompt is shown. It could be an image, a button, a link, or text.
    """

    title: Optional[StringWithLength] = None
    subTitle: Optional[StringWithLength] = None
    attachmentLinkUrl: Optional[StringUrlWithLength] = None
    imageUrl: Optional[StringUrlWithLength] = None
    buttons: Optional[ListOfButtons] = None


class IntentSummaryCheckpointLabel(BaseModel):
    __root__: Annotated[str, Field(max_length=255, min_length=1, regex='[a-zA-Z0-9-]+')]


class GetSessionRequest(BaseModel):
    pass


class HttpContentType(String):
    pass


class IntentConfidence(BaseModel):
    """
    Provides a score that indicates the confidence that Amazon Lex has that an intent is the one that satisfies the user's intent.
    """

    score: Optional[Double] = None


class PredictedIntent(BaseModel):
    """
    An intent that Amazon Lex suggests satisfies the user's intent. Includes the name of the intent, the confidence that Amazon Lex has that the user's intent is satisfied, and the slots defined for the intent.
    """

    intentName: Optional[IntentName] = None
    nluIntentConfidence: Optional[IntentConfidence] = None
    slots: Optional[StringMap] = None


class IntentList(BaseModel):
    __root__: Annotated[List[PredictedIntent], Field(max_items=4)]


class ParameterName(BaseModel):
    __root__: Annotated[str, Field(max_length=100, min_length=1)]


class PostContentRequest(BaseModel):
    inputStream: BlobStream


class SensitiveString(BaseModel):
    __root__: Annotated[SecretStr, Field(max_length=1366, min_length=1)]


class SensitiveStringUnbounded(ActiveContextsString):
    pass


class GenericAttachmentList(BaseModel):
    __root__: Annotated[List[GenericAttachment], Field(max_items=10, min_items=0)]


class SentimentLabel(String):
    pass


class SentimentScore(String):
    pass


class DeleteSessionResponse(BaseModel):
    botName: Optional[BotName] = None
    botAlias: Optional[BotAlias] = None
    userId: Optional[UserId] = None
    sessionId: Optional[String] = None


class PostContentResponse(BaseModel):
    audioStream: Optional[BlobStream] = None


class PutSessionResponse(PostContentResponse):
    pass


class IntentSummary(BaseModel):
    """
    Provides information about the state of an intent. You can use this information to get the current state of an intent so that you can process the intent, or so that you can return the intent to its previous state.
    """

    intentName: Optional[IntentName] = None
    checkpointLabel: Optional[IntentSummaryCheckpointLabel] = None
    slots: Optional[StringMap] = None
    confirmationStatus: Optional[ConfirmationStatus] = None
    dialogActionType: DialogActionType
    fulfillmentState: Optional[FulfillmentState] = None
    slotToElicit: Optional[String] = None


class ActiveContextTimeToLive(BaseModel):
    """
    The length of time or number of turns that a context remains active.
    """

    timeToLiveInSeconds: Optional[ActiveContextTimeToLiveInSeconds] = None
    turnsToLive: Optional[ActiveContextTurnsToLive] = None


class IntentSummaryList(BaseModel):
    __root__: Annotated[List[IntentSummary], Field(max_items=3, min_items=0)]


class SentimentResponse(BaseModel):
    """
    <p>The sentiment expressed in an utterance.</p> <p>When the bot is configured to send utterances to Amazon Comprehend for sentiment analysis, this field structure contains the result of the analysis.</p>
    """

    sentimentLabel: Optional[SentimentLabel] = None
    sentimentScore: Optional[SentimentScore] = None


class ResponseCard(BaseModel):
    """
    If you configure a response card when creating your bots, Amazon Lex substitutes the session attributes and slot values that are available, and then returns it. The response card can also come from a Lambda function ( <code>dialogCodeHook</code> and <code>fulfillmentActivity</code> on an intent).
    """

    version: Optional[String] = None
    contentType: Optional[ContentType] = None
    genericAttachments: Optional[GenericAttachmentList] = None


class ActiveContext(BaseModel):
    """
    A context is a variable that contains information about the current state of the conversation between a user and Amazon Lex. Context can be set automatically by Amazon Lex when an intent is fulfilled, or it can be set at runtime using the <code>PutContent</code>, <code>PutText</code>, or <code>PutSession</code> operation.
    """

    name: ActiveContextName
    timeToLive: ActiveContextTimeToLive
    parameters: ActiveContextParametersMap


class ActiveContextsList(BaseModel):
    __root__: Annotated[List[ActiveContext], Field(max_items=20, min_items=0)]


class PostTextRequest(BaseModel):
    sessionAttributes: Optional[StringMap] = None
    requestAttributes: Optional[StringMap] = None
    inputText: Text
    activeContexts: Optional[ActiveContextsList] = None


class PutSessionRequest(BaseModel):
    sessionAttributes: Optional[StringMap] = None
    dialogAction: Optional[DialogAction] = None
    recentIntentSummaryView: Optional[IntentSummaryList] = None
    activeContexts: Optional[ActiveContextsList] = None


class GetSessionResponse(BaseModel):
    recentIntentSummaryView: Optional[IntentSummaryList] = None
    sessionAttributes: Optional[StringMap] = None
    sessionId: Optional[String] = None
    dialogAction: Optional[DialogAction] = None
    activeContexts: Optional[ActiveContextsList] = None


class PostTextResponse(BaseModel):
    intentName: Optional[IntentName] = None
    nluIntentConfidence: Optional[IntentConfidence] = None
    alternativeIntents: Optional[IntentList] = None
    slots: Optional[StringMap] = None
    sessionAttributes: Optional[StringMap] = None
    message: Optional[Text] = None
    sentimentResponse: Optional[SentimentResponse] = None
    messageFormat: Optional[MessageFormatType] = None
    dialogState: Optional[DialogState] = None
    slotToElicit: Optional[String] = None
    responseCard: Optional[ResponseCard] = None
    sessionId: Optional[String] = None
    botVersion: Optional[BotVersion] = None
    activeContexts: Optional[ActiveContextsList] = None
