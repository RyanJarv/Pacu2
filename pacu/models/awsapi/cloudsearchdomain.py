# generated by datamodel-codegen:
#   filename:  openapi.yaml
#   timestamp: 2021-12-31T02:46:14+00:00

from __future__ import annotations

from enum import Enum
from typing import Annotated, List, Optional

from pydantic import BaseModel, Extra


class Adds(BaseModel):
    __root__: int


class Blob(BaseModel):
    __root__: str


class String(Blob):
    pass


class Long(Adds):
    pass


class Bucket(BaseModel):
    """
    A container for facet information.
    """

    value: Optional[String] = None
    count: Optional[Long] = None


class BucketList(BaseModel):
    __root__: List[Bucket]


class BucketInfo(BaseModel):
    """
    A container for the calculated facet values and counts.
    """

    buckets: Optional[BucketList] = None


class ContentType(Enum):
    application_json = 'application/json'
    application_xml = 'application/xml'


class Cursor(Blob):
    pass


class Deletes(Adds):
    pass


class DocumentServiceWarning(BaseModel):
    """
    A warning returned by the document service when an issue is discovered while processing an upload request.
    """

    message: Optional[String] = None


class DocumentServiceWarnings(BaseModel):
    __root__: List[DocumentServiceWarning]


class Double(BaseModel):
    __root__: float


class Expr(Blob):
    pass


class Exprs(BaseModel):
    pass

    class Config:
        extra = Extra.allow


class Facet(Blob):
    pass


class Facets(BaseModel):
    pass

    class Config:
        extra = Extra.allow


class FieldStats(BaseModel):
    """
    The statistics for a field calculated in the request.
    """

    min: Optional[String] = None
    max: Optional[String] = None
    count: Optional[Long] = None
    missing: Optional[Long] = None
    sum: Optional[Double] = None
    sumOfSquares: Optional[Double] = None
    mean: Optional[String] = None
    stddev: Optional[Double] = None


class FieldValue(BaseModel):
    __root__: List[String]


class Fields(BaseModel):
    pass

    class Config:
        extra = Extra.allow


class FilterQuery(Blob):
    pass


class Highlight(Blob):
    pass


class Highlights(Exprs):
    pass


class Hit(BaseModel):
    """
    Information about a document that matches the search request.
    """

    id: Optional[String] = None
    fields: Optional[Fields] = None
    exprs: Optional[Exprs] = None
    highlights: Optional[Highlights] = None


class HitList(BaseModel):
    __root__: List[Hit]


class Hits(BaseModel):
    """
    The collection of documents that match the search request.
    """

    found: Optional[Long] = None
    start: Optional[Long] = None
    cursor: Optional[String] = None
    hit: Optional[HitList] = None


class Partial(BaseModel):
    __root__: bool


class Query(Blob):
    pass


class QueryOptions(Blob):
    pass


class QueryParser(Enum):
    simple = 'simple'
    structured = 'structured'
    lucene = 'lucene'
    dismax = 'dismax'


class Return(Blob):
    pass


class Size(Adds):
    pass


class Sort(Blob):
    pass


class Start1(Adds):
    pass


class Stat(Blob):
    pass


class SearchRequest(BaseModel):
    """
    Container for the parameters to the <code>Search</code> request.
    """

    pass


class SearchStatus(BaseModel):
    """
    Contains the resource id (<code>rid</code>) and the time it took to process the request (<code>timems</code>).
    """

    timems: Optional[Long] = None
    rid: Optional[String] = None


class Stats(BaseModel):
    """
    The statistics calculated in the request.
    """

    pass

    class Config:
        extra = Extra.allow


class Suggester(Blob):
    pass


class SuggestionsSize(Adds):
    pass


class SuggestRequest(BaseModel):
    """
    Container for the parameters to the <code>Suggest</code> request.
    """

    pass


class SuggestStatus(SearchStatus):
    """
    Contains the resource id (<code>rid</code>) and the time it took to process the request (<code>timems</code>).
    """

    pass


class SuggestionMatch(BaseModel):
    """
    An autocomplete suggestion that matches the query string specified in a <code>SuggestRequest</code>.
    """

    suggestion: Optional[String] = None
    score: Optional[Long] = None
    id: Optional[String] = None


class UploadDocumentsRequest(BaseModel):
    """
    Container for the parameters to the <code>UploadDocuments</code> request.
    """

    documents: Blob


class SearchResponse(BaseModel):
    """
    The result of a <code>Search</code> request. Contains the documents that match the specified search criteria and any requested fields, highlights, and facet information.
    """

    status: Optional[SearchStatus] = None
    hits: Optional[Hits] = None
    facets: Optional[Facets] = None
    stats: Optional[Stats] = None


class SearchException(DocumentServiceWarning):
    """
    Information about any problems encountered while processing a search request.
    """

    pass


class UploadDocumentsResponse(BaseModel):
    """
    Contains the response to an <code>UploadDocuments</code> request.
    """

    status: Optional[String] = None
    adds: Optional[Adds] = None
    deletes: Optional[Deletes] = None
    warnings: Optional[DocumentServiceWarnings] = None


class DocumentServiceException(BaseModel):
    """
    Information about any problems encountered while processing an upload request.
    """

    status: Optional[String] = None
    message: Optional[String] = None


class Suggestions(BaseModel):
    __root__: List[SuggestionMatch]


class SuggestModel(BaseModel):
    """
    Container for the suggestion information returned in a <code>SuggestResponse</code>.
    """

    query: Optional[String] = None
    found: Optional[Long] = None
    suggestions: Optional[Suggestions] = None


class SuggestResponse(BaseModel):
    """
    Contains the response to a <code>Suggest</code> request.
    """

    status: Optional[SuggestStatus] = None
    suggest: Optional[SuggestModel] = None
