# generated by datamodel-codegen:
#   filename:  openapi.yaml
#   timestamp: 2021-12-31T02:48:37+00:00

from __future__ import annotations

from datetime import datetime
from enum import Enum
from typing import Annotated, Any, List, Optional

from pydantic import BaseModel, Extra, Field


class RepositoryNotFoundException(BaseModel):
    __root__: Any


class InvalidParameterException(RepositoryNotFoundException):
    pass


class ServerException(RepositoryNotFoundException):
    pass


class UploadNotFoundException(RepositoryNotFoundException):
    pass


class InvalidLayerException(RepositoryNotFoundException):
    pass


class LayerPartTooSmallException(RepositoryNotFoundException):
    pass


class LayerAlreadyExistsException(RepositoryNotFoundException):
    pass


class EmptyUploadException(RepositoryNotFoundException):
    pass


class KmsException(RepositoryNotFoundException):
    pass


class InvalidTagParameterException(RepositoryNotFoundException):
    pass


class TooManyTagsException(RepositoryNotFoundException):
    pass


class RepositoryAlreadyExistsException(RepositoryNotFoundException):
    pass


class LimitExceededException(RepositoryNotFoundException):
    pass


class LifecyclePolicyNotFoundException(RepositoryNotFoundException):
    pass


class DeleteRegistryPolicyRequest(BaseModel):
    pass


class RegistryPolicyNotFoundException(RepositoryNotFoundException):
    pass


class RepositoryNotEmptyException(RepositoryNotFoundException):
    pass


class RepositoryPolicyNotFoundException(RepositoryNotFoundException):
    pass


class ImageNotFoundException(RepositoryNotFoundException):
    pass


class ScanNotFoundException(RepositoryNotFoundException):
    pass


class DescribeRegistryRequest(BaseModel):
    pass


class ValidationException(RepositoryNotFoundException):
    pass


class LayersNotFoundException(RepositoryNotFoundException):
    pass


class LayerInaccessibleException(RepositoryNotFoundException):
    pass


class LifecyclePolicyPreviewNotFoundException(RepositoryNotFoundException):
    pass


class GetRegistryPolicyRequest(BaseModel):
    pass


class ImageAlreadyExistsException(RepositoryNotFoundException):
    pass


class ReferencedImagesNotFoundException(RepositoryNotFoundException):
    pass


class ImageTagAlreadyExistsException(RepositoryNotFoundException):
    pass


class ImageDigestDoesNotMatchException(RepositoryNotFoundException):
    pass


class UnsupportedImageTypeException(RepositoryNotFoundException):
    pass


class LifecyclePolicyPreviewInProgressException(RepositoryNotFoundException):
    pass


class TagResourceResponse(BaseModel):
    pass


class UntagResourceResponse(TagResourceResponse):
    pass


class InvalidLayerPartException(RepositoryNotFoundException):
    pass


class Arn(BaseModel):
    __root__: str


class AttributeKey(BaseModel):
    __root__: Annotated[str, Field(max_length=128, min_length=1)]


class AttributeValue(BaseModel):
    __root__: Annotated[str, Field(max_length=256, min_length=1)]


class Attribute(BaseModel):
    """
    This data type is used in the <a>ImageScanFinding</a> data type.
    """

    key: AttributeKey
    value: Optional[AttributeValue] = None


class AttributeList(BaseModel):
    __root__: Annotated[List[Attribute], Field(max_items=50, min_items=0)]


class Base64(BaseModel):
    __root__: Annotated[str, Field(regex='^\\S+$')]


class ExpirationTimestamp(BaseModel):
    __root__: datetime


class ProxyEndpoint(Arn):
    pass


class AuthorizationData1(BaseModel):
    """
    An object representing authorization data for an Amazon ECR registry.
    """

    authorizationToken: Optional[Base64] = None
    expiresAt: Optional[ExpirationTimestamp] = None
    proxyEndpoint: Optional[ProxyEndpoint] = None


class AuthorizationDataList(BaseModel):
    __root__: List[AuthorizationData1]


class RegistryId(BaseModel):
    __root__: Annotated[str, Field(regex='[0-9]{12}')]


class RepositoryName(BaseModel):
    __root__: Annotated[
        str,
        Field(
            max_length=256,
            min_length=2,
            regex='(?:[a-z0-9]+(?:[._-][a-z0-9]+)*/)*[a-z0-9]+(?:[._-][a-z0-9]+)*',
        ),
    ]


class BatchedOperationLayerDigest(BaseModel):
    __root__: Annotated[str, Field(max_length=1000, min_length=0)]


class UploadId(BaseModel):
    __root__: Annotated[
        str,
        Field(
            regex='[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}'
        ),
    ]


class LayerDigest(BaseModel):
    __root__: Annotated[str, Field(regex='[a-zA-Z0-9-_+.]+:[a-fA-F0-9]+')]


class ImageTagMutability(Enum):
    MUTABLE = 'MUTABLE'
    IMMUTABLE = 'IMMUTABLE'


class CreationTimestamp(ExpirationTimestamp):
    pass


class LifecyclePolicyText(BaseModel):
    __root__: Annotated[str, Field(max_length=30720, min_length=100)]


class EvaluationTimestamp(ExpirationTimestamp):
    pass


class RegistryPolicyText(BaseModel):
    __root__: Annotated[str, Field(max_length=10240, min_length=0)]


class RepositoryPolicyText(RegistryPolicyText):
    pass


class ForceFlag(BaseModel):
    __root__: bool


class NextToken(Arn):
    pass


class MaxResults(BaseModel):
    __root__: Annotated[int, Field(ge=1.0, le=1000.0)]


class TagStatus(Enum):
    TAGGED = 'TAGGED'
    UNTAGGED = 'UNTAGGED'
    ANY = 'ANY'


class DescribeImagesFilter(BaseModel):
    """
    An object representing a filter on a <a>DescribeImages</a> operation.
    """

    tagStatus: Optional[TagStatus] = None


class RepositoryNameList(BaseModel):
    __root__: Annotated[List[RepositoryName], Field(max_items=100, min_items=1)]


class EncryptionType(Enum):
    AES256 = 'AES256'
    KMS = 'KMS'


class KmsKey(BaseModel):
    __root__: Annotated[str, Field(max_length=2048, min_length=1)]


class FindingDescription(Arn):
    pass


class FindingName(Arn):
    pass


class FindingSeverity(Enum):
    INFORMATIONAL = 'INFORMATIONAL'
    LOW = 'LOW'
    MEDIUM = 'MEDIUM'
    HIGH = 'HIGH'
    CRITICAL = 'CRITICAL'
    UNDEFINED = 'UNDEFINED'


class SeverityCount(BaseModel):
    __root__: Annotated[int, Field(ge=0.0)]


class FindingSeverityCounts(BaseModel):
    pass

    class Config:
        extra = Extra.allow


class GetAuthorizationTokenRegistryIdList(BaseModel):
    __root__: Annotated[List[RegistryId], Field(max_items=10, min_items=1)]


class Url(Arn):
    pass


class LifecyclePreviewMaxResults(BaseModel):
    __root__: Annotated[int, Field(ge=1.0, le=100.0)]


class LifecyclePolicyPreviewFilter(DescribeImagesFilter):
    """
    The filter for the lifecycle policy preview.
    """

    pass


class LifecyclePolicyPreviewStatus(Enum):
    IN_PROGRESS = 'IN_PROGRESS'
    COMPLETE = 'COMPLETE'
    EXPIRED = 'EXPIRED'
    FAILED = 'FAILED'


class ImageManifest(BaseModel):
    __root__: Annotated[str, Field(max_length=4194304, min_length=1)]


class MediaType(Arn):
    pass


class ImageActionType(Enum):
    EXPIRE = 'EXPIRE'


class ImageCount(SeverityCount):
    pass


class ImageDigest(Arn):
    pass


class ImageSizeInBytes(BaseModel):
    __root__: int


class PushTimestamp(ExpirationTimestamp):
    pass


class ImageFailureCode(Enum):
    InvalidImageDigest = 'InvalidImageDigest'
    InvalidImageTag = 'InvalidImageTag'
    ImageTagDoesNotMatchDigest = 'ImageTagDoesNotMatchDigest'
    ImageNotFound = 'ImageNotFound'
    MissingDigestAndTag = 'MissingDigestAndTag'
    ImageReferencedByManifestList = 'ImageReferencedByManifestList'
    KmsError = 'KmsError'


class ImageFailureReason(Arn):
    pass


class ImageTag(BaseModel):
    __root__: Annotated[str, Field(max_length=300, min_length=1)]


class ImageScanFinding(BaseModel):
    """
    Contains information about an image scan finding.
    """

    name: Optional[FindingName] = None
    description: Optional[FindingDescription] = None
    uri: Optional[Url] = None
    severity: Optional[FindingSeverity] = None
    attributes: Optional[AttributeList] = None


class ImageScanFindingList(BaseModel):
    __root__: List[ImageScanFinding]


class ScanTimestamp(ExpirationTimestamp):
    pass


class VulnerabilitySourceUpdateTimestamp(ExpirationTimestamp):
    pass


class ScanStatus(Enum):
    IN_PROGRESS = 'IN_PROGRESS'
    COMPLETE = 'COMPLETE'
    FAILED = 'FAILED'


class ScanStatusDescription(Arn):
    pass


class ScanOnPushFlag(ForceFlag):
    pass


class PartSize(SeverityCount):
    pass


class LayerAvailability(Enum):
    AVAILABLE = 'AVAILABLE'
    UNAVAILABLE = 'UNAVAILABLE'


class LayerSizeInBytes(ImageSizeInBytes):
    pass


class Layer(BaseModel):
    """
    An object representing an Amazon ECR image layer.
    """

    layerDigest: Optional[LayerDigest] = None
    layerAvailability: Optional[LayerAvailability] = None
    layerSize: Optional[LayerSizeInBytes] = None
    mediaType: Optional[MediaType] = None


class LayerFailureCode(Enum):
    InvalidLayerDigest = 'InvalidLayerDigest'
    MissingLayerDigest = 'MissingLayerDigest'


class LayerFailureReason(Arn):
    pass


class LayerFailure(BaseModel):
    """
    An object representing an Amazon ECR image layer failure.
    """

    layerDigest: Optional[BatchedOperationLayerDigest] = None
    failureCode: Optional[LayerFailureCode] = None
    failureReason: Optional[LayerFailureReason] = None


class LayerPartBlob(BaseModel):
    __root__: Annotated[str, Field(max_length=20971520, min_length=0)]


class LifecyclePolicyRuleAction(BaseModel):
    """
    The type of action to be taken.
    """

    type: Optional[ImageActionType] = None


class LifecyclePolicyRulePriority(BaseModel):
    __root__: Annotated[int, Field(ge=1.0)]


class ListImagesFilter(DescribeImagesFilter):
    """
    An object representing a filter on a <a>ListImages</a> operation.
    """

    pass


class Region(BaseModel):
    __root__: Annotated[
        str, Field(max_length=25, min_length=2, regex='[0-9a-z-]{2,25}')
    ]


class ReplicationDestination(BaseModel):
    """
    An array of objects representing the details of a replication destination.
    """

    region: Region
    registryId: RegistryId


class ReplicationDestinationList(BaseModel):
    __root__: Annotated[List[ReplicationDestination], Field(max_items=25, min_items=0)]


class ReplicationRule(BaseModel):
    """
    An array of objects representing the replication destinations for a replication configuration. A replication configuration may contain only one replication rule but the rule may contain one or more replication destinations.
    """

    destinations: ReplicationDestinationList


class TagKey(Arn):
    pass


class TagValue(Arn):
    pass


class Tag(BaseModel):
    """
    The metadata that you apply to a resource to help you categorize and organize them. Each tag consists of a key and an optional value, both of which you define. Tag keys can have a maximum character length of 128 characters, and tag values can have a maximum length of 256 characters.
    """

    Key: Optional[TagKey] = None
    Value: Optional[TagValue] = None


class TagKeyList(BaseModel):
    __root__: List[TagKey]


class CompleteLayerUploadResponse(BaseModel):
    registryId: Optional[RegistryId] = None
    repositoryName: Optional[RepositoryName] = None
    uploadId: Optional[UploadId] = None
    layerDigest: Optional[LayerDigest] = None


class DeleteLifecyclePolicyResponse(BaseModel):
    registryId: Optional[RegistryId] = None
    repositoryName: Optional[RepositoryName] = None
    lifecyclePolicyText: Optional[LifecyclePolicyText] = None
    lastEvaluatedAt: Optional[EvaluationTimestamp] = None


class DeleteLifecyclePolicyRequest(BaseModel):
    registryId: Optional[RegistryId] = None
    repositoryName: RepositoryName


class DeleteRegistryPolicyResponse(BaseModel):
    registryId: Optional[RegistryId] = None
    policyText: Optional[RegistryPolicyText] = None


class DeleteRepositoryRequest(BaseModel):
    registryId: Optional[RegistryId] = None
    repositoryName: RepositoryName
    force: Optional[ForceFlag] = None


class DeleteRepositoryPolicyResponse(BaseModel):
    registryId: Optional[RegistryId] = None
    repositoryName: Optional[RepositoryName] = None
    policyText: Optional[RepositoryPolicyText] = None


class DeleteRepositoryPolicyRequest(BaseModel):
    registryId: Optional[RegistryId] = None
    repositoryName: RepositoryName


class DescribeRepositoriesRequest(BaseModel):
    registryId: Optional[RegistryId] = None
    repositoryNames: Optional[RepositoryNameList] = None
    nextToken: Optional[NextToken] = None
    maxResults: Optional[MaxResults] = None


class GetAuthorizationTokenResponse(BaseModel):
    authorizationData: Optional[AuthorizationDataList] = None


class GetAuthorizationTokenRequest(BaseModel):
    registryIds: Optional[GetAuthorizationTokenRegistryIdList] = None


class GetDownloadUrlForLayerResponse(BaseModel):
    downloadUrl: Optional[Url] = None
    layerDigest: Optional[LayerDigest] = None


class GetDownloadUrlForLayerRequest(BaseModel):
    registryId: Optional[RegistryId] = None
    repositoryName: RepositoryName
    layerDigest: LayerDigest


class GetLifecyclePolicyResponse(DeleteLifecyclePolicyResponse):
    pass


class GetLifecyclePolicyRequest(BaseModel):
    registryId: Optional[RegistryId] = None
    repositoryName: RepositoryName


class GetRegistryPolicyResponse(DeleteRegistryPolicyResponse):
    pass


class GetRepositoryPolicyResponse(DeleteRepositoryPolicyResponse):
    pass


class GetRepositoryPolicyRequest(BaseModel):
    registryId: Optional[RegistryId] = None
    repositoryName: RepositoryName


class InitiateLayerUploadResponse(BaseModel):
    uploadId: Optional[UploadId] = None
    partSize: Optional[PartSize] = None


class InitiateLayerUploadRequest(BaseModel):
    registryId: Optional[RegistryId] = None
    repositoryName: RepositoryName


class ListImagesRequest(BaseModel):
    registryId: Optional[RegistryId] = None
    repositoryName: RepositoryName
    nextToken: Optional[NextToken] = None
    maxResults: Optional[MaxResults] = None
    filter: Optional[ListImagesFilter] = None


class ListTagsForResourceRequest(BaseModel):
    resourceArn: Arn


class PutImageRequest(BaseModel):
    registryId: Optional[RegistryId] = None
    repositoryName: RepositoryName
    imageManifest: ImageManifest
    imageManifestMediaType: Optional[MediaType] = None
    imageTag: Optional[ImageTag] = None
    imageDigest: Optional[ImageDigest] = None


class PutImageTagMutabilityResponse(BaseModel):
    registryId: Optional[RegistryId] = None
    repositoryName: Optional[RepositoryName] = None
    imageTagMutability: Optional[ImageTagMutability] = None


class PutImageTagMutabilityRequest(BaseModel):
    registryId: Optional[RegistryId] = None
    repositoryName: RepositoryName
    imageTagMutability: ImageTagMutability


class PutLifecyclePolicyResponse(BaseModel):
    registryId: Optional[RegistryId] = None
    repositoryName: Optional[RepositoryName] = None
    lifecyclePolicyText: Optional[LifecyclePolicyText] = None


class PutLifecyclePolicyRequest(BaseModel):
    registryId: Optional[RegistryId] = None
    repositoryName: RepositoryName
    lifecyclePolicyText: LifecyclePolicyText


class PutRegistryPolicyResponse(DeleteRegistryPolicyResponse):
    pass


class PutRegistryPolicyRequest(BaseModel):
    policyText: RegistryPolicyText


class SetRepositoryPolicyResponse(DeleteRepositoryPolicyResponse):
    pass


class SetRepositoryPolicyRequest(BaseModel):
    registryId: Optional[RegistryId] = None
    repositoryName: RepositoryName
    policyText: RepositoryPolicyText
    force: Optional[ForceFlag] = None


class StartLifecyclePolicyPreviewResponse(BaseModel):
    registryId: Optional[RegistryId] = None
    repositoryName: Optional[RepositoryName] = None
    lifecyclePolicyText: Optional[LifecyclePolicyText] = None
    status: Optional[LifecyclePolicyPreviewStatus] = None


class StartLifecyclePolicyPreviewRequest(BaseModel):
    registryId: Optional[RegistryId] = None
    repositoryName: RepositoryName
    lifecyclePolicyText: Optional[LifecyclePolicyText] = None


class UntagResourceRequest(BaseModel):
    resourceArn: Arn
    tagKeys: TagKeyList


class UploadLayerPartResponse(BaseModel):
    registryId: Optional[RegistryId] = None
    repositoryName: Optional[RepositoryName] = None
    uploadId: Optional[UploadId] = None
    lastByteReceived: Optional[PartSize] = None


class UploadLayerPartRequest(BaseModel):
    registryId: Optional[RegistryId] = None
    repositoryName: RepositoryName
    uploadId: UploadId
    partFirstByte: PartSize
    partLastByte: PartSize
    layerPartBlob: LayerPartBlob


class BatchedOperationLayerDigestList(BaseModel):
    __root__: Annotated[
        List[BatchedOperationLayerDigest], Field(max_items=100, min_items=1)
    ]


class LayerList(BaseModel):
    __root__: List[Layer]


class LayerFailureList(BaseModel):
    __root__: List[LayerFailure]


class MediaTypeList(BaseModel):
    __root__: Annotated[List[MediaType], Field(max_items=100, min_items=1)]


class LayerDigestList(BaseModel):
    __root__: Annotated[List[LayerDigest], Field(max_items=100, min_items=1)]


class TagList(BaseModel):
    __root__: List[Tag]


class ImageScanningConfiguration(BaseModel):
    """
    The image scanning configuration for a repository.
    """

    scanOnPush: Optional[ScanOnPushFlag] = None


class EncryptionConfiguration(BaseModel):
    """
    <p>The encryption configuration for the repository. This determines how the contents of your repository are encrypted at rest.</p> <p>By default, when no encryption configuration is set or the <code>AES256</code> encryption type is used, Amazon ECR uses server-side encryption with Amazon S3-managed encryption keys which encrypts your data at rest using an AES-256 encryption algorithm. This does not require any action on your part.</p> <p>For more control over the encryption of the contents of your repository, you can use server-side encryption with Key Management Service key stored in Key Management Service (KMS) to encrypt your images. For more information, see <a href="https://docs.aws.amazon.com/AmazonECR/latest/userguide/encryption-at-rest.html">Amazon ECR encryption at rest</a> in the <i>Amazon Elastic Container Registry User Guide</i>.</p>
    """

    encryptionType: EncryptionType
    kmsKey: Optional[KmsKey] = None


class Repository(BaseModel):
    """
    An object representing a repository.
    """

    repositoryArn: Optional[Arn] = None
    registryId: Optional[RegistryId] = None
    repositoryName: Optional[RepositoryName] = None
    repositoryUri: Optional[Url] = None
    createdAt: Optional[CreationTimestamp] = None
    imageTagMutability: Optional[ImageTagMutability] = None
    imageScanningConfiguration: Optional[ImageScanningConfiguration] = None
    encryptionConfiguration: Optional[EncryptionConfiguration] = None


class ImageIdentifier(BaseModel):
    """
    An object with identifying information for an Amazon ECR image.
    """

    imageDigest: Optional[ImageDigest] = None
    imageTag: Optional[ImageTag] = None


class ImageScanStatus(BaseModel):
    """
    The current status of an image scan.
    """

    status: Optional[ScanStatus] = None
    description: Optional[ScanStatusDescription] = None


class ImageScanFindings(BaseModel):
    """
    The details of an image scan.
    """

    imageScanCompletedAt: Optional[ScanTimestamp] = None
    vulnerabilitySourceUpdatedAt: Optional[VulnerabilitySourceUpdateTimestamp] = None
    findings: Optional[ImageScanFindingList] = None
    findingSeverityCounts: Optional[FindingSeverityCounts] = None


class RepositoryList(BaseModel):
    __root__: List[Repository]


class LifecyclePolicyPreviewSummary(BaseModel):
    """
    The summary of the lifecycle policy preview request.
    """

    expiringImageTotalCount: Optional[ImageCount] = None


class Image(BaseModel):
    """
    An object representing an Amazon ECR image.
    """

    registryId: Optional[RegistryId] = None
    repositoryName: Optional[RepositoryName] = None
    imageId: Optional[ImageIdentifier] = None
    imageManifest: Optional[ImageManifest] = None
    imageManifestMediaType: Optional[MediaType] = None


class ImageTagList(BaseModel):
    __root__: List[ImageTag]


class ImageScanFindingsSummary(BaseModel):
    """
    A summary of the last completed image scan.
    """

    imageScanCompletedAt: Optional[ScanTimestamp] = None
    vulnerabilitySourceUpdatedAt: Optional[VulnerabilitySourceUpdateTimestamp] = None
    findingSeverityCounts: Optional[FindingSeverityCounts] = None


class ImageDetail(BaseModel):
    """
    An object that describes an image returned by a <a>DescribeImages</a> operation.
    """

    registryId: Optional[RegistryId] = None
    repositoryName: Optional[RepositoryName] = None
    imageDigest: Optional[ImageDigest] = None
    imageTags: Optional[ImageTagList] = None
    imageSizeInBytes: Optional[ImageSizeInBytes] = None
    imagePushedAt: Optional[PushTimestamp] = None
    imageScanStatus: Optional[ImageScanStatus] = None
    imageScanFindingsSummary: Optional[ImageScanFindingsSummary] = None
    imageManifestMediaType: Optional[MediaType] = None
    artifactMediaType: Optional[MediaType] = None


class ImageFailure(BaseModel):
    """
    An object representing an Amazon ECR image failure.
    """

    imageId: Optional[ImageIdentifier] = None
    failureCode: Optional[ImageFailureCode] = None
    failureReason: Optional[ImageFailureReason] = None


class LifecyclePolicyPreviewResult(BaseModel):
    """
    The result of the lifecycle policy preview.
    """

    imageTags: Optional[ImageTagList] = None
    imageDigest: Optional[ImageDigest] = None
    imagePushedAt: Optional[PushTimestamp] = None
    action: Optional[LifecyclePolicyRuleAction] = None
    appliedRulePriority: Optional[LifecyclePolicyRulePriority] = None


class ReplicationRuleList(BaseModel):
    __root__: Annotated[List[ReplicationRule], Field(max_items=1, min_items=0)]


class BatchCheckLayerAvailabilityResponse(BaseModel):
    layers: Optional[LayerList] = None
    failures: Optional[LayerFailureList] = None


class BatchCheckLayerAvailabilityRequest(BaseModel):
    registryId: Optional[RegistryId] = None
    repositoryName: RepositoryName
    layerDigests: BatchedOperationLayerDigestList


class CompleteLayerUploadRequest(BaseModel):
    registryId: Optional[RegistryId] = None
    repositoryName: RepositoryName
    uploadId: UploadId
    layerDigests: LayerDigestList


class CreateRepositoryResponse(BaseModel):
    repository: Optional[Repository] = None


class CreateRepositoryRequest(BaseModel):
    repositoryName: RepositoryName
    tags: Optional[TagList] = None
    imageTagMutability: Optional[ImageTagMutability] = None
    imageScanningConfiguration: Optional[ImageScanningConfiguration] = None
    encryptionConfiguration: Optional[EncryptionConfiguration] = None


class DeleteRepositoryResponse(CreateRepositoryResponse):
    pass


class DescribeImageScanFindingsResponse(BaseModel):
    registryId: Optional[RegistryId] = None
    repositoryName: Optional[RepositoryName] = None
    imageId: Optional[ImageIdentifier] = None
    imageScanStatus: Optional[ImageScanStatus] = None
    imageScanFindings: Optional[ImageScanFindings] = None
    nextToken: Optional[NextToken] = None


class DescribeImageScanFindingsRequest(BaseModel):
    registryId: Optional[RegistryId] = None
    repositoryName: RepositoryName
    imageId: ImageIdentifier
    nextToken: Optional[NextToken] = None
    maxResults: Optional[MaxResults] = None


class DescribeRepositoriesResponse(BaseModel):
    repositories: Optional[RepositoryList] = None
    nextToken: Optional[NextToken] = None


class ListTagsForResourceResponse(BaseModel):
    tags: Optional[TagList] = None


class PutImageResponse(BaseModel):
    image: Optional[Image] = None


class PutImageScanningConfigurationResponse(BaseModel):
    registryId: Optional[RegistryId] = None
    repositoryName: Optional[RepositoryName] = None
    imageScanningConfiguration: Optional[ImageScanningConfiguration] = None


class PutImageScanningConfigurationRequest(BaseModel):
    registryId: Optional[RegistryId] = None
    repositoryName: RepositoryName
    imageScanningConfiguration: ImageScanningConfiguration


class StartImageScanResponse(BaseModel):
    registryId: Optional[RegistryId] = None
    repositoryName: Optional[RepositoryName] = None
    imageId: Optional[ImageIdentifier] = None
    imageScanStatus: Optional[ImageScanStatus] = None


class StartImageScanRequest(BaseModel):
    registryId: Optional[RegistryId] = None
    repositoryName: RepositoryName
    imageId: ImageIdentifier


class TagResourceRequest(BaseModel):
    resourceArn: Arn
    tags: TagList


class ImageIdentifierList(BaseModel):
    __root__: Annotated[List[ImageIdentifier], Field(max_items=100, min_items=1)]


class ImageFailureList(BaseModel):
    __root__: List[ImageFailure]


class ImageList(BaseModel):
    __root__: List[Image]


class ImageDetailList(BaseModel):
    __root__: List[ImageDetail]


class ReplicationConfiguration(BaseModel):
    """
    The replication configuration for a registry.
    """

    rules: ReplicationRuleList


class LifecyclePolicyPreviewResultList(BaseModel):
    __root__: List[LifecyclePolicyPreviewResult]


class BatchDeleteImageResponse(BaseModel):
    imageIds: Optional[ImageIdentifierList] = None
    failures: Optional[ImageFailureList] = None


class BatchDeleteImageRequest(BaseModel):
    """
    Deletes specified images within a specified repository. Images are specified with either the <code>imageTag</code> or <code>imageDigest</code>.
    """

    registryId: Optional[RegistryId] = None
    repositoryName: RepositoryName
    imageIds: ImageIdentifierList


class BatchGetImageResponse(BaseModel):
    images: Optional[ImageList] = None
    failures: Optional[ImageFailureList] = None


class BatchGetImageRequest(BaseModel):
    registryId: Optional[RegistryId] = None
    repositoryName: RepositoryName
    imageIds: ImageIdentifierList
    acceptedMediaTypes: Optional[MediaTypeList] = None


class DescribeImagesResponse(BaseModel):
    imageDetails: Optional[ImageDetailList] = None
    nextToken: Optional[NextToken] = None


class DescribeImagesRequest(BaseModel):
    registryId: Optional[RegistryId] = None
    repositoryName: RepositoryName
    imageIds: Optional[ImageIdentifierList] = None
    nextToken: Optional[NextToken] = None
    maxResults: Optional[MaxResults] = None
    filter: Optional[DescribeImagesFilter] = None


class DescribeRegistryResponse(BaseModel):
    registryId: Optional[RegistryId] = None
    replicationConfiguration: Optional[ReplicationConfiguration] = None


class GetLifecyclePolicyPreviewResponse(BaseModel):
    registryId: Optional[RegistryId] = None
    repositoryName: Optional[RepositoryName] = None
    lifecyclePolicyText: Optional[LifecyclePolicyText] = None
    status: Optional[LifecyclePolicyPreviewStatus] = None
    nextToken: Optional[NextToken] = None
    previewResults: Optional[LifecyclePolicyPreviewResultList] = None
    summary: Optional[LifecyclePolicyPreviewSummary] = None


class GetLifecyclePolicyPreviewRequest(BaseModel):
    registryId: Optional[RegistryId] = None
    repositoryName: RepositoryName
    imageIds: Optional[ImageIdentifierList] = None
    nextToken: Optional[NextToken] = None
    maxResults: Optional[LifecyclePreviewMaxResults] = None
    filter: Optional[LifecyclePolicyPreviewFilter] = None


class ListImagesResponse(BaseModel):
    imageIds: Optional[ImageIdentifierList] = None
    nextToken: Optional[NextToken] = None


class PutReplicationConfigurationResponse(BaseModel):
    replicationConfiguration: Optional[ReplicationConfiguration] = None


class PutReplicationConfigurationRequest(BaseModel):
    replicationConfiguration: ReplicationConfiguration
