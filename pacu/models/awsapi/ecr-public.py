# generated by datamodel-codegen:
#   filename:  openapi.yaml
#   timestamp: 2021-12-31T02:48:39+00:00

from __future__ import annotations

from datetime import datetime
from enum import Enum
from typing import Annotated, Any, List, Optional

from pydantic import BaseModel, Field


class RepositoryNotFoundException(BaseModel):
    __root__: Any


class InvalidParameterException(RepositoryNotFoundException):
    pass


class ServerException(RepositoryNotFoundException):
    pass


class RegistryNotFoundException(RepositoryNotFoundException):
    pass


class UploadNotFoundException(RepositoryNotFoundException):
    pass


class InvalidLayerException(RepositoryNotFoundException):
    pass


class LayerPartTooSmallException(RepositoryNotFoundException):
    pass


class LayerAlreadyExistsException(RepositoryNotFoundException):
    pass


class EmptyUploadException(RepositoryNotFoundException):
    pass


class UnsupportedCommandException(RepositoryNotFoundException):
    pass


class InvalidTagParameterException(RepositoryNotFoundException):
    pass


class TooManyTagsException(RepositoryNotFoundException):
    pass


class RepositoryAlreadyExistsException(RepositoryNotFoundException):
    pass


class LimitExceededException(RepositoryNotFoundException):
    pass


class RepositoryNotEmptyException(RepositoryNotFoundException):
    pass


class RepositoryPolicyNotFoundException(RepositoryNotFoundException):
    pass


class ImageNotFoundException(RepositoryNotFoundException):
    pass


class GetAuthorizationTokenRequest(BaseModel):
    pass


class GetRegistryCatalogDataRequest(BaseModel):
    pass


class ImageAlreadyExistsException(RepositoryNotFoundException):
    pass


class LayersNotFoundException(RepositoryNotFoundException):
    pass


class ReferencedImagesNotFoundException(RepositoryNotFoundException):
    pass


class ImageTagAlreadyExistsException(RepositoryNotFoundException):
    pass


class ImageDigestDoesNotMatchException(RepositoryNotFoundException):
    pass


class TagResourceResponse(BaseModel):
    pass


class UntagResourceResponse(TagResourceResponse):
    pass


class InvalidLayerPartException(RepositoryNotFoundException):
    pass


class AboutText(BaseModel):
    __root__: Annotated[str, Field(max_length=10240)]


class Architecture(BaseModel):
    __root__: Annotated[str, Field(max_length=50, min_length=1)]


class ArchitectureList(BaseModel):
    __root__: Annotated[List[Architecture], Field(max_items=50)]


class Arn(BaseModel):
    __root__: str


class Base64(BaseModel):
    __root__: Annotated[str, Field(regex='^\\S+$')]


class ExpirationTimestamp(BaseModel):
    __root__: datetime


class AuthorizationData(BaseModel):
    """
    An authorization token data object that corresponds to a public registry.
    """

    authorizationToken: Optional[Base64] = None
    expiresAt: Optional[ExpirationTimestamp] = None


class RegistryIdOrAlias(BaseModel):
    __root__: Annotated[str, Field(max_length=256, min_length=1)]


class RepositoryName(BaseModel):
    __root__: Annotated[
        str,
        Field(
            max_length=205,
            min_length=2,
            regex='(?:[a-z0-9]+(?:[._-][a-z0-9]+)*/)*[a-z0-9]+(?:[._-][a-z0-9]+)*',
        ),
    ]


class RegistryId(BaseModel):
    __root__: Annotated[str, Field(regex='[0-9]{12}')]


class BatchedOperationLayerDigest(BaseModel):
    __root__: Annotated[str, Field(max_length=1000, min_length=0)]


class UploadId(BaseModel):
    __root__: Annotated[
        str,
        Field(
            regex='[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}'
        ),
    ]


class LayerDigest(BaseModel):
    __root__: Annotated[str, Field(regex='[a-zA-Z0-9-_+.]+:[a-fA-F0-9]+')]


class CreationTimestamp(ExpirationTimestamp):
    pass


class DefaultRegistryAliasFlag(BaseModel):
    __root__: bool


class RepositoryPolicyText(BaseModel):
    __root__: Annotated[str, Field(max_length=10240, min_length=0)]


class ForceFlag(DefaultRegistryAliasFlag):
    pass


class NextToken(Arn):
    pass


class MaxResults(BaseModel):
    __root__: Annotated[int, Field(ge=1.0, le=1000.0)]


class RepositoryNameList(BaseModel):
    __root__: Annotated[List[RepositoryName], Field(max_items=100, min_items=1)]


class ImageManifest(BaseModel):
    __root__: Annotated[str, Field(max_length=4194304, min_length=1)]


class MediaType(Arn):
    pass


class ImageDigest(Arn):
    pass


class ImageSizeInBytes(BaseModel):
    __root__: int


class PushTimestamp(ExpirationTimestamp):
    pass


class ImageFailureCode(Enum):
    InvalidImageDigest = 'InvalidImageDigest'
    InvalidImageTag = 'InvalidImageTag'
    ImageTagDoesNotMatchDigest = 'ImageTagDoesNotMatchDigest'
    ImageNotFound = 'ImageNotFound'
    MissingDigestAndTag = 'MissingDigestAndTag'
    ImageReferencedByManifestList = 'ImageReferencedByManifestList'
    KmsError = 'KmsError'


class ImageFailureReason(Arn):
    pass


class ImageTag(BaseModel):
    __root__: Annotated[str, Field(max_length=300, min_length=1)]


class ReferencedImageDetail(BaseModel):
    """
    An object that describes the image tag details returned by a <a>DescribeImageTags</a> action.
    """

    imageDigest: Optional[ImageDigest] = None
    imageSizeInBytes: Optional[ImageSizeInBytes] = None
    imagePushedAt: Optional[PushTimestamp] = None
    imageManifestMediaType: Optional[MediaType] = None
    artifactMediaType: Optional[MediaType] = None


class ImageTagDetail(BaseModel):
    """
    An object representing the image tag details for an image.
    """

    imageTag: Optional[ImageTag] = None
    createdAt: Optional[CreationTimestamp] = None
    imageDetail: Optional[ReferencedImageDetail] = None


class PartSize(BaseModel):
    __root__: Annotated[int, Field(ge=0.0)]


class LayerAvailability(Enum):
    AVAILABLE = 'AVAILABLE'
    UNAVAILABLE = 'UNAVAILABLE'


class LayerSizeInBytes(ImageSizeInBytes):
    pass


class Layer(BaseModel):
    """
    An object representing an Amazon ECR image layer.
    """

    layerDigest: Optional[LayerDigest] = None
    layerAvailability: Optional[LayerAvailability] = None
    layerSize: Optional[LayerSizeInBytes] = None
    mediaType: Optional[MediaType] = None


class LayerFailureCode(Enum):
    InvalidLayerDigest = 'InvalidLayerDigest'
    MissingLayerDigest = 'MissingLayerDigest'


class LayerFailureReason(Arn):
    pass


class LayerFailure(BaseModel):
    """
    An object representing an Amazon ECR image layer failure.
    """

    layerDigest: Optional[BatchedOperationLayerDigest] = None
    failureCode: Optional[LayerFailureCode] = None
    failureReason: Optional[LayerFailureReason] = None


class LayerPartBlob(BaseModel):
    __root__: Annotated[str, Field(max_length=20971520, min_length=0)]


class LogoImageBlob(BaseModel):
    __root__: Annotated[str, Field(max_length=512000, min_length=0)]


class MarketplaceCertified(DefaultRegistryAliasFlag):
    pass


class OperatingSystem(Architecture):
    pass


class OperatingSystemList(BaseModel):
    __root__: Annotated[List[OperatingSystem], Field(max_items=50)]


class PrimaryRegistryAliasFlag(DefaultRegistryAliasFlag):
    pass


class RegistryDisplayName(BaseModel):
    __root__: Annotated[str, Field(max_length=100, min_length=0)]


class Url(Arn):
    pass


class RegistryVerified(DefaultRegistryAliasFlag):
    pass


class RegistryAliasName(BaseModel):
    __root__: Annotated[
        str,
        Field(max_length=50, min_length=2, regex='[a-z][a-z0-9]+(?:[._-][a-z0-9]+)*'),
    ]


class RegistryAliasStatus(Enum):
    ACTIVE = 'ACTIVE'
    PENDING = 'PENDING'
    REJECTED = 'REJECTED'


class RegistryAlias(BaseModel):
    """
    An object representing the aliases for a public registry. A public registry is given an alias upon creation but a custom alias can be set using the Amazon ECR console. For more information, see <a href="https://docs.aws.amazon.com/AmazonECR/latest/userguide/Registries.html">Registries</a> in the <i>Amazon Elastic Container Registry User Guide</i>.
    """

    name: RegistryAliasName
    status: RegistryAliasStatus
    primaryRegistryAlias: PrimaryRegistryAliasFlag
    defaultRegistryAlias: DefaultRegistryAliasFlag


class RepositoryDescription(BaseModel):
    __root__: Annotated[str, Field(max_length=1024)]


class ResourceUrl(BaseModel):
    __root__: Annotated[str, Field(max_length=2048)]


class UsageText(AboutText):
    pass


class TagKey(BaseModel):
    __root__: Annotated[str, Field(max_length=128, min_length=1)]


class TagValue(BaseModel):
    __root__: Annotated[str, Field(max_length=256, min_length=0)]


class Tag(BaseModel):
    """
    The metadata that you apply to a resource to help you categorize and organize them. Each tag consists of a key and an optional value, both of which you define. Tag keys can have a maximum character length of 128 characters, and tag values can have a maximum length of 256 characters.
    """

    Key: Optional[TagKey] = None
    Value: Optional[TagValue] = None


class TagKeyList(BaseModel):
    __root__: Annotated[List[TagKey], Field(max_items=200, min_items=0)]


class CompleteLayerUploadResponse(BaseModel):
    registryId: Optional[RegistryId] = None
    repositoryName: Optional[RepositoryName] = None
    uploadId: Optional[UploadId] = None
    layerDigest: Optional[LayerDigest] = None


class DeleteRepositoryRequest(BaseModel):
    registryId: Optional[RegistryId] = None
    repositoryName: RepositoryName
    force: Optional[ForceFlag] = None


class DeleteRepositoryPolicyResponse(BaseModel):
    registryId: Optional[RegistryId] = None
    repositoryName: Optional[RepositoryName] = None
    policyText: Optional[RepositoryPolicyText] = None


class DeleteRepositoryPolicyRequest(BaseModel):
    registryId: Optional[RegistryId] = None
    repositoryName: RepositoryName


class DescribeImageTagsRequest(BaseModel):
    registryId: Optional[RegistryId] = None
    repositoryName: RepositoryName
    nextToken: Optional[NextToken] = None
    maxResults: Optional[MaxResults] = None


class DescribeRegistriesRequest(BaseModel):
    nextToken: Optional[NextToken] = None
    maxResults: Optional[MaxResults] = None


class DescribeRepositoriesRequest(BaseModel):
    registryId: Optional[RegistryId] = None
    repositoryNames: Optional[RepositoryNameList] = None
    nextToken: Optional[NextToken] = None
    maxResults: Optional[MaxResults] = None


class GetAuthorizationTokenResponse(BaseModel):
    authorizationData: Optional[AuthorizationData] = None


class GetRepositoryCatalogDataRequest(BaseModel):
    registryId: Optional[RegistryId] = None
    repositoryName: RepositoryName


class GetRepositoryPolicyResponse(DeleteRepositoryPolicyResponse):
    pass


class GetRepositoryPolicyRequest(BaseModel):
    registryId: Optional[RegistryId] = None
    repositoryName: RepositoryName


class InitiateLayerUploadResponse(BaseModel):
    uploadId: Optional[UploadId] = None
    partSize: Optional[PartSize] = None


class InitiateLayerUploadRequest(BaseModel):
    registryId: Optional[RegistryIdOrAlias] = None
    repositoryName: RepositoryName


class ListTagsForResourceRequest(BaseModel):
    resourceArn: Arn


class PutImageRequest(BaseModel):
    registryId: Optional[RegistryIdOrAlias] = None
    repositoryName: RepositoryName
    imageManifest: ImageManifest
    imageManifestMediaType: Optional[MediaType] = None
    imageTag: Optional[ImageTag] = None
    imageDigest: Optional[ImageDigest] = None


class PutRegistryCatalogDataRequest(BaseModel):
    displayName: Optional[RegistryDisplayName] = None


class SetRepositoryPolicyResponse(DeleteRepositoryPolicyResponse):
    pass


class SetRepositoryPolicyRequest(BaseModel):
    registryId: Optional[RegistryId] = None
    repositoryName: RepositoryName
    policyText: RepositoryPolicyText
    force: Optional[ForceFlag] = None


class UntagResourceRequest(BaseModel):
    resourceArn: Arn
    tagKeys: TagKeyList


class UploadLayerPartResponse(BaseModel):
    registryId: Optional[RegistryId] = None
    repositoryName: Optional[RepositoryName] = None
    uploadId: Optional[UploadId] = None
    lastByteReceived: Optional[PartSize] = None


class UploadLayerPartRequest(BaseModel):
    registryId: Optional[RegistryIdOrAlias] = None
    repositoryName: RepositoryName
    uploadId: UploadId
    partFirstByte: PartSize
    partLastByte: PartSize
    layerPartBlob: LayerPartBlob


class BatchedOperationLayerDigestList(BaseModel):
    __root__: Annotated[
        List[BatchedOperationLayerDigest], Field(max_items=100, min_items=1)
    ]


class LayerList(BaseModel):
    __root__: List[Layer]


class LayerFailureList(BaseModel):
    __root__: List[LayerFailure]


class LayerDigestList(BaseModel):
    __root__: Annotated[List[LayerDigest], Field(max_items=100, min_items=1)]


class RepositoryCatalogDataInput(BaseModel):
    """
    An object containing the catalog data for a repository. This data is publicly visible in the Amazon ECR Public Gallery.
    """

    description: Optional[RepositoryDescription] = None
    architectures: Optional[ArchitectureList] = None
    operatingSystems: Optional[OperatingSystemList] = None
    logoImageBlob: Optional[LogoImageBlob] = None
    aboutText: Optional[AboutText] = None
    usageText: Optional[UsageText] = None


class TagList(BaseModel):
    __root__: Annotated[List[Tag], Field(max_items=200, min_items=0)]


class Repository(BaseModel):
    """
    An object representing a repository.
    """

    repositoryArn: Optional[Arn] = None
    registryId: Optional[RegistryId] = None
    repositoryName: Optional[RepositoryName] = None
    repositoryUri: Optional[Url] = None
    createdAt: Optional[CreationTimestamp] = None


class RepositoryCatalogData(BaseModel):
    """
    The catalog data for a repository. This data is publicly visible in the Amazon ECR Public Gallery.
    """

    description: Optional[RepositoryDescription] = None
    architectures: Optional[ArchitectureList] = None
    operatingSystems: Optional[OperatingSystemList] = None
    logoUrl: Optional[ResourceUrl] = None
    aboutText: Optional[AboutText] = None
    usageText: Optional[UsageText] = None
    marketplaceCertified: Optional[MarketplaceCertified] = None


class ImageTagDetailList(BaseModel):
    __root__: List[ImageTagDetail]


class RepositoryList(BaseModel):
    __root__: List[Repository]


class RegistryCatalogData(BaseModel):
    """
    The metadata for a public registry.
    """

    displayName: Optional[RegistryDisplayName] = None


class ImageIdentifier(BaseModel):
    """
    An object with identifying information for an Amazon ECR image.
    """

    imageDigest: Optional[ImageDigest] = None
    imageTag: Optional[ImageTag] = None


class Image(BaseModel):
    """
    An object representing an Amazon ECR image.
    """

    registryId: Optional[RegistryIdOrAlias] = None
    repositoryName: Optional[RepositoryName] = None
    imageId: Optional[ImageIdentifier] = None
    imageManifest: Optional[ImageManifest] = None
    imageManifestMediaType: Optional[MediaType] = None


class ImageTagList(BaseModel):
    __root__: List[ImageTag]


class ImageDetail(BaseModel):
    """
    An object that describes an image returned by a <a>DescribeImages</a> operation.
    """

    registryId: Optional[RegistryId] = None
    repositoryName: Optional[RepositoryName] = None
    imageDigest: Optional[ImageDigest] = None
    imageTags: Optional[ImageTagList] = None
    imageSizeInBytes: Optional[ImageSizeInBytes] = None
    imagePushedAt: Optional[PushTimestamp] = None
    imageManifestMediaType: Optional[MediaType] = None
    artifactMediaType: Optional[MediaType] = None


class ImageFailure(BaseModel):
    """
    An object representing an Amazon ECR image failure.
    """

    imageId: Optional[ImageIdentifier] = None
    failureCode: Optional[ImageFailureCode] = None
    failureReason: Optional[ImageFailureReason] = None


class RegistryAliasList(BaseModel):
    __root__: List[RegistryAlias]


class Registry(BaseModel):
    """
    The details of a public registry.
    """

    registryId: RegistryId
    registryArn: Arn
    registryUri: Url
    verified: RegistryVerified
    aliases: RegistryAliasList


class BatchCheckLayerAvailabilityResponse(BaseModel):
    layers: Optional[LayerList] = None
    failures: Optional[LayerFailureList] = None


class BatchCheckLayerAvailabilityRequest(BaseModel):
    registryId: Optional[RegistryIdOrAlias] = None
    repositoryName: RepositoryName
    layerDigests: BatchedOperationLayerDigestList


class CompleteLayerUploadRequest(BaseModel):
    registryId: Optional[RegistryIdOrAlias] = None
    repositoryName: RepositoryName
    uploadId: UploadId
    layerDigests: LayerDigestList


class CreateRepositoryResponse(BaseModel):
    repository: Optional[Repository] = None
    catalogData: Optional[RepositoryCatalogData] = None


class CreateRepositoryRequest(BaseModel):
    repositoryName: RepositoryName
    catalogData: Optional[RepositoryCatalogDataInput] = None
    tags: Optional[TagList] = None


class DeleteRepositoryResponse(BaseModel):
    repository: Optional[Repository] = None


class DescribeImageTagsResponse(BaseModel):
    imageTagDetails: Optional[ImageTagDetailList] = None
    nextToken: Optional[NextToken] = None


class DescribeRepositoriesResponse(BaseModel):
    repositories: Optional[RepositoryList] = None
    nextToken: Optional[NextToken] = None


class GetRegistryCatalogDataResponse(BaseModel):
    registryCatalogData: RegistryCatalogData


class GetRepositoryCatalogDataResponse(BaseModel):
    catalogData: Optional[RepositoryCatalogData] = None


class ListTagsForResourceResponse(BaseModel):
    tags: Optional[TagList] = None


class PutImageResponse(BaseModel):
    image: Optional[Image] = None


class PutRegistryCatalogDataResponse(GetRegistryCatalogDataResponse):
    pass


class PutRepositoryCatalogDataResponse(GetRepositoryCatalogDataResponse):
    pass


class PutRepositoryCatalogDataRequest(BaseModel):
    registryId: Optional[RegistryId] = None
    repositoryName: RepositoryName
    catalogData: RepositoryCatalogDataInput


class TagResourceRequest(BaseModel):
    resourceArn: Arn
    tags: TagList


class ImageIdentifierList(BaseModel):
    __root__: Annotated[List[ImageIdentifier], Field(max_items=100, min_items=1)]


class ImageFailureList(BaseModel):
    __root__: List[ImageFailure]


class ImageDetailList(BaseModel):
    __root__: List[ImageDetail]


class RegistryList(BaseModel):
    __root__: List[Registry]


class BatchDeleteImageResponse(BaseModel):
    imageIds: Optional[ImageIdentifierList] = None
    failures: Optional[ImageFailureList] = None


class BatchDeleteImageRequest(BaseModel):
    registryId: Optional[RegistryId] = None
    repositoryName: RepositoryName
    imageIds: ImageIdentifierList


class DescribeImagesResponse(BaseModel):
    imageDetails: Optional[ImageDetailList] = None
    nextToken: Optional[NextToken] = None


class DescribeImagesRequest(BaseModel):
    registryId: Optional[RegistryId] = None
    repositoryName: RepositoryName
    imageIds: Optional[ImageIdentifierList] = None
    nextToken: Optional[NextToken] = None
    maxResults: Optional[MaxResults] = None


class DescribeRegistriesResponse(BaseModel):
    registries: RegistryList
    nextToken: Optional[NextToken] = None
