# generated by datamodel-codegen:
#   filename:  openapi.yaml
#   timestamp: 2021-12-31T02:46:36+00:00

from __future__ import annotations

from datetime import datetime
from enum import Enum
from typing import Annotated, Any, List, Optional

from pydantic import BaseModel, Extra, Field, SecretStr


class ValidationException(BaseModel):
    __root__: Any


class InvalidNonceException(ValidationException):
    pass


class JobNotFoundException(ValidationException):
    pass


class InvalidClientTokenException(ValidationException):
    pass


class LimitExceededException(ValidationException):
    pass


class TooManyTagsException(ValidationException):
    pass


class InvalidTagsException(ValidationException):
    pass


class ConcurrentModificationException(ValidationException):
    pass


class PipelineNameInUseException(ValidationException):
    pass


class InvalidStageDeclarationException(ValidationException):
    pass


class InvalidActionDeclarationException(ValidationException):
    pass


class InvalidBlockerDeclarationException(ValidationException):
    pass


class InvalidStructureException(ValidationException):
    pass


class DeleteWebhookOutput(BaseModel):
    pass


class DeregisterWebhookWithThirdPartyOutput(DeleteWebhookOutput):
    pass


class WebhookNotFoundException(ValidationException):
    pass


class PipelineNotFoundException(ValidationException):
    pass


class StageNotFoundException(ValidationException):
    pass


class ActionTypeNotFoundException(ValidationException):
    pass


class PipelineVersionNotFoundException(ValidationException):
    pass


class PipelineExecutionNotFoundException(ValidationException):
    pass


class InvalidJobException(ValidationException):
    pass


class InvalidNextTokenException(ValidationException):
    pass


class ResourceNotFoundException(ValidationException):
    pass


class InvalidArnException(ValidationException):
    pass


class ActionNotFoundException(ValidationException):
    pass


class InvalidApprovalTokenException(ValidationException):
    pass


class ApprovalAlreadyCompletedException(ValidationException):
    pass


class InvalidJobStateException(ValidationException):
    pass


class OutputVariablesSizeExceededException(ValidationException):
    pass


class InvalidWebhookFilterPatternException(ValidationException):
    pass


class InvalidWebhookAuthenticationParametersException(ValidationException):
    pass


class RegisterWebhookWithThirdPartyOutput(DeleteWebhookOutput):
    pass


class ConflictException(ValidationException):
    pass


class StageNotRetryableException(ValidationException):
    pass


class NotLatestPipelineExecutionException(ValidationException):
    pass


class PipelineExecutionNotStoppableException(ValidationException):
    pass


class DuplicatedStopRequestException(ValidationException):
    pass


class TagResourceOutput(DeleteWebhookOutput):
    pass


class UntagResourceOutput(DeleteWebhookOutput):
    pass


class RequestFailedException(ValidationException):
    pass


class AWSRegionName(BaseModel):
    __root__: Annotated[str, Field(max_length=30, min_length=4)]


class AccessKeyId(BaseModel):
    __root__: SecretStr


class SecretAccessKey(AccessKeyId):
    pass


class SessionToken(AccessKeyId):
    pass


class AWSSessionCredentials(BaseModel):
    """
    Represents an AWS session credentials object. These credentials are temporary credentials that are issued by AWS Secure Token Service (STS). They can be used to access input and output artifacts in the S3 bucket used to store artifact for the pipeline in AWS CodePipeline.
    """

    accessKeyId: AccessKeyId
    secretAccessKey: SecretAccessKey
    sessionToken: SessionToken


class AccountId(BaseModel):
    __root__: Annotated[str, Field(regex='[0-9]{12}')]


class JobId(BaseModel):
    __root__: Annotated[
        str, Field(regex='[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}')
    ]


class Nonce(BaseModel):
    __root__: Annotated[str, Field(max_length=50, min_length=1)]


class JobStatus(Enum):
    Created = 'Created'
    Queued = 'Queued'
    Dispatched = 'Dispatched'
    InProgress = 'InProgress'
    TimedOut = 'TimedOut'
    Succeeded = 'Succeeded'
    Failed = 'Failed'


class ThirdPartyJobId(BaseModel):
    __root__: Annotated[str, Field(max_length=512, min_length=1)]


class ClientToken(BaseModel):
    __root__: Annotated[str, Field(max_length=256, min_length=1)]


class ActionCategory(Enum):
    Source = 'Source'
    Build = 'Build'
    Deploy = 'Deploy'
    Test = 'Test'
    Invoke = 'Invoke'
    Approval = 'Approval'


class ActionConfigurationMap(BaseModel):
    pass

    class Config:
        extra = Extra.allow


class ActionConfiguration(BaseModel):
    """
    Represents information about an action configuration.
    """

    configuration: Optional[ActionConfigurationMap] = None


class ActionConfigurationKey(Nonce):
    pass


class ActionConfigurationValue(BaseModel):
    __root__: Annotated[str, Field(max_length=1000, min_length=1)]


class Boolean(BaseModel):
    __root__: bool


class Description(BaseModel):
    __root__: Annotated[str, Field(max_length=160, min_length=1)]


class ActionConfigurationPropertyType(Enum):
    String = 'String'
    Number = 'Number'
    Boolean = 'Boolean'


class ActionConfigurationProperty(BaseModel):
    """
    Represents information about an action configuration property.
    """

    name: ActionConfigurationKey
    required: Boolean
    key: Boolean
    secret: Boolean
    queryable: Optional[Boolean] = None
    description: Optional[Description] = None
    type: Optional[ActionConfigurationPropertyType] = None


class ActionConfigurationPropertyList(BaseModel):
    __root__: Annotated[List[ActionConfigurationProperty], Field(max_items=10)]


class ActionConfigurationQueryableValue(BaseModel):
    __root__: Annotated[str, Field(max_length=50, min_length=1, regex='[a-zA-Z0-9_-]+')]


class ActionName(BaseModel):
    __root__: Annotated[
        str, Field(max_length=100, min_length=1, regex='[A-Za-z0-9.@\\-_]+')
    ]


class ActionExecutionId(BaseModel):
    __root__: str


class ActionContext(BaseModel):
    """
    Represents the context of an action in the stage of a pipeline to a job worker.
    """

    name: Optional[ActionName] = None
    actionExecutionId: Optional[ActionExecutionId] = None


class ActionRunOrder(BaseModel):
    __root__: Annotated[int, Field(ge=1.0, le=999.0)]


class RoleArn(BaseModel):
    __root__: Annotated[
        str, Field(max_length=1024, regex='arn:aws(-[\\w]+)*:iam::[0-9]{12}:role/.*')
    ]


class ActionNamespace(BaseModel):
    __root__: Annotated[
        str, Field(max_length=100, min_length=1, regex='[A-Za-z0-9@\\-_]+')
    ]


class ActionExecutionStatus(Enum):
    InProgress = 'InProgress'
    Abandoned = 'Abandoned'
    Succeeded = 'Succeeded'
    Failed = 'Failed'


class ExecutionSummary(BaseModel):
    __root__: Annotated[str, Field(max_length=2048, min_length=1)]


class Timestamp(BaseModel):
    __root__: datetime


class ActionExecutionToken(ActionExecutionId):
    pass


class LastUpdatedBy(ActionExecutionId):
    pass


class ExecutionId(BaseModel):
    __root__: Annotated[str, Field(max_length=1500, min_length=1)]


class Url(ExecutionSummary):
    pass


class Percentage(BaseModel):
    __root__: Annotated[int, Field(ge=0.0, le=100.0)]


class PipelineExecutionId(JobId):
    pass


class PipelineVersion(BaseModel):
    __root__: Annotated[int, Field(ge=1.0)]


class StageName(ActionName):
    pass


class ActionExecutionFilter(BaseModel):
    """
    Filter values for the action execution.
    """

    pipelineExecutionId: Optional[PipelineExecutionId] = None


class ResolvedActionConfigurationMap(BaseModel):
    pass

    class Config:
        extra = Extra.allow


class OutputVariablesMap(BaseModel):
    pass

    class Config:
        extra = Extra.allow


class ExternalExecutionId(ActionExecutionId):
    pass


class ExternalExecutionSummary(ActionExecutionId):
    pass


class ActionOwner(Enum):
    AWS = 'AWS'
    ThirdParty = 'ThirdParty'
    Custom = 'Custom'


class ActionProvider(BaseModel):
    __root__: Annotated[str, Field(max_length=35, min_length=1, regex='[0-9A-Za-z_-]+')]


class Revision(ExecutionId):
    pass


class RevisionChangeIdentifier(BaseModel):
    __root__: Annotated[str, Field(max_length=100, min_length=1)]


class ActionRevision(BaseModel):
    """
    Represents information about the version (or revision) of an action.
    """

    revisionId: Revision
    revisionChangeId: RevisionChangeIdentifier
    created: Timestamp


class MinimumActionTypeArtifactCount(BaseModel):
    __root__: Annotated[int, Field(ge=0.0, le=10.0)]


class MaximumActionTypeArtifactCount(MinimumActionTypeArtifactCount):
    pass


class ActionTypeArtifactDetails(BaseModel):
    """
    Information about parameters for artifacts associated with the action type, such as the minimum and maximum artifacts allowed.
    """

    minimumCount: MinimumActionTypeArtifactCount
    maximumCount: MaximumActionTypeArtifactCount


class ActionTypeDescription(BaseModel):
    __root__: Annotated[str, Field(max_length=1024, min_length=1)]


class ExecutorType(Enum):
    JobWorker = 'JobWorker'
    Lambda = 'Lambda'


class PolicyStatementsTemplate(ExecutionSummary):
    pass


class JobTimeout(BaseModel):
    __root__: Annotated[int, Field(ge=60.0, le=43200.0)]


class Version(BaseModel):
    __root__: Annotated[str, Field(max_length=9, min_length=1, regex='[0-9A-Za-z_-]+')]


class ActionTypeOwner(BaseModel):
    __root__: Annotated[str, Field(regex='AWS|ThirdParty')]


class PropertyDescription(BaseModel):
    __root__: Annotated[str, Field(max_length=250, min_length=1)]


class UrlTemplate(ExecutionSummary):
    pass


class AllowedAccount(BaseModel):
    __root__: Annotated[str, Field(regex='[0-9]{12}|\\*')]


class ApprovalSummary(BaseModel):
    __root__: Annotated[str, Field(max_length=512, min_length=0)]


class ApprovalStatus(Enum):
    Approved = 'Approved'
    Rejected = 'Rejected'


class ApprovalResult(BaseModel):
    """
    Represents information about the result of an approval request.
    """

    summary: ApprovalSummary
    status: ApprovalStatus


class ApprovalToken(JobId):
    pass


class ArtifactName(BaseModel):
    __root__: Annotated[
        str, Field(max_length=100, min_length=1, regex='[a-zA-Z0-9_\\-]+')
    ]


class MinimumArtifactCount(BaseModel):
    __root__: Annotated[int, Field(ge=0.0, le=5.0)]


class MaximumArtifactCount(MinimumArtifactCount):
    pass


class ArtifactLocationType(Enum):
    S3 = 'S3'


class RevisionSummary(ExecutionSummary):
    pass


class ArtifactRevision(BaseModel):
    """
    Represents revision details of an artifact.
    """

    name: Optional[ArtifactName] = None
    revisionId: Optional[Revision] = None
    revisionChangeIdentifier: Optional[RevisionChangeIdentifier] = None
    revisionSummary: Optional[RevisionSummary] = None
    created: Optional[Timestamp] = None
    revisionUrl: Optional[Url] = None


class ArtifactRevisionList(BaseModel):
    __root__: List[ArtifactRevision]


class ArtifactStoreLocation(BaseModel):
    __root__: Annotated[
        str, Field(max_length=63, min_length=3, regex='[a-zA-Z0-9\\-\\.]+')
    ]


class ArtifactStoreMap(BaseModel):
    pass

    class Config:
        extra = Extra.allow


class BlockerName(RevisionChangeIdentifier):
    pass


class BlockerType(Enum):
    Schedule = 'Schedule'


class BlockerDeclaration(BaseModel):
    """
    Reserved for future use.
    """

    name: BlockerName
    type: BlockerType


class ClientId(JobId):
    pass


class ClientRequestToken(BaseModel):
    __root__: Annotated[
        str, Field(max_length=128, min_length=1, regex='^[a-zA-Z0-9-]+$')
    ]


class Code(ActionExecutionId):
    pass


class ContinuationToken(ExecutionSummary):
    pass


class Time(Timestamp):
    pass


class CurrentRevision(BaseModel):
    """
    Represents information about a current revision.
    """

    revision: Revision
    changeIdentifier: RevisionChangeIdentifier
    created: Optional[Time] = None
    revisionSummary: Optional[RevisionSummary] = None


class PipelineName(ActionName):
    pass


class WebhookName(ActionName):
    pass


class StageTransitionType(Enum):
    Inbound = 'Inbound'
    Outbound = 'Outbound'


class DisabledReason(BaseModel):
    __root__: Annotated[
        str,
        Field(max_length=300, min_length=1, regex='[a-zA-Z0-9!@ \\(\\)\\.\\*\\?\\-]+'),
    ]


class Enabled(Boolean):
    pass


class EncryptionKeyId(BaseModel):
    __root__: Annotated[str, Field(max_length=400, min_length=1)]


class EncryptionKeyType(Enum):
    KMS = 'KMS'


class Message(BaseModel):
    __root__: Annotated[str, Field(max_length=5000, min_length=1)]


class ExecutionDetails(BaseModel):
    """
    The details of the actions taken and results produced on an artifact as it passes through stages in the pipeline.
    """

    summary: Optional[ExecutionSummary] = None
    externalExecutionId: Optional[ExecutionId] = None
    percentComplete: Optional[Percentage] = None


class TriggerType(Enum):
    CreatePipeline = 'CreatePipeline'
    StartPipelineExecution = 'StartPipelineExecution'
    PollForSourceChanges = 'PollForSourceChanges'
    Webhook = 'Webhook'
    CloudWatchEvent = 'CloudWatchEvent'
    PutActionRevision = 'PutActionRevision'


class TriggerDetail(BaseModel):
    __root__: Annotated[str, Field(max_length=1024, min_length=0)]


class ExecutionTrigger(BaseModel):
    """
    The interaction or event that started a pipeline execution.
    """

    triggerType: Optional[TriggerType] = None
    triggerDetail: Optional[TriggerDetail] = None


class FailureType(Enum):
    JobFailed = 'JobFailed'
    ConfigurationError = 'ConfigurationError'
    PermissionError = 'PermissionError'
    RevisionOutOfSync = 'RevisionOutOfSync'
    RevisionUnavailable = 'RevisionUnavailable'
    SystemUnavailable = 'SystemUnavailable'


class FailureDetails(BaseModel):
    """
    Represents information about failure details.
    """

    type: FailureType
    message: Message
    externalExecutionId: Optional[ExecutionId] = None


class InputArtifact(BaseModel):
    """
    Represents information about an artifact to be worked on, such as a test or build artifact.
    """

    name: ArtifactName


class PollingAccountList(BaseModel):
    __root__: Annotated[List[AccountId], Field(max_items=1000, min_items=1)]


class JsonPath(BaseModel):
    __root__: Annotated[str, Field(max_length=150, min_length=1)]


class LambdaFunctionArn(BaseModel):
    __root__: Annotated[
        str,
        Field(
            max_length=140,
            min_length=1,
            regex='arn:aws(-[\\w]+)*:lambda:.+:[0-9]{12}:function:.+',
        ),
    ]


class LastChangedAt(Timestamp):
    pass


class LastChangedBy(ActionExecutionId):
    pass


class MaxResults(BaseModel):
    __root__: Annotated[int, Field(ge=1.0, le=100.0)]


class NextToken(ExecutionSummary):
    pass


class MaxPipelines(BaseModel):
    __root__: Annotated[int, Field(ge=1.0, le=1000.0)]


class ResourceArn(BaseModel):
    __root__: Annotated[
        str, Field(regex='arn:aws(-[\\w]+)*:codepipeline:.+:[0-9]{12}:.+')
    ]


class WebhookUrl(ActionConfigurationValue):
    pass


class WebhookErrorMessage(ActionExecutionId):
    pass


class WebhookErrorCode(ActionExecutionId):
    pass


class WebhookLastTriggered(Timestamp):
    pass


class WebhookArn(ActionExecutionId):
    pass


class MatchEquals(JsonPath):
    pass


class MaxBatchSize(PipelineVersion):
    pass


class OutputArtifact(InputArtifact):
    """
    Represents information about the output of an action.
    """

    pass


class OutputVariablesKey(BaseModel):
    __root__: Annotated[str, Field(regex='[A-Za-z0-9@\\-_]+')]


class OutputVariablesValue(ActionExecutionId):
    pass


class PipelineArn(ResourceArn):
    pass


class StageContext(BaseModel):
    """
    Represents information about a stage to a job worker.
    """

    name: Optional[StageName] = None


class PipelineExecutionStatus(Enum):
    Cancelled = 'Cancelled'
    InProgress = 'InProgress'
    Stopped = 'Stopped'
    Stopping = 'Stopping'
    Succeeded = 'Succeeded'
    Superseded = 'Superseded'
    Failed = 'Failed'


class PipelineExecutionStatusSummary(ActionExecutionId):
    pass


class PipelineSummary(BaseModel):
    """
    Returns a summary of a pipeline.
    """

    name: Optional[PipelineName] = None
    version: Optional[PipelineVersion] = None
    created: Optional[Timestamp] = None
    updated: Optional[Timestamp] = None


class QueryParamMap(BaseModel):
    pass

    class Config:
        extra = Extra.allow


class ServicePrincipal(BaseModel):
    __root__: Annotated[str, Field(max_length=128, min_length=1)]


class String(ActionExecutionId):
    pass


class StageRetryMode(Enum):
    FAILED_ACTIONS = 'FAILED_ACTIONS'


class S3BucketName(ActionExecutionId):
    pass


class S3ObjectKey(ActionExecutionId):
    pass


class S3Bucket(BaseModel):
    __root__: Annotated[str, Field(max_length=63, min_length=3)]


class S3Key(RevisionChangeIdentifier):
    pass


class SourceRevision(BaseModel):
    """
    Information about the version (or revision) of a source artifact that initiated a pipeline execution.
    """

    actionName: ActionName
    revisionId: Optional[Revision] = None
    revisionSummary: Optional[RevisionSummary] = None
    revisionUrl: Optional[Url] = None


class StageBlockerDeclarationList(BaseModel):
    __root__: List[BlockerDeclaration]


class StageExecutionStatus(Enum):
    Cancelled = 'Cancelled'
    InProgress = 'InProgress'
    Failed = 'Failed'
    Stopped = 'Stopped'
    Stopping = 'Stopping'
    Succeeded = 'Succeeded'


class StageExecution(BaseModel):
    """
    Represents information about the run of a stage.
    """

    pipelineExecutionId: PipelineExecutionId
    status: StageExecutionStatus


class TransitionState(BaseModel):
    """
    Represents information about the state of transitions between one stage and another stage.
    """

    enabled: Optional[Enabled] = None
    lastChangedBy: Optional[LastChangedBy] = None
    lastChangedAt: Optional[LastChangedAt] = None
    disabledReason: Optional[DisabledReason] = None


class StopPipelineExecutionReason(BaseModel):
    __root__: Annotated[str, Field(max_length=200)]


class TagKey(ServicePrincipal):
    pass


class TagValue(BaseModel):
    __root__: Annotated[str, Field(max_length=256, min_length=0)]


class Tag(BaseModel):
    """
    A tag is a key-value pair that is used to manage the resource.
    """

    key: TagKey
    value: TagValue


class TagKeyList(BaseModel):
    __root__: List[TagKey]


class ThirdPartyJob(BaseModel):
    """
    A response to a <code>PollForThirdPartyJobs</code> request returned by AWS CodePipeline when there is a job to be worked on by a partner action.
    """

    clientId: Optional[ClientId] = None
    jobId: Optional[JobId] = None


class WebhookAuthConfigurationAllowedIPRange(RevisionChangeIdentifier):
    pass


class WebhookAuthConfigurationSecretToken(RevisionChangeIdentifier):
    pass


class WebhookAuthConfiguration(BaseModel):
    """
    The authentication applied to incoming webhook trigger requests.
    """

    AllowedIPRange: Optional[WebhookAuthConfigurationAllowedIPRange] = None
    SecretToken: Optional[WebhookAuthConfigurationSecretToken] = None


class WebhookAuthenticationType(Enum):
    GITHUB_HMAC = 'GITHUB_HMAC'
    IP = 'IP'
    UNAUTHENTICATED = 'UNAUTHENTICATED'


class WebhookFilterRule(BaseModel):
    """
    The event criteria that specify when a webhook notification is sent to your URL.
    """

    jsonPath: JsonPath
    matchEquals: Optional[MatchEquals] = None


class AcknowledgeJobOutput(BaseModel):
    """
    Represents the output of an AcknowledgeJob action.
    """

    status: Optional[JobStatus] = None


class AcknowledgeJobInput(BaseModel):
    """
    Represents the input of an AcknowledgeJob action.
    """

    jobId: JobId
    nonce: Nonce


class AcknowledgeThirdPartyJobOutput(AcknowledgeJobOutput):
    """
    Represents the output of an AcknowledgeThirdPartyJob action.
    """

    pass


class AcknowledgeThirdPartyJobInput(BaseModel):
    """
    Represents the input of an AcknowledgeThirdPartyJob action.
    """

    jobId: ThirdPartyJobId
    nonce: Nonce
    clientToken: ClientToken


class DeleteCustomActionTypeInput(BaseModel):
    """
    Represents the input of a <code>DeleteCustomActionType</code> operation. The custom action will be marked as deleted.
    """

    category: ActionCategory
    provider: ActionProvider
    version: Version


class DeletePipelineInput(BaseModel):
    """
    Represents the input of a <code>DeletePipeline</code> action.
    """

    name: PipelineName


class DeleteWebhookInput(BaseModel):
    name: WebhookName


class DeregisterWebhookWithThirdPartyInput(BaseModel):
    webhookName: Optional[WebhookName] = None


class DisableStageTransitionInput(BaseModel):
    """
    Represents the input of a <code>DisableStageTransition</code> action.
    """

    pipelineName: PipelineName
    stageName: StageName
    transitionType: StageTransitionType
    reason: DisabledReason


class EnableStageTransitionInput(BaseModel):
    """
    Represents the input of an <code>EnableStageTransition</code> action.
    """

    pipelineName: PipelineName
    stageName: StageName
    transitionType: StageTransitionType


class GetActionTypeInput(BaseModel):
    category: ActionCategory
    owner: ActionTypeOwner
    provider: ActionProvider
    version: Version


class GetJobDetailsInput(BaseModel):
    """
    Represents the input of a <code>GetJobDetails</code> action.
    """

    jobId: JobId


class GetPipelineInput(BaseModel):
    """
    Represents the input of a <code>GetPipeline</code> action.
    """

    name: PipelineName
    version: Optional[PipelineVersion] = None


class GetPipelineExecutionInput(BaseModel):
    """
    Represents the input of a <code>GetPipelineExecution</code> action.
    """

    pipelineName: PipelineName
    pipelineExecutionId: PipelineExecutionId


class GetPipelineStateInput(BaseModel):
    """
    Represents the input of a <code>GetPipelineState</code> action.
    """

    name: PipelineName


class GetThirdPartyJobDetailsInput(BaseModel):
    """
    Represents the input of a <code>GetThirdPartyJobDetails</code> action.
    """

    jobId: ThirdPartyJobId
    clientToken: ClientToken


class ListActionExecutionsInput(BaseModel):
    pipelineName: PipelineName
    filter: Optional[ActionExecutionFilter] = None
    maxResults: Optional[MaxResults] = None
    nextToken: Optional[NextToken] = None


class ListActionTypesInput(BaseModel):
    """
    Represents the input of a <code>ListActionTypes</code> action.
    """

    actionOwnerFilter: Optional[ActionOwner] = None
    nextToken: Optional[NextToken] = None
    regionFilter: Optional[AWSRegionName] = None


class ListPipelineExecutionsInput(BaseModel):
    """
    Represents the input of a <code>ListPipelineExecutions</code> action.
    """

    pipelineName: PipelineName
    maxResults: Optional[MaxResults] = None
    nextToken: Optional[NextToken] = None


class ListPipelinesInput(BaseModel):
    """
    Represents the input of a <code>ListPipelines</code> action.
    """

    nextToken: Optional[NextToken] = None
    maxResults: Optional[MaxPipelines] = None


class ListTagsForResourceInput(BaseModel):
    resourceArn: ResourceArn
    nextToken: Optional[NextToken] = None
    maxResults: Optional[MaxResults] = None


class ListWebhooksInput(BaseModel):
    NextToken: Optional[NextToken] = None
    MaxResults: Optional[MaxResults] = None


class PutActionRevisionOutput(BaseModel):
    """
    Represents the output of a <code>PutActionRevision</code> action.
    """

    newRevision: Optional[Boolean] = None
    pipelineExecutionId: Optional[PipelineExecutionId] = None


class PutActionRevisionInput(BaseModel):
    """
    Represents the input of a <code>PutActionRevision</code> action.
    """

    pipelineName: PipelineName
    stageName: StageName
    actionName: ActionName
    actionRevision: ActionRevision


class PutApprovalResultOutput(BaseModel):
    """
    Represents the output of a <code>PutApprovalResult</code> action.
    """

    approvedAt: Optional[Timestamp] = None


class PutApprovalResultInput(BaseModel):
    """
    Represents the input of a <code>PutApprovalResult</code> action.
    """

    pipelineName: PipelineName
    stageName: StageName
    actionName: ActionName
    result: ApprovalResult
    token: ApprovalToken


class PutJobFailureResultInput(BaseModel):
    """
    Represents the input of a <code>PutJobFailureResult</code> action.
    """

    jobId: JobId
    failureDetails: FailureDetails


class PutJobSuccessResultInput(BaseModel):
    """
    Represents the input of a <code>PutJobSuccessResult</code> action.
    """

    jobId: JobId
    currentRevision: Optional[CurrentRevision] = None
    continuationToken: Optional[ContinuationToken] = None
    executionDetails: Optional[ExecutionDetails] = None
    outputVariables: Optional[OutputVariablesMap] = None


class PutThirdPartyJobFailureResultInput(BaseModel):
    """
    Represents the input of a <code>PutThirdPartyJobFailureResult</code> action.
    """

    jobId: ThirdPartyJobId
    clientToken: ClientToken
    failureDetails: FailureDetails


class PutThirdPartyJobSuccessResultInput(BaseModel):
    """
    Represents the input of a <code>PutThirdPartyJobSuccessResult</code> action.
    """

    jobId: ThirdPartyJobId
    clientToken: ClientToken
    currentRevision: Optional[CurrentRevision] = None
    continuationToken: Optional[ContinuationToken] = None
    executionDetails: Optional[ExecutionDetails] = None


class RegisterWebhookWithThirdPartyInput(BaseModel):
    webhookName: Optional[WebhookName] = None


class RetryStageExecutionOutput(ActionExecutionFilter):
    """
    Represents the output of a <code>RetryStageExecution</code> action.
    """

    pass


class RetryStageExecutionInput(BaseModel):
    """
    Represents the input of a <code>RetryStageExecution</code> action.
    """

    pipelineName: PipelineName
    stageName: StageName
    pipelineExecutionId: PipelineExecutionId
    retryMode: StageRetryMode


class StartPipelineExecutionOutput(ActionExecutionFilter):
    """
    Represents the output of a <code>StartPipelineExecution</code> action.
    """

    pass


class StartPipelineExecutionInput(BaseModel):
    """
    Represents the input of a <code>StartPipelineExecution</code> action.
    """

    name: PipelineName
    clientRequestToken: Optional[ClientRequestToken] = None


class StopPipelineExecutionOutput(ActionExecutionFilter):
    pass


class StopPipelineExecutionInput(BaseModel):
    pipelineName: PipelineName
    pipelineExecutionId: PipelineExecutionId
    abandon: Optional[Boolean] = None
    reason: Optional[StopPipelineExecutionReason] = None


class UntagResourceInput(BaseModel):
    resourceArn: ResourceArn
    tagKeys: TagKeyList


class ActionTypeId(BaseModel):
    """
    Represents information about an action type.
    """

    category: ActionCategory
    owner: ActionOwner
    provider: ActionProvider
    version: Version


class OutputArtifactList(BaseModel):
    __root__: List[OutputArtifact]


class InputArtifactList(BaseModel):
    __root__: List[InputArtifact]


class ActionDeclaration(BaseModel):
    """
    Represents information about an action declaration.
    """

    name: ActionName
    actionTypeId: ActionTypeId
    runOrder: Optional[ActionRunOrder] = None
    configuration: Optional[ActionConfigurationMap] = None
    outputArtifacts: Optional[OutputArtifactList] = None
    inputArtifacts: Optional[InputArtifactList] = None
    roleArn: Optional[RoleArn] = None
    region: Optional[AWSRegionName] = None
    namespace: Optional[ActionNamespace] = None


class ErrorDetails(BaseModel):
    """
    Represents information about an error in AWS CodePipeline.
    """

    code: Optional[Code] = None
    message: Optional[Message] = None


class ActionExecution(BaseModel):
    """
    Represents information about the run of an action.
    """

    actionExecutionId: Optional[ActionExecutionId] = None
    status: Optional[ActionExecutionStatus] = None
    summary: Optional[ExecutionSummary] = None
    lastStatusChange: Optional[Timestamp] = None
    token: Optional[ActionExecutionToken] = None
    lastUpdatedBy: Optional[LastUpdatedBy] = None
    externalExecutionId: Optional[ExecutionId] = None
    externalExecutionUrl: Optional[Url] = None
    percentComplete: Optional[Percentage] = None
    errorDetails: Optional[ErrorDetails] = None


class ActionExecutionResult(BaseModel):
    """
    Execution result information, such as the external execution ID.
    """

    externalExecutionId: Optional[ExternalExecutionId] = None
    externalExecutionSummary: Optional[ExternalExecutionSummary] = None
    externalExecutionUrl: Optional[Url] = None


class ActionState(BaseModel):
    """
    Represents information about the state of an action.
    """

    actionName: Optional[ActionName] = None
    currentRevision: Optional[ActionRevision] = None
    latestExecution: Optional[ActionExecution] = None
    entityUrl: Optional[Url] = None
    revisionUrl: Optional[Url] = None


class ActionStateList(BaseModel):
    __root__: List[ActionState]


class ActionTypeSettings(BaseModel):
    """
    Returns information about the settings for an action type.
    """

    thirdPartyConfigurationUrl: Optional[Url] = None
    entityUrlTemplate: Optional[UrlTemplate] = None
    executionUrlTemplate: Optional[UrlTemplate] = None
    revisionUrlTemplate: Optional[UrlTemplate] = None


class ArtifactDetails(BaseModel):
    """
    Returns information about the details of an artifact.
    """

    minimumCount: MinimumArtifactCount
    maximumCount: MaximumArtifactCount


class ActionType(BaseModel):
    """
    Returns information about the details of an action type.
    """

    id: ActionTypeId
    settings: Optional[ActionTypeSettings] = None
    actionConfigurationProperties: Optional[ActionConfigurationPropertyList] = None
    inputArtifactDetails: ArtifactDetails
    outputArtifactDetails: ArtifactDetails


class ActionTypeIdentifier(BaseModel):
    """
    Specifies the category, owner, provider, and version of the action type.
    """

    category: ActionCategory
    owner: ActionTypeOwner
    provider: ActionProvider
    version: Version


class ActionTypeUrls(BaseModel):
    """
    Returns information about URLs for web pages that display to customers as links on the pipeline view, such as an external configuration page for the action type.
    """

    configurationUrl: Optional[Url] = None
    entityUrlTemplate: Optional[UrlTemplate] = None
    executionUrlTemplate: Optional[UrlTemplate] = None
    revisionUrlTemplate: Optional[UrlTemplate] = None


class ActionTypeList(BaseModel):
    __root__: List[ActionType]


class AllowedAccounts(BaseModel):
    __root__: Annotated[List[AllowedAccount], Field(max_items=1000, min_items=1)]


class ActionTypeProperty(BaseModel):
    """
    Represents information about each property specified in the action configuration, such as the description and key name that display for the customer using the action type.
    """

    name: ActionConfigurationKey
    optional: Boolean
    key: Boolean
    noEcho: Boolean
    queryable: Optional[Boolean] = None
    description: Optional[PropertyDescription] = None


class ActionTypeProperties(BaseModel):
    __root__: Annotated[List[ActionTypeProperty], Field(max_items=10)]


class S3Location1(BaseModel):
    """
    The Amazon S3 artifact location for an action's artifacts.
    """

    bucket: Optional[S3Bucket] = None
    key: Optional[S3Key] = None


class ArtifactDetail(BaseModel):
    """
    Artifact details for the action execution, such as the artifact location.
    """

    name: Optional[ArtifactName] = None
    s3location: Optional[S3Location1] = None


class S3ArtifactLocation(BaseModel):
    """
    The location of the S3 bucket that contains a revision.
    """

    bucketName: S3BucketName
    objectKey: S3ObjectKey


class EncryptionKey(BaseModel):
    """
    Represents information about the key used to encrypt data in the artifact store, such as an AWS Key Management Service (AWS KMS) key.
    """

    id: EncryptionKeyId
    type: EncryptionKeyType


class ArtifactStore(BaseModel):
    """
    <p>The S3 bucket where artifacts for the pipeline are stored.</p> <note> <p>You must include either <code>artifactStore</code> or <code>artifactStores</code> in your pipeline, but you cannot use both. If you create a cross-region action in your pipeline, you must use <code>artifactStores</code>.</p> </note>
    """

    type: ArtifactLocationType
    location: ArtifactStoreLocation
    encryptionKey: Optional[EncryptionKey] = None


class TagList(BaseModel):
    __root__: List[Tag]


class LambdaExecutorConfiguration(BaseModel):
    """
    Details about the configuration for the <code>Lambda</code> action engine, or executor.
    """

    lambdaFunctionArn: LambdaFunctionArn


class PipelineExecution(BaseModel):
    """
    Represents information about an execution of a pipeline.
    """

    pipelineName: Optional[PipelineName] = None
    pipelineVersion: Optional[PipelineVersion] = None
    pipelineExecutionId: Optional[PipelineExecutionId] = None
    status: Optional[PipelineExecutionStatus] = None
    statusSummary: Optional[PipelineExecutionStatusSummary] = None
    artifactRevisions: Optional[ArtifactRevisionList] = None


class PipelineMetadata(BaseModel):
    """
    Information about a pipeline.
    """

    pipelineArn: Optional[PipelineArn] = None
    created: Optional[Timestamp] = None
    updated: Optional[Timestamp] = None


class PipelineContext(BaseModel):
    """
    <p>Represents information about a pipeline to a job worker.</p> <note> <p>PipelineContext contains <code>pipelineArn</code> and <code>pipelineExecutionId</code> for custom action jobs. The <code>pipelineArn</code> and <code>pipelineExecutionId</code> fields are not populated for ThirdParty action jobs.</p> </note>
    """

    pipelineName: Optional[PipelineName] = None
    stage: Optional[StageContext] = None
    action: Optional[ActionContext] = None
    pipelineArn: Optional[PipelineArn] = None
    pipelineExecutionId: Optional[PipelineExecutionId] = None


class PollingServicePrincipalList(BaseModel):
    __root__: Annotated[List[ServicePrincipal], Field(max_items=10, min_items=1)]


class PipelineList(BaseModel):
    __root__: List[PipelineSummary]


class SourceRevisionList(BaseModel):
    __root__: List[SourceRevision]


class StopExecutionTrigger(BaseModel):
    """
    The interaction that stopped a pipeline execution.
    """

    reason: Optional[StopPipelineExecutionReason] = None


class PipelineExecutionSummary(BaseModel):
    """
    Summary information about a pipeline execution.
    """

    pipelineExecutionId: Optional[PipelineExecutionId] = None
    status: Optional[PipelineExecutionStatus] = None
    startTime: Optional[Timestamp] = None
    lastUpdateTime: Optional[Timestamp] = None
    sourceRevisions: Optional[SourceRevisionList] = None
    trigger: Optional[ExecutionTrigger] = None
    stopTrigger: Optional[StopExecutionTrigger] = None


class ThirdPartyJobList(BaseModel):
    __root__: List[ThirdPartyJob]


class StageActionDeclarationList(BaseModel):
    __root__: List[ActionDeclaration]


class StageState(BaseModel):
    """
    Represents information about the state of the stage.
    """

    stageName: Optional[StageName] = None
    inboundExecution: Optional[StageExecution] = None
    inboundTransitionState: Optional[TransitionState] = None
    actionStates: Optional[ActionStateList] = None
    latestExecution: Optional[StageExecution] = None


class WebhookFilters(BaseModel):
    __root__: Annotated[List[WebhookFilterRule], Field(max_items=5)]


class CreateCustomActionTypeOutput(BaseModel):
    """
    Represents the output of a <code>CreateCustomActionType</code> operation.
    """

    actionType: ActionType
    tags: Optional[TagList] = None


class CreateCustomActionTypeInput(BaseModel):
    """
    Represents the input of a CreateCustomActionType operation.
    """

    category: ActionCategory
    provider: ActionProvider
    version: Version
    settings: Optional[ActionTypeSettings] = None
    configurationProperties: Optional[ActionConfigurationPropertyList] = None
    inputArtifactDetails: ArtifactDetails
    outputArtifactDetails: ArtifactDetails
    tags: Optional[TagList] = None


class GetPipelineExecutionOutput(BaseModel):
    """
    Represents the output of a <code>GetPipelineExecution</code> action.
    """

    pipelineExecution: Optional[PipelineExecution] = None


class ListActionTypesOutput(BaseModel):
    """
    Represents the output of a <code>ListActionTypes</code> action.
    """

    actionTypes: ActionTypeList
    nextToken: Optional[NextToken] = None


class ListPipelinesOutput(BaseModel):
    """
    Represents the output of a <code>ListPipelines</code> action.
    """

    pipelines: Optional[PipelineList] = None
    nextToken: Optional[NextToken] = None


class ListTagsForResourceOutput(BaseModel):
    tags: Optional[TagList] = None
    nextToken: Optional[NextToken] = None


class PollForJobsInput(BaseModel):
    """
    Represents the input of a <code>PollForJobs</code> action.
    """

    actionTypeId: ActionTypeId
    maxBatchSize: Optional[MaxBatchSize] = None
    queryParam: Optional[QueryParamMap] = None


class PollForThirdPartyJobsOutput(BaseModel):
    """
    Represents the output of a <code>PollForThirdPartyJobs</code> action.
    """

    jobs: Optional[ThirdPartyJobList] = None


class PollForThirdPartyJobsInput(BaseModel):
    """
    Represents the input of a <code>PollForThirdPartyJobs</code> action.
    """

    actionTypeId: ActionTypeId
    maxBatchSize: Optional[MaxBatchSize] = None


class TagResourceInput(BaseModel):
    resourceArn: ResourceArn
    tags: TagList


class ArtifactDetailList(BaseModel):
    __root__: List[ArtifactDetail]


class ActionTypePermissions(BaseModel):
    """
    Details identifying the users with permissions to use the action type.
    """

    allowedAccounts: AllowedAccounts


class ArtifactLocation(BaseModel):
    """
    Represents information about the location of an artifact.
    """

    type: Optional[ArtifactLocationType] = None
    s3Location: Optional[S3ArtifactLocation] = None


class Artifact(BaseModel):
    """
    Represents information about an artifact that is worked on by actions in the pipeline.
    """

    name: Optional[ArtifactName] = None
    revision: Optional[Revision] = None
    location: Optional[ArtifactLocation] = None


class ArtifactList(BaseModel):
    __root__: List[Artifact]


class JobWorkerExecutorConfiguration(BaseModel):
    """
    Details about the polling configuration for the <code>JobWorker</code> action engine, or executor.
    """

    pollingAccounts: Optional[PollingAccountList] = None
    pollingServicePrincipals: Optional[PollingServicePrincipalList] = None


class StageStateList(BaseModel):
    __root__: List[StageState]


class JobData(BaseModel):
    """
    Represents other information about a job required for a job worker to complete the job.
    """

    actionTypeId: Optional[ActionTypeId] = None
    actionConfiguration: Optional[ActionConfiguration] = None
    pipelineContext: Optional[PipelineContext] = None
    inputArtifacts: Optional[ArtifactList] = None
    outputArtifacts: Optional[ArtifactList] = None
    artifactCredentials: Optional[AWSSessionCredentials] = None
    continuationToken: Optional[ContinuationToken] = None
    encryptionKey: Optional[EncryptionKey] = None


class Job(BaseModel):
    """
    Represents information about a job.
    """

    id: Optional[JobId] = None
    data: Optional[JobData] = None
    nonce: Optional[Nonce] = None
    accountId: Optional[AccountId] = None


class JobList(BaseModel):
    __root__: List[Job]


class PipelineExecutionSummaryList(BaseModel):
    __root__: List[PipelineExecutionSummary]


class WebhookDefinition(BaseModel):
    """
    Represents information about a webhook and its definition.
    """

    name: WebhookName
    targetPipeline: PipelineName
    targetAction: ActionName
    filters: WebhookFilters
    authentication: WebhookAuthenticationType
    authenticationConfiguration: WebhookAuthConfiguration


class ListWebhookItem(BaseModel):
    """
    The detail returned for each webhook after listing webhooks, such as the webhook URL, the webhook name, and the webhook ARN.
    """

    definition: WebhookDefinition
    url: WebhookUrl
    errorMessage: Optional[WebhookErrorMessage] = None
    errorCode: Optional[WebhookErrorCode] = None
    lastTriggered: Optional[WebhookLastTriggered] = None
    arn: Optional[WebhookArn] = None
    tags: Optional[TagList] = None


class WebhookList(BaseModel):
    __root__: List[ListWebhookItem]


class StageDeclaration(BaseModel):
    """
    Represents information about a stage and its definition.
    """

    name: StageName
    blockers: Optional[StageBlockerDeclarationList] = None
    actions: StageActionDeclarationList


class ThirdPartyJobData(JobData):
    """
    Represents information about the job data for a partner action.
    """

    pass


class GetPipelineStateOutput(BaseModel):
    """
    Represents the output of a <code>GetPipelineState</code> action.
    """

    pipelineName: Optional[PipelineName] = None
    pipelineVersion: Optional[PipelineVersion] = None
    stageStates: Optional[StageStateList] = None
    created: Optional[Timestamp] = None
    updated: Optional[Timestamp] = None


class ListPipelineExecutionsOutput(BaseModel):
    """
    Represents the output of a <code>ListPipelineExecutions</code> action.
    """

    pipelineExecutionSummaries: Optional[PipelineExecutionSummaryList] = None
    nextToken: Optional[NextToken] = None


class ListWebhooksOutput(BaseModel):
    webhooks: Optional[WebhookList] = None
    NextToken: Optional[NextToken] = None


class PollForJobsOutput(BaseModel):
    """
    Represents the output of a <code>PollForJobs</code> action.
    """

    jobs: Optional[JobList] = None


class PutWebhookOutput(BaseModel):
    webhook: Optional[ListWebhookItem] = None


class PutWebhookInput(BaseModel):
    webhook: WebhookDefinition
    tags: Optional[TagList] = None


class ActionExecutionInput(BaseModel):
    """
    Input information used for an action execution.
    """

    actionTypeId: Optional[ActionTypeId] = None
    configuration: Optional[ActionConfigurationMap] = None
    resolvedConfiguration: Optional[ResolvedActionConfigurationMap] = None
    roleArn: Optional[RoleArn] = None
    region: Optional[AWSRegionName] = None
    inputArtifacts: Optional[ArtifactDetailList] = None
    namespace: Optional[ActionNamespace] = None


class ActionExecutionOutput(BaseModel):
    """
    Output details listed for an action execution, such as the action execution result.
    """

    outputArtifacts: Optional[ArtifactDetailList] = None
    executionResult: Optional[ActionExecutionResult] = None
    outputVariables: Optional[OutputVariablesMap] = None


class ActionExecutionDetail(BaseModel):
    """
    Returns information about an execution of an action, including the action execution ID, and the name, version, and timing of the action.
    """

    pipelineExecutionId: Optional[PipelineExecutionId] = None
    actionExecutionId: Optional[ActionExecutionId] = None
    pipelineVersion: Optional[PipelineVersion] = None
    stageName: Optional[StageName] = None
    actionName: Optional[ActionName] = None
    startTime: Optional[Timestamp] = None
    lastUpdateTime: Optional[Timestamp] = None
    status: Optional[ActionExecutionStatus] = None
    input: Optional[ActionExecutionInput] = None
    output: Optional[ActionExecutionOutput] = None


class ActionExecutionDetailList(BaseModel):
    __root__: List[ActionExecutionDetail]


class ExecutorConfiguration(BaseModel):
    """
    The action engine, or executor, related to the supported integration model used to create and update the action type. The available executor types are <code>Lambda</code> and <code>JobWorker</code>.
    """

    lambdaExecutorConfiguration: Optional[LambdaExecutorConfiguration] = None
    jobWorkerExecutorConfiguration: Optional[JobWorkerExecutorConfiguration] = None


class JobDetails(BaseModel):
    """
    Represents information about the details of a job.
    """

    id: Optional[JobId] = None
    data: Optional[JobData] = None
    accountId: Optional[AccountId] = None


class ThirdPartyJobDetails(BaseModel):
    """
    The details of a job sent in response to a <code>GetThirdPartyJobDetails</code> request.
    """

    id: Optional[ThirdPartyJobId] = None
    data: Optional[ThirdPartyJobData] = None
    nonce: Optional[Nonce] = None


class PipelineStageDeclarationList(BaseModel):
    __root__: List[StageDeclaration]


class GetJobDetailsOutput(BaseModel):
    """
    Represents the output of a <code>GetJobDetails</code> action.
    """

    jobDetails: Optional[JobDetails] = None


class GetThirdPartyJobDetailsOutput(BaseModel):
    """
    Represents the output of a <code>GetThirdPartyJobDetails</code> action.
    """

    jobDetails: Optional[ThirdPartyJobDetails] = None


class ListActionExecutionsOutput(BaseModel):
    actionExecutionDetails: Optional[ActionExecutionDetailList] = None
    nextToken: Optional[NextToken] = None


class ActionTypeExecutor(BaseModel):
    """
    The action engine, or executor, for an action type created for a provider, where the action is to be used by customers of the provider. The action engine is associated with the model used to create and update the action, such as the Lambda integration model.
    """

    configuration: ExecutorConfiguration
    type: ExecutorType
    policyStatementsTemplate: Optional[PolicyStatementsTemplate] = None
    jobTimeout: Optional[JobTimeout] = None


class ActionTypeDeclaration(BaseModel):
    """
    The parameters for the action type definition that are provided when the action type is created or updated.
    """

    description: Optional[ActionTypeDescription] = None
    executor: ActionTypeExecutor
    id: ActionTypeIdentifier
    inputArtifactDetails: ActionTypeArtifactDetails
    outputArtifactDetails: ActionTypeArtifactDetails
    permissions: Optional[ActionTypePermissions] = None
    properties: Annotated[
        Optional[Any],
        Field(description='The properties of the action type to be updated.'),
    ] = None
    urls: Optional[ActionTypeUrls] = None


class PipelineDeclaration(BaseModel):
    """
    Represents the structure of actions and stages to be performed in the pipeline.
    """

    name: PipelineName
    roleArn: RoleArn
    artifactStore: Optional[ArtifactStore] = None
    artifactStores: Optional[ArtifactStoreMap] = None
    stages: PipelineStageDeclarationList
    version: Optional[PipelineVersion] = None


class CreatePipelineOutput(BaseModel):
    """
    Represents the output of a <code>CreatePipeline</code> action.
    """

    pipeline: Optional[PipelineDeclaration] = None
    tags: Optional[TagList] = None


class CreatePipelineInput(BaseModel):
    """
    Represents the input of a <code>CreatePipeline</code> action.
    """

    pipeline: PipelineDeclaration
    tags: Optional[TagList] = None


class GetActionTypeOutput(BaseModel):
    actionType: Optional[ActionTypeDeclaration] = None


class GetPipelineOutput(BaseModel):
    """
    Represents the output of a <code>GetPipeline</code> action.
    """

    pipeline: Optional[PipelineDeclaration] = None
    metadata: Optional[PipelineMetadata] = None


class UpdateActionTypeInput(BaseModel):
    actionType: ActionTypeDeclaration


class UpdatePipelineOutput(BaseModel):
    """
    Represents the output of an <code>UpdatePipeline</code> action.
    """

    pipeline: Optional[PipelineDeclaration] = None


class UpdatePipelineInput(BaseModel):
    """
    Represents the input of an <code>UpdatePipeline</code> action.
    """

    pipeline: PipelineDeclaration
