# generated by datamodel-codegen:
#   filename:  openapi.yaml
#   timestamp: 2021-12-31T02:52:11+00:00

from __future__ import annotations

from datetime import datetime
from enum import Enum
from typing import Annotated, Any, Optional

from pydantic import BaseModel, Extra, Field


class MarketplaceCommerceAnalyticsException(BaseModel):
    __root__: Any


class OptionalValue(BaseModel):
    __root__: Annotated[str, Field(max_length=255, min_length=1)]


class CustomerDefinedValues(BaseModel):
    pass

    class Config:
        extra = Extra.allow


class DataSetPublicationDate(BaseModel):
    __root__: datetime


class DataSetRequestId(BaseModel):
    __root__: str


class DataSetType(Enum):
    customer_subscriber_hourly_monthly_subscriptions = (
        'customer_subscriber_hourly_monthly_subscriptions'
    )
    customer_subscriber_annual_subscriptions = (
        'customer_subscriber_annual_subscriptions'
    )
    daily_business_usage_by_instance_type = 'daily_business_usage_by_instance_type'
    daily_business_fees = 'daily_business_fees'
    daily_business_free_trial_conversions = 'daily_business_free_trial_conversions'
    daily_business_new_instances = 'daily_business_new_instances'
    daily_business_new_product_subscribers = 'daily_business_new_product_subscribers'
    daily_business_canceled_product_subscribers = (
        'daily_business_canceled_product_subscribers'
    )
    monthly_revenue_billing_and_revenue_data = (
        'monthly_revenue_billing_and_revenue_data'
    )
    monthly_revenue_annual_subscriptions = 'monthly_revenue_annual_subscriptions'
    monthly_revenue_field_demonstration_usage = (
        'monthly_revenue_field_demonstration_usage'
    )
    monthly_revenue_flexible_payment_schedule = (
        'monthly_revenue_flexible_payment_schedule'
    )
    disbursed_amount_by_product = 'disbursed_amount_by_product'
    disbursed_amount_by_product_with_uncollected_funds = (
        'disbursed_amount_by_product_with_uncollected_funds'
    )
    disbursed_amount_by_instance_hours = 'disbursed_amount_by_instance_hours'
    disbursed_amount_by_customer_geo = 'disbursed_amount_by_customer_geo'
    disbursed_amount_by_age_of_uncollected_funds = (
        'disbursed_amount_by_age_of_uncollected_funds'
    )
    disbursed_amount_by_age_of_disbursed_funds = (
        'disbursed_amount_by_age_of_disbursed_funds'
    )
    disbursed_amount_by_age_of_past_due_funds = (
        'disbursed_amount_by_age_of_past_due_funds'
    )
    disbursed_amount_by_uncollected_funds_breakdown = (
        'disbursed_amount_by_uncollected_funds_breakdown'
    )
    customer_profile_by_industry = 'customer_profile_by_industry'
    customer_profile_by_revenue = 'customer_profile_by_revenue'
    customer_profile_by_geography = 'customer_profile_by_geography'
    sales_compensation_billed_revenue = 'sales_compensation_billed_revenue'
    us_sales_and_use_tax_records = 'us_sales_and_use_tax_records'


class DestinationS3BucketName(BaseModel):
    __root__: Annotated[str, Field(min_length=1)]


class DestinationS3Prefix(DataSetRequestId):
    pass


class FromDate(DataSetPublicationDate):
    pass


class RoleNameArn(DestinationS3BucketName):
    pass


class SnsTopicArn(DestinationS3BucketName):
    pass


class OptionalKey(OptionalValue):
    pass


class SupportDataSetType(Enum):
    customer_support_contacts_data = 'customer_support_contacts_data'
    test_customer_support_contacts_data = 'test_customer_support_contacts_data'


class GenerateDataSetResult(BaseModel):
    """
    Container for the result of the GenerateDataSet operation.
    """

    dataSetRequestId: Optional[DataSetRequestId] = None


class GenerateDataSetRequest(BaseModel):
    """
    Container for the parameters to the GenerateDataSet operation.
    """

    dataSetType: DataSetType
    dataSetPublicationDate: DataSetPublicationDate
    roleNameArn: RoleNameArn
    destinationS3BucketName: DestinationS3BucketName
    destinationS3Prefix: Optional[DestinationS3Prefix] = None
    snsTopicArn: SnsTopicArn
    customerDefinedValues: Optional[CustomerDefinedValues] = None


class StartSupportDataExportResult(GenerateDataSetResult):
    """
    Container for the result of the StartSupportDataExport operation.
    """

    pass


class StartSupportDataExportRequest(BaseModel):
    """
    Container for the parameters to the StartSupportDataExport operation.
    """

    dataSetType: SupportDataSetType
    fromDate: FromDate
    roleNameArn: RoleNameArn
    destinationS3BucketName: DestinationS3BucketName
    destinationS3Prefix: Optional[DestinationS3Prefix] = None
    snsTopicArn: SnsTopicArn
    customerDefinedValues: Optional[CustomerDefinedValues] = None
